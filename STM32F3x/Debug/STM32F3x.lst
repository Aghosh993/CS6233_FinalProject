
STM32F3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013668  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  080137f0  080137f0  0001b7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080137f8  080137f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013800  08013800  0001b800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000904  20000000  08013808  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  20000904  20000904  00020904  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000a1c  20000a1c  00020904  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020904  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cc89  00000000  00000000  00020934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c76  00000000  00000000  0002d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c4e  00000000  00000000  0002f233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000268  00000000  00000000  00034e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001196b  00000000  00000000  000350f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d58  00000000  00000000  00046a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0005dc0e  00000000  00000000  0004c7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  000aa3c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000407c  00000000  00000000  000aa434  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  000ae4b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000904 	.word	0x20000904
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080137d8 	.word	0x080137d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080137d8 	.word	0x080137d8
 80001d0:	20000908 	.word	0x20000908
 80001d4:	20000904 	.word	0x20000904
 80001d8:	00000000 	.word	0x00000000

080001dc <_Z10blink_ledsv>:
 */

#include "debug.h"

void blink_leds(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	int foo = 0;
 80001e2:	f04f 0300 	mov.w	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	for(foo = 0; foo < 160000; ++foo){
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <_Z10blink_ledsv+0x30>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
 80001f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001f8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80001fc:	f04f 0201 	mov.w	r2, #1
 8000200:	f005 fbd0 	bl	80059a4 <GPIO_WriteBit>
#include "debug.h"

void blink_leds(void)
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0301 	add.w	r3, r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8000212:	f2c0 0302 	movt	r3, #2
 8000216:	429a      	cmp	r2, r3
 8000218:	bfcc      	ite	gt
 800021a:	2300      	movgt	r3, #0
 800021c:	2301      	movle	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e5      	bne.n	80001f0 <_Z10blink_ledsv+0x14>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00d      	b.n	8000248 <_Z10blink_ledsv+0x6c>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
 800022c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000230:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000234:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	f005 fbb2 	bl	80059a4 <GPIO_WriteBit>
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0301 	add.w	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	f247 03ff 	movw	r3, #28927	; 0x70ff
 800024e:	f2c0 0302 	movt	r3, #2
 8000252:	429a      	cmp	r2, r3
 8000254:	bfcc      	ite	gt
 8000256:	2300      	movgt	r3, #0
 8000258:	2301      	movle	r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1e5      	bne.n	800022c <_Z10blink_ledsv+0x50>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
	}
}
 8000260:	f107 0708 	add.w	r7, r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_Z10UART1_initv>:
 * @Args: None
 * @Return Val: None
 */

void UART1_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef a;

	USART_InitTypeDef u1;

	u1.USART_BaudRate = 115200;
 800026e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000272:	603b      	str	r3, [r7, #0]
	u1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	u1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800027a:	f04f 030c 	mov.w	r3, #12
 800027e:	613b      	str	r3, [r7, #16]
	u1.USART_Parity = USART_Parity_No;
 8000280:	f04f 0300 	mov.w	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	u1.USART_StopBits = USART_StopBits_1;
 8000286:	f04f 0300 	mov.w	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	u1.USART_WordLength = USART_WordLength_8b;
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

	a.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000296:	61bb      	str	r3, [r7, #24]
	a.GPIO_Mode = GPIO_Mode_AF;
 8000298:	f04f 0302 	mov.w	r3, #2
 800029c:	773b      	strb	r3, [r7, #28]
	a.GPIO_OType = GPIO_OType_PP;
 800029e:	f04f 0300 	mov.w	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
	a.GPIO_Speed = GPIO_Speed_50MHz;
 80002a4:	f04f 0303 	mov.w	r3, #3
 80002a8:	777b      	strb	r3, [r7, #29]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b4:	f04f 0101 	mov.w	r1, #1
 80002b8:	f006 fb6c 	bl	8006994 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002c0:	f04f 0101 	mov.w	r1, #1
 80002c4:	f006 fb3c 	bl	8006940 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_7);
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f04f 0109 	mov.w	r1, #9
 80002d0:	f04f 0207 	mov.w	r2, #7
 80002d4:	f005 fb8c 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_7);
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f04f 010a 	mov.w	r1, #10
 80002e0:	f04f 0207 	mov.w	r2, #7
 80002e4:	f005 fb84 	bl	80059f0 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &a);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	4619      	mov	r1, r3
 80002f2:	f005 f9f7 	bl	80056e4 <GPIO_Init>

	USART_Init(USART1, &u1);
 80002f6:	463b      	mov	r3, r7
 80002f8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80002fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000300:	4619      	mov	r1, r3
 8000302:	f009 fd57 	bl	8009db4 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8000306:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800030a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800030e:	f04f 0101 	mov.w	r1, #1
 8000312:	f009 fe79 	bl	800a008 <USART_Cmd>

	/* Wait until Receive enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_REACK) == RESET)
 8000316:	bf00      	nop
 8000318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800031c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000324:	f00a fab4 	bl	800a890 <USART_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2300      	movne	r3, #0
 8000330:	2301      	moveq	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1ef      	bne.n	8000318 <_Z10UART1_initv+0xb0>
	{}

	/* Wait until Transmit enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_TEACK) == RESET)
 8000338:	bf00      	nop
 800033a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800033e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000346:	f00a faa3 	bl	800a890 <USART_GetFlagStatus>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2300      	movne	r3, #0
 8000352:	2301      	moveq	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <_Z10UART1_initv+0xd2>
	{}
}
 800035a:	f107 0720 	add.w	r7, r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <_Z19LED_MATRIX_ISR_initv>:
 * along with some eye candy
 * Priority: 6 (LOW)
 */

void LED_MATRIX_ISR_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	// GPIO Init:

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800036a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f006 fae5 	bl	8006940 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_15;
 8000376:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800037a:	613b      	str	r3, [r7, #16]
	a.GPIO_Mode = GPIO_Mode_OUT;
 800037c:	f04f 0301 	mov.w	r3, #1
 8000380:	753b      	strb	r3, [r7, #20]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	a.GPIO_OType = GPIO_OType_PP;
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	75bb      	strb	r3, [r7, #22]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 800038e:	f04f 0302 	mov.w	r3, #2
 8000392:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOE, &a);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800039c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003a0:	4619      	mov	r1, r3
 80003a2:	f005 f99f 	bl	80056e4 <GPIO_Init>

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM6_init;

	nv.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80003a6:	f04f 0336 	mov.w	r3, #54	; 0x36
 80003aa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 6; // Low-priority interrupt since this is just eye-candy...
 80003ac:	f04f 0306 	mov.w	r3, #6
 80003b0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80003b8:	f04f 0301 	mov.w	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 fb7c 	bl	8005ac0 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE); //Enable TIM4 on APB1
 80003c8:	f04f 0010 	mov.w	r0, #16
 80003cc:	f04f 0101 	mov.w	r1, #1
 80003d0:	f006 fb0a 	bl	80069e8 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM6_init.TIM_Period = (10*DT_LED_MATRIX)-1;
 80003d4:	f240 3383 	movw	r3, #899	; 0x383
 80003d8:	607b      	str	r3, [r7, #4]
	TIM6_init.TIM_Prescaler = 7199;
 80003da:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80003de:	803b      	strh	r3, [r7, #0]
	TIM6_init.TIM_RepetitionCounter = 0;
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	72bb      	strb	r3, [r7, #10]
	TIM6_init.TIM_ClockDivision = 0;
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	813b      	strh	r3, [r7, #8]
	TIM6_init.TIM_CounterMode = TIM_CounterMode_Up;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM6, &TIM6_init);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80003fc:	4619      	mov	r1, r3
 80003fe:	f007 fc5f 	bl	8007cc0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000406:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800040a:	f04f 0101 	mov.w	r1, #1
 800040e:	f04f 0201 	mov.w	r2, #1
 8000412:	f009 f8af 	bl	8009574 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8000416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800041a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800041e:	f04f 0101 	mov.w	r1, #1
 8000422:	f007 fe11 	bl	8008048 <TIM_Cmd>
}
 8000426:	f107 0718 	add.w	r7, r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <TIM7_IRQHandler>:

void update_pid(void);

	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
										// Runs every DT milliseconds
	{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b099      	sub	sp, #100	; 0x64
 8000434:	af00      	add	r7, sp, #0
		float left_out, right_out;
		int error, abs_err;

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8000436:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800043a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800043e:	f04f 0101 	mov.w	r1, #1
 8000442:	f009 f923 	bl	800968c <TIM_ClearITPendingBit>

		encoderState left_temp, right_temp;

		left_temp.position = left_enc.position;
 8000446:	f640 1324 	movw	r3, #2340	; 0x924
 800044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	603b      	str	r3, [r7, #0]
		left_temp.speed = left_enc.speed;
 8000452:	f640 1324 	movw	r3, #2340	; 0x924
 8000456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	607b      	str	r3, [r7, #4]
		left_temp.acceleration = left_enc.acceleration;
 800045e:	f640 1324 	movw	r3, #2340	; 0x924
 8000462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	60bb      	str	r3, [r7, #8]

		right_temp.position = right_enc.position;
 800046a:	f640 134c 	movw	r3, #2380	; 0x94c
 800046e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
		right_temp.speed = right_enc.speed;
 8000476:	f640 134c 	movw	r3, #2380	; 0x94c
 800047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
		right_temp.acceleration = right_enc.acceleration;
 8000482:	f640 134c 	movw	r3, #2380	; 0x94c
 8000486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	633b      	str	r3, [r7, #48]	; 0x30

		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on other boards with functional TIM2
 800048e:	683c      	ldr	r4, [r7, #0]
 8000490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000494:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000498:	f007 fd04 	bl	8007ea4 <TIM_GetCounter>
 800049c:	4603      	mov	r3, r0
 800049e:	b29b      	uxth	r3, r3
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	18e2      	adds	r2, r4, r3
 80004a4:	f640 1324 	movw	r3, #2340	; 0x924
 80004a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ac:	601a      	str	r2, [r3, #0]
		TIM_SetCounter(TIM4, 0);
 80004ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80004b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004b6:	f04f 0100 	mov.w	r1, #0
 80004ba:	f007 fcd7 	bl	8007e6c <TIM_SetCounter>
		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Since DT is in milliseconds...
 80004be:	f640 1324 	movw	r3, #2340	; 0x924
 80004c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	ee07 3a90 	vmov	s15, r3
 80004d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004dc:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80004e0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80004e4:	f640 1324 	movw	r3, #2340	; 0x924
 80004e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ec:	edc3 7a01 	vstr	s15, [r3, #4]
		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 80004f0:	f640 1324 	movw	r3, #2340	; 0x924
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80004fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000504:	eddf 7ada 	vldr	s15, [pc, #872]	; 8000870 <TIM7_IRQHandler+0x440>
 8000508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800050c:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 8000510:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000514:	f640 1324 	movw	r3, #2340	; 0x924
 8000518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800051c:	edc3 7a02 	vstr	s15, [r3, #8]

		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 8000520:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000522:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8000526:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800052a:	f007 fcbb 	bl	8007ea4 <TIM_GetCounter>
 800052e:	4603      	mov	r3, r0
 8000530:	b29b      	uxth	r3, r3
 8000532:	b21b      	sxth	r3, r3
 8000534:	18e2      	adds	r2, r4, r3
 8000536:	f640 134c 	movw	r3, #2380	; 0x94c
 800053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053e:	601a      	str	r2, [r3, #0]
		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all timers except timer 2
 8000540:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8000544:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	f007 fc8e 	bl	8007e6c <TIM_SetCounter>
		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 8000550:	f640 134c 	movw	r3, #2380	; 0x94c
 8000554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056e:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 8000572:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000576:	f640 134c 	movw	r3, #2380	; 0x94c
 800057a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800057e:	edc3 7a01 	vstr	s15, [r3, #4]
		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 8000582:	f640 134c 	movw	r3, #2380	; 0x94c
 8000586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058a:	ed93 7a01 	vldr	s14, [r3, #4]
 800058e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000596:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8000870 <TIM7_IRQHandler+0x440>
 800059a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800059e:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80005a2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80005a6:	f640 134c 	movw	r3, #2380	; 0x94c
 80005aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ae:	edc3 7a02 	vstr	s15, [r3, #8]

		if(left_enc.m == MODE_POSITION)
 80005b2:	f640 1324 	movw	r3, #2340	; 0x924
 80005b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d15d      	bne.n	800067e <TIM7_IRQHandler+0x24e>
		{
			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
					+ ((float)k_i*(float)(left_enc.integral))
					+ ((float)k_d*(float)left_enc.speed);
 80005c2:	f640 1324 	movw	r3, #2340	; 0x924
 80005c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	f640 1324 	movw	r3, #2340	; 0x924
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	ee07 3a10 	vmov	s14, r3
 80005dc:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80005e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80005e4:	f640 1324 	movw	r3, #2340	; 0x924
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80005f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005f4:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8000874 <TIM7_IRQHandler+0x444>
 80005f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000600:	f640 1324 	movw	r3, #2340	; 0x924
 8000604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000608:	edd3 6a01 	vldr	s13, [r3, #4]
 800060c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8000878 <TIM7_IRQHandler+0x448>
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000618:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 800061c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000620:	eddf 7a96 	vldr	s15, [pc, #600]	; 800087c <TIM7_IRQHandler+0x44c>
 8000624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	dd04      	ble.n	8000638 <TIM7_IRQHandler+0x208>
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8000636:	e00e      	b.n	8000656 <TIM7_IRQHandler+0x226>
 8000638:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800063c:	eddf 7a90 	vldr	s15, [pc, #576]	; 8000880 <TIM7_IRQHandler+0x450>
 8000640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d504      	bpl.n	8000654 <TIM7_IRQHandler+0x224>
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	f2cc 23c8 	movt	r3, #49864	; 0xc2c8
 8000652:	e000      	b.n	8000656 <TIM7_IRQHandler+0x226>
 8000654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c

			pwm2_output(100-((float)(left_out+100)/(float)2));
 8000658:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800065c:	eddf 7a87 	vldr	s15, [pc, #540]	; 800087c <TIM7_IRQHandler+0x44c>
 8000660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000664:	eef0 7a00 	vmov.f32	s15, #0
 8000668:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800066c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800087c <TIM7_IRQHandler+0x44c>
 8000670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000674:	ee17 0a90 	vmov	r0, s15
 8000678:	f002 fd50 	bl	800311c <_Z11pwm2_outputf>
 800067c:	e00b      	b.n	8000696 <TIM7_IRQHandler+0x266>
		}
		else if(left_enc.m == MODE_SPEED)
 800067e:	f640 1324 	movw	r3, #2340	; 0x924
 8000682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800068a:	2b02      	cmp	r3, #2
 800068c:	d103      	bne.n	8000696 <TIM7_IRQHandler+0x266>
		{
			pwm2_output(0);
 800068e:	f04f 0000 	mov.w	r0, #0
 8000692:	f002 fd43 	bl	800311c <_Z11pwm2_outputf>
		}

		if(right_enc.m == MODE_POSITION)
 8000696:	f640 134c 	movw	r3, #2380	; 0x94c
 800069a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800069e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	f040 80fe 	bne.w	80008a4 <TIM7_IRQHandler+0x474>
		{
			error = right_enc.position - right_enc.position_target;
 80006a8:	f640 134c 	movw	r3, #2380	; 0x94c
 80006ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f640 134c 	movw	r3, #2380	; 0x94c
 80006b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 80006c0:	f640 134c 	movw	r3, #2380	; 0x94c
 80006c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80006cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80006d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006d8:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80006dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80006e0:	eddf 7a63 	vldr	s15, [pc, #396]	; 8000870 <TIM7_IRQHandler+0x440>
 80006e4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80006e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f0:	f640 134c 	movw	r3, #2380	; 0x94c
 80006f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f8:	edc3 7a05 	vstr	s15, [r3, #20]

			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 80006fc:	f640 134c 	movw	r3, #2380	; 0x94c
 8000700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4618      	mov	r0, r3
 8000708:	f00a ffae 	bl	800b668 <__aeabi_i2d>
 800070c:	4602      	mov	r2, r0
 800070e:	460b      	mov	r3, r1
 8000710:	4610      	mov	r0, r2
 8000712:	4619      	mov	r1, r3
 8000714:	a354      	add	r3, pc, #336	; (adr r3, 8000868 <TIM7_IRQHandler+0x438>)
 8000716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071a:	f00b f80b 	bl	800b734 <__aeabi_dmul>
 800071e:	4602      	mov	r2, r0
 8000720:	460b      	mov	r3, r1
 8000722:	4610      	mov	r0, r2
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8000732:	f00b fa8f 	bl	800bc54 <__aeabi_dcmpgt>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11f      	bne.n	800077c <TIM7_IRQHandler+0x34c>
 800073c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000740:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4618      	mov	r0, r3
 8000748:	f00a ff8e 	bl	800b668 <__aeabi_i2d>
 800074c:	4602      	mov	r2, r0
 800074e:	460b      	mov	r3, r1
 8000750:	4610      	mov	r0, r2
 8000752:	4619      	mov	r1, r3
 8000754:	a344      	add	r3, pc, #272	; (adr r3, 8000868 <TIM7_IRQHandler+0x438>)
 8000756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075a:	f00a ffeb 	bl	800b734 <__aeabi_dmul>
 800075e:	4602      	mov	r2, r0
 8000760:	460b      	mov	r3, r1
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 0200 	mov.w	r2, #0
 800076a:	f04f 0300 	mov.w	r3, #0
 800076e:	f2cc 0359 	movt	r3, #49241	; 0xc059
 8000772:	f00b fa51 	bl	800bc18 <__aeabi_dcmplt>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <TIM7_IRQHandler+0x35a>
			{
				right_enc.integral = (float)100/(float)k_i;
 800077c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000784:	f240 229a 	movw	r2, #666	; 0x29a
 8000788:	615a      	str	r2, [r3, #20]
			}

			right_out = ((float)k_p * (float)error)
					+ ((float)k_i*(float)(right_enc.integral))
					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 800078a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800078e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000792:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000796:	f640 134c 	movw	r3, #2380	; 0x94c
 800079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079e:	edd3 7a05 	vldr	s15, [r3, #20]
 80007a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007a6:	eddf 7a33 	vldr	s15, [pc, #204]	; 8000874 <TIM7_IRQHandler+0x444>
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007b2:	f640 134c 	movw	r3, #2380	; 0x94c
 80007b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007c8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8000878 <TIM7_IRQHandler+0x448>
 80007cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80007d0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8000888 <TIM7_IRQHandler+0x458>
 80007d4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 80007e0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80007e4:	eddf 7a25 	vldr	s15, [pc, #148]	; 800087c <TIM7_IRQHandler+0x44c>
 80007e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f0:	dd04      	ble.n	80007fc <TIM7_IRQHandler+0x3cc>
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 80007fa:	e00e      	b.n	800081a <TIM7_IRQHandler+0x3ea>
 80007fc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000800:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000880 <TIM7_IRQHandler+0x450>
 8000804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	d504      	bpl.n	8000818 <TIM7_IRQHandler+0x3e8>
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	f2cc 23c8 	movt	r3, #49864	; 0xc2c8
 8000816:	e000      	b.n	800081a <TIM7_IRQHandler+0x3ea>
 8000818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800081a:	657b      	str	r3, [r7, #84]	; 0x54
			right_enc.last_error = error;
 800081c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000826:	619a      	str	r2, [r3, #24]

			abs_err = (error > 0) ? error : (error*-1);
 8000828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800082a:	2b00      	cmp	r3, #0
 800082c:	bfb8      	it	lt
 800082e:	425b      	neglt	r3, r3
 8000830:	653b      	str	r3, [r7, #80]	; 0x50

			if(error > 10 || error < -10)
 8000832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000834:	2b0a      	cmp	r3, #10
 8000836:	dc03      	bgt.n	8000840 <TIM7_IRQHandler+0x410>
 8000838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800083a:	f113 0f0a 	cmn.w	r3, #10
 800083e:	da25      	bge.n	800088c <TIM7_IRQHandler+0x45c>
			{
				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 8000840:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000844:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800087c <TIM7_IRQHandler+0x44c>
 8000848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800084c:	eef0 7a00 	vmov.f32	s15, #0
 8000850:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000854:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000884 <TIM7_IRQHandler+0x454>
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	ee17 0a90 	vmov	r0, s15
 8000860:	f002 fb90 	bl	8002f84 <_Z11pwm1_outputf>
 8000864:	e01e      	b.n	80008a4 <TIM7_IRQHandler+0x474>
 8000866:	bf00      	nop
 8000868:	33333333 	.word	0x33333333
 800086c:	3fc33333 	.word	0x3fc33333
 8000870:	447a0000 	.word	0x447a0000
 8000874:	3e19999a 	.word	0x3e19999a
 8000878:	3f35c28f 	.word	0x3f35c28f
 800087c:	42c80000 	.word	0x42c80000
 8000880:	c2c80000 	.word	0xc2c80000
 8000884:	3c23d70a 	.word	0x3c23d70a
 8000888:	3ccccccd 	.word	0x3ccccccd
			}
			else
			{
				pwm1_output(0.50f);
 800088c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000890:	f002 fb78 	bl	8002f84 <_Z11pwm1_outputf>
				right_enc.m = MODE_OPENLOOP;
 8000894:	f640 134c 	movw	r3, #2380	; 0x94c
 8000898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		update_pid();
 80008a4:	f000 faf8 	bl	8000e98 <update_pid>
		if(state > ST_READY)
 80008a8:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80008ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0f      	blt.n	80008d6 <TIM7_IRQHandler+0x4a6>
		{
			match_time_counter += (float)DT_ENCODER/(float)1000; // Increment main match time counter by DT_ENCODER ms
 80008b6:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008be:	ed93 7a00 	vldr	s14, [r3]
 80008c2:	ed5f 7a0f 	vldr	s15, [pc, #-60]	; 8000888 <TIM7_IRQHandler+0x458>
 80008c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ca:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80008ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008d2:	edc3 7a00 	vstr	s15, [r3]
		}

	}
 80008d6:	f107 0764 	add.w	r7, r7, #100	; 0x64
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	bf00      	nop

080008e0 <TIM1_TRG_COM_TIM17_IRQHandler>:

	void TIM1_TRG_COM_TIM17_IRQHandler(void)
	{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 80008e6:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80008ea:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80008ee:	f04f 0101 	mov.w	r1, #1
 80008f2:	f008 fecb 	bl	800968c <TIM_ClearITPendingBit>
		 * Below: code required to trigger the ping sensor:
		 */

		EXTI_InitTypeDef e;

		e.EXTI_Line = EXTI_Line9;
 80008f6:	f04f 0309 	mov.w	r3, #9
 80008fa:	60fb      	str	r3, [r7, #12]
		e.EXTI_LineCmd = DISABLE;
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	74bb      	strb	r3, [r7, #18]
		e.EXTI_Mode = EXTI_Mode_Interrupt;
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	743b      	strb	r3, [r7, #16]
		e.EXTI_Trigger = EXTI_Trigger_Rising;
 8000908:	f04f 0308 	mov.w	r3, #8
 800090c:	747b      	strb	r3, [r7, #17]

		EXTI_Init(&e);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fc3e 	bl	8005194 <EXTI_Init>

		GPIO_InitTypeDef g;
		g.GPIO_Mode = GPIO_Mode_OUT;
 8000918:	f04f 0301 	mov.w	r3, #1
 800091c:	723b      	strb	r3, [r7, #8]
		g.GPIO_OType = GPIO_OType_PP;
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	72bb      	strb	r3, [r7, #10]
		g.GPIO_Pin = GPIO_Pin_0;
 8000924:	f04f 0301 	mov.w	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	72fb      	strb	r3, [r7, #11]
		g.GPIO_Speed = GPIO_Speed_Level_1;
 8000930:	f04f 0301 	mov.w	r3, #1
 8000934:	727b      	strb	r3, [r7, #9]

		GPIO_Init(GPIOB, &g);
 8000936:	f107 0304 	add.w	r3, r7, #4
 800093a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800093e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000942:	4619      	mov	r1, r3
 8000944:	f004 fece 	bl	80056e4 <GPIO_Init>
		int iter = 0;
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

		for(iter=0;iter<10;++iter)
 800094e:	f04f 0300 	mov.w	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00d      	b.n	8000972 <TIM1_TRG_COM_TIM17_IRQHandler+0x92>
		{
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 8000956:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800095a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800095e:	f04f 0101 	mov.w	r1, #1
 8000962:	f04f 0201 	mov.w	r2, #1
 8000966:	f005 f81d 	bl	80059a4 <GPIO_WriteBit>
		g.GPIO_Speed = GPIO_Speed_Level_1;

		GPIO_Init(GPIOB, &g);
		int iter = 0;

		for(iter=0;iter<10;++iter)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f103 0301 	add.w	r3, r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b09      	cmp	r3, #9
 8000976:	bfcc      	ite	gt
 8000978:	2300      	movgt	r3, #0
 800097a:	2301      	movle	r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1e9      	bne.n	8000956 <TIM1_TRG_COM_TIM17_IRQHandler+0x76>
		{
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
		}

		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 8000982:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000986:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800098a:	f04f 0101 	mov.w	r1, #1
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f005 f807 	bl	80059a4 <GPIO_WriteBit>


		g.GPIO_Mode = GPIO_Mode_IN;
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	723b      	strb	r3, [r7, #8]
		g.GPIO_OType = GPIO_OType_OD;
 800099c:	f04f 0301 	mov.w	r3, #1
 80009a0:	72bb      	strb	r3, [r7, #10]
		g.GPIO_Pin = GPIO_Pin_0;
 80009a2:	f04f 0301 	mov.w	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]
		g.GPIO_Speed = GPIO_Speed_Level_1;
 80009ae:	f04f 0301 	mov.w	r3, #1
 80009b2:	727b      	strb	r3, [r7, #9]

		GPIO_Init(GPIOB, &g);
 80009b4:	f107 0304 	add.w	r3, r7, #4
 80009b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009bc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80009c0:	4619      	mov	r1, r3
 80009c2:	f004 fe8f 	bl	80056e4 <GPIO_Init>

		TIM_SetCounter(TIM2, 0);
 80009c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009ca:	f04f 0100 	mov.w	r1, #0
 80009ce:	f007 fa4d 	bl	8007e6c <TIM_SetCounter>

		stage = 0;
 80009d2:	f640 13a4 	movw	r3, #2468	; 0x9a4
 80009d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

		e.EXTI_Line = EXTI_Line9;
 80009e0:	f04f 0309 	mov.w	r3, #9
 80009e4:	60fb      	str	r3, [r7, #12]
		e.EXTI_LineCmd = ENABLE;
 80009e6:	f04f 0301 	mov.w	r3, #1
 80009ea:	74bb      	strb	r3, [r7, #18]
		e.EXTI_Mode = EXTI_Mode_Interrupt;
 80009ec:	f04f 0300 	mov.w	r3, #0
 80009f0:	743b      	strb	r3, [r7, #16]
		e.EXTI_Trigger = EXTI_Trigger_Rising;
 80009f2:	f04f 0308 	mov.w	r3, #8
 80009f6:	747b      	strb	r3, [r7, #17]

		EXTI_Init(&e);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fbc9 	bl	8005194 <EXTI_Init>

		NVIC_InitTypeDef nv;

		nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000a02:	f04f 0317 	mov.w	r3, #23
 8000a06:	703b      	strb	r3, [r7, #0]
		nv.NVIC_IRQChannelCmd = ENABLE;
 8000a08:	f04f 0301 	mov.w	r3, #1
 8000a0c:	70fb      	strb	r3, [r7, #3]
		nv.NVIC_IRQChannelPreemptionPriority = 0;
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	707b      	strb	r3, [r7, #1]
		nv.NVIC_IRQChannelSubPriority = 0;
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	70bb      	strb	r3, [r7, #2]

		NVIC_Init(&nv);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 f84f 	bl	8005ac0 <NVIC_Init>

	}
 8000a22:	f107 0718 	add.w	r7, r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <TIM6_DAC_IRQHandler>:
	void TIM6_DAC_IRQHandler(void)
	{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a34:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000a38:	f04f 0101 	mov.w	r1, #1
 8000a3c:	f008 fe26 	bl	800968c <TIM_ClearITPendingBit>
		if(state == ST_READY)
 8000a40:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d116      	bne.n	8000a7e <TIM6_DAC_IRQHandler+0x52>
		{
			GPIO_Write(GPIOE, led_matrix[2] | led_matrix[5]); 	// Two greens
 8000a50:	f240 0300 	movw	r3, #0
 8000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f240 0300 	movw	r3, #0
 8000a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a72:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000a76:	4619      	mov	r1, r3
 8000a78:	f004 ffac 	bl	80059d4 <GPIO_Write>
 8000a7c:	e0e8      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_WANDER)
 8000a7e:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10d      	bne.n	8000aa8 <TIM6_DAC_IRQHandler+0x7c>
		{
			GPIO_Write(GPIOE, led_matrix[6]);					// Two Orange (one's lit via PWM pin for ESC control)
 8000a8c:	f240 0300 	movw	r3, #0
 8000a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a9c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f004 ff97 	bl	80059d4 <GPIO_Write>
 8000aa6:	e0d3      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_HOMING)
 8000aa8:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d116      	bne.n	8000ae4 <TIM6_DAC_IRQHandler+0xb8>
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3]);	// Two orange + Two red
 8000ab6:	f240 0300 	movw	r3, #0
 8000aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f240 0300 	movw	r3, #0
 8000ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ad8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000adc:	4619      	mov	r1, r3
 8000ade:	f004 ff79 	bl	80059d4 <GPIO_Write>
 8000ae2:	e0b5      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_FIREFIGHT)
 8000ae4:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d11e      	bne.n	8000b30 <TIM6_DAC_IRQHandler+0x104>
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
 8000af2:	f240 0300 	movw	r3, #0
 8000af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f240 0300 	movw	r3, #0
 8000b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f240 0300 	movw	r3, #0
 8000b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b24:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f004 ff53 	bl	80059d4 <GPIO_Write>
 8000b2e:	e08f      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if (state == ST_CANDLE_BLOWOUT)
 8000b30:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d13e      	bne.n	8000bbc <TIM6_DAC_IRQHandler+0x190>
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b3e:	f240 0300 	movw	r3, #0
 8000b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b46:	699b      	ldr	r3, [r3, #24]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b48:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b4a:	f240 0300 	movw	r3, #0
 8000b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b52:	681b      	ldr	r3, [r3, #0]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b5a:	f240 0300 	movw	r3, #0
 8000b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b62:	685b      	ldr	r3, [r3, #4]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b6a:	f240 0300 	movw	r3, #0
 8000b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b72:	689b      	ldr	r3, [r3, #8]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b7a:	f240 0300 	movw	r3, #0
 8000b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b82:	68db      	ldr	r3, [r3, #12]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f240 0300 	movw	r3, #0
 8000b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f240 0300 	movw	r3, #0
 8000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bb0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f004 ff0d 	bl	80059d4 <GPIO_Write>
 8000bba:	e049      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if (state == ST_DONE)
 8000bbc:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d142      	bne.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		{
			++led_iter;
 8000bca:	f640 1320 	movw	r3, #2336	; 0x920
 8000bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f103 0201 	add.w	r2, r3, #1
 8000bd8:	f640 1320 	movw	r3, #2336	; 0x920
 8000bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be0:	601a      	str	r2, [r3, #0]
			GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[6-led_iter]);
 8000be2:	f640 1320 	movw	r3, #2336	; 0x920
 8000be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f240 0300 	movw	r3, #0
 8000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f640 1320 	movw	r3, #2336	; 0x920
 8000bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1c3 0106 	rsb	r1, r3, #6
 8000c08:	f240 0300 	movw	r3, #0
 8000c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c20:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000c24:	4619      	mov	r1, r3
 8000c26:	f004 fed5 	bl	80059d4 <GPIO_Write>
			if(led_iter > 6)
 8000c2a:	f640 1320 	movw	r3, #2336	; 0x920
 8000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	bfd4      	ite	le
 8000c38:	2300      	movle	r3, #0
 8000c3a:	2301      	movgt	r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
			{
				led_iter = 0;
 8000c42:	f640 1320 	movw	r3, #2336	; 0x920
 8000c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
			}
		}
	}
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop

08000c54 <ADC1_2_IRQHandler>:
	void ADC1_2_IRQHandler(void)
	{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 8000c58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c5c:	f04f 0104 	mov.w	r1, #4
 8000c60:	f003 fe4a 	bl	80048f8 <ADC_GetITStatus>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	bf14      	ite	ne
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <ADC1_2_IRQHandler+0x42>
		{
			adcval = ADC_GetConversionValue(ADC1);
 8000c74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c78:	f003 fb26 	bl	80042c8 <ADC_GetConversionValue>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f640 137c 	movw	r3, #2428	; 0x97c
 8000c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c88:	601a      	str	r2, [r3, #0]
			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8000c8a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c8e:	f04f 0104 	mov.w	r1, #4
 8000c92:	f003 fe61 	bl	8004958 <ADC_ClearITPendingBit>
		}
	}
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DMA1_Channel1_IRQHandler>:

	void DMA1_Channel1_IRQHandler(void)
	{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
		DMA_ClearITPendingBit(DMA1_IT_TC1);
 8000c9c:	f04f 0002 	mov.w	r0, #2
 8000ca0:	f004 fa02 	bl	80050a8 <DMA_ClearITPendingBit>
		new_data = 1;
 8000ca4:	f640 1388 	movw	r3, #2440	; 0x988
 8000ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cac:	f04f 0201 	mov.w	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
	}
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <DMA2_Channel1_IRQHandler>:

	void DMA2_Channel1_IRQHandler(void)
	{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
		DMA_ClearITPendingBit(DMA2_IT_TC1);
 8000cb8:	f04f 0002 	mov.w	r0, #2
 8000cbc:	f2c1 0000 	movt	r0, #4096	; 0x1000
 8000cc0:	f004 f9f2 	bl	80050a8 <DMA_ClearITPendingBit>
		adc2_new_data = 1;
 8000cc4:	f640 139c 	movw	r3, #2460	; 0x99c
 8000cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ccc:	f04f 0201 	mov.w	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	}
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ADC3_IRQHandler>:

	void ADC3_IRQHandler(void)
	{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
		int i = 0;
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
		int sum = 0;
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 8000ce6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cea:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000cee:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000cf2:	f003 fe01 	bl	80048f8 <ADC_GetITStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	2301      	movne	r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d038      	beq.n	8000d78 <ADC3_IRQHandler+0xa4>
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 8000d06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d0a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000d12:	f003 fe21 	bl	8004958 <ADC_ClearITPendingBit>
			for(i=0; i<35;++i)
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	e00d      	b.n	8000d3a <ADC3_IRQHandler+0x66>
			{
				sum += ADC_GetConversionValue(ADC3);
 8000d1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d22:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d26:	f003 facf 	bl	80042c8 <ADC_GetConversionValue>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	603b      	str	r3, [r7, #0]
		int i = 0;
		int sum = 0;
		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
			for(i=0; i<35;++i)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f103 0301 	add.w	r3, r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b22      	cmp	r3, #34	; 0x22
 8000d3e:	bfcc      	ite	gt
 8000d40:	2300      	movgt	r3, #0
 8000d42:	2301      	movle	r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1e9      	bne.n	8000d1e <ADC3_IRQHandler+0x4a>
			{
				sum += ADC_GetConversionValue(ADC3);
			}
			if((float)sum/float(35) > 2048)
 8000d4a:	edd7 7a00 	vldr	s15, [r7]
 8000d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d52:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000dc0 <ADC3_IRQHandler+0xec>
 8000d56:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000d5a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000dc4 <ADC3_IRQHandler+0xf0>
 8000d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d66:	dd26      	ble.n	8000db6 <ADC3_IRQHandler+0xe2>
			{
				adc3_awd1 = 1;
 8000d68:	f640 139d 	movw	r3, #2461	; 0x99d
 8000d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d70:	f04f 0201 	mov.w	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e01e      	b.n	8000db6 <ADC3_IRQHandler+0xe2>
			}
		}
		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 8000d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d7c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	f003 fdb8 	bl	80048f8 <ADC_GetITStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	2301      	movne	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00e      	beq.n	8000db6 <ADC3_IRQHandler+0xe2>
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 8000d98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d9c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	f003 fdd8 	bl	8004958 <ADC_ClearITPendingBit>
			adc3_awd2 = 1;
 8000da8:	f640 139e 	movw	r3, #2462	; 0x99e
 8000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000db0:	f04f 0201 	mov.w	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
		}
	}
 8000db6:	f107 0708 	add.w	r7, r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	420c0000 	.word	0x420c0000
 8000dc4:	45000000 	.word	0x45000000

08000dc8 <EXTI9_5_IRQHandler>:

	void EXTI9_5_IRQHandler(void)//EXTI5_IRQHandler(void)
	{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
		EXTI_ClearITPendingBit(EXTI_Line9);
 8000dce:	f04f 0009 	mov.w	r0, #9
 8000dd2:	f004 fbef 	bl	80055b4 <EXTI_ClearITPendingBit>
		if(stage == 0)
 8000dd6:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d124      	bne.n	8000e2e <EXTI9_5_IRQHandler+0x66>
		{
			TIM_SetCounter(TIM2, 0);
 8000de4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000de8:	f04f 0100 	mov.w	r1, #0
 8000dec:	f007 f83e 	bl	8007e6c <TIM_SetCounter>
			TIM_Cmd(TIM2, ENABLE);
 8000df0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000df4:	f04f 0101 	mov.w	r1, #1
 8000df8:	f007 f926 	bl	8008048 <TIM_Cmd>

			EXTI_InitTypeDef e;

			e.EXTI_Line = EXTI_Line9;
 8000dfc:	f04f 0309 	mov.w	r3, #9
 8000e00:	60bb      	str	r3, [r7, #8]
			e.EXTI_LineCmd = ENABLE;
 8000e02:	f04f 0301 	mov.w	r3, #1
 8000e06:	73bb      	strb	r3, [r7, #14]
			e.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	733b      	strb	r3, [r7, #12]
			e.EXTI_Trigger = EXTI_Trigger_Falling;
 8000e0e:	f04f 030c 	mov.w	r3, #12
 8000e12:	737b      	strb	r3, [r7, #13]

			EXTI_Init(&e);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 f9bb 	bl	8005194 <EXTI_Init>

			stage = 1;
 8000e1e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e26:	f04f 0201 	mov.w	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e02f      	b.n	8000e8e <EXTI9_5_IRQHandler+0xc6>
			return;
		}
		else if(stage == 1)
 8000e2e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d128      	bne.n	8000e8e <EXTI9_5_IRQHandler+0xc6>
		{
			count = TIM_GetCounter(TIM2);
 8000e3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e40:	f007 f830 	bl	8007ea4 <TIM_GetCounter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	f640 13a0 	movw	r3, #2464	; 0x9a0
 8000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e50:	601a      	str	r2, [r3, #0]
			TIM_Cmd(TIM2, DISABLE);
 8000e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	f007 f8f5 	bl	8008048 <TIM_Cmd>

			NVIC_InitTypeDef nv;

			nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000e5e:	f04f 0317 	mov.w	r3, #23
 8000e62:	713b      	strb	r3, [r7, #4]
			nv.NVIC_IRQChannelCmd = DISABLE;
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
			nv.NVIC_IRQChannelPreemptionPriority = 0;
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	717b      	strb	r3, [r7, #5]
			nv.NVIC_IRQChannelSubPriority = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	71bb      	strb	r3, [r7, #6]

			NVIC_Init(&nv);
 8000e76:	f107 0304 	add.w	r3, r7, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f004 fe20 	bl	8005ac0 <NVIC_Init>

			stage = 0;
 8000e80:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
			return;
		}
	}
 8000e8e:	f107 0710 	add.w	r7, r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop

08000e98 <update_pid>:

	void update_pid(void)
	{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
		float mtr_out = 0.50f;
 8000e9e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000ea2:	607b      	str	r3, [r7, #4]
		d_front = ((float)count*(float)0.5*(float)K_ULTRASONIC);
 8000ea4:	f640 13a0 	movw	r3, #2464	; 0x9a0
 8000ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebc:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8001250 <update_pid+0x3b8>
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8000ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ecc:	edc3 7a00 	vstr	s15, [r3]

		if(state == ST_HOMING)
 8000ed0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f040 8131 	bne.w	8001142 <update_pid+0x2aa>
		{
			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 8000ee0:	f640 1380 	movw	r3, #2432	; 0x980
 8000ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f640 138c 	movw	r3, #2444	; 0x98c
 8000ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	ee07 3a10 	vmov	s14, r3
 8000efc:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8000f00:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	edc3 7a00 	vstr	s15, [r3]
			if(err > -20 && err < 20)
 8000f0c:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f14:	ed93 7a00 	vldr	s14, [r3]
 8000f18:	eefb 7a04 	vmov.f32	s15, #180	; 0xb4
 8000f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	dd1c      	ble.n	8000f60 <update_pid+0xc8>
 8000f26:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f2e:	ed93 7a00 	vldr	s14, [r3]
 8000f32:	eef3 7a04 	vmov.f32	s15, #52	; 0x34
 8000f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d50f      	bpl.n	8000f60 <update_pid+0xc8>
			{
				pwm1_output(0.50f);
 8000f40:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000f44:	f002 f81e 	bl	8002f84 <_Z11pwm1_outputf>
				pwm2_output(0.50f);
 8000f48:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000f4c:	f002 f8e6 	bl	800311c <_Z11pwm2_outputf>
				state = ST_FIREFIGHT;
 8000f50:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	f04f 0202 	mov.w	r2, #2
 8000f5c:	601a      	str	r2, [r3, #0]
				return;
 8000f5e:	e3e5      	b.n	800172c <update_pid+0x894>
			}

			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 8000f60:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f68:	ed93 7a00 	vldr	s14, [r3]
 8000f6c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7c:	eddf 7aba 	vldr	s15, [pc, #744]	; 8001268 <update_pid+0x3d0>
 8000f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f84:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8000f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
			integral =0;//+= err * 0.04f;
 8000f90:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8000f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
			drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)735)); // k_deriv = 944
 8000f9e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa6:	ed93 7a00 	vldr	s14, [r3]
 8000faa:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800126c <update_pid+0x3d4>
 8000fae:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000fb2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8000fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fba:	edd3 6a00 	vldr	s13, [r3]
 8000fbe:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8001254 <update_pid+0x3bc>
 8000fc2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fd2:	edc3 7a00 	vstr	s15, [r3]

			rt = 0.0f;
 8000fd6:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8000fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
			mtr_out = 0.5f;
 8000fe4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000fe8:	607b      	str	r3, [r7, #4]

			if(drive_cmd > 0.5)
 8000fea:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd06      	ble.n	8001012 <update_pid+0x17a>
			{
				drive_cmd = 0.5f;
 8001004:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001010:	601a      	str	r2, [r3, #0]
			}
			if(drive_cmd < -0.5)
 8001012:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d506      	bpl.n	800103a <update_pid+0x1a2>
			{
				drive_cmd = -0.5f;
 800102c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001034:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001038:	601a      	str	r2, [r3, #0]
			}

			left = (1-mtr_out) - drive_cmd - rt;
 800103a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800103e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001046:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001056:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106e:	edc3 7a00 	vstr	s15, [r3]
			right = mtr_out - drive_cmd - rt;
 8001072:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001076:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001082:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001086:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800108a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109e:	edc3 7a00 	vstr	s15, [r3]

			if(left>1.0)
 80010a2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80010b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd07      	ble.n	80010cc <update_pid+0x234>
			{
				left=1.0;
 80010bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e011      	b.n	80010f0 <update_pid+0x258>
			}
			else if(left<0)
 80010cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d506      	bpl.n	80010f0 <update_pid+0x258>
			{
				left=0;//-1.0;
 80010e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
			}

			if(right>1.0f)
 80010f0:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80010f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8001100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd07      	ble.n	800111a <update_pid+0x282>
			{
				right=1.0f;
 800110a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800110e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001112:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e2d9      	b.n	80016ce <update_pid+0x836>
			}
			else if(right<0)
 800111a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800111e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	f140 82ce 	bpl.w	80016ce <update_pid+0x836>
			{
				right=0;
 8001132:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e2c5      	b.n	80016ce <update_pid+0x836>
			}
		}
		else if(state == ST_WANDER)
 8001142:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001146:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8161 	bne.w	8001414 <update_pid+0x57c>
		{
			err = ((float)(0.55)*(float)((int)adc2_data[0] - 2200)) + ((float)(0.45)*(float)((int)adcData[1] - 150));
 8001152:	f640 138c 	movw	r3, #2444	; 0x98c
 8001156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8001258 <update_pid+0x3c0>
 800116c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001170:	f640 1380 	movw	r3, #2432	; 0x980
 8001174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f1a3 0396 	sub.w	r3, r3, #150	; 0x96
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	eddf 7a35 	vldr	s15, [pc, #212]	; 800125c <update_pid+0x3c4>
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119a:	edc3 7a00 	vstr	s15, [r3]

		diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 800119e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 80011a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80011ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001268 <update_pid+0x3d0>
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80011c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ca:	edc3 7a00 	vstr	s15, [r3]
		drive_cmd = (((float)(err)/(float)2500) + ((float)diff_err/(float)3720)); //1100=diff term
 80011ce:	f640 13ac 	movw	r3, #2476	; 0x9ac
 80011d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001260 <update_pid+0x3c8>
 80011de:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80011e2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80011e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ea:	edd3 6a00 	vldr	s13, [r3]
 80011ee:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001264 <update_pid+0x3cc>
 80011f2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80011fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001202:	edc3 7a00 	vstr	s15, [r3]

		if(d_front < 0.690 || adc2_data[3] > 1870)//0.69
 8001206:	f640 13bc 	movw	r3, #2492	; 0x9bc
 800120a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00a fa3b 	bl	800b68c <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a30a      	add	r3, pc, #40	; (adr r3, 8001248 <update_pid+0x3b0>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f00a fcf8 	bl	800bc18 <__aeabi_dcmplt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <update_pid+0x3a8>
 800122e:	f640 138c 	movw	r3, #2444	; 0x98c
 8001232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	f240 734e 	movw	r3, #1870	; 0x74e
 800123c:	429a      	cmp	r2, r3
 800123e:	d919      	bls.n	8001274 <update_pid+0x3dc>
 8001240:	f04f 0301 	mov.w	r3, #1
 8001244:	e018      	b.n	8001278 <update_pid+0x3e0>
 8001246:	bf00      	nop
 8001248:	e147ae14 	.word	0xe147ae14
 800124c:	3fe6147a 	.word	0x3fe6147a
 8001250:	3a941c82 	.word	0x3a941c82
 8001254:	4437c000 	.word	0x4437c000
 8001258:	3f0ccccd 	.word	0x3f0ccccd
 800125c:	3ee66666 	.word	0x3ee66666
 8001260:	451c4000 	.word	0x451c4000
 8001264:	45688000 	.word	0x45688000
 8001268:	3ccccccd 	.word	0x3ccccccd
 800126c:	43fa0000 	.word	0x43fa0000
 8001270:	446c0000 	.word	0x446c0000
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <update_pid+0x40c>
		{
			rt = 0.5f;
 800127c:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001280:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001284:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001288:	601a      	str	r2, [r3, #0]
			mtr_out = 0.3f;
 800128a:	f649 139a 	movw	r3, #39322	; 0x999a
 800128e:	f6c3 6399 	movt	r3, #16025	; 0x3e99
 8001292:	607b      	str	r3, [r7, #4]
			drive_cmd = 0;
 8001294:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <update_pid+0x424>
		}
		else
		{
			rt = 0.0f;
 80012a4:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80012a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
			mtr_out = 0.85f;
 80012b2:	f649 139a 	movw	r3, #39322	; 0x999a
 80012b6:	f6c3 7359 	movt	r3, #16217	; 0x3f59
 80012ba:	607b      	str	r3, [r7, #4]
		}

		if(drive_cmd > 0.5)
 80012bc:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80012cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd06      	ble.n	80012e4 <update_pid+0x44c>
		{
			drive_cmd = 0.5f;
 80012d6:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012e2:	601a      	str	r2, [r3, #0]
		}
		if(drive_cmd < -0.5)
 80012e4:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d506      	bpl.n	800130c <update_pid+0x474>
		{
			drive_cmd = -0.5f;
 80012fe:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001306:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800130a:	601a      	str	r2, [r3, #0]
		}

		left = (1-mtr_out) - drive_cmd - rt;
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8001310:	edd7 7a01 	vldr	s15, [r7, #4]
 8001314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001318:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001338:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800133c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001340:	edc3 7a00 	vstr	s15, [r3]
		right = mtr_out - drive_cmd - rt;
 8001344:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed97 7a01 	vldr	s14, [r7, #4]
 8001354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001358:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800135c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800136c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001370:	edc3 7a00 	vstr	s15, [r3]

		if(left>1.0)
 8001374:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800137c:	ed93 7a00 	vldr	s14, [r3]
 8001380:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8001384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	dd07      	ble.n	800139e <update_pid+0x506>
		{
			left=1.0;
 800138e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e011      	b.n	80013c2 <update_pid+0x52a>
		}
		else if(left<0)
 800139e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d506      	bpl.n	80013c2 <update_pid+0x52a>
		{
			left=0;//-1.0;
 80013b4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		}

		if(right>1.0f)
 80013c2:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd07      	ble.n	80013ec <update_pid+0x554>
		{
			right=1.0f;
 80013dc:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e170      	b.n	80016ce <update_pid+0x836>
		}
		else if(right<0)
 80013ec:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	f140 8165 	bpl.w	80016ce <update_pid+0x836>
		{
			right=0;
 8001404:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e15c      	b.n	80016ce <update_pid+0x836>
		}
		}
		else if(state == ST_CANDLE_BLOWOUT)
 8001414:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	f040 8155 	bne.w	80016ce <update_pid+0x836>
		{
			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 8001424:	f640 1380 	movw	r3, #2432	; 0x980
 8001428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	f640 138c 	movw	r3, #2444	; 0x98c
 8001434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	ee07 3a10 	vmov	s14, r3
 8001440:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001444:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800144c:	edc3 7a00 	vstr	s15, [r3]

			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 8001450:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8001460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146c:	ed5f 7a82 	vldr	s15, [pc, #-520]	; 8001268 <update_pid+0x3d0>
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800147c:	edc3 7a00 	vstr	s15, [r3]
			integral =0;//+= err * 0.04f;
 8001480:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8001484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)944));
 800148e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	ed5f 7a8c 	vldr	s15, [pc, #-560]	; 800126c <update_pid+0x3d4>
 800149e:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80014a2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80014a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014aa:	edd3 6a00 	vldr	s13, [r3]
 80014ae:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8001270 <update_pid+0x3d8>
 80014b2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014c2:	edc3 7a00 	vstr	s15, [r3]

			rt = 0.0f;
 80014c6:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80014ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			mtr_out = 0.5f;
 80014d4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80014d8:	607b      	str	r3, [r7, #4]

			if(drive_cmd > 0.5)
 80014da:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80014ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd06      	ble.n	8001502 <update_pid+0x66a>
			{
				drive_cmd = 0.5f;
 80014f4:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014fc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001500:	601a      	str	r2, [r3, #0]
			}
			if(drive_cmd < -0.5)
 8001502:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8001512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d506      	bpl.n	800152a <update_pid+0x692>
			{
				drive_cmd = -0.5f;
 800151c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001524:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001528:	601a      	str	r2, [r3, #0]
			}

			left = (1-mtr_out) - drive_cmd - rt;
 800152a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800152e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001536:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800153a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001546:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800154a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155e:	edc3 7a00 	vstr	s15, [r3]
			right = mtr_out - drive_cmd - rt;
 8001562:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001576:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800158a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800158e:	edc3 7a00 	vstr	s15, [r3]

			if(left>1.0)
 8001592:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80015a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dd07      	ble.n	80015bc <update_pid+0x724>
			{
				left=1.0;
 80015ac:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e011      	b.n	80015e0 <update_pid+0x748>
			}
			else if(left<0)
 80015bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d506      	bpl.n	80015e0 <update_pid+0x748>
			{
				left=0;//-1.0;
 80015d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
			}

			if(right>1.0f)
 80015e0:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80015e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd07      	ble.n	800160a <update_pid+0x772>
			{
				right=1.0f;
 80015fa:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80015fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001602:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e011      	b.n	800162e <update_pid+0x796>
			}
			else if(right<0)
 800160a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d506      	bpl.n	800162e <update_pid+0x796>
			{
				right=0;
 8001620:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
			}

			if(match_time_counter - t_firefight_start > FIREFIGHT_TIMEOUT)
 800162e:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001632:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	f640 13d4 	movw	r3, #2516	; 0x9d4
 800163e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164a:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 800164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	dd3a      	ble.n	80016ce <update_pid+0x836>
			{
				pwm3_output(0.05f);
 8001658:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 800165c:	f6c3 504c 	movt	r0, #15692	; 0x3d4c
 8001660:	f001 fe30 	bl	80032c4 <_Z11pwm3_outputf>
				if((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD))
 8001664:	f640 138c 	movw	r3, #2444	; 0x98c
 8001668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001672:	d807      	bhi.n	8001684 <update_pid+0x7ec>
 8001674:	f640 1380 	movw	r3, #2432	; 0x980
 8001678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001682:	d902      	bls.n	800168a <update_pid+0x7f2>
 8001684:	f04f 0301 	mov.w	r3, #1
 8001688:	e001      	b.n	800168e <update_pid+0x7f6>
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <update_pid+0x80a>
				{
					state = ST_WANDER;
 8001692:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e015      	b.n	80016ce <update_pid+0x836>
				}
				else
				{
					pwm1_output(0.5f);
 80016a2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80016a6:	f001 fc6d 	bl	8002f84 <_Z11pwm1_outputf>
					pwm2_output(0.5f);
 80016aa:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80016ae:	f001 fd35 	bl	800311c <_Z11pwm2_outputf>
					rt = 0;
 80016b2:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80016b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
					state = ST_DONE;
 80016c0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016c8:	f04f 0204 	mov.w	r2, #4
 80016cc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(state == ST_WANDER || state == ST_HOMING || state == ST_CANDLE_BLOWOUT) {
 80016ce:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00d      	beq.n	80016f8 <update_pid+0x860>
 80016dc:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d006      	beq.n	80016f8 <update_pid+0x860>
 80016ea:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d119      	bne.n	800172c <update_pid+0x894>
		pwm1_output(left);
 80016f8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fc3e 	bl	8002f84 <_Z11pwm1_outputf>
		pwm2_output(right);
 8001708:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fd02 	bl	800311c <_Z11pwm2_outputf>
		last_err = err;
 8001718:	f640 13ac 	movw	r3, #2476	; 0x9ac
 800171c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8001726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800172a:	601a      	str	r2, [r3, #0]
		}
	}
 800172c:	f107 0708 	add.w	r7, r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <PendSV_Handler>:

	void PendSV_Handler(void)
	{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

		SCB->ICSR |= (1<<27);
 8001738:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800173c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001740:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001744:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800174e:	605a      	str	r2, [r3, #4]

	}
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <SysTick_Handler>:

	void SysTick_Handler(void)
	{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

		SCB->ICSR |= (1<<28);
 800175c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001760:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001764:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001768:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800176c:	6852      	ldr	r2, [r2, #4]
 800176e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001772:	605a      	str	r2, [r3, #4]

	}
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w

08001780 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da10      	bge.n	80017b6 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001794:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001798:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	f002 020f 	and.w	r2, r2, #15
 80017a2:	f1a2 0104 	sub.w	r1, r2, #4
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	185b      	adds	r3, r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
 80017b4:	e00d      	b.n	80017d2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80017b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80017ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80017be:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	185b      	adds	r3, r3, r1
 80017ce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017d2:	f107 070c 	add.w	r7, r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d902      	bls.n	80017f4 <SysTick_Config+0x18>
 80017ee:	f04f 0301 	mov.w	r3, #1
 80017f2:	e01f      	b.n	8001834 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80017f4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80017f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001802:	f102 32ff 	add.w	r2, r2, #4294967295
 8001806:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f04f 010f 	mov.w	r1, #15
 8001810:	f7ff ffb6 	bl	8001780 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001814:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001818:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8001822:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001826:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800182a:	f04f 0207 	mov.w	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8001830:	f04f 0300 	mov.w	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	f107 0708 	add.w	r7, r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop

08001840 <main>:
int leds_on;

// Initialize all encoder data structures to zero:

int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	SystemInit(); // Set up clocks/PLL/et. al
 8001844:	f009 fbea 	bl	800b01c <SystemInit>

	UART1_init(); // Debug bridge
 8001848:	f7fe fd0e 	bl	8000268 <_Z10UART1_initv>

	SysTick_Config(1000);
 800184c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001850:	f7ff ffc4 	bl	80017dc <SysTick_Config>

	while(true);
 8001854:	e7fe      	b.n	8001854 <main+0x14>
 8001856:	bf00      	nop

08001858 <_Z24trinity2013_waitForStartv>:

	return 0; // We should never manage to get here...
}

void trinity2013_waitForStart(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800185e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001862:	f04f 0101 	mov.w	r1, #1
 8001866:	f005 f86b 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_DeInit(GPIOD);
 800186a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800186e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001872:	f003 febb 	bl	80055ec <GPIO_DeInit>
	GPIO_InitTypeDef g;
	g.GPIO_Mode = GPIO_Mode_IN;
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_OD;
 800187c:	f04f 0301 	mov.w	r3, #1
 8001880:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_3;
 8001882:	f04f 0308 	mov.w	r3, #8
 8001886:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001888:	f04f 0302 	mov.w	r3, #2
 800188c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD,&g);
 800188e:	463b      	mov	r3, r7
 8001890:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001894:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001898:	4619      	mov	r1, r3
 800189a:	f003 ff23 	bl	80056e4 <GPIO_Init>

	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 800189e:	bf00      	nop
 80018a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80018a4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80018a8:	f04f 0108 	mov.w	r1, #8
 80018ac:	f004 f802 	bl	80058b4 <GPIO_ReadInputDataBit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2300      	movne	r3, #0
 80018b8:	2301      	moveq	r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ef      	bne.n	80018a0 <_Z24trinity2013_waitForStartv+0x48>
	match_time_counter = 0.0f;
 80018c0:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80018c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	state = ST_WANDER;
 80018ce:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80018d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	f107 0708 	add.w	r7, r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_Z11IR_distancei>:

float IR_distance(int IR_ADC_VAL)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	ed2d 8b02 	vpush	{d8}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 80018f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001a48 <_Z11IR_distancei+0x164>
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	edc7 7a03 	vstr	s15, [r7, #12]
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f009 fec1 	bl	800b68c <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f2c4 0318 	movt	r3, #16408	; 0x4018
 800191e:	f00a fd29 	bl	800c374 <pow>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f00a f9c5 	bl	800bcb8 <__aeabi_d2f>
 800192e:	ee07 0a10 	vmov	s14, r0
 8001932:	eddf 7a46 	vldr	s15, [pc, #280]	; 8001a4c <_Z11IR_distancei+0x168>
 8001936:	ee27 8a27 	vmul.f32	s16, s14, s15
}

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f009 fea6 	bl	800b68c <__aeabi_f2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8001954:	f00a fd0e 	bl	800c374 <pow>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f00a f9aa 	bl	800bcb8 <__aeabi_d2f>
 8001964:	ee07 0a10 	vmov	s14, r0
 8001968:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001a50 <_Z11IR_distancei+0x16c>
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	ee38 8a67 	vsub.f32	s16, s16, s15

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f009 fe89 	bl	800b68c <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f2c4 0310 	movt	r3, #16400	; 0x4010
 800198e:	f00a fcf1 	bl	800c374 <pow>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f00a f98d 	bl	800bcb8 <__aeabi_d2f>
 800199e:	ee07 0a10 	vmov	s14, r0
 80019a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001a54 <_Z11IR_distancei+0x170>
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	ee38 8a27 	vadd.f32	s16, s16, s15

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f009 fe6c 	bl	800b68c <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f2c4 0308 	movt	r3, #16392	; 0x4008
 80019c8:	f00a fcd4 	bl	800c374 <pow>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f00a f970 	bl	800bcb8 <__aeabi_d2f>
 80019d8:	ee07 0a10 	vmov	s14, r0
 80019dc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001a58 <_Z11IR_distancei+0x174>
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	ee38 8a67 	vsub.f32	s16, s16, s15
float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f009 fe4f 	bl	800b68c <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019fe:	f00a fcb9 	bl	800c374 <pow>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
			+ (float)60.24);
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f00a f955 	bl	800bcb8 <__aeabi_d2f>
 8001a0e:	ee07 0a10 	vmov	s14, r0
 8001a12:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001a5c <_Z11IR_distancei+0x178>
 8001a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1a:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001a1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a22:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001a60 <_Z11IR_distancei+0x17c>
 8001a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001a64 <_Z11IR_distancei+0x180>
 8001a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a36:	ee17 3a90 	vmov	r3, s15
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f107 0710 	add.w	r7, r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	ecbd 8b02 	vpop	{d8}
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	3a64034a 	.word	0x3a64034a
 8001a4c:	3f21cac1 	.word	0x3f21cac1
 8001a50:	41003127 	.word	0x41003127
 8001a54:	42243333 	.word	0x42243333
 8001a58:	42db6666 	.word	0x42db6666
 8001a5c:	4324b333 	.word	0x4324b333
 8001a60:	430acccd 	.word	0x430acccd
 8001a64:	4270f5c3 	.word	0x4270f5c3

08001a68 <_Z19imu_update_ISR_initv>:

// Initializes the ISR that reads inertial sensors (gyro + accelerometer)
// Interrupt priority is HIGHEST (0)

void imu_update_ISR_init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
	L3GD20_InitTypeDef l3gInit;

	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 8001a6e:	f04f 0307 	mov.w	r3, #7
 8001a72:	74bb      	strb	r3, [r7, #18]
	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	74fb      	strb	r3, [r7, #19]
	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	753b      	strb	r3, [r7, #20]
	l3gInit.Endianness = L3GD20_BLE_LSB;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	757b      	strb	r3, [r7, #21]
	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	75bb      	strb	r3, [r7, #22]
	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	747b      	strb	r3, [r7, #17]
	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 8001a92:	f04f 0308 	mov.w	r3, #8
 8001a96:	743b      	strb	r3, [r7, #16]

	L3GD20_Init(&l3gInit);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f008 ff99 	bl	800a9d4 <L3GD20_Init>
	gyro_bias_x = calc_gyro_bias();
 8001aa2:	f000 fab3 	bl	800200c <_Z14calc_gyro_biasv>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f640 1378 	movw	r3, #2424	; 0x978
 8001aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ab2:	601a      	str	r2, [r3, #0]

	gyro_angle_x = 0;
 8001ab4:	f640 1374 	movw	r3, #2420	; 0x974
 8001ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM17_init;

	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 8001ac2:	f04f 031a 	mov.w	r3, #26
 8001ac6:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 8001ad4:	f04f 0301 	mov.w	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 ffee 	bl	8005ac0 <NVIC_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001ae4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ae8:	f04f 0101 	mov.w	r1, #1
 8001aec:	f004 ff52 	bl	8006994 <RCC_APB2PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 8001af0:	f240 138f 	movw	r3, #399	; 0x18f
 8001af4:	607b      	str	r3, [r7, #4]
	TIM17_init.TIM_Prescaler = 7199;
 8001af6:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001afa:	803b      	strh	r3, [r7, #0]
	TIM17_init.TIM_RepetitionCounter = 0;
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	72bb      	strb	r3, [r7, #10]
	TIM17_init.TIM_ClockDivision = 0;
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	813b      	strh	r3, [r7, #8]
	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM17, &TIM17_init);
 8001b0e:	463b      	mov	r3, r7
 8001b10:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001b14:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f006 f8d1 	bl	8007cc0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 8001b1e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001b22:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001b26:	f04f 0101 	mov.w	r1, #1
 8001b2a:	f04f 0201 	mov.w	r2, #1
 8001b2e:	f007 fd21 	bl	8009574 <TIM_ITConfig>
	TIM_Cmd(TIM17, ENABLE);
 8001b32:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001b36:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001b3a:	f04f 0101 	mov.w	r1, #1
 8001b3e:	f006 fa83 	bl	8008048 <TIM_Cmd>
}
 8001b42:	f107 0718 	add.w	r7, r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <L3GD20_TIMEOUT_UserCallback>:

uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 8001b50:	f243 509c 	movw	r0, #13724	; 0x359c
 8001b54:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001b58:	f00b ff18 	bl	800d98c <printf>
	return 0;
 8001b5c:	f04f 0300 	mov.w	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_Z15brake_pins_initv>:

void brake_pins_init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8001b6a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b6e:	f04f 0101 	mov.w	r1, #1
 8001b72:	f004 fee5 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8001b76:	463b      	mov	r3, r7
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fe5b 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001b7e:	f04f 030c 	mov.w	r3, #12
 8001b82:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b8a:	f04f 0301 	mov.w	r3, #1
 8001b8e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 8001b96:	f04f 0302 	mov.w	r3, #2
 8001b9a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ba2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f003 fd9c 	bl	80056e4 <GPIO_Init>

	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 8001bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bb0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001bb4:	f04f 0104 	mov.w	r1, #4
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f003 fef2 	bl	80059a4 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 8001bc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bc4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001bc8:	f04f 0108 	mov.w	r1, #8
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f003 fee8 	bl	80059a4 <GPIO_WriteBit>
}
 8001bd4:	f107 0708 	add.w	r7, r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_Z13ping_pin_initv>:
/*
 * PB0: OUTPUT
 * PC1: INPUT
 */
void ping_pin_init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 8001be2:	f44f 0088 	mov.w	r0, #4456448	; 0x440000
 8001be6:	f04f 0101 	mov.w	r1, #1
 8001bea:	f004 fea9 	bl	8006940 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef g;
	g.GPIO_Mode = GPIO_Mode_IN;
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_OD;
 8001bf4:	f04f 0301 	mov.w	r3, #1
 8001bf8:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_9;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
	g.GPIO_Speed = GPIO_Speed_Level_1;
 8001c06:	f04f 0301 	mov.w	r3, #1
 8001c0a:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOF, &g);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001c12:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001c16:	4619      	mov	r1, r3
 8001c18:	f003 fd64 	bl	80056e4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_OUT;
 8001c1c:	f04f 0301 	mov.w	r3, #1
 8001c20:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_PP;
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_0;
 8001c28:	f04f 0301 	mov.w	r3, #1
 8001c2c:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
	g.GPIO_Speed = GPIO_Speed_Level_1;
 8001c34:	f04f 0301 	mov.w	r3, #1
 8001c38:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOB, &g);
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c40:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001c44:	4619      	mov	r1, r3
 8001c46:	f003 fd4d 	bl	80056e4 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001c4a:	f04f 0001 	mov.w	r0, #1
 8001c4e:	f04f 0101 	mov.w	r1, #1
 8001c52:	f004 fe9f 	bl	8006994 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 8001c56:	f04f 0005 	mov.w	r0, #5
 8001c5a:	f04f 0109 	mov.w	r1, #9
 8001c5e:	f005 fe9f 	bl	80079a0 <SYSCFG_EXTILineConfig>

}
 8001c62:	f107 0708 	add.w	r7, r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop

08001c6c <_Z20timer2_timebase_initv>:

void timer2_timebase_init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001c72:	f04f 0001 	mov.w	r0, #1
 8001c76:	f04f 0101 	mov.w	r1, #1
 8001c7a:	f004 feb5 	bl	80069e8 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 8001c7e:	f244 634f 	movw	r3, #17999	; 0x464f
 8001c82:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 8001c8a:	f04f 0347 	mov.w	r3, #71	; 0x47
 8001c8e:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001c9c:	f107 0304 	add.w	r3, r7, #4
 8001ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f006 f80b 	bl	8007cc0 <TIM_TimeBaseInit>

	TIM_SetCounter(TIM2, 0);
 8001caa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	f006 f8db 	bl	8007e6c <TIM_SetCounter>
}
 8001cb6:	f107 0710 	add.w	r7, r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <_Z9comp_initv>:
 * COMP7:	Input->		PC1	 (IO2)
 * 			Output->	PC2
 */

void comp_init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
	//COMP2 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001cc6:	f04f 0001 	mov.w	r0, #1
 8001cca:	f04f 0101 	mov.w	r1, #1
 8001cce:	f004 fe61 	bl	8006994 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef g;

	g.GPIO_Mode = GPIO_Mode_AN;
 8001cd2:	f04f 0303 	mov.w	r3, #3
 8001cd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_7;
 8001ce2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001ce6:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001ce8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cec:	f04f 0101 	mov.w	r1, #1
 8001cf0:	f004 fe26 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOA, &g);
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f003 fcf1 	bl	80056e4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001d02:	f04f 0302 	mov.w	r3, #2
 8001d06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_9;
 8001d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1e:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 8001d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d24:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001d28:	f04f 0109 	mov.w	r1, #9
 8001d2c:	f04f 0208 	mov.w	r2, #8
 8001d30:	f003 fe5e 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d3c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001d40:	4619      	mov	r1, r3
 8001d42:	f003 fccf 	bl	80056e4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001d46:	f04f 0000 	mov.w	r0, #0
 8001d4a:	f004 f9bf 	bl	80060cc <RCC_PCLK2Config>

	COMP_InitTypeDef c;

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001d4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001d52:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001d5a:	f04f 0304 	mov.w	r3, #4
 8001d5e:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP2, &c);
 8001d78:	f107 0304 	add.w	r3, r7, #4
 8001d7c:	f04f 0004 	mov.w	r0, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	f002 fe0b 	bl	800499c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 8001d86:	f04f 0004 	mov.w	r0, #4
 8001d8a:	f04f 0101 	mov.w	r1, #1
 8001d8e:	f002 fe63 	bl	8004a58 <COMP_Cmd>

	//COMP3 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001d92:	f04f 0001 	mov.w	r0, #1
 8001d96:	f04f 0101 	mov.w	r1, #1
 8001d9a:	f004 fdfb 	bl	8006994 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001d9e:	f04f 0303 	mov.w	r3, #3
 8001da2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 8001dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001db2:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 8001db4:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8001db8:	f04f 0101 	mov.w	r1, #1
 8001dbc:	f004 fdc0 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOB, &g);
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dc8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f003 fc89 	bl	80056e4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001dd2:	f04f 0302 	mov.w	r3, #2
 8001dd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 8001dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dee:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 8001df0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001df4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001df8:	f04f 0108 	mov.w	r1, #8
 8001dfc:	f04f 0207 	mov.w	r2, #7
 8001e00:	f003 fdf6 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOC, &g);
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e0c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001e10:	4619      	mov	r1, r3
 8001e12:	f003 fc67 	bl	80056e4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	f004 f957 	bl	80060cc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001e1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001e22:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001e2a:	f04f 0304 	mov.w	r3, #4
 8001e2e:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e40:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP3, &c);
 8001e48:	f107 0304 	add.w	r3, r7, #4
 8001e4c:	f04f 0008 	mov.w	r0, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	f002 fda3 	bl	800499c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 8001e56:	f04f 0008 	mov.w	r0, #8
 8001e5a:	f04f 0101 	mov.w	r1, #1
 8001e5e:	f002 fdfb 	bl	8004a58 <COMP_Cmd>

	//COMP4 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001e62:	f04f 0001 	mov.w	r0, #1
 8001e66:	f04f 0101 	mov.w	r1, #1
 8001e6a:	f004 fd93 	bl	8006994 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001e6e:	f04f 0303 	mov.w	r3, #3
 8001e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 8001e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001e82:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 8001e84:	f44f 1010 	mov.w	r0, #2359296	; 0x240000
 8001e88:	f04f 0101 	mov.w	r1, #1
 8001e8c:	f004 fd58 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOE, &g);
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e98:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f003 fc21 	bl	80056e4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001ea2:	f04f 0302 	mov.w	r3, #2
 8001ea6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 8001eba:	f04f 0302 	mov.w	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 8001ec0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ec4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ec8:	f04f 0101 	mov.w	r1, #1
 8001ecc:	f04f 0208 	mov.w	r2, #8
 8001ed0:	f003 fd8e 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001edc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f003 fbff 	bl	80056e4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f004 f8ef 	bl	80060cc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001eee:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001ef2:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 8001ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001ef8:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001efa:	f04f 0304 	mov.w	r3, #4
 8001efe:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f10:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP4, &c);
 8001f18:	f107 0304 	add.w	r3, r7, #4
 8001f1c:	f04f 000c 	mov.w	r0, #12
 8001f20:	4619      	mov	r1, r3
 8001f22:	f002 fd3b 	bl	800499c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 8001f26:	f04f 000c 	mov.w	r0, #12
 8001f2a:	f04f 0101 	mov.w	r1, #1
 8001f2e:	f002 fd93 	bl	8004a58 <COMP_Cmd>

	//COMP7 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001f32:	f04f 0001 	mov.w	r0, #1
 8001f36:	f04f 0101 	mov.w	r1, #1
 8001f3a:	f004 fd2b 	bl	8006994 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001f3e:	f04f 0303 	mov.w	r3, #3
 8001f42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 8001f4e:	f04f 0302 	mov.w	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001f54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f58:	f04f 0101 	mov.w	r1, #1
 8001f5c:	f004 fcf0 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOC, &g);
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f68:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f003 fbb9 	bl	80056e4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001f72:	f04f 0302 	mov.w	r3, #2
 8001f76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 8001f8a:	f04f 0304 	mov.w	r3, #4
 8001f8e:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 8001f90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f94:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001f98:	f04f 0102 	mov.w	r1, #2
 8001f9c:	f04f 0203 	mov.w	r2, #3
 8001fa0:	f003 fd26 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOC, &g);
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fac:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f003 fb97 	bl	80056e4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f004 f887 	bl	80060cc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001fbe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001fc2:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 8001fc4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001fc8:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001fca:	f04f 0304 	mov.w	r3, #4
 8001fce:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe0:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP7, &c);
 8001fe8:	f107 0304 	add.w	r3, r7, #4
 8001fec:	f04f 0018 	mov.w	r0, #24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f002 fcd3 	bl	800499c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 8001ff6:	f04f 0018 	mov.w	r0, #24
 8001ffa:	f04f 0101 	mov.w	r1, #1
 8001ffe:	f002 fd2b 	bl	8004a58 <COMP_Cmd>
}
 8002002:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop

0800200c <_Z14calc_gyro_biasv>:

int16_t calc_gyro_bias(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
	int i = 0;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
	int accum_x = 0;
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e019      	b.n	800205a <_Z14calc_gyro_biasv+0x4e>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 8002026:	463b      	mov	r3, r7
 8002028:	4618      	mov	r0, r3
 800202a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800202e:	f04f 0202 	mov.w	r2, #2
 8002032:	f008 fe61 	bl	800acf8 <L3GD20_Read>
		convert.un_signed = (bytes[1] << 8) | bytes[0];
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800203c:	b29a      	uxth	r2, r3
 800203e:	783b      	ldrb	r3, [r7, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	80bb      	strh	r3, [r7, #4]
		accum_x += convert.output;
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	b21b      	sxth	r3, r3
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	18d3      	adds	r3, r2, r3
 8002050:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f103 0301 	add.w	r3, r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2bf9      	cmp	r3, #249	; 0xf9
 800205e:	bfcc      	ite	gt
 8002060:	2300      	movgt	r3, #0
 8002062:	2301      	movle	r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1dd      	bne.n	8002026 <_Z14calc_gyro_biasv+0x1a>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
		convert.un_signed = (bytes[1] << 8) | bytes[0];
		accum_x += convert.output;
	}
	return (int16_t)((float)accum_x/(float)250);
 800206a:	edd7 7a02 	vldr	s15, [r7, #8]
 800206e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002072:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002090 <_Z14calc_gyro_biasv+0x84>
 8002076:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800207a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207e:	ee17 3a90 	vmov	r3, s15
 8002082:	b29b      	uxth	r3, r3
 8002084:	b21b      	sxth	r3, r3
}
 8002086:	4618      	mov	r0, r3
 8002088:	f107 0710 	add.w	r7, r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	437a0000 	.word	0x437a0000

08002094 <_Z13adc1_init_DMAv>:
 * @Args: None
 * @Return Val: None
 */

void adc1_init_DMA(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b09c      	sub	sp, #112	; 0x70
 8002098:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;

	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 800209a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800209e:	f004 fadf 	bl	8006660 <RCC_ADCCLKConfig>
	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80020a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020a6:	f04f 0101 	mov.w	r1, #1
 80020aa:	f004 fc49 	bl	8006940 <RCC_AHBPeriphClockCmd>
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80020ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020b2:	f04f 0101 	mov.w	r1, #1
 80020b6:	f004 fc43 	bl	8006940 <RCC_AHBPeriphClockCmd>

	// Configure ADC Channel 3 and 4 as analog inputs

	GPIO_StructInit(&GPIO_InitStructure);
 80020ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fbb8 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80020c4:	f04f 030c 	mov.w	r3, #12
 80020c8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80020ca:	f04f 0303 	mov.w	r3, #3
 80020ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80020da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	4619      	mov	r1, r3
 80020e4:	f003 fafe 	bl	80056e4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 80020e8:	463b      	mov	r3, r7
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fafa 	bl	80036e4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 80020f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020f4:	f04f 0101 	mov.w	r1, #1
 80020f8:	f001 fc9c 	bl	8003a34 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002102:	e007      	b.n	8002114 <_Z13adc1_init_DMAv+0x80>
	{
	  ++foo;
 8002104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002106:	f103 0301 	add.w	r3, r3, #1
 800210a:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 800210c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210e:	f103 0301 	add.w	r3, r3, #1
 8002112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002116:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800211a:	429a      	cmp	r2, r3
 800211c:	bfcc      	ite	gt
 800211e:	2300      	movgt	r3, #0
 8002120:	2301      	movle	r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ed      	bne.n	8002104 <_Z13adc1_init_DMAv+0x70>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002128:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	f001 fc24 	bl	800397c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8002134:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002138:	f001 fbf4 	bl	8003924 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 800213c:	bf00      	nop
 800213e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002142:	f001 fc31 	bl	80039a8 <ADC_GetCalibrationStatus>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2300      	moveq	r3, #0
 800214e:	2301      	movne	r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f3      	bne.n	800213e <_Z13adc1_init_DMAv+0xaa>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8002162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002166:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8002168:	f04f 0302 	mov.w	r3, #2
 800216c:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 800216e:	f04f 030f 	mov.w	r3, #15
 8002172:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8002176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800217a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800217e:	4619      	mov	r1, r3
 8002180:	f001 fb36 	bl	80037f0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002188:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 80021ae:	f04f 0302 	mov.w	r3, #2
 80021b2:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 80021b4:	463b      	mov	r3, r7
 80021b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ba:	4619      	mov	r1, r3
 80021bc:	f001 fa50 	bl	8003660 <ADC_Init>

	/* ADC1 regular channel3 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80021c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021c4:	f04f 0103 	mov.w	r1, #3
 80021c8:	f04f 0201 	mov.w	r2, #1
 80021cc:	f04f 0307 	mov.w	r3, #7
 80021d0:	f001 feb0 	bl	8003f34 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80021d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021d8:	f04f 0104 	mov.w	r1, #4
 80021dc:	f04f 0202 	mov.w	r2, #2
 80021e0:	f04f 0307 	mov.w	r3, #7
 80021e4:	f001 fea6 	bl	8003f34 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 80021e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ec:	f04f 0101 	mov.w	r1, #1
 80021f0:	f001 fb7c 	bl	80038ec <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 80021f4:	bf00      	nop
 80021f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021fa:	f04f 0101 	mov.w	r1, #1
 80021fe:	f002 faed 	bl	80047dc <ADC_GetFlagStatus>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2300      	movne	r3, #0
 800220a:	2301      	moveq	r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f1      	bne.n	80021f6 <_Z13adc1_init_DMAv+0x162>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 8002212:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002216:	f001 ffd9 	bl	80041cc <ADC_StartConversion>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800221a:	f04f 0001 	mov.w	r0, #1
 800221e:	f04f 0101 	mov.w	r1, #1
 8002222:	f004 fb8d 	bl	8006940 <RCC_AHBPeriphClockCmd>

	DMA_InitTypeDef			DMA_InitStructure;
	DMA_StructInit(&DMA_InitStructure);
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fe34 	bl	8004e98 <DMA_StructInit>

	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 8002230:	f04f 0008 	mov.w	r0, #8
 8002234:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002238:	f002 fcde 	bl	8004bf8 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 800223c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002240:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002244:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will be stored
 8002246:	f640 1380 	movw	r3, #2432	; 0x980
 800224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = 2;
 8002256:	f04f 0302 	mov.w	r3, #2
 800225a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002262:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8002268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800226e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002274:	f04f 0320 	mov.w	r3, #32
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800227a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227e:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48

	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	f04f 0008 	mov.w	r0, #8
 800228e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002292:	4619      	mov	r1, r3
 8002294:	f002 fdc0 	bl	8004e18 <DMA_Init>

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8002298:	f04f 030b 	mov.w	r3, #11
 800229c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 80022a0:	f04f 0302 	mov.w	r3, #2
 80022a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	nv.NVIC_IRQChannelSubPriority = 0;
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	nv.NVIC_IRQChannelCmd = ENABLE;
 80022b0:	f04f 0301 	mov.w	r3, #1
 80022b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	NVIC_Init(&nv);
 80022b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fbff 	bl	8005ac0 <NVIC_Init>

	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 80022c2:	f04f 0008 	mov.w	r0, #8
 80022c6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022ca:	f04f 0102 	mov.w	r1, #2
 80022ce:	f04f 0201 	mov.w	r2, #1
 80022d2:	f002 fe4f 	bl	8004f74 <DMA_ITConfig>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 80022d6:	f04f 0008 	mov.w	r0, #8
 80022da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022de:	f04f 0101 	mov.w	r1, #1
 80022e2:	f002 fe0f 	bl	8004f04 <DMA_Cmd>

	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 80022e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022ea:	f04f 0102 	mov.w	r1, #2
 80022ee:	f002 f953 	bl	8004598 <ADC_DMAConfig>
	ADC_DMACmd(ADC1, ENABLE);
 80022f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022f6:	f04f 0101 	mov.w	r1, #1
 80022fa:	f002 f931 	bl	8004560 <ADC_DMACmd>
}
 80022fe:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop

08002308 <_Z13adc2_init_DMAv>:

void adc2_init_DMA(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09c      	sub	sp, #112	; 0x70
 800230c:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;

	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 800230e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002312:	f004 f9a5 	bl	8006660 <RCC_ADCCLKConfig>
	/* Enable ADC2 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8002316:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800231a:	f04f 0101 	mov.w	r1, #1
 800231e:	f004 fb0f 	bl	8006940 <RCC_AHBPeriphClockCmd>
	/* GPIOA, GPIOB, GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 8002322:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8002326:	f04f 0101 	mov.w	r1, #1
 800232a:	f004 fb09 	bl	8006940 <RCC_AHBPeriphClockCmd>

	// Configure PA4, PB2, PC4, PC5 as analog inputs

	GPIO_StructInit(&GPIO_InitStructure);
 800232e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fa7e 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002338:	f04f 0310 	mov.w	r3, #16
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800233e:	f04f 0303 	mov.w	r3, #3
 8002342:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800234e:	f04f 0303 	mov.w	r3, #3
 8002352:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235e:	4619      	mov	r1, r3
 8002360:	f003 f9c0 	bl	80056e4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8002364:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fa63 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800236e:	f04f 0304 	mov.w	r3, #4
 8002372:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002374:	f04f 0303 	mov.w	r3, #3
 8002378:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002384:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002388:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800238c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002390:	4619      	mov	r1, r3
 8002392:	f003 f9a7 	bl	80056e4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8002396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fa4a 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 80023a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80023a4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80023a6:	f04f 0303 	mov.w	r3, #3
 80023aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80023b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023be:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80023c2:	4619      	mov	r1, r3
 80023c4:	f003 f98e 	bl	80056e4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 80023c8:	463b      	mov	r3, r7
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 f98a 	bl	80036e4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 80023d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023d4:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023d8:	f04f 0101 	mov.w	r1, #1
 80023dc:	f001 fb2a 	bl	8003a34 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023e6:	e007      	b.n	80023f8 <_Z13adc2_init_DMAv+0xf0>
	{
	  ++foo;
 80023e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ea:	f103 0301 	add.w	r3, r3, #1
 80023ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC2, ENABLE);

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	f103 0301 	add.w	r3, r3, #1
 80023f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023fa:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 80023fe:	429a      	cmp	r2, r3
 8002400:	bfcc      	ite	gt
 8002402:	2300      	movgt	r3, #0
 8002404:	2301      	movle	r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ed      	bne.n	80023e8 <_Z13adc2_init_DMAv+0xe0>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 800240c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002410:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	f001 fab0 	bl	800397c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC2);
 800241c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002420:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002424:	f001 fa7e 	bl	8003924 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 8002428:	bf00      	nop
 800242a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800242e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002432:	f001 fab9 	bl	80039a8 <ADC_GetCalibrationStatus>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2300      	moveq	r3, #0
 800243e:	2301      	movne	r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f1      	bne.n	800242a <_Z13adc2_init_DMAv+0x122>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8002452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002456:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8002458:	f04f 0302 	mov.w	r3, #2
 800245c:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 800245e:	f04f 030f 	mov.w	r3, #15
 8002462:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 8002466:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800246a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800246e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002472:	4619      	mov	r1, r3
 8002474:	f001 f9bc 	bl	80037f0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247c:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 80024a2:	f04f 0304 	mov.w	r3, #4
 80024a6:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC2, &ADC_InitStructure);
 80024a8:	463b      	mov	r3, r7
 80024aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024ae:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80024b2:	4619      	mov	r1, r3
 80024b4:	f001 f8d4 	bl	8003660 <ADC_Init>

	/* ADC2 regular Channel 1,2,3,4 configuration */

	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 80024b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024bc:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80024c0:	f04f 0101 	mov.w	r1, #1
 80024c4:	f04f 0201 	mov.w	r2, #1
 80024c8:	f04f 0307 	mov.w	r3, #7
 80024cc:	f001 fd32 	bl	8003f34 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 80024d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d4:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80024d8:	f04f 0105 	mov.w	r1, #5
 80024dc:	f04f 0202 	mov.w	r2, #2
 80024e0:	f04f 0307 	mov.w	r3, #7
 80024e4:	f001 fd26 	bl	8003f34 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 80024e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024ec:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80024f0:	f04f 010b 	mov.w	r1, #11
 80024f4:	f04f 0203 	mov.w	r2, #3
 80024f8:	f04f 0307 	mov.w	r3, #7
 80024fc:	f001 fd1a 	bl	8003f34 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 8002500:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002504:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002508:	f04f 010c 	mov.w	r1, #12
 800250c:	f04f 0204 	mov.w	r2, #4
 8002510:	f04f 0307 	mov.w	r3, #7
 8002514:	f001 fd0e 	bl	8003f34 <ADC_RegularChannelConfig>

	/* Enable ADC2 */
	ADC_Cmd(ADC2, ENABLE);
 8002518:	f44f 7080 	mov.w	r0, #256	; 0x100
 800251c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002520:	f04f 0101 	mov.w	r1, #1
 8002524:	f001 f9e2 	bl	80038ec <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 8002528:	bf00      	nop
 800252a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800252e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002532:	f04f 0101 	mov.w	r1, #1
 8002536:	f002 f951 	bl	80047dc <ADC_GetFlagStatus>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2300      	movne	r3, #0
 8002542:	2301      	moveq	r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ef      	bne.n	800252a <_Z13adc2_init_DMAv+0x222>

	/* Start ADC2 Software Conversion */
	ADC_StartConversion(ADC2);
 800254a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800254e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002552:	f001 fe3b 	bl	80041cc <ADC_StartConversion>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 8002556:	f04f 0002 	mov.w	r0, #2
 800255a:	f04f 0101 	mov.w	r1, #1
 800255e:	f004 f9ef 	bl	8006940 <RCC_AHBPeriphClockCmd>

	DMA_InitTypeDef			DMA_InitStructure;
	DMA_StructInit(&DMA_InitStructure);
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fc96 	bl	8004e98 <DMA_StructInit>

	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 800256c:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8002570:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002574:	f002 fb40 	bl	8004bf8 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 8002578:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800257c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002580:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values will be stored
 8002582:	f640 138c 	movw	r3, #2444	; 0x98c
 8002586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = 4;
 8002592:	f04f 0304 	mov.w	r3, #4
 8002596:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800259e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 80025a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 80025aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80025b0:	f04f 0320 	mov.w	r3, #32
 80025b4:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48

	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	f44f 6081 	mov.w	r0, #1032	; 0x408
 80025ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80025ce:	4619      	mov	r1, r3
 80025d0:	f002 fc22 	bl	8004e18 <DMA_Init>

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 80025d4:	f04f 0338 	mov.w	r3, #56	; 0x38
 80025d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 80025dc:	f04f 0302 	mov.w	r3, #2
 80025e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	nv.NVIC_IRQChannelSubPriority = 0;
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	nv.NVIC_IRQChannelCmd = ENABLE;
 80025ec:	f04f 0301 	mov.w	r3, #1
 80025f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	NVIC_Init(&nv);
 80025f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fa61 	bl	8005ac0 <NVIC_Init>

	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 80025fe:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8002602:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002606:	f04f 0102 	mov.w	r1, #2
 800260a:	f04f 0201 	mov.w	r2, #1
 800260e:	f002 fcb1 	bl	8004f74 <DMA_ITConfig>
	DMA_Cmd(DMA2_Channel1, ENABLE);
 8002612:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8002616:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800261a:	f04f 0101 	mov.w	r1, #1
 800261e:	f002 fc71 	bl	8004f04 <DMA_Cmd>

	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 8002622:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002626:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800262a:	f04f 0102 	mov.w	r1, #2
 800262e:	f001 ffb3 	bl	8004598 <ADC_DMAConfig>
	ADC_DMACmd(ADC2, ENABLE);
 8002632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002636:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800263a:	f04f 0101 	mov.w	r1, #1
 800263e:	f001 ff8f 	bl	8004560 <ADC_DMACmd>
}
 8002642:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop

0800264c <_Z21battery_watchdog_initv>:

void battery_watchdog_init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b092      	sub	sp, #72	; 0x48
 8002650:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;
	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 8002652:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8002656:	f2c1 0000 	movt	r0, #4096	; 0x1000
 800265a:	f004 f801 	bl	8006660 <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 800265e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002662:	f04f 0101 	mov.w	r1, #1
 8002666:	f004 f96b 	bl	8006940 <RCC_AHBPeriphClockCmd>
	/* ADC Channel configuration */
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 800266a:	f44f 1010 	mov.w	r0, #2359296	; 0x240000
 800266e:	f04f 0101 	mov.w	r1, #1
 8002672:	f004 f965 	bl	8006940 <RCC_AHBPeriphClockCmd>

	/* Configure PB1, PE7 as analog inputs */
	GPIO_StructInit(&GPIO_InitStructure);
 8002676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800267a:	4618      	mov	r0, r3
 800267c:	f003 f8da 	bl	8005834 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 8002680:	f242 0302 	movw	r3, #8194	; 0x2002
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002686:	f04f 0303 	mov.w	r3, #3
 800268a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800269e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80026a2:	4619      	mov	r1, r3
 80026a4:	f003 f81e 	bl	80056e4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
*/

	ADC_StructInit(&ADC_InitStructure);
 80026a8:	f107 0304 	add.w	r3, r7, #4
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 f819 	bl	80036e4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 80026b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026b6:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026ba:	f04f 0101 	mov.w	r1, #1
 80026be:	f001 f9b9 	bl	8003a34 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 222 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	647b      	str	r3, [r7, #68]	; 0x44
 80026c8:	e007      	b.n	80026da <_Z21battery_watchdog_initv+0x8e>
	{
	  ++foo;
 80026ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026cc:	f103 0301 	add.w	r3, r3, #1
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC3, ENABLE);

	/* Insert delay equal to 222 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 80026d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d4:	f103 0301 	add.w	r3, r3, #1
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
 80026da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026dc:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80026e0:	429a      	cmp	r2, r3
 80026e2:	bfcc      	ite	gt
 80026e4:	2300      	movgt	r3, #0
 80026e6:	2301      	movle	r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ed      	bne.n	80026ca <_Z21battery_watchdog_initv+0x7e>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 80026ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026f2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f001 f93f 	bl	800397c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC3);
 80026fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002702:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002706:	f001 f90d 	bl	8003924 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 800270a:	bf00      	nop
 800270c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002710:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002714:	f001 f948 	bl	80039a8 <ADC_GetCalibrationStatus>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2300      	moveq	r3, #0
 8002720:	2301      	movne	r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f1      	bne.n	800270c <_Z21battery_watchdog_initv+0xc0>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 800272e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 8002748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800274c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002750:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002754:	4619      	mov	r1, r3
 8002756:	f001 f84b 	bl	80037f0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 800275a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275e:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 8002784:	f04f 0302 	mov.w	r3, #2
 8002788:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC3, &ADC_InitStructure);
 800278c:	f107 0304 	add.w	r3, r7, #4
 8002790:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002794:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002798:	4619      	mov	r1, r3
 800279a:	f000 ff61 	bl	8003660 <ADC_Init>

	/* ADC3 regular Channel 1, 13 configuration */
	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 800279e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027a2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80027a6:	f04f 0101 	mov.w	r1, #1
 80027aa:	f04f 0201 	mov.w	r2, #1
 80027ae:	f04f 0307 	mov.w	r3, #7
 80027b2:	f001 fbbf 	bl	8003f34 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 80027b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027ba:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80027be:	f04f 0105 	mov.w	r1, #5
 80027c2:	f04f 0202 	mov.w	r2, #2
 80027c6:	f04f 0307 	mov.w	r3, #7
 80027ca:	f001 fbb3 	bl	8003f34 <ADC_RegularChannelConfig>

	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 80027ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027d2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80027d6:	f04f 0101 	mov.w	r1, #1
 80027da:	f001 fa49 	bl	8003c70 <ADC_AnalogWatchdog1SingleChannelConfig>
	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 80027de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027e2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80027e6:	f04f 0105 	mov.w	r1, #5
 80027ea:	f001 fa5f 	bl	8003cac <ADC_AnalogWatchdog2SingleChannelConfig>

	/* Configure AWD 1 & 2 Thresholds: */

	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 80027ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027f2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80027f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027fa:	f04f 020a 	mov.w	r2, #10
 80027fe:	f001 f9bb 	bl	8003b78 <ADC_AnalogWatchdog1ThresholdsConfig>
	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 8002802:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002806:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800280a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f001 f9dd 	bl	8003bd0 <ADC_AnalogWatchdog2ThresholdsConfig>

	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 8002816:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800281a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800281e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8002822:	f001 f98d 	bl	8003b40 <ADC_AnalogWatchdogCmd>

	// Configure ADC3 global interrupt:

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = ADC3_IRQn;
 8002826:	f04f 032f 	mov.w	r3, #47	; 0x2f
 800282a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nv.NVIC_IRQChannelSubPriority = 0;
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nv.NVIC_IRQChannelCmd = ENABLE;
 800283e:	f04f 0301 	mov.w	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	NVIC_Init(&nv);
 8002846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f003 f938 	bl	8005ac0 <NVIC_Init>

	// Enable ADC3's global interrupt:

	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 8002850:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002854:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002858:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800285c:	f04f 0201 	mov.w	r2, #1
 8002860:	f001 ff9e 	bl	80047a0 <ADC_ITConfig>

	/* Enable ADC3 */
	ADC_Cmd(ADC3, ENABLE);
 8002864:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002868:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800286c:	f04f 0101 	mov.w	r1, #1
 8002870:	f001 f83c 	bl	80038ec <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 8002874:	bf00      	nop
 8002876:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800287a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800287e:	f04f 0101 	mov.w	r1, #1
 8002882:	f001 ffab 	bl	80047dc <ADC_GetFlagStatus>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2300      	movne	r3, #0
 800288e:	2301      	moveq	r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ef      	bne.n	8002876 <_Z21battery_watchdog_initv+0x22a>

	/* Start ADC3 Software Conversion */
	ADC_StartConversion(ADC3);
 8002896:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800289a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800289e:	f001 fc95 	bl	80041cc <ADC_StartConversion>
}
 80028a2:	f107 0748 	add.w	r7, r7, #72	; 0x48
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop

080028ac <_Z9adc1_initv>:
 * @Args: Nothing
 * @Return Val: Nothing
 */

void adc1_init(void) //PA2 -> Channel 3 on ADC1
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b092      	sub	sp, #72	; 0x48
 80028b0:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;
	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 80028b2:	f44f 7088 	mov.w	r0, #272	; 0x110
 80028b6:	f003 fed3 	bl	8006660 <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80028ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80028be:	f04f 0101 	mov.w	r1, #1
 80028c2:	f004 f83d 	bl	8006940 <RCC_AHBPeriphClockCmd>
	/* ADC Channel configuration */
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80028c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028ca:	f04f 0101 	mov.w	r1, #1
 80028ce:	f004 f837 	bl	8006940 <RCC_AHBPeriphClockCmd>

	/* Configure ADC Channel7 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80028d2:	f04f 0304 	mov.w	r3, #4
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80028d8:	f04f 0303 	mov.w	r3, #3
 80028dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f0:	4619      	mov	r1, r3
 80028f2:	f002 fef7 	bl	80056e4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 80028f6:	f107 0304 	add.w	r3, r7, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fef2 	bl	80036e4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8002900:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002904:	f04f 0101 	mov.w	r1, #1
 8002908:	f001 f894 	bl	8003a34 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	e007      	b.n	8002924 <_Z9adc1_initv+0x78>
	{
	  ++foo;
 8002914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002916:	f103 0301 	add.w	r3, r3, #1
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 800291c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291e:	f103 0301 	add.w	r3, r3, #1
 8002922:	647b      	str	r3, [r7, #68]	; 0x44
 8002924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002926:	f647 43ff 	movw	r3, #31999	; 0x7cff
 800292a:	429a      	cmp	r2, r3
 800292c:	bfcc      	ite	gt
 800292e:	2300      	movgt	r3, #0
 8002930:	2301      	movle	r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ed      	bne.n	8002914 <_Z9adc1_initv+0x68>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	f001 f81c 	bl	800397c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8002944:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002948:	f000 ffec 	bl	8003924 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 800294c:	bf00      	nop
 800294e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002952:	f001 f829 	bl	80039a8 <ADC_GetCalibrationStatus>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2300      	moveq	r3, #0
 800295e:	2301      	movne	r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f3      	bne.n	800294e <_Z9adc1_initv+0xa2>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8002986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800298a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800298e:	4619      	mov	r1, r3
 8002990:	f000 ff2e 	bl	80037f0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002998:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 80029be:	f04f 0301 	mov.w	r3, #1
 80029c2:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &ADC_InitStructure);
 80029c6:	f107 0304 	add.w	r3, r7, #4
 80029ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029ce:	4619      	mov	r1, r3
 80029d0:	f000 fe46 	bl	8003660 <ADC_Init>

	/* ADC1 regular channel3 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80029d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029d8:	f04f 0103 	mov.w	r1, #3
 80029dc:	f04f 0201 	mov.w	r2, #1
 80029e0:	f04f 0307 	mov.w	r3, #7
 80029e4:	f001 faa6 	bl	8003f34 <ADC_RegularChannelConfig>

	// Configure ADC1_2 global interrupt:

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 80029e8:	f04f 0312 	mov.w	r3, #18
 80029ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 80029f0:	f04f 0302 	mov.w	r3, #2
 80029f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nv.NVIC_IRQChannelSubPriority = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nv.NVIC_IRQChannelCmd = ENABLE;
 8002a00:	f04f 0301 	mov.w	r3, #1
 8002a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	NVIC_Init(&nv);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 f857 	bl	8005ac0 <NVIC_Init>

	// Enable ADC1's global interrupt:

	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8002a12:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a16:	f04f 0104 	mov.w	r1, #4
 8002a1a:	f04f 0201 	mov.w	r2, #1
 8002a1e:	f001 febf 	bl	80047a0 <ADC_ITConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8002a22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a26:	f04f 0101 	mov.w	r1, #1
 8002a2a:	f000 ff5f 	bl	80038ec <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 8002a2e:	bf00      	nop
 8002a30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a34:	f04f 0101 	mov.w	r1, #1
 8002a38:	f001 fed0 	bl	80047dc <ADC_GetFlagStatus>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2300      	movne	r3, #0
 8002a44:	2301      	moveq	r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f1      	bne.n	8002a30 <_Z9adc1_initv+0x184>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 8002a4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a50:	f001 fbbc 	bl	80041cc <ADC_StartConversion>
}
 8002a54:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    _write(1, "exit", 4);
 8002a64:	f04f 0001 	mov.w	r0, #1
 8002a68:	f243 51dc 	movw	r1, #13788	; 0x35dc
 8002a6c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002a70:	f04f 0204 	mov.w	r2, #4
 8002a74:	f000 f97a 	bl	8002d6c <_write>
    while (1) {
        ;
    }
 8002a78:	e7fe      	b.n	8002a78 <_exit+0x1c>
 8002a7a:	bf00      	nop

08002a7c <_close>:
}

int _close(int file) {
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f107 070c 	add.w	r7, r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
 8002aa0:	f640 2318 	movw	r3, #2584	; 0xa18
 8002aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa8:	f04f 020c 	mov.w	r2, #12
 8002aac:	601a      	str	r2, [r3, #0]
    return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f107 0714 	add.w	r7, r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
    errno = EAGAIN;
 8002ac4:	f640 2318 	movw	r3, #2584	; 0xa18
 8002ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002acc:	f04f 020b 	mov.w	r2, #11
 8002ad0:	601a      	str	r2, [r3, #0]
    return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af0:	605a      	str	r2, [r3, #4]
    return 0;
 8002af2:	f04f 0300 	mov.w	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	f107 070c 	add.w	r7, r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
    return 1;
 8002b08:	f04f 0301 	mov.w	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    switch (file){
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f103 0300 	add.w	r3, r3, #0
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d802      	bhi.n	8002b2c <_isatty+0x18>
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8002b26:	f04f 0301 	mov.w	r3, #1
 8002b2a:	e008      	b.n	8002b3e <_isatty+0x2a>
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8002b2c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b34:	f04f 0209 	mov.w	r2, #9
 8002b38:	601a      	str	r2, [r3, #0]
        return 0;
 8002b3a:	f04f 0300 	mov.w	r3, #0
    }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f107 070c 	add.w	r7, r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8002b56:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b5e:	f04f 0216 	mov.w	r2, #22
 8002b62:	601a      	str	r2, [r3, #0]
    return (-1);
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f107 070c 	add.w	r7, r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
 8002b7e:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b86:	f04f 021f 	mov.w	r2, #31
 8002b8a:	601a      	str	r2, [r3, #0]
    return -1;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	f107 070c 	add.w	r7, r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
    return 0;
 8002ba8:	f04f 0300 	mov.w	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	f107 0714 	add.w	r7, r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8002bc0:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <_sbrk+0x28>
        heap_end = &_ebss;
 8002bce:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bd6:	f640 221c 	movw	r2, #2588	; 0xa1c
 8002bda:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002bde:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8002be0:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002bec:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8002bf0:	4623      	mov	r3, r4

char * stack = (char*) __get_MSP();
 8002bf2:	60bb      	str	r3, [r7, #8]
     if (heap_end + incr >  stack)
 8002bf4:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	18d2      	adds	r2, r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d913      	bls.n	8002c30 <_sbrk+0x78>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8002c08:	f04f 0002 	mov.w	r0, #2
 8002c0c:	f243 51e4 	movw	r1, #13796	; 0x35e4
 8002c10:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002c14:	f04f 0219 	mov.w	r2, #25
 8002c18:	f000 f8a8 	bl	8002d6c <_write>
         errno = ENOMEM;
 8002c1c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c24:	f04f 020c 	mov.w	r2, #12
 8002c28:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e00c      	b.n	8002c4a <_sbrk+0x92>
         //abort ();
     }

    heap_end += incr;
 8002c30:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	18d2      	adds	r2, r2, r3
 8002c3e:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c46:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8002c48:	68fb      	ldr	r3, [r7, #12]

}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f107 0714 	add.w	r7, r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
    int n;
    int num = 0;
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
    switch (file) {
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d128      	bne.n	8002cbe <_read+0x6a>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e01f      	b.n	8002cb4 <_read+0x60>
#if   STDIN_USART == 1
            while ((USART1->ISR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002c74:	bf00      	nop
 8002c76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f6      	beq.n	8002c76 <_read+0x22>
            char c = (char)(USART1->RDR & (uint16_t)0x01FF);
 8002c88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	75fb      	strb	r3, [r7, #23]
            char c = (char) (USART2->RDR & (uint16_t) 0x01FF);
#elif STDIN_USART == 3
            while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	7dfa      	ldrb	r2, [r7, #23]
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f103 0301 	add.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
            num++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f103 0301 	add.w	r3, r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]
int _read(int file, char *ptr, int len) {
    int n;
    int num = 0;
    switch (file) {
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f103 0301 	add.w	r3, r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbdb      	blt.n	8002c74 <_read+0x20>
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
            num++;
        }
        break;
 8002cbc:	e009      	b.n	8002cd2 <_read+0x7e>
    default:
        errno = EBADF;
 8002cbe:	f640 2318 	movw	r3, #2584	; 0xa18
 8002cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cc6:	f04f 0209 	mov.w	r2, #9
 8002cca:	601a      	str	r2, [r3, #0]
        return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e000      	b.n	8002cd4 <_read+0x80>
    }
    return num;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf0:	605a      	str	r2, [r3, #4]
    return 0;
 8002cf2:	f04f 0300 	mov.w	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f107 070c 	add.w	r7, r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop

08002d04 <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	f107 070c 	add.w	r7, r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
 8002d24:	f640 2318 	movw	r3, #2584	; 0xa18
 8002d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d2c:	f04f 0202 	mov.w	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
    return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	f107 070c 	add.w	r7, r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
 8002d4c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d54:	f04f 020a 	mov.w	r2, #10
 8002d58:	601a      	str	r2, [r3, #0]
    return -1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f107 070c 	add.w	r7, r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
    int n;
    switch (file) {
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d002      	beq.n	8002d84 <_write+0x18>
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d022      	beq.n	8002dc8 <_write+0x5c>
 8002d82:	e043      	b.n	8002e0c <_write+0xa0>
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e018      	b.n	8002dbe <_write+0x52>
#if STDOUT_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002d8c:	bf00      	nop
 8002d8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f6      	beq.n	8002d8e <_write+0x22>
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
 8002da0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002da4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f103 0301 	add.w	r3, r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f103 0301 	add.w	r3, r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	dbe2      	blt.n	8002d8c <_write+0x20>
            while ((USART3->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);

#endif
        }
        break;
 8002dc6:	e02b      	b.n	8002e20 <_write+0xb4>
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e018      	b.n	8002e02 <_write+0x96>
#if STDERR_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
#elif  STDERR_USART == 2
            while ((USART2->ISR & USART_FLAG_TC) == (uint16_t) RESET) {
 8002dd0:	bf00      	nop
 8002dd2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002dd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f6      	beq.n	8002dd2 <_write+0x66>
            }
            USART2->TDR = (*ptr++ & (uint16_t) 0x01FF);
 8002de4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002de8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f103 0301 	add.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]

#endif
        }
        break;
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f103 0301 	add.w	r3, r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dbe2      	blt.n	8002dd0 <_write+0x64>
#elif  STDERR_USART == 3
            while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);
#endif
        }
        break;
 8002e0a:	e009      	b.n	8002e20 <_write+0xb4>
    default:
        errno = EBADF;
 8002e0c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e14:	f04f 0209 	mov.w	r2, #9
 8002e18:	601a      	str	r2, [r3, #0]
        return -1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e000      	b.n	8002e22 <_write+0xb6>
    }
    return len;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	f107 071c 	add.w	r7, r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop

08002e30 <_Z13pwm_out1_initt>:
 */

#include "pwm.h"

void pwm_out1_init(uint16_t frequency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08e      	sub	sp, #56	; 0x38
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8002e46:	88f9      	ldrh	r1, [r7, #6]
 8002e48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	461a      	mov	r2, r3
 8002e56:	f000 fa57 	bl	8003308 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 8002e84:	f04f 0360 	mov.w	r3, #96	; 0x60
 8002e88:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 8002e8a:	f04f 0301 	mov.w	r3, #1
 8002e8e:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;//25000;
 8002e90:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002e94:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 8002e9c:	f04f 0302 	mov.w	r3, #2
 8002ea0:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_4;
 8002ea8:	f04f 0310 	mov.w	r3, #16
 8002eac:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 8002eae:	f04f 0301 	mov.w	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 8002eb4:	f04f 0303 	mov.w	r3, #3
 8002eb8:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002eba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ebe:	f04f 0101 	mov.w	r1, #1
 8002ec2:	f003 fd3d 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_2); // AF2, 10:
 8002ec6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002eca:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002ece:	f04f 0104 	mov.w	r1, #4
 8002ed2:	f04f 0202 	mov.w	r2, #2
 8002ed6:	f002 fd8b 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ee2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f002 fbfc 	bl	80056e4 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002eec:	f04f 0002 	mov.w	r0, #2
 8002ef0:	f04f 0101 	mov.w	r1, #1
 8002ef4:	f003 fd78 	bl	80069e8 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 8002ef8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002efc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f00:	f006 fc26 	bl	8009750 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f0c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f10:	4619      	mov	r1, r3
 8002f12:	f004 fed5 	bl	8007cc0 <TIM_TimeBaseInit>
	TIM_OC1Init(TIM3, &j);
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f1e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f22:	4619      	mov	r1, r3
 8002f24:	f005 f8b0 	bl	8008088 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002f28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f2c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f30:	f04f 0108 	mov.w	r1, #8
 8002f34:	f005 fd5e 	bl	80089f4 <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8002f38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f40:	f04f 0101 	mov.w	r1, #1
 8002f44:	f005 f828 	bl	8007f98 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_1, TIM_CCx_Enable);
 8002f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f4c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	f04f 0201 	mov.w	r2, #1
 8002f58:	f006 f83e 	bl	8008fd8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 8002f5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f60:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f64:	f04f 0101 	mov.w	r1, #1
 8002f68:	f005 f86e 	bl	8008048 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 8002f6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f70:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f74:	f04f 0101 	mov.w	r1, #1
 8002f78:	f006 fb1c 	bl	80095b4 <TIM_GenerateEvent>
}
 8002f7c:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_Z11pwm1_outputf>:

void pwm1_output(float duty)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 8002f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002f94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa8:	ee17 3a90 	vmov	r3, s15
 8002fac:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare1(TIM3, setval);
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fb4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f005 fc15 	bl	80087e8 <TIM_SetCompare1>
}
 8002fbe:	f107 0710 	add.w	r7, r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <_Z13pwm_out2_initt>:

void pwm_out2_init(uint16_t frequency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	; 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8002fde:	88f9      	ldrh	r1, [r7, #6]
 8002fe0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	f000 f98b 	bl	8003308 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	b29b      	uxth	r3, r3
 800300a:	f103 33ff 	add.w	r3, r3, #4294967295
 800300e:	b29b      	uxth	r3, r3
 8003010:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	b29b      	uxth	r3, r3
 8003016:	f103 33ff 	add.w	r3, r3, #4294967295
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 800301c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8003020:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 8003022:	f04f 0301 	mov.w	r3, #1
 8003026:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;
 8003028:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800302c:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 8003034:	f04f 0302 	mov.w	r3, #2
 8003038:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_5;
 8003040:	f04f 0320 	mov.w	r3, #32
 8003044:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 8003046:	f04f 0301 	mov.w	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 800304c:	f04f 0303 	mov.w	r3, #3
 8003050:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003052:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003056:	f04f 0101 	mov.w	r1, #1
 800305a:	f003 fc71 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_2); // AF 2, 10:
 800305e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003062:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003066:	f04f 0105 	mov.w	r1, #5
 800306a:	f04f 0202 	mov.w	r2, #2
 800306e:	f002 fcbf 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800307a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800307e:	4619      	mov	r1, r3
 8003080:	f002 fb30 	bl	80056e4 <GPIO_Init>


	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003084:	f04f 0002 	mov.w	r0, #2
 8003088:	f04f 0101 	mov.w	r1, #1
 800308c:	f003 fcac 	bl	80069e8 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 8003090:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003094:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003098:	f006 fb5a 	bl	8009750 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 800309c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030a8:	4619      	mov	r1, r3
 80030aa:	f004 fe09 	bl	8007cc0 <TIM_TimeBaseInit>
	TIM_OC2Init(TIM3, &j);
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030ba:	4619      	mov	r1, r3
 80030bc:	f005 f878 	bl	80081b0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 80030c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030c8:	f04f 0108 	mov.w	r1, #8
 80030cc:	f005 fcae 	bl	8008a2c <TIM_OC2PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 80030d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030d8:	f04f 0101 	mov.w	r1, #1
 80030dc:	f004 ff5c 	bl	8007f98 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_2, TIM_CCx_Enable);
 80030e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030e8:	f04f 0104 	mov.w	r1, #4
 80030ec:	f04f 0201 	mov.w	r2, #1
 80030f0:	f005 ff72 	bl	8008fd8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 80030f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80030fc:	f04f 0101 	mov.w	r1, #1
 8003100:	f004 ffa2 	bl	8008048 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 8003104:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003108:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800310c:	f04f 0101 	mov.w	r1, #1
 8003110:	f006 fa50 	bl	80095b4 <TIM_GenerateEvent>
}
 8003114:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_Z11pwm2_outputf>:

void pwm2_output(float duty)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 8003124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003128:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800312c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003134:	edd7 7a01 	vldr	s15, [r7, #4]
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003140:	ee17 3a90 	vmov	r3, s15
 8003144:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare2(TIM3, setval);
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800314c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003150:	4619      	mov	r1, r3
 8003152:	f005 fb57 	bl	8008804 <TIM_SetCompare2>
}
 8003156:	f107 0710 	add.w	r7, r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop

08003160 <_Z13pwm_out3_initt>:
// PE0, TIM16:
void pwm_out3_init(uint16_t frequency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	; 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
	TIM_GenerateEvent(TIM16, TIM_EventSource_Update);
	*/

	///////////////////////////////////////////////////

	int period = 0;
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8003176:	88f9      	ldrh	r1, [r7, #6]
 8003178:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800317c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f8bf 	bl	8003308 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 80031b4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80031b8:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 80031ba:	f04f 0301 	mov.w	r3, #1
 80031be:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;
 80031c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80031c4:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	83bb      	strh	r3, [r7, #28]

	// PE0

	g.GPIO_Mode = GPIO_Mode_AF;
 80031cc:	f04f 0302 	mov.w	r3, #2
 80031d0:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_14;
 80031d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031dc:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_Level_1;//GPIO_Speed_50MHz;
 80031e4:	f04f 0301 	mov.w	r3, #1
 80031e8:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 80031ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80031ee:	f04f 0101 	mov.w	r1, #1
 80031f2:	f003 fba5 	bl	8006940 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_2); // AF 1, 2, 3, or 9 (TIM15); 1, 4 (TIM16); 1, 2, 10 (TIM2); 2, 4, 6, 9, 11, 12 (TIM1)
 80031f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031fa:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80031fe:	f04f 010e 	mov.w	r1, #14
 8003202:	f04f 0202 	mov.w	r2, #2
 8003206:	f002 fbf3 	bl	80059f0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOE, &g);
 800320a:	f107 0308 	add.w	r3, r7, #8
 800320e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003212:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003216:	4619      	mov	r1, r3
 8003218:	f002 fa64 	bl	80056e4 <GPIO_Init>


	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800321c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003220:	f04f 0101 	mov.w	r1, #1
 8003224:	f003 fbb6 	bl	8006994 <RCC_APB2PeriphClockCmd>
	TIM_InternalClockConfig(TIM1);
 8003228:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800322c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003230:	f006 fa8e 	bl	8009750 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM1, &i);
 8003234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003238:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800323c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003240:	4619      	mov	r1, r3
 8003242:	f004 fd3d 	bl	8007cc0 <TIM_TimeBaseInit>
	TIM_OC4Init(TIM1, &j);
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800324e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003252:	4619      	mov	r1, r3
 8003254:	f005 f8c0 	bl	80083d8 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8003258:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800325c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003260:	f04f 0108 	mov.w	r1, #8
 8003264:	f005 fc1c 	bl	8008aa0 <TIM_OC4PreloadConfig>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003268:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800326c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003270:	f04f 0101 	mov.w	r1, #1
 8003274:	f004 fe90 	bl	8007f98 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8003278:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800327c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003280:	f04f 0101 	mov.w	r1, #1
 8003284:	f006 f920 	bl	80094c8 <TIM_CtrlPWMOutputs>
//	TIM_CCPreloadControl(TIM1, ENABLE);

	TIM_CCxCmd(TIM1, TIM_Channel_4, TIM_CCx_Enable);
 8003288:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800328c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003290:	f04f 010c 	mov.w	r1, #12
 8003294:	f04f 0201 	mov.w	r2, #1
 8003298:	f005 fe9e 	bl	8008fd8 <TIM_CCxCmd>
	TIM_Cmd(TIM1, ENABLE);
 800329c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80032a0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80032a4:	f04f 0101 	mov.w	r1, #1
 80032a8:	f004 fece 	bl	8008048 <TIM_Cmd>
	TIM_GenerateEvent(TIM1, TIM_EventSource_Update);
 80032ac:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80032b0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80032b4:	f04f 0101 	mov.w	r1, #1
 80032b8:	f006 f97c 	bl	80095b4 <TIM_GenerateEvent>
}
 80032bc:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_Z11pwm3_outputf>:
void pwm3_output(float duty)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM1->ARR * duty);
 80032cc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80032d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80032d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80032d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare4(TIM1, setval);
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80032f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80032f8:	4619      	mov	r1, r3
 80032fa:	f005 fa9f 	bl	800883c <TIM_SetCompare4>
}
 80032fe:	f107 0710 	add.w	r7, r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <_Z15config_pwm_freqiPiS_>:

void config_pwm_freq(int frequency, int* period, int* prescaler)
{
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	b091      	sub	sp, #68	; 0x44
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	466b      	mov	r3, sp
 8003318:	461e      	mov	r6, r3
	int max = (int)((float)72000000/(float)frequency);
 800331a:	edd7 7a03 	vldr	s15, [r7, #12]
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80035c8 <_Z15config_pwm_freqiPiS_+0x2c0>
 8003326:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800332a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800332e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	int max_num = (int)sqrt(max);
 8003332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003334:	f008 f998 	bl	800b668 <__aeabi_i2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f009 f9ae 	bl	800c6a0 <sqrt>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	f008 fc8c 	bl	800bc68 <__aeabi_d2iz>
 8003350:	4603      	mov	r3, r0
 8003352:	623b      	str	r3, [r7, #32]

	int seive[max_num];
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f103 31ff 	add.w	r1, r3, #4294967295
 800335a:	61f9      	str	r1, [r7, #28]
 800335c:	4608      	mov	r0, r1
 800335e:	4602      	mov	r2, r0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f04f 0a01 	mov.w	sl, #1
 8003368:	f04f 0b00 	mov.w	fp, #0
 800336c:	eb12 020a 	adds.w	r2, r2, sl
 8003370:	eb43 030b 	adc.w	r3, r3, fp
 8003374:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 8003378:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800337c:	ea40 0909 	orr.w	r9, r0, r9
 8003380:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003384:	4608      	mov	r0, r1
 8003386:	4602      	mov	r2, r0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	f04f 0801 	mov.w	r8, #1
 8003390:	f04f 0900 	mov.w	r9, #0
 8003394:	eb12 0208 	adds.w	r2, r2, r8
 8003398:	eb43 0309 	adc.w	r3, r3, r9
 800339c:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 80033a0:	ea4f 1543 	mov.w	r5, r3, lsl #5
 80033a4:	4305      	orrs	r5, r0
 80033a6:	ea4f 1442 	mov.w	r4, r2, lsl #5
 80033aa:	460b      	mov	r3, r1
 80033ac:	f103 0301 	add.w	r3, r3, #1
 80033b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033b4:	f103 0303 	add.w	r3, r3, #3
 80033b8:	f103 0307 	add.w	r3, r3, #7
 80033bc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80033c0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80033c4:	ebad 0d03 	sub.w	sp, sp, r3
 80033c8:	466b      	mov	r3, sp
 80033ca:	f103 0303 	add.w	r3, r3, #3
 80033ce:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80033d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033d6:	61bb      	str	r3, [r7, #24]

	int startpos = 1;
 80033d8:	f04f 0301 	mov.w	r3, #1
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int testval = 1;
 80033de:	f04f 0301 	mov.w	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]

	int iter = 0;
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f0:	e00a      	b.n	8003408 <_Z15config_pwm_freqiPiS_+0x100>
	{
		seive[iter] = iter+1;
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	f103 0101 	add.w	r1, r3, #1
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int startpos = 1;
	int testval = 1;

	int iter = 0;
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	f103 0301 	add.w	r3, r3, #1
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
 8003408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	bfac      	ite	ge
 8003410:	2300      	movge	r3, #0
 8003412:	2301      	movlt	r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1eb      	bne.n	80033f2 <_Z15config_pwm_freqiPiS_+0xea>
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 800341a:	e038      	b.n	800348e <_Z15config_pwm_freqiPiS_+0x186>
	{
		testval = seive[startpos];
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	617b      	str	r3, [r7, #20]
		if(testval != -1)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d02b      	beq.n	8003486 <_Z15config_pwm_freqiPiS_+0x17e>
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 800342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003430:	f103 0301 	add.w	r3, r3, #1
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
 8003436:	e01d      	b.n	8003474 <_Z15config_pwm_freqiPiS_+0x16c>
		{
			if((seive[iter] != -1) && ((seive[iter])%testval == 0))
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d012      	beq.n	800346c <_Z15config_pwm_freqiPiS_+0x164>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	fb93 f2f2 	sdiv	r2, r3, r2
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	fb01 f202 	mul.w	r2, r1, r2
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <_Z15config_pwm_freqiPiS_+0x164>
			{
				seive[iter] = -1;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	while(startpos < max_num)
	{
		testval = seive[startpos];
		if(testval != -1)
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f103 0301 	add.w	r3, r3, #1
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
 8003474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	429a      	cmp	r2, r3
 800347a:	bfac      	ite	ge
 800347c:	2300      	movge	r3, #0
 800347e:	2301      	movlt	r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1d8      	bne.n	8003438 <_Z15config_pwm_freqiPiS_+0x130>
			{
				seive[iter] = -1;
			}
		}
		}
		++startpos;
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	f103 0301 	add.w	r3, r3, #1
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(iter = 0; iter < max_num; ++iter)
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 800348e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	429a      	cmp	r2, r3
 8003494:	bfac      	ite	ge
 8003496:	2300      	movge	r3, #0
 8003498:	2301      	movlt	r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1bd      	bne.n	800341c <_Z15config_pwm_freqiPiS_+0x114>
		++startpos;
	}

	int last_valid_iter;

	iter = 0;
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
	for(iter = 0; iter < max_num; ++iter)
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ac:	e03e      	b.n	800352c <_Z15config_pwm_freqiPiS_+0x224>
	{
		if(seive[iter] != -1)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d002      	beq.n	80034c2 <_Z15config_pwm_freqiPiS_+0x1ba>
		{
		last_valid_iter = iter;
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
 80034c0:	e030      	b.n	8003524 <_Z15config_pwm_freqiPiS_+0x21c>
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
 80034c6:	e024      	b.n	8003512 <_Z15config_pwm_freqiPiS_+0x20a>
			{
				if(seive[iter2] != -1)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d019      	beq.n	800350a <_Z15config_pwm_freqiPiS_+0x202>
				{
				seive[last_valid_iter+1] = seive[iter2];
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	f103 0201 	add.w	r2, r3, #1
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034e0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				seive[iter2] = -1;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ee:	f04f 31ff 	mov.w	r1, #4294967295
 80034f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				iter = iter2;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
				last_valid_iter += 1;
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	f103 0301 	add.w	r3, r3, #1
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
				iter2 = max_num+1;
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f103 0301 	add.w	r3, r3, #1
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
		{
		last_valid_iter = iter;
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	f103 0301 	add.w	r3, r3, #1
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
 8003512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	429a      	cmp	r2, r3
 8003518:	bfac      	ite	ge
 800351a:	2300      	movge	r3, #0
 800351c:	2301      	movlt	r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1d1      	bne.n	80034c8 <_Z15config_pwm_freqiPiS_+0x1c0>
	}

	int last_valid_iter;

	iter = 0;
	for(iter = 0; iter < max_num; ++iter)
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	f103 0301 	add.w	r3, r3, #1
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
 800352c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	429a      	cmp	r2, r3
 8003532:	bfac      	ite	ge
 8003534:	2300      	movge	r3, #0
 8003536:	2301      	movlt	r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1b7      	bne.n	80034ae <_Z15config_pwm_freqiPiS_+0x1a6>
				}
			}
		}
	}

	int i = max;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
	int clkdiv = 1;
 8003542:	f04f 0301 	mov.w	r3, #1
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
	int divisor = 1;
 8003548:	f04f 0301 	mov.w	r3, #1
 800354c:	613b      	str	r3, [r7, #16]

	while(i > 1)
 800354e:	e03e      	b.n	80035ce <_Z15config_pwm_freqiPiS_+0x2c6>
	{
	for(iter = 1; iter < max_num; ++iter)
 8003550:	f04f 0301 	mov.w	r3, #1
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
 8003556:	e02c      	b.n	80035b2 <_Z15config_pwm_freqiPiS_+0x2aa>
	{
		divisor = seive[iter];
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003560:	613b      	str	r3, [r7, #16]
		if(divisor == -1){break;}
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d030      	beq.n	80035cc <_Z15config_pwm_freqiPiS_+0x2c4>
		else
		{
		if(i%divisor == 0)
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	fb93 f2f2 	sdiv	r2, r3, r2
 8003572:	6939      	ldr	r1, [r7, #16]
 8003574:	fb01 f202 	mul.w	r2, r1, r2
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d115      	bne.n	80035aa <_Z15config_pwm_freqiPiS_+0x2a2>
			{
			i /= divisor;
 800357e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	fb92 f3f3 	sdiv	r3, r2, r3
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
			clkdiv *= divisor;
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
			if(i < 65536)
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003598:	429a      	cmp	r2, r3
 800359a:	dc06      	bgt.n	80035aa <_Z15config_pwm_freqiPiS_+0x2a2>
				{
				*period = i;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a0:	601a      	str	r2, [r3, #0]
				*prescaler = clkdiv;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e019      	b.n	80035de <_Z15config_pwm_freqiPiS_+0x2d6>
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
	{
	for(iter = 1; iter < max_num; ++iter)
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	f103 0301 	add.w	r3, r3, #1
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bfac      	ite	ge
 80035ba:	2300      	movge	r3, #0
 80035bc:	2301      	movlt	r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1c9      	bne.n	8003558 <_Z15config_pwm_freqiPiS_+0x250>
 80035c4:	e003      	b.n	80035ce <_Z15config_pwm_freqiPiS_+0x2c6>
 80035c6:	bf00      	nop
 80035c8:	4c895440 	.word	0x4c895440
	{
		divisor = seive[iter];
		if(divisor == -1){break;}
 80035cc:	bf00      	nop

	int i = max;
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bfd4      	ite	le
 80035d4:	2300      	movle	r3, #0
 80035d6:	2301      	movgt	r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1b8      	bne.n	8003550 <_Z15config_pwm_freqiPiS_+0x248>
 80035de:	46b5      	mov	sp, r6
				}
			}
		}
	}
	}
}
 80035e0:	f107 0744 	add.w	r7, r7, #68	; 0x44
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop

080035ec <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2,3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));


  if((ADCx == ADC1) || (ADCx == ADC2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fa:	d006      	beq.n	800360a <ADC_DeInit+0x1e>
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003602:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003606:	429a      	cmp	r2, r3
 8003608:	d10c      	bne.n	8003624 <ADC_DeInit+0x38>
  {
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
 800360a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800360e:	f04f 0101 	mov.w	r1, #1
 8003612:	f003 fa13 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
 8003616:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	f003 fa0d 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 8003622:	e019      	b.n	8003658 <ADC_DeInit+0x6c>
  }
  else if((ADCx == ADC3) || (ADCx == ADC4))
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800362e:	429a      	cmp	r2, r3
 8003630:	d006      	beq.n	8003640 <ADC_DeInit+0x54>
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003638:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800363c:	429a      	cmp	r2, r3
 800363e:	d10b      	bne.n	8003658 <ADC_DeInit+0x6c>
  {
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
 8003640:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003644:	f04f 0101 	mov.w	r1, #1
 8003648:	f003 f9f8 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
 800364c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	f003 f9f2 	bl	8006a3c <RCC_AHBPeriphResetCmd>
  }
}
 8003658:	f107 0708 	add.w	r7, r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f24c 0307 	movw	r3, #49159	; 0xc007
 800367c:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
 8003680:	4013      	ands	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800368c:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
 8003692:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8003698:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 800369e:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 80036a4:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 80036aa:	4313      	orrs	r3, r2
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 030f 	bic.w	r3, r3, #15
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	7f1b      	ldrb	r3, [r3, #28]
 80036ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 80036da:	f107 0714 	add.w	r7, r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f04f 0201 	mov.w	r2, #1
 800372a:	771a      	strb	r2, [r3, #28]
}
 800372c:	f107 070c 	add.w	r7, r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <ADC_InjectedInit>:
  * @param  ADC_InjectInitStruct: pointer to an ADC_InjecInitTypeDef structure that contains
  *         the configuration information for the specified ADC injected channel.
  * @retval None
  */
void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence3));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence4));
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  /* Get the ADCx JSQR value */
  tmpreg1 = ADCx->JSQR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	7a1b      	ldrb	r3, [r3, #8]
 8003758:	f103 33ff 	add.w	r3, r3, #4294967295
 800375c:	461a      	mov	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003762:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 8003768:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8003772:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	ea4f 3383 	mov.w	r3, r3, lsl #14
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 800377c:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	ea4f 5303 	mov.w	r3, r3, lsl #20
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8003786:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	ea4f 6383 	mov.w	r3, r3, lsl #26
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
  /* Write to ADCx SQR1 */
  ADCx->JSQR = tmpreg1;  
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800379a:	f107 0714 	add.w	r7, r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <ADC_InjectedStructInit>:
  * @brief  Fills each ADC_InjectedInitStruct member with its default value.
  * @param  ADC_InjectedInitStruct : pointer to an ADC_InjectedInitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;     
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
  ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                                             
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f04f 0201 	mov.w	r2, #1
 80037c2:	721a      	strb	r2, [r3, #8]
  ADC_InjectedInitStruct->ADC_InjecSequence1 = ADC_InjectedChannel_1; 
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f04f 0201 	mov.w	r2, #1
 80037ca:	60da      	str	r2, [r3, #12]
  ADC_InjectedInitStruct->ADC_InjecSequence2 = ADC_InjectedChannel_1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f04f 0201 	mov.w	r2, #1
 80037d2:	611a      	str	r2, [r3, #16]
  ADC_InjectedInitStruct->ADC_InjecSequence3 = ADC_InjectedChannel_1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f04f 0201 	mov.w	r2, #1
 80037da:	615a      	str	r2, [r3, #20]
  ADC_InjectedInitStruct->ADC_InjecSequence4 = ADC_InjectedChannel_1; 
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f04f 0201 	mov.w	r2, #1
 80037e2:	619a      	str	r2, [r3, #24]
}
 80037e4:	f107 070c 	add.w	r7, r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003806:	d006      	beq.n	8003816 <ADC_CommonInit+0x26>
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003812:	429a      	cmp	r2, r3
 8003814:	d10d      	bne.n	8003832 <ADC_CommonInit+0x42>
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
 8003816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800381a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8003828:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e00c      	b.n	800384c <ADC_CommonInit+0x5c>
  }
  else
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
 8003832:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003836:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8003844:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Clock | 
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003854:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
 800385a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	ea4f 3303 	mov.w	r3, r3, lsl #12
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003864:	431a      	orrs	r2, r3
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	7c1b      	ldrb	r3, [r3, #16]
 800386a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800386e:	4313      	orrs	r3, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387c:	d006      	beq.n	800388c <ADC_CommonInit+0x9c>
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003884:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003888:	429a      	cmp	r2, r3
 800388a:	d106      	bne.n	800389a <ADC_CommonInit+0xaa>
  {                        
    /* Write to ADC CCR */
    ADC1_2->CCR = tmpreg1;
 800388c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003890:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e005      	b.n	80038a6 <ADC_CommonInit+0xb6>
  }
  else
  {
    /* Write to ADC CCR */
    ADC3_4->CCR = tmpreg1;
 800389a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800389e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	609a      	str	r2, [r3, #8]
  }
}
 80038a6:	f107 0714 	add.w	r7, r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Clock member */
  ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_DMAMode member */
  ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	741a      	strb	r2, [r3, #16]

}
 80038e0:	f107 070c 	add.w	r7, r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	e005      	b.n	8003918 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]
  }
}
 8003918:	f107 070c 	add.w	r7, r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	f107 070c 	add.w	r7, r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop

08003944 <ADC_GetCalibrationValue>:
  * @brief  Returns the ADCx calibration value.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
uint32_t ADC_GetCalibrationValue(ADC_TypeDef* ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC calibration value */
  return (uint32_t)ADCx->CALFACT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
}
 8003952:	4618      	mov	r0, r3
 8003954:	f107 070c 	add.w	r7, r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop

08003960 <ADC_SetCalibrationValue>:
  * @brief  Sets the ADCx calibration register.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_SetCalibrationValue(ADC_TypeDef* ADCx, uint32_t ADC_Calibration)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADC calibration register value */
  ADCx->CALFACT = ADC_Calibration;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003972:	f107 070c 	add.w	r7, r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]

}
 800399e:	f107 070c 	add.w	r7, r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da03      	bge.n	80039c6 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80039be:	f04f 0301 	mov.w	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e002      	b.n	80039cc <ADC_GetCalibrationStatus+0x24>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	f107 0714 	add.w	r7, r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop

080039dc <ADC_DisableCmd>:
  * @brief  ADC Disable Command.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DisableCmd(ADC_TypeDef* ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADDIS bit */
  ADCx->CR |= ADC_CR_ADDIS;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	f107 070c 	add.w	r7, r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop

080039fc <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <ADC_GetDisableCmdStatus+0x22>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8003a16:	f04f 0301 	mov.w	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e002      	b.n	8003a24 <ADC_GetDisableCmdStatus+0x28>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	f107 0714 	add.w	r7, r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	e005      	b.n	8003a6c <ADC_VoltageRegulatorCmd+0x38>
  }
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
  }
}
 8003a6c:	f107 070c 	add.w	r7, r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop

08003a78 <ADC_SelectDifferentialMode>:
  *     @arg ADC_Channel_14: ADC Channel14 selected
  * @note : Channel 15, 16 and 17 are fixed to single-ended inputs mode.
  * @retval None
  */
void ADC_SelectDifferentialMode(ADC_TypeDef* ADCx, uint8_t ADC_Channel, FunctionalState NewState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	460a      	mov	r2, r1
 8003a84:	70fa      	strb	r2, [r7, #3]
 8003a86:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_ADC_DIFFCHANNEL(ADC_Channel)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <ADC_SelectDifferentialMode+0x30>
  {
    /* Set the DIFSEL bit */
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f04f 0101 	mov.w	r1, #1
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003aa6:	e00d      	b.n	8003ac4 <ADC_SelectDifferentialMode+0x4c>
  }
  else
  {
    /* Reset the DIFSEL bit */
   ADCx->DIFSEL &= ~(uint32_t)(1 << ADC_Channel);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f04f 0101 	mov.w	r1, #1
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	ea6f 0303 	mvn.w	r3, r3
 8003abc:	401a      	ands	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
}
 8003ac4:	f107 070c 	add.w	r7, r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <ADC_SelectQueueOfContextMode>:
  * @param  NewState: new state of the Queue Of Context Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SelectQueueOfContextMode(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <ADC_SelectQueueOfContextMode+0x20>
  {
    /* Set the JQM bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e005      	b.n	8003afc <ADC_SelectQueueOfContextMode+0x2c>
  }
  else
  {
    /* Reset the JQM bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_JQM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
  }
}
 8003afc:	f107 070c 	add.w	r7, r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop

08003b08 <ADC_AutoDelayCmd>:
  * @param  NewState: new state of the ADC Delayed Conversion Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoDelayCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <ADC_AutoDelayCmd+0x20>
  {
    /* Set the AUTDLY bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e005      	b.n	8003b34 <ADC_AutoDelayCmd+0x2c>
  }
  else
  {
    /* Reset the AUTDLY bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_AUTDLY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	60da      	str	r2, [r3, #12]
  }
}
 8003b34:	f107 070c 	add.w	r7, r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= ~(uint32_t)(ADC_CFGR_AWD1SGL|ADC_CFGR_AWD1EN|ADC_CFGR_JAWD1EN);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
}
 8003b6c:	f107 0714 	add.w	r7, r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <ADC_AnalogWatchdog1ThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                         uint16_t LowThreshold)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	460a      	mov	r2, r1
 8003b84:	807a      	strh	r2, [r7, #2]
 8003b86:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_HT1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8003b90:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Set the ADCx low threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_LT1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003bb0:	f023 030f 	bic.w	r3, r3, #15
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= LowThreshold;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	f107 070c 	add.w	r7, r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop

08003bd0 <ADC_AnalogWatchdog2ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	460a      	mov	r2, r1
 8003bdc:	70fa      	strb	r2, [r7, #3]
 8003bde:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADCx high threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_HT2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the ADCx low threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_LT2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= LowThreshold;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c0c:	78bb      	ldrb	r3, [r7, #2]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c14:	f107 070c 	add.w	r7, r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <ADC_AnalogWatchdog3ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	70fa      	strb	r2, [r7, #3]
 8003c2e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCx high threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_HT3;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the ADCx low threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_LT3;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= LowThreshold;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5c:	78bb      	ldrb	r3, [r7, #2]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c64:	f107 070c 	add.w	r7, r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <ADC_AnalogWatchdog1SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog1SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_CFGR_AWD1CH;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)((uint32_t)ADC_Channel << 26);
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	60da      	str	r2, [r3, #12]
}
 8003ca2:	f107 0714 	add.w	r7, r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <ADC_AnalogWatchdog2SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD2CR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f04f 0301 	mov.w	r3, #1
 8003ccc:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f04f 0201 	mov.w	r2, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD2CR |= tmpreg;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8003cf4:	f107 0714 	add.w	r7, r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop

08003d00 <ADC_AnalogWatchdog3SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD3CR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f04f 0301 	mov.w	r3, #1
 8003d20:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f04f 0201 	mov.w	r2, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD3CR |= tmpreg;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003d48:	f107 0714 	add.w	r7, r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop

08003d54 <ADC_TempSensorCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d66:	d006      	beq.n	8003d76 <ADC_TempSensorCmd+0x22>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d6e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d11c      	bne.n	8003db0 <ADC_TempSensorCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00c      	beq.n	8003d96 <ADC_TempSensorCmd+0x42>
    {
      /* Enable the temperature sensor channel*/
      ADC1_2->CCR |= ADC12_CCR_TSEN;
 8003d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d80:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d88:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003d8c:	6892      	ldr	r2, [r2, #8]
 8003d8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d92:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003d94:	e028      	b.n	8003de8 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_TSEN;
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
 8003d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d9a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003da2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003da6:	6892      	ldr	r2, [r2, #8]
 8003da8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003dac:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003dae:	e01b      	b.n	8003de8 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <ADC_TempSensorCmd+0x7c>
    {
      /* Enable the temperature sensor channel*/
      ADC3_4->CCR |= ADC34_CCR_TSEN;
 8003db6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003dba:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003dc2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	e00b      	b.n	8003de8 <ADC_TempSensorCmd+0x94>
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_TSEN;
 8003dd0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003dd4:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ddc:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003de6:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003de8:	f107 070c 	add.w	r7, r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e06:	d006      	beq.n	8003e16 <ADC_VrefintCmd+0x22>
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e0e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d11c      	bne.n	8003e50 <ADC_VrefintCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <ADC_VrefintCmd+0x42>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8003e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e20:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003e28:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e32:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003e34:	e028      	b.n	8003e88 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8003e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e3a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003e42:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003e46:	6892      	ldr	r2, [r2, #8]
 8003e48:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003e4c:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003e4e:	e01b      	b.n	8003e88 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <ADC_VrefintCmd+0x7c>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8003e56:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e5a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e62:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003e66:	6892      	ldr	r2, [r2, #8]
 8003e68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	e00b      	b.n	8003e88 <ADC_VrefintCmd+0x94>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8003e70:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e74:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e7c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003e86:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003e88:	f107 070c 	add.w	r7, r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <ADC_VbatCmd>:
  * @param  NewState: new state of the Vbat.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VbatCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d006      	beq.n	8003eb6 <ADC_VbatCmd+0x22>
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eae:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11c      	bne.n	8003ef0 <ADC_VbatCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00c      	beq.n	8003ed6 <ADC_VbatCmd+0x42>
    {
      /* Enable the Vbat channel*/
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
 8003ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ec0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003ec4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ec8:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ed2:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003ed4:	e028      	b.n	8003f28 <ADC_VbatCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
 8003ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eda:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003ede:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ee2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003eec:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003eee:	e01b      	b.n	8003f28 <ADC_VbatCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <ADC_VbatCmd+0x7c>
    {
      /* Enable the Vbat channel*/
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
 8003ef6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003efa:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003efe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f02:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003f06:	6892      	ldr	r2, [r2, #8]
 8003f08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	e00b      	b.n	8003f28 <ADC_VbatCmd+0x94>
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VBATEN;
 8003f10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003f14:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003f18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f1c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f26:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003f28:	f107 070c 	add.w	r7, r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	70f9      	strb	r1, [r7, #3]
 8003f3e:	70ba      	strb	r2, [r7, #2]
 8003f40:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8003f4e:	78bb      	ldrb	r3, [r7, #2]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d827      	bhi.n	8003fa4 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8003f5a:	78ba      	ldrb	r2, [r7, #2]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f68:	f04f 021f 	mov.w	r2, #31
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	ea6f 0303 	mvn.w	r3, r3
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8003f7e:	78f9      	ldrb	r1, [r7, #3]
 8003f80:	78ba      	ldrb	r2, [r7, #2]
 8003f82:	4613      	mov	r3, r2
 8003f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa2:	e088      	b.n	80040b6 <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8003fa4:	78bb      	ldrb	r3, [r7, #2]
 8003fa6:	2b09      	cmp	r3, #9
 8003fa8:	d82b      	bhi.n	8004002 <ADC_RegularChannelConfig+0xce>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8003fb0:	78ba      	ldrb	r2, [r7, #2]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fb8:	189b      	adds	r3, r3, r2
 8003fba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fbe:	f1a3 031e 	sub.w	r3, r3, #30
 8003fc2:	f04f 021f 	mov.w	r2, #31
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	ea6f 0303 	mvn.w	r3, r3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8003fd8:	78f9      	ldrb	r1, [r7, #3]
 8003fda:	78ba      	ldrb	r2, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fe8:	f1a3 031e 	sub.w	r3, r3, #30
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8004000:	e059      	b.n	80040b6 <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8004002:	78bb      	ldrb	r3, [r7, #2]
 8004004:	2b0e      	cmp	r3, #14
 8004006:	d82b      	bhi.n	8004060 <ADC_RegularChannelConfig+0x12c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 800400e:	78ba      	ldrb	r2, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004016:	189b      	adds	r3, r3, r2
 8004018:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800401c:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 8004020:	f04f 021f 	mov.w	r2, #31
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	ea6f 0303 	mvn.w	r3, r3
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8004036:	78f9      	ldrb	r1, [r7, #3]
 8004038:	78ba      	ldrb	r2, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004040:	189b      	adds	r3, r3, r2
 8004042:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004046:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
 800405e:	e02a      	b.n	80040b6 <ADC_RegularChannelConfig+0x182>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8004066:	78ba      	ldrb	r2, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800406e:	189b      	adds	r3, r3, r2
 8004070:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004074:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 8004078:	f04f 021f 	mov.w	r2, #31
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	ea6f 0303 	mvn.w	r3, r3
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 800408e:	78f9      	ldrb	r1, [r7, #3]
 8004090:	78ba      	ldrb	r2, [r7, #2]
 8004092:	4613      	mov	r3, r2
 8004094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004098:	189b      	adds	r3, r3, r2
 800409a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800409e:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d927      	bls.n	800410c <ADC_RegularChannelConfig+0x1d8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4613      	mov	r3, r2
 80040c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f1a3 031e 	sub.w	r3, r3, #30
 80040d0:	f04f 0207 	mov.w	r2, #7
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	ea6f 0303 	mvn.w	r3, r3
 80040e4:	401a      	ands	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	7878      	ldrb	r0, [r7, #1]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	4613      	mov	r3, r2
 80040f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	f1a3 031e 	sub.w	r3, r3, #30
 80040fe:	fa00 f303 	lsl.w	r3, r0, r3
 8004102:	ea41 0203 	orr.w	r2, r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	619a      	str	r2, [r3, #24]
 800410a:	e024      	b.n	8004156 <ADC_RegularChannelConfig+0x222>

  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f103 32ff 	add.w	r2, r3, #4294967295
 8004118:	4613      	mov	r3, r2
 800411a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f04f 0238 	mov.w	r2, #56	; 0x38
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	ea6f 0303 	mvn.w	r3, r3
 8004134:	401a      	ands	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6959      	ldr	r1, [r3, #20]
 800413e:	7878      	ldrb	r0, [r7, #1]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	4613      	mov	r3, r2
 8004144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004148:	189b      	adds	r3, r3, r2
 800414a:	fa00 f303 	lsl.w	r3, r0, r3
 800414e:	ea41 0203 	orr.w	r2, r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	615a      	str	r2, [r3, #20]
  }
}
 8004156:	f107 0714 	add.w	r7, r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <ADC_RegularChannelSequencerLengthConfig>:
  * @param  SequenceLength: The Regular sequence length. This parameter must be between 1 to 16.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_RegularChannelSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t SequencerLength)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Configure the ADC sequence lenght */  
  ADCx->SQR1 &= ~(uint32_t)ADC_SQR1_L;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f023 020f 	bic.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  ADCx->SQR1 |= (uint32_t)(SequencerLength - 1);   
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004188:	f107 070c 	add.w	r7, r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <ADC_ExternalTriggerConfig>:
  *     @arg ADC_ExternalTrigEventEdge_FallingEdge: Hardware trigger detection on the falling edge
  *     @arg ADC_ExternalTrigEventEdge_BothEdge: Hardware trigger detection on both the rising and falling edges	
  * @retval None
  */
void ADC_ExternalTriggerConfig(ADC_TypeDef* ADCx, uint16_t ADC_ExternalTrigConvEvent, uint16_t ADC_ExternalTrigEventEdge)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	460a      	mov	r2, r1
 80041a0:	807a      	strh	r2, [r7, #2]
 80041a2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_TRIG(ADC_ExternalTrigConvEvent));
  assert_param(IS_EXTERNALTRIG_EDGE(ADC_ExternalTrigEventEdge));

  /* Disable the selected ADC conversion on external event */
  ADCx->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
  ADCx->CFGR |= (uint32_t)(ADC_ExternalTrigEventEdge | ADC_ExternalTrigConvEvent);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	8839      	ldrh	r1, [r7, #0]
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	430b      	orrs	r3, r1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]
}
 80041c2:	f107 070c 	add.w	r7, r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	f107 070c 	add.w	r7, r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <ADC_GetStartConversionStatus>:
  * @brief  Gets the selected ADC start conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start conversion (SET or RESET).
  */
FlagStatus ADC_GetStartConversionStatus(ADC_TypeDef* ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of ADSTART bit */
  if ((ADCx->CR & ADC_CR_ADSTART) != (uint32_t)RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <ADC_GetStartConversionStatus+0x22>
  {
    /* ADSTART bit is set */
    bitstatus = SET;
 8004206:	f04f 0301 	mov.w	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e002      	b.n	8004214 <ADC_GetStartConversionStatus+0x28>
  }
  else
  {
    /* ADSTART bit is reset */
    bitstatus = RESET;
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADSTART bit status */
  return  bitstatus;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	f107 0714 	add.w	r7, r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <ADC_StopConversion>:
  * @brief  Stops the selected ADC ongoing conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopConversion(ADC_TypeDef* ADCx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTP bit */
   ADCx->CR |= ADC_CR_ADSTP;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f043 0210 	orr.w	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	f107 070c 	add.w	r7, r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop

08004244 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CFGR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004270:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 17;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	f107 0714 	add.w	r7, r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_DISCEN;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	e005      	b.n	80042bc <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_DISCEN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
  }
}
 80042bc:	f107 070c 	add.w	r7, r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	b29b      	uxth	r3, r3
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	f107 070c 	add.w	r7, r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <ADC_GetDualModeConversionValue>:
  * @note   In dual mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain the regular data of the Master ADC.
  *           Data[31:16]: these bits contain the regular data of the Slave ADC.           
  */
uint32_t ADC_GetDualModeConversionValue(ADC_TypeDef* ADCx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if((ADCx == ADC1) || (ADCx== ADC2))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f8:	d006      	beq.n	8004308 <ADC_GetDualModeConversionValue+0x24>
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004300:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004304:	429a      	cmp	r2, r3
 8004306:	d106      	bne.n	8004316 <ADC_GetDualModeConversionValue+0x32>
  {
    /* Get the dual mode conversion value */
    tmpreg1 = ADC1_2->CDR;
 8004308:	f44f 7340 	mov.w	r3, #768	; 0x300
 800430c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	e005      	b.n	8004322 <ADC_GetDualModeConversionValue+0x3e>
  }
  else
  {	
    /* Get the dual mode conversion value */
    tmpreg1 = ADC3_4->CDR;
 8004316:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800431a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60fb      	str	r3, [r7, #12]
  }
  /* Return the dual mode conversion value */
  return (uint32_t) tmpreg1;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	f107 0714 	add.w	r7, r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <ADC_SetChannelOffset1>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset1(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	460a      	mov	r2, r1
 800433c:	70fa      	strb	r2, [r7, #3]
 800433e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1_CH;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
  ADCx->OFR1 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the data offset */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004364:	f023 030f 	bic.w	r3, r3, #15
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6613      	str	r3, [r2, #96]	; 0x60
  ADCx->OFR1 |= (uint32_t)Offset;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004370:	883b      	ldrh	r3, [r7, #0]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004378:	f107 070c 	add.w	r7, r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <ADC_SetChannelOffset2>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset2(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	460a      	mov	r2, r1
 8004390:	70fa      	strb	r2, [r7, #3]
 8004392:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2_CH;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004398:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	665a      	str	r2, [r3, #100]	; 0x64
  ADCx->OFR2 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	ea4f 6383 	mov.w	r3, r3, lsl #26
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the data offset */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80043b8:	f023 030f 	bic.w	r3, r3, #15
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6653      	str	r3, [r2, #100]	; 0x64
  ADCx->OFR2 |= (uint32_t)Offset;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043c4:	883b      	ldrh	r3, [r7, #0]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 80043cc:	f107 070c 	add.w	r7, r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <ADC_SetChannelOffset3>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset3(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	460a      	mov	r2, r1
 80043e4:	70fa      	strb	r2, [r7, #3]
 80043e6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3_CH;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	669a      	str	r2, [r3, #104]	; 0x68
  ADCx->OFR3 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	ea4f 6383 	mov.w	r3, r3, lsl #26
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the data offset */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004408:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800440c:	f023 030f 	bic.w	r3, r3, #15
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6693      	str	r3, [r2, #104]	; 0x68
  ADCx->OFR3 |= (uint32_t)Offset;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004418:	883b      	ldrh	r3, [r7, #0]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004420:	f107 070c 	add.w	r7, r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop

0800442c <ADC_SetChannelOffset4>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset4(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	460a      	mov	r2, r1
 8004438:	70fa      	strb	r2, [r7, #3]
 800443a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4_CH;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004440:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	66da      	str	r2, [r3, #108]	; 0x6c
  ADCx->OFR4 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Set the data offset */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	66d3      	str	r3, [r2, #108]	; 0x6c
  ADCx->OFR4 |= (uint32_t)Offset;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004474:	f107 070c 	add.w	r7, r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <ADC_ChannelOffset1Cmd>:
  * @param  NewState: new state of the ADCx offset1.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset1Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <ADC_ChannelOffset1Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	661a      	str	r2, [r3, #96]	; 0x60
 800449e:	e005      	b.n	80044ac <ADC_ChannelOffset1Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR1 &= ~(ADC_OFR1_OFFSET1_EN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 80044ac:	f107 070c 	add.w	r7, r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop

080044b8 <ADC_ChannelOffset2Cmd>:
  * @param  NewState: new state of the ADCx offset2.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset2Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <ADC_ChannelOffset2Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
 80044d6:	e005      	b.n	80044e4 <ADC_ChannelOffset2Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR2 &= ~(ADC_OFR2_OFFSET2_EN);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80044e4:	f107 070c 	add.w	r7, r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <ADC_ChannelOffset3Cmd>:
  * @param  NewState: new state of the ADCx offset3.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset3Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <ADC_ChannelOffset3Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004506:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	669a      	str	r2, [r3, #104]	; 0x68
 800450e:	e005      	b.n	800451c <ADC_ChannelOffset3Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR3 &= ~(ADC_OFR3_OFFSET3_EN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004514:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800451c:	f107 070c 	add.w	r7, r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <ADC_ChannelOffset4Cmd>:
  * @param  NewState: new state of the ADCx offset4.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset4Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <ADC_ChannelOffset4Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	66da      	str	r2, [r3, #108]	; 0x6c
 8004546:	e005      	b.n	8004554 <ADC_ChannelOffset4Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR4 &= ~(ADC_OFR4_OFFSET4_EN);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004554:	f107 070c 	add.w	r7, r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop

08004560 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e005      	b.n	800458c <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 0201 	bic.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]
  }
}
 800458c:	f107 070c 	add.w	r7, r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <ADC_DMAConfig>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMAConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMAMode)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));

  /* Set or reset the DMACFG bit */
   ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 0202 	bic.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
   ADCx->CFGR |= ADC_DMAMode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
}
 80045ba:	f107 070c 	add.w	r7, r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <ADC_InjectedChannelSampleTimeConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelSampleTimeConfig(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint8_t ADC_SampleTime)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	460a      	mov	r2, r1
 80045d0:	70fa      	strb	r2, [r7, #3]
 80045d2:	70bb      	strb	r3, [r7, #2]
  uint32_t tmpreg1 = 0;
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Channel sampling configuration */
  /* if ADC_InjectedChannel_10 ... ADC_InjectedChannel_18 is selected */
  if (ADC_InjectedChannel > ADC_InjectedChannel_9)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b09      	cmp	r3, #9
 80045de:	d924      	bls.n	800462a <ADC_InjectedChannelSampleTimeConfig+0x66>
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR2_SMP10 << (3 * (ADC_InjectedChannel - 10));
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	4613      	mov	r3, r2
 80045e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	f1a3 031e 	sub.w	r3, r3, #30
 80045ee:	f04f 0207 	mov.w	r2, #7
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg1;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	ea6f 0303 	mvn.w	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel - 10));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6999      	ldr	r1, [r3, #24]
 800460c:	78b8      	ldrb	r0, [r7, #2]
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	4613      	mov	r3, r2
 8004612:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004616:	189b      	adds	r3, r3, r2
 8004618:	f1a3 031e 	sub.w	r3, r3, #30
 800461c:	fa00 f303 	lsl.w	r3, r0, r3
 8004620:	ea41 0203 	orr.w	r2, r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
 8004628:	e021      	b.n	800466e <ADC_InjectedChannelSampleTimeConfig+0xaa>

  }
  else /* ADC_InjectedChannel include in ADC_InjectedChannel_[0..9] */
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR1_SMP1 << (3 * (ADC_InjectedChannel - 1));
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004630:	4613      	mov	r3, r2
 8004632:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004636:	189b      	adds	r3, r3, r2
 8004638:	f04f 0238 	mov.w	r2, #56	; 0x38
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	ea6f 0303 	mvn.w	r3, r3
 800464c:	401a      	ands	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	78b8      	ldrb	r0, [r7, #2]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	4613      	mov	r3, r2
 800465c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004660:	189b      	adds	r3, r3, r2
 8004662:	fa00 f303 	lsl.w	r3, r0, r3
 8004666:	ea41 0203 	orr.w	r2, r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	615a      	str	r2, [r3, #20]
  }  
}
 800466e:	f107 0714 	add.w	r7, r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <ADC_StartInjectedConversion>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_StartInjectedConversion(ADC_TypeDef* ADCx)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for injected group on external event and start the selected
     ADC injected conversion */
  ADCx->CR |= ADC_CR_JADSTART;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f043 0208 	orr.w	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	f107 070c 	add.w	r7, r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <ADC_StopInjectedConversion>:
  * @brief  Stops the selected ADC ongoing injected conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopInjectedConversion(ADC_TypeDef* ADCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the JADSTP bit */
   ADCx->CR |= ADC_CR_JADSTP;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	f107 070c 	add.w	r7, r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop

080046b8 <ADC_GetStartInjectedConversionStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetStartInjectedConversionStatus(ADC_TypeDef* ADCx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JADSTART bit */
  if ((ADCx->CR & ADC_CR_JADSTART) != (uint32_t)RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <ADC_GetStartInjectedConversionStatus+0x22>
  {
    /* JADSTART bit is set */
    bitstatus = SET;
 80046d2:	f04f 0301 	mov.w	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e002      	b.n	80046e0 <ADC_GetStartInjectedConversionStatus+0x28>
  }
  else
  {
    /* JADSTART bit is reset */
    bitstatus = RESET;
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JADSTART bit status */
  return  bitstatus;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	f107 0714 	add.w	r7, r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop

080046f0 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CFGR |= ADC_CFGR_JAUTO;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e005      	b.n	800471c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CFGR &= ~ADC_CFGR_JAUTO;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
  }
}
 800471c:	f107 070c 	add.w	r7, r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	e005      	b.n	8004754 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CFGR &= ~ADC_CFGR_JDISCEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]
  }
}
 8004754:	f107 070c 	add.w	r7, r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop

08004760 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedSequence_3: Injected Sequence3 selected
  *     @arg ADC_InjectedSequence_4: Injected Sequence4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedSequence)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_SEQUENCE(ADC_InjectedSequence));

  tmp = (uint32_t)ADCx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]
  tmp += ((ADC_InjectedSequence - 1 )<< 2) + JDR_Offset;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f103 33ff 	add.w	r3, r3, #4294967295
 800477c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004780:	461a      	mov	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800478a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
}
 8004792:	4618      	mov	r0, r3
 8004794:	f107 0714 	add.w	r7, r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop

080047a0 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <ADC_ITConfig+0x22>
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	e007      	b.n	80047d2 <ADC_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	ea6f 0303 	mvn.w	r3, r3
 80047cc:	401a      	ands	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]
  }
}
 80047d2:	f107 0714 	add.w	r7, r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <ADC_GetFlagStatus+0x24>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80047f8:	f04f 0301 	mov.w	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e002      	b.n	8004806 <ADC_GetFlagStatus+0x2a>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	f107 0714 	add.w	r7, r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	f107 070c 	add.w	r7, r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <ADC_GetCommonFlagStatus>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetCommonFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  FlagStatus bitstatus = RESET;
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d006      	beq.n	800485c <ADC_GetCommonFlagStatus+0x2c>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004854:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004858:	429a      	cmp	r2, r3
 800485a:	d106      	bne.n	800486a <ADC_GetCommonFlagStatus+0x3a>
  {
    tmpreg1 = ADC1_2->CSR;
 800485c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004860:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e005      	b.n	8004876 <ADC_GetCommonFlagStatus+0x46>
  }
  else
  {
    tmpreg1 = ADC3_4->CSR;
 800486a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800486e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
  }  
  /* Check the status of the specified ADC flag */
  if ((tmpreg1 & ADC_FLAG) != (uint32_t)RESET)
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <ADC_GetCommonFlagStatus+0x58>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8004880:	f04f 0301 	mov.w	r3, #1
 8004884:	72fb      	strb	r3, [r7, #11]
 8004886:	e002      	b.n	800488e <ADC_GetCommonFlagStatus+0x5e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800488e:	7afb      	ldrb	r3, [r7, #11]
}
 8004890:	4618      	mov	r0, r3
 8004892:	f107 0714 	add.w	r7, r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <ADC_ClearCommonFlag>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearCommonFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ac:	d006      	beq.n	80048bc <ADC_ClearCommonFlag+0x20>
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b4:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d10c      	bne.n	80048d6 <ADC_ClearCommonFlag+0x3a>
  {
    /* Clear the selected ADC flags */
    ADC1_2->CSR |= (uint32_t)ADC_FLAG;
 80048bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048c0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80048c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80048c8:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80048cc:	6811      	ldr	r1, [r2, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e00b      	b.n	80048ee <ADC_ClearCommonFlag+0x52>
  }
  else
  {
    /* Clear the selected ADC flags */
    ADC3_4->CSR |= (uint32_t)ADC_FLAG;
 80048d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80048da:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80048de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048e2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80048e6:	6811      	ldr	r1, [r2, #0]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
  }  
}
 80048ee:	f107 070c 	add.w	r7, r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source 
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	81bb      	strh	r3, [r7, #12]
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
   
  itstatus = ADCx->ISR & ADC_IT;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	b29a      	uxth	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	4013      	ands	r3, r2
 8004920:	81bb      	strh	r3, [r7, #12]
  
  itenable = ADCx->IER & ADC_IT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b29a      	uxth	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	4013      	ands	r3, r2
 800492e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint32_t)RESET) && (itenable != (uint32_t)RESET))
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d006      	beq.n	8004944 <ADC_GetITStatus+0x4c>
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <ADC_GetITStatus+0x4c>
  {
    bitstatus = SET;
 800493c:	f04f 0301 	mov.w	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e002      	b.n	800494a <ADC_GetITStatus+0x52>
  }
  else
  {
    bitstatus = RESET;
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	f107 0714 	add.w	r7, r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Clear the selected ADC interrupt pending bit */
  ADCx->ISR |= (uint32_t)ADC_IT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	f107 070c 	add.w	r7, r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <COMP_DeInit>:
  *          to select the COMP peripheral.
  * @param  None
  * @retval None
  */
void COMP_DeInit(uint32_t COMP_Selection)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /*!< Set COMP_CSR register to reset value */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) = ((uint32_t)0x00000000);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	f04f 031c 	mov.w	r3, #28
 8004986:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800498a:	18d3      	adds	r3, r2, r3
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	f107 070c 	add.w	r7, r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <COMP_Init>:
  *           - COMP_Hysteresis configures COMP hysteresis value
  *           - COMP_Mode configures COMP power mode
  * @retval None
  */
void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_COMP_OUTPUT_POL(COMP_InitStruct->COMP_OutputPol));
  assert_param(IS_COMP_HYSTERESIS(COMP_InitStruct->COMP_Hysteresis));
  assert_param(IS_COMP_MODE(COMP_InitStruct->COMP_Mode));

  /*!< Get the COMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (COMP_BASE + COMP_Selection);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	f04f 031c 	mov.w	r3, #28
 80049b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049b6:	18d3      	adds	r3, r2, r3
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

  /*!< Clear the COMP1SW1, COMPxINSEL, COMPxOUTSEL, COMPxPOL, COMPxHYST and COMPxMODE bits */
  tmpreg &= (uint32_t) (COMP_CSR_CLEAR_MASK);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80049d2:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	431a      	orrs	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80049e4:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80049ea:	4313      	orrs	r3, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);

  /*!< Write to COMPx_CSR register */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) = tmpreg;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	f04f 031c 	mov.w	r3, #28
 80049f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049fc:	18d3      	adds	r3, r2, r3
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	f107 0714 	add.w	r7, r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <COMP_StructInit>:
  * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
  COMP_InitStruct->COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
  COMP_InitStruct->COMP_Output = COMP_Output_None;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  COMP_InitStruct->COMP_BlankingSrce = COMP_BlankingSrce_None;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	60da      	str	r2, [r3, #12]
  COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]
  COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f04f 020c 	mov.w	r2, #12
 8004a4a:	619a      	str	r2, [r3, #24]
}
 8004a4c:	f107 070c 	add.w	r7, r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <COMP_Cmd>:
  *         When disabled, the comparator doesn't perform comparison and the 
  *                        output level is low.
  * @retval None
  */
void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <COMP_Cmd+0x36>
  {
    /* Enable the selected COMPx peripheral */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMPxEN);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	f04f 031c 	mov.w	r3, #28
 8004a70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	f04f 031c 	mov.w	r3, #28
 8004a7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a82:	18cb      	adds	r3, r1, r3
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e010      	b.n	8004ab0 <COMP_Cmd+0x58>
  }
  else
  {
    /* Disable the selected COMP peripheral  */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMPxEN);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f04f 031c 	mov.w	r3, #28
 8004a94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	f04f 031c 	mov.w	r3, #28
 8004aa2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004aa6:	18cb      	adds	r3, r1, r3
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
  }
}
 8004ab0:	f107 070c 	add.w	r7, r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop

08004abc <COMP_SwitchCmd>:
  *     ENABLE so the SW1 is closed; PA1 is connected to PA4
  *     or DISABLE so the SW1 switch is open; PA1 is disconnected from PA4
  * @retval None
  */
void COMP_SwitchCmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d011      	beq.n	8004af2 <COMP_SwitchCmd+0x36>
  {
    /* Close SW1 switch */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMP1SW1);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f04f 031c 	mov.w	r3, #28
 8004ad4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	f04f 031c 	mov.w	r3, #28
 8004ae2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ae6:	18cb      	adds	r3, r1, r3
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e010      	b.n	8004b14 <COMP_SwitchCmd+0x58>
  }
  else
  {
    /* Open SW1 switch */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMP1SW1);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	f04f 031c 	mov.w	r3, #28
 8004af8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004afc:	18d3      	adds	r3, r2, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	f04f 031c 	mov.w	r3, #28
 8004b06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b0a:	18cb      	adds	r3, r1, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 0302 	bic.w	r3, r3, #2
 8004b12:	6013      	str	r3, [r2, #0]
  }
}
 8004b14:	f107 070c 	add.w	r7, r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <COMP_GetOutputLevel>:
  *          to select the COMP peripheral.
  * @retval Returns the selected comparator output level: low or high.
  *       
  */
uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t compout = 0x0;
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Check if selected comparator output is high */
  if ((*(__IO uint32_t *) (COMP_BASE + COMP_Selection) & (COMP_CSR_COMPxOUT)) != 0)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	f04f 031c 	mov.w	r3, #28
 8004b34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <COMP_GetOutputLevel+0x2c>
  {
    compout = COMP_OutputLevel_High;
 8004b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e002      	b.n	8004b52 <COMP_GetOutputLevel+0x32>
  }
  else
  {
    compout = COMP_OutputLevel_Low;
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  /* Return the comparator output level */
  return (uint32_t)(compout);
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	f107 0714 	add.w	r7, r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <COMP_WindowCmd>:
  *        When enbaled, COMPx and COMPx-1 non inverting inputs are connected together.
  *        When disabled, COMPx and COMPx-1 non inverting inputs are disconnected.
  * @retval None
  */
void COMP_WindowCmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_COMP_WINDOW(COMP_Selection));
  
  if (NewState != DISABLE)
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <COMP_WindowCmd+0x36>
  {
    /* Enable the window mode */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) COMP_CSR_COMPxWNDWEN;
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f04f 031c 	mov.w	r3, #28
 8004b78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	f04f 031c 	mov.w	r3, #28
 8004b86:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b8a:	18cb      	adds	r3, r1, r3
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e010      	b.n	8004bb8 <COMP_WindowCmd+0x58>
  }
  else
  {
    /* Disable the window mode */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMPxWNDWEN);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	f04f 031c 	mov.w	r3, #28
 8004b9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	f04f 031c 	mov.w	r3, #28
 8004baa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004bae:	18cb      	adds	r3, r1, r3
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb6:	6013      	str	r3, [r2, #0]
  }
}
 8004bb8:	f107 070c 	add.w	r7, r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <COMP_LockConfig>:
  *          This parameter can be COMP_Selection_COMPx where x can be 1 to 7
  *          to select the COMP peripheral.
  * @retval None
  */
void COMP_LockConfig(uint32_t COMP_Selection)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Set the lock bit corresponding to selected comparator */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMPxLOCK);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	f04f 031c 	mov.w	r3, #28
 8004bd2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	f04f 031c 	mov.w	r3, #28
 8004be0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004be4:	18cb      	adds	r3, r1, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	6013      	str	r3, [r2, #0]
}
 8004bee:	f107 070c 	add.w	r7, r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	f04f 0308 	mov.w	r3, #8
 8004c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d10c      	bne.n	8004c56 <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c4c:	6852      	ldr	r2, [r2, #4]
 8004c4e:	f042 020f 	orr.w	r2, r2, #15
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	e0da      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	f04f 031c 	mov.w	r3, #28
 8004c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10c      	bne.n	8004c7e <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c74:	6852      	ldr	r2, [r2, #4]
 8004c76:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e0c6      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004c84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d10c      	bne.n	8004ca6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c9c:	6852      	ldr	r2, [r2, #4]
 8004c9e:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e0b2      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	f04f 0344 	mov.w	r3, #68	; 0x44
 8004cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d10c      	bne.n	8004cce <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	e09e      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	f04f 0358 	mov.w	r3, #88	; 0x58
 8004cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d10c      	bne.n	8004cf6 <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004cec:	6852      	ldr	r2, [r2, #4]
 8004cee:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	e08a      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	f04f 036c 	mov.w	r3, #108	; 0x6c
 8004cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d10c      	bne.n	8004d1e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d14:	6852      	ldr	r2, [r2, #4]
 8004d16:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	e076      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d10c      	bne.n	8004d46 <DMA_DeInit+0x14e>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	e062      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d10c      	bne.n	8004d6e <DMA_DeInit+0x176>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d64:	6852      	ldr	r2, [r2, #4]
 8004d66:	f042 020f 	orr.w	r2, r2, #15
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	e04e      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	f240 431c 	movw	r3, #1052	; 0x41c
 8004d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d10c      	bne.n	8004d96 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8004d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d8c:	6852      	ldr	r2, [r2, #4]
 8004d8e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	e03a      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d10c      	bne.n	8004dbe <DMA_DeInit+0x1c6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004db0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004db4:	6852      	ldr	r2, [r2, #4]
 8004db6:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e026      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	f240 4344 	movw	r3, #1092	; 0x444
 8004dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d10c      	bne.n	8004de6 <DMA_DeInit+0x1ee>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8004dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ddc:	6852      	ldr	r2, [r2, #4]
 8004dde:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	e012      	b.n	8004e0c <DMA_DeInit+0x214>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8004dec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d10b      	bne.n	8004e0c <DMA_DeInit+0x214>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8004df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e04:	6852      	ldr	r2, [r2, #4]
 8004e06:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8004e0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004e0c:	f107 070c 	add.w	r7, r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004e48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004e54:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004e60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	899b      	ldrh	r3, [r3, #12]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60da      	str	r2, [r3, #12]
}
 8004e8e:	f107 0714 	add.w	r7, r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <DMA_StructInit>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	819a      	strh	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef8:	f107 070c 	add.w	r7, r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop

08004f04 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e006      	b.n	8004f32 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6013      	str	r3, [r2, #0]
  }
}
 8004f32:	f107 070c 	add.w	r7, r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]
}
 8004f4e:	f107 070c 	add.w	r7, r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b29b      	uxth	r3, r3
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	f107 070c 	add.w	r7, r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e007      	b.n	8004fa6 <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	ea6f 0303 	mvn.w	r3, r3
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]
  }
}
 8004fa6:	f107 0714 	add.w	r7, r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8004fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	e005      	b.n	8004fe8 <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8004ff2:	f04f 0301 	mov.w	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e002      	b.n	8005000 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	f107 0714 	add.w	r7, r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8005022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005026:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	e005      	b.n	800503c <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]
  }
}
 800503c:	f107 070c 	add.w	r7, r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <DMA_GetITStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8005066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800506a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	e005      	b.n	8005080 <DMA_GetITStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <DMA_GetITStatus+0x4a>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 800508a:	f04f 0301 	mov.w	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e002      	b.n	8005098 <DMA_GetITStatus+0x50>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	f107 0714 	add.w	r7, r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
  
  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <DMA_ClearITPendingBit+0x20>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80050ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	e005      	b.n	80050d4 <DMA_ClearITPendingBit+0x2c>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	605a      	str	r2, [r3, #4]
  }
}
 80050d4:	f107 070c 	add.w	r7, r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <EXTI_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  EXTI->IMR    = 0x1F800000;
 80050e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050ec:	f04f 52fc 	mov.w	r2, #528482304	; 0x1f800000
 80050f0:	601a      	str	r2, [r3, #0]
  EXTI->EMR    = 0x00000000;
 80050f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 8005100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005104:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 800510e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005112:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 800511c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 800512a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005132:	f06f 52fc 	mvn.w	r2, #528482304	; 0x1f800000
 8005136:	615a      	str	r2, [r3, #20]
  EXTI->IMR2   = 0x0000000C;
 8005138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005140:	f04f 020c 	mov.w	r2, #12
 8005144:	621a      	str	r2, [r3, #32]
  EXTI->EMR2   = 0x00000000;
 8005146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
  EXTI->RTSR2  = 0x00000000;
 8005154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005158:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
  EXTI->FTSR2  = 0x00000000;
 8005162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005166:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c
  EXTI->SWIER2 = 0x00000000;
 8005170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005174:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
  EXTI->PR2    = 0x00000003;
 800517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005182:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005186:	f04f 0203 	mov.w	r2, #3
 800518a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80051a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051aa:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	799b      	ldrb	r3, [r3, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8111 	beq.w	80053d8 <EXTI_Init+0x244>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80051be:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80051c2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80051c6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80051d4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80051d8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80051dc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	f04f 0001 	mov.w	r0, #1
 80051ee:	fa00 f303 	lsl.w	r3, r0, r3
 80051f2:	ea6f 0303 	mvn.w	r3, r3
 80051f6:	400b      	ands	r3, r1
 80051f8:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005202:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005206:	f240 4304 	movw	r3, #1028	; 0x404
 800520a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800520e:	18d3      	adds	r3, r2, r3
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800521a:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800521e:	f240 4304 	movw	r3, #1028	; 0x404
 8005222:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005226:	18cb      	adds	r3, r1, r3
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	f04f 0001 	mov.w	r0, #1
 8005236:	fa00 f303 	lsl.w	r3, r0, r3
 800523a:	ea6f 0303 	mvn.w	r3, r3
 800523e:	400b      	ands	r3, r1
 8005240:	6013      	str	r3, [r2, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005250:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	f002 021f 	and.w	r2, r2, #31
 800526a:	f04f 0001 	mov.w	r0, #1
 800526e:	fa00 f202 	lsl.w	r2, r0, r2
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8005276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800527e:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005288:	ea4f 1243 	mov.w	r2, r3, lsl #5
 800528c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005290:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005294:	18d3      	adds	r3, r2, r3
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80052a0:	ea4f 1143 	mov.w	r1, r3, lsl #5
 80052a4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80052a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052ac:	18cb      	adds	r3, r1, r3
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	f04f 0001 	mov.w	r0, #1
 80052bc:	fa00 f303 	lsl.w	r3, r0, r3
 80052c0:	ea6f 0303 	mvn.w	r3, r3
 80052c4:	400b      	ands	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80052d0:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80052d4:	f240 430c 	movw	r3, #1036	; 0x40c
 80052d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052dc:	18d3      	adds	r3, r2, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80052e8:	ea4f 1143 	mov.w	r1, r3, lsl #5
 80052ec:	f240 430c 	movw	r3, #1036	; 0x40c
 80052f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052f4:	18cb      	adds	r3, r1, r3
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	f04f 0001 	mov.w	r0, #1
 8005304:	fa00 f303 	lsl.w	r3, r0, r3
 8005308:	ea6f 0303 	mvn.w	r3, r3
 800530c:	400b      	ands	r3, r1
 800530e:	6013      	str	r3, [r2, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	795b      	ldrb	r3, [r3, #5]
 8005314:	2b10      	cmp	r3, #16
 8005316:	d144      	bne.n	80053a2 <EXTI_Init+0x20e>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005320:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005324:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005328:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800532c:	18d3      	adds	r3, r2, r3
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005338:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800533c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005340:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005344:	18cb      	adds	r3, r1, r3
 8005346:	6819      	ldr	r1, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	f04f 0001 	mov.w	r0, #1
 8005354:	fa00 f303 	lsl.w	r3, r0, r3
 8005358:	430b      	orrs	r3, r1
 800535a:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005364:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005368:	f240 430c 	movw	r3, #1036	; 0x40c
 800536c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005370:	18d3      	adds	r3, r2, r3
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800537c:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8005380:	f240 430c 	movw	r3, #1036	; 0x40c
 8005384:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005388:	18cb      	adds	r3, r1, r3
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	f04f 0001 	mov.w	r0, #1
 8005398:	fa00 f303 	lsl.w	r3, r0, r3
 800539c:	430b      	orrs	r3, r1
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e036      	b.n	8005410 <EXTI_Init+0x27c>
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	795b      	ldrb	r3, [r3, #5]
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80053b0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80053b4:	18d3      	adds	r3, r2, r3
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	6811      	ldr	r1, [r2, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	f002 021f 	and.w	r2, r2, #31
 80053ca:	f04f 0001 	mov.w	r0, #1
 80053ce:	fa00 f202 	lsl.w	r2, r0, r2
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e01b      	b.n	8005410 <EXTI_Init+0x27c>
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80053e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	6811      	ldr	r1, [r2, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	f002 021f 	and.w	r2, r2, #31
 8005400:	f04f 0001 	mov.w	r0, #1
 8005404:	fa00 f202 	lsl.w	r2, r0, r2
 8005408:	ea6f 0202 	mvn.w	r2, r2
 800540c:	400a      	ands	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
  }
         
}
 8005410:	f107 0714 	add.w	r7, r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f04f 0210 	mov.w	r2, #16
 800543a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	719a      	strb	r2, [r3, #6]
}
 8005444:	f107 070c 	add.w	r7, r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800545e:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005462:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8005466:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005474:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8005478:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800547c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005480:	18cb      	adds	r3, r1, r3
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	f04f 0001 	mov.w	r0, #1
 800548e:	fa00 f303 	lsl.w	r3, r0, r3
 8005492:	430b      	orrs	r3, r1
 8005494:	6013      	str	r3, [r2, #0]

}
 8005496:	f107 070c 	add.w	r7, r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).                  
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80054b4:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80054b8:	f240 4314 	movw	r3, #1044	; 0x414
 80054bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	f04f 0101 	mov.w	r1, #1
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <EXTI_GetFlagStatus+0x40>
  {
    bitstatus = SET;
 80054d8:	f04f 0301 	mov.w	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e002      	b.n	80054e6 <EXTI_GetFlagStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	f107 0714 	add.w	r7, r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005502:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005506:	f240 4314 	movw	r3, #1044	; 0x414
 800550a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800550e:	18d3      	adds	r3, r2, r3
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	f002 021f 	and.w	r2, r2, #31
 8005516:	f04f 0101 	mov.w	r1, #1
 800551a:	fa01 f202 	lsl.w	r2, r1, r2
 800551e:	601a      	str	r2, [r3, #0]
}
 8005520:	f107 070c 	add.w	r7, r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005546:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800554a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800554e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	f04f 0101 	mov.w	r1, #1
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	4013      	ands	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800556c:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005570:	f240 4314 	movw	r3, #1044	; 0x414
 8005574:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005578:	18d3      	adds	r3, r2, r3
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	f04f 0101 	mov.w	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <EXTI_GetITStatus+0x72>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <EXTI_GetITStatus+0x72>
  {
    bitstatus = SET;
 8005596:	f04f 0301 	mov.w	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e002      	b.n	80055a4 <EXTI_GetITStatus+0x78>
  }
  else
  {
    bitstatus = RESET;
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	f107 0714 	add.w	r7, r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80055c2:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80055c6:	f240 4314 	movw	r3, #1044	; 0x414
 80055ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	f002 021f 	and.w	r2, r2, #31
 80055d6:	f04f 0101 	mov.w	r1, #1
 80055da:	fa01 f202 	lsl.w	r2, r1, r2
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	f107 070c 	add.w	r7, r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop

080055ec <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055fa:	d10c      	bne.n	8005616 <GPIO_DeInit+0x2a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80055fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005600:	f04f 0101 	mov.w	r1, #1
 8005604:	f001 fa1a 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8005608:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	f001 fa14 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 8005614:	e062      	b.n	80056dc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOB)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005620:	429a      	cmp	r2, r3
 8005622:	d10c      	bne.n	800563e <GPIO_DeInit+0x52>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8005624:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005628:	f04f 0101 	mov.w	r1, #1
 800562c:	f001 fa06 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8005630:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	f001 fa00 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 800563c:	e04e      	b.n	80056dc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOC)
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005644:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005648:	429a      	cmp	r2, r3
 800564a:	d10c      	bne.n	8005666 <GPIO_DeInit+0x7a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800564c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005650:	f04f 0101 	mov.w	r1, #1
 8005654:	f001 f9f2 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8005658:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	f001 f9ec 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 8005664:	e03a      	b.n	80056dc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOD)
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800566c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005670:	429a      	cmp	r2, r3
 8005672:	d10c      	bne.n	800568e <GPIO_DeInit+0xa2>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8005674:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005678:	f04f 0101 	mov.w	r1, #1
 800567c:	f001 f9de 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8005680:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f001 f9d8 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 800568c:	e026      	b.n	80056dc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOE)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005694:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005698:	429a      	cmp	r2, r3
 800569a:	d10c      	bne.n	80056b6 <GPIO_DeInit+0xca>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800569c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80056a0:	f04f 0101 	mov.w	r1, #1
 80056a4:	f001 f9ca 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80056a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	f001 f9c4 	bl	8006a3c <RCC_AHBPeriphResetCmd>
 80056b4:	e012      	b.n	80056dc <GPIO_DeInit+0xf0>
  }
  else
  {
    if(GPIOx == GPIOF)
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056bc:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d10b      	bne.n	80056dc <GPIO_DeInit+0xf0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80056c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80056c8:	f04f 0101 	mov.w	r1, #1
 80056cc:	f001 f9b6 	bl	8006a3c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80056d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80056d4:	f04f 0100 	mov.w	r1, #0
 80056d8:	f001 f9b0 	bl	8006a3c <RCC_AHBPeriphResetCmd>
    }
  }
}
 80056dc:	f107 0708 	add.w	r7, r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e08c      	b.n	8005822 <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f04f 0201 	mov.w	r2, #1
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d179      	bne.n	800581a <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d003      	beq.n	8005736 <GPIO_Init+0x52>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d13a      	bne.n	80057ac <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005740:	f04f 0103 	mov.w	r1, #3
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	ea6f 0303 	mvn.w	r3, r3
 800574c:	401a      	ands	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	795b      	ldrb	r3, [r3, #5]
 800575a:	4619      	mov	r1, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	889b      	ldrh	r3, [r3, #4]
 8005770:	b29a      	uxth	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f04f 0101 	mov.w	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea6f 0303 	mvn.w	r3, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	4013      	ands	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	889b      	ldrh	r3, [r3, #4]
 8005792:	b29a      	uxth	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	799b      	ldrb	r3, [r3, #6]
 8005798:	4619      	mov	r1, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	b29b      	uxth	r3, r3
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057b6:	f04f 0103 	mov.w	r1, #3
 80057ba:	fa01 f303 	lsl.w	r3, r1, r3
 80057be:	ea6f 0303 	mvn.w	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	4619      	mov	r1, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057ee:	f04f 0103 	mov.w	r1, #3
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	ea6f 0303 	mvn.w	r3, r3
 80057fa:	401a      	ands	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	79db      	ldrb	r3, [r3, #7]
 8005808:	4619      	mov	r1, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f103 0301 	add.w	r3, r3, #1
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	f67f af6f 	bls.w	8005708 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800582a:	f107 071c 	add.w	r7, r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005842:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f04f 0202 	mov.w	r2, #2
 8005852:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	71da      	strb	r2, [r3, #7]
}
 8005864:	f107 070c 	add.w	r7, r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 800587c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005880:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8005882:	887b      	ldrh	r3, [r7, #2]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005890:	887a      	ldrh	r2, [r7, #2]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]
}
 80058a8:	f107 0714 	add.w	r7, r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8a1b      	ldrh	r3, [r3, #16]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	887b      	ldrh	r3, [r7, #2]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 80058d6:	f04f 0301 	mov.w	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
 80058dc:	e002      	b.n	80058e4 <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	f107 0714 	add.w	r7, r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop

080058f4 <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8a1b      	ldrh	r3, [r3, #16]
 8005900:	b29b      	uxth	r3, r3
}
 8005902:	4618      	mov	r0, r3
 8005904:	f107 070c 	add.w	r7, r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop

08005910 <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8a9b      	ldrh	r3, [r3, #20]
 8005926:	b29a      	uxth	r2, r3
 8005928:	887b      	ldrh	r3, [r7, #2]
 800592a:	4013      	ands	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8005932:	f04f 0301 	mov.w	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e002      	b.n	8005940 <GPIO_ReadOutputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	f107 0714 	add.w	r7, r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8a9b      	ldrh	r3, [r3, #20]
 800595c:	b29b      	uxth	r3, r3
}
 800595e:	4618      	mov	r0, r3
 8005960:	f107 070c 	add.w	r7, r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop

0800596c <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	619a      	str	r2, [r3, #24]
}
 800597e:	f107 070c 	add.w	r7, r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800599a:	f107 070c 	add.w	r7, r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	460a      	mov	r2, r1
 80059b0:	807a      	strh	r2, [r7, #2]
 80059b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80059b4:	787b      	ldrb	r3, [r7, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ba:	887a      	ldrh	r2, [r7, #2]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	619a      	str	r2, [r3, #24]
 80059c0:	e002      	b.n	80059c8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 80059c8:	f107 070c 	add.w	r7, r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	829a      	strh	r2, [r3, #20]
}
 80059e6:	f107 070c 	add.w	r7, r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	460a      	mov	r2, r1
 80059fc:	807a      	strh	r2, [r7, #2]
 80059fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005a0c:	787a      	ldrb	r2, [r7, #1]
 8005a0e:	887b      	ldrh	r3, [r7, #2]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	887b      	ldrh	r3, [r7, #2]
 8005a2a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f101 0108 	add.w	r1, r1, #8
 8005a38:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a46:	f04f 000f 	mov.w	r0, #15
 8005a4a:	fa00 f303 	lsl.w	r3, r0, r3
 8005a4e:	ea6f 0303 	mvn.w	r3, r3
 8005a52:	4019      	ands	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f102 0208 	add.w	r2, r2, #8
 8005a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005a5e:	887b      	ldrh	r3, [r7, #2]
 8005a60:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f102 0208 	add.w	r2, r2, #8
 8005a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f102 0208 	add.w	r2, r2, #8
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005a8e:	f107 0714 	add.w	r7, r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005aa0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005aa4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8005aae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005ab2:	60da      	str	r2, [r3, #12]
}
 8005ab4:	f107 070c 	add.w	r7, r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop

08005ac0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	f04f 030f 	mov.w	r3, #15
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d047      	beq.n	8005b72 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005ae2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005ae6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	ea6f 0303 	mvn.w	r3, r3
 8005af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005af4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005af8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f1c3 0304 	rsb	r3, r3, #4
 8005b00:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	461a      	mov	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	789b      	ldrb	r3, [r3, #2]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4013      	ands	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005b30:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005b32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005b36:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	185b      	adds	r3, r3, r1
 8005b46:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b4a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005b4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005b5a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	7809      	ldrb	r1, [r1, #0]
 8005b60:	f001 011f 	and.w	r1, r1, #31
 8005b64:	f04f 0001 	mov.w	r0, #1
 8005b68:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b70:	e014      	b.n	8005b9c <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b72:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005b76:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005b82:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	7809      	ldrb	r1, [r1, #0]
 8005b88:	f001 011f 	and.w	r1, r1, #31
 8005b8c:	f04f 0001 	mov.w	r0, #1
 8005b90:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b94:	f102 0220 	add.w	r2, r2, #32
 8005b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005b9c:	f107 071c 	add.w	r7, r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop

08005ba8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005bb2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005bb6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005bc0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]
}
 8005bca:	f107 070c 	add.w	r7, r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr

08005bd4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	71fa      	strb	r2, [r7, #7]
 8005be0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005be2:	79bb      	ldrb	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00c      	beq.n	8005c02 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8005be8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005bec:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005bf0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005bf4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005bf8:	6911      	ldr	r1, [r2, #16]
 8005bfa:	79fa      	ldrb	r2, [r7, #7]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	e00d      	b.n	8005c1e <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005c02:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005c06:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005c0a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005c0e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005c12:	6911      	ldr	r1, [r2, #16]
 8005c14:	79fa      	ldrb	r2, [r7, #7]
 8005c16:	ea6f 0202 	mvn.w	r2, r2
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	611a      	str	r2, [r3, #16]
  }
}
 8005c1e:	f107 070c 	add.w	r7, r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d10c      	bne.n	8005c50 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005c36:	f24e 0310 	movw	r3, #57360	; 0xe010
 8005c3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005c3e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8005c42:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	f042 0204 	orr.w	r2, r2, #4
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e00b      	b.n	8005c68 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005c50:	f24e 0310 	movw	r3, #57360	; 0xe010
 8005c54:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005c58:	f24e 0210 	movw	r2, #57360	; 0xe010
 8005c5c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	601a      	str	r2, [r3, #0]
  }
}
 8005c68:	f107 070c 	add.w	r7, r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <RCC_DeInit>:
  * @note     LSI, LSE and RTC clocks                  
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8005c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005ca6:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8005caa:	400b      	ands	r3, r1
 8005cac:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005cf2:	6852      	ldr	r2, [r2, #4]
 8005cf4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8005cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d0c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005d10:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8005d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d28:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8005d2c:	f6c0 7300 	movt	r3, #3840	; 0xf00
 8005d30:	400b      	ands	r3, r1
 8005d32:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8005d52:	f241 0302 	movw	r3, #4098	; 0x1002
 8005d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8005d60:	f241 0302 	movw	r3, #4098	; 0x1002
 8005d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	701a      	strb	r2, [r3, #0]

}
 8005d6c:	f107 070c 	add.w	r7, r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8005d90:	f04f 0011 	mov.w	r0, #17
 8005d94:	f000 ff00 	bl	8006b98 <RCC_GetFlagStatus>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f103 0301 	add.w	r3, r3, #1
 8005da2:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005daa:	d002      	beq.n	8005db2 <RCC_WaitForHSEStartUp+0x3a>
 8005dac:	79bb      	ldrb	r3, [r7, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ee      	beq.n	8005d90 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8005db2:	f04f 0011 	mov.w	r0, #17
 8005db6:	f000 feef 	bl	8006b98 <RCC_GetFlagStatus>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8005dc0:	f04f 0301 	mov.w	r3, #1
 8005dc4:	71fb      	strb	r3, [r7, #7]
 8005dc6:	e002      	b.n	8005dce <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8005dce:	79fb      	ldrb	r3, [r7, #7]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f107 0708 	add.w	r7, r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop

08005ddc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8005dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005dfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8005e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	f107 0714 	add.w	r7, r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005e36:	79fa      	ldrb	r2, [r7, #7]
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	f107 070c 	add.w	r7, r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8005e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e5c:	6a12      	ldr	r2, [r2, #32]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8005e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e74:	6a12      	ldr	r2, [r2, #32]
 8005e76:	f022 0204 	bic.w	r2, r2, #4
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8005e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e8c:	6a11      	ldr	r1, [r2, #32]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	f107 070c 	add.w	r7, r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8005ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005eb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005eb8:	6a12      	ldr	r2, [r2, #32]
 8005eba:	f022 0218 	bic.w	r2, r2, #24
 8005ebe:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8005ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ecc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005ed0:	6a11      	ldr	r1, [r2, #32]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	f107 070c 	add.w	r7, r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop

08005ee4 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8005eee:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8005ef2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005ef6:	79fa      	ldrb	r2, [r7, #7]
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	f107 070c 	add.w	r7, r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8005f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f1e:	6852      	ldr	r2, [r2, #4]
 8005f20:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005f24:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8005f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f36:	6851      	ldr	r1, [r2, #4]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4302      	orrs	r2, r0
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
}
 8005f42:	f107 070c 	add.w	r7, r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8005f56:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005f5a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005f5e:	79fa      	ldrb	r2, [r7, #7]
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	f107 070c 	add.w	r7, r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8005f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f023 030f 	bic.w	r3, r3, #15
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8005f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fa2:	f107 0714 	add.w	r7, r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8005fb6:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8005fba:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005fbe:	79fa      	ldrb	r2, [r7, #7]
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	f107 070c 	add.w	r7, r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 8005fd6:	f241 0307 	movw	r3, #4103	; 0x1007
 8005fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fde:	79fa      	ldrb	r2, [r7, #7]
 8005fe0:	701a      	strb	r2, [r3, #0]
}
 8005fe2:	f107 070c 	add.w	r7, r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8005ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]
}
 8006022:	f107 0714 	add.w	r7, r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8006030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 030c 	and.w	r3, r3, #12
 8006040:	b2db      	uxtb	r3, r3
}
 8006042:	4618      	mov	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop

0800604c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 800605a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800605e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606c:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8006076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800607a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]
}
 8006082:	f107 0714 	add.w	r7, r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 800609a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80060ac:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80060b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
}
 80060c2:	f107 0714 	add.w	r7, r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80060da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80060fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
}
 8006106:	f107 0714 	add.w	r7, r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006110:	b480      	push	{r7}
 8006112:	b08b      	sub	sp, #44	; 0x2c
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800614c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d00a      	beq.n	8006174 <RCC_GetClocksFreq+0x64>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d00f      	beq.n	8006182 <RCC_GetClocksFreq+0x72>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d148      	bne.n	80061f8 <RCC_GetClocksFreq+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800616c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006170:	6013      	str	r3, [r2, #0]
      break;
 8006172:	e048      	b.n	8006206 <RCC_GetClocksFreq+0xf6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800617a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800617e:	6013      	str	r3, [r2, #0]
      break;
 8006180:	e041      	b.n	8006206 <RCC_GetClocksFreq+0xf6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8006182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006186:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006190:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006196:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80061a8:	f103 0302 	add.w	r3, r3, #2
 80061ac:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <RCC_GetClocksFreq+0xb6>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80061ba:	f2c0 033d 	movt	r3, #61	; 0x3d
 80061be:	fb03 f302 	mul.w	r3, r3, r2
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
 80061c4:	e014      	b.n	80061f0 <RCC_GetClocksFreq+0xe0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80061c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	f103 0301 	add.w	r3, r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80061da:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80061de:	f2c0 037a 	movt	r3, #122	; 0x7a
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f4:	601a      	str	r2, [r3, #0]
      break;
 80061f6:	e006      	b.n	8006206 <RCC_GetClocksFreq+0xf6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80061fe:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006202:	6013      	str	r3, [r2, #0]
      break;
 8006204:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8006206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800620a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006214:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800621c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800621e:	f240 031c 	movw	r3, #28
 8006222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006226:	6a3a      	ldr	r2, [r7, #32]
 8006228:	189b      	adds	r3, r3, r2
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	fa22 f203 	lsr.w	r2, r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800623e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8006254:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8006256:	f240 031c 	movw	r3, #28
 800625a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	189b      	adds	r3, r3, r2
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	fa22 f203 	lsr.w	r2, r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006284:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800628c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800628e:	f240 031c 	movw	r3, #28
 8006292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	189b      	adds	r3, r3, r2
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	fa22 f203 	lsr.w	r2, r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062bc:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80062c4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80062c6:	f240 032c 	movw	r3, #44	; 0x2c
 80062ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80062ce:	6a3a      	ldr	r2, [r7, #32]
 80062d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d006      	beq.n	80062f0 <RCC_GetClocksFreq+0x1e0>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]
 80062ee:	e003      	b.n	80062f8 <RCC_GetClocksFreq+0x1e8>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80062f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8006306:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	ea4f 2353 	mov.w	r3, r3, lsr #9
 800630e:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8006310:	f240 032c 	movw	r3, #44	; 0x2c
 8006314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800631e:	b29b      	uxth	r3, r3
 8006320:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d006      	beq.n	800633a <RCC_GetClocksFreq+0x22a>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800632c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	fbb2 f2f3 	udiv	r2, r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	615a      	str	r2, [r3, #20]
 8006338:	e003      	b.n	8006342 <RCC_GetClocksFreq+0x232>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8006342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006346:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <RCC_GetClocksFreq+0x252>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800635a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800635e:	6193      	str	r3, [r2, #24]
 8006360:	e003      	b.n	800636a <RCC_GetClocksFreq+0x25a>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800636a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800636e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <RCC_GetClocksFreq+0x27a>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006382:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006386:	61d3      	str	r3, [r2, #28]
 8006388:	e003      	b.n	8006392 <RCC_GetClocksFreq+0x282>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8006392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006396:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <RCC_GetClocksFreq+0x2b2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d109      	bne.n	80063c2 <RCC_GetClocksFreq+0x2b2>
  && (apb2presc == ahbpresc)) 
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d105      	bne.n	80063c2 <RCC_GetClocksFreq+0x2b2>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]
 80063c0:	e003      	b.n	80063ca <RCC_GetClocksFreq+0x2ba>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80063ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <RCC_GetClocksFreq+0x2ea>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d109      	bne.n	80063fa <RCC_GetClocksFreq+0x2ea>
  && (apb2presc == ahbpresc))
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d105      	bne.n	80063fa <RCC_GetClocksFreq+0x2ea>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24
 80063f8:	e003      	b.n	8006402 <RCC_GetClocksFreq+0x2f2>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8006402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006406:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
 800641c:	e02a      	b.n	8006474 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800641e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006422:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d104      	bne.n	800643a <RCC_GetClocksFreq+0x32a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	629a      	str	r2, [r3, #40]	; 0x28
 8006438:	e01c      	b.n	8006474 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800643a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800643e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d104      	bne.n	8006456 <RCC_GetClocksFreq+0x346>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
 8006454:	e00e      	b.n	8006474 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8006456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800645a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b03      	cmp	r3, #3
 8006466:	d105      	bne.n	8006474 <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800646e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006472:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8006474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006478:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	62da      	str	r2, [r3, #44]	; 0x2c
 800648e:	e02d      	b.n	80064ec <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8006490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a2:	d104      	bne.n	80064ae <RCC_GetClocksFreq+0x39e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80064ac:	e01e      	b.n	80064ec <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80064ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c0:	d104      	bne.n	80064cc <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80064c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80064ca:	e00f      	b.n	80064ec <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80064cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064de:	d105      	bne.n	80064ec <RCC_GetClocksFreq+0x3dc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80064e6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80064ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80064ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
 8006506:	e02d      	b.n	8006564 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8006508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800650c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800651a:	d104      	bne.n	8006526 <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
 8006524:	e01e      	b.n	8006564 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8006526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800652a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006538:	d104      	bne.n	8006544 <RCC_GetClocksFreq+0x434>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
 8006542:	e00f      	b.n	8006564 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8006544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006548:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006552:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006556:	d105      	bne.n	8006564 <RCC_GetClocksFreq+0x454>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800655e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006562:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8006564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	635a      	str	r2, [r3, #52]	; 0x34
 800657e:	e02d      	b.n	80065dc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8006580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006592:	d104      	bne.n	800659e <RCC_GetClocksFreq+0x48e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	635a      	str	r2, [r3, #52]	; 0x34
 800659c:	e01e      	b.n	80065dc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800659e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065b0:	d104      	bne.n	80065bc <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34
 80065ba:	e00f      	b.n	80065dc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80065bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065ce:	d105      	bne.n	80065dc <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80065d6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80065da:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80065dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <RCC_GetClocksFreq+0x4e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
 80065f6:	e02d      	b.n	8006654 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80065f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660a:	d104      	bne.n	8006616 <RCC_GetClocksFreq+0x506>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
 8006614:	e01e      	b.n	8006654 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8006616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800661a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006628:	d104      	bne.n	8006634 <RCC_GetClocksFreq+0x524>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
 8006632:	e00f      	b.n	8006654 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8006634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006638:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006642:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006646:	d105      	bne.n	8006654 <RCC_GetClocksFreq+0x544>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800664e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006652:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 8006654:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop

08006660 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8006674:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00c      	beq.n	8006696 <RCC_ADCCLKConfig+0x36>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 800667c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006688:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800668c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800668e:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
 8006694:	e00b      	b.n	80066ae <RCC_ADCCLKConfig+0x4e>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8006696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800669a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800669e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066a8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80066ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 80066ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066c6:	f107 0714 	add.w	r7, r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80066e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00c      	beq.n	8006706 <RCC_I2CCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80066ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066fe:	f022 0220 	bic.w	r2, r2, #32
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
 8006704:	e00b      	b.n	800671e <RCC_I2CCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8006706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800670e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006712:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006716:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006718:	f022 0210 	bic.w	r2, r2, #16
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800671e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006722:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800672a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800672e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	430a      	orrs	r2, r1
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006736:	f107 0714 	add.w	r7, r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8006754:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <RCC_TIMCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 800675c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006768:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800676c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800676e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
 8006774:	e00b      	b.n	800678e <RCC_TIMCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8006776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800677a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800677e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006782:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006786:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 800678e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800679a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800679e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067a6:	f107 0714 	add.w	r7, r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d84e      	bhi.n	800686e <RCC_USARTCLKConfig+0xbe>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <RCC_USARTCLKConfig+0x28>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067ed 	.word	0x080067ed
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006821 	.word	0x08006821
 80067e4:	0800683b 	.word	0x0800683b
 80067e8:	08006855 	.word	0x08006855
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80067ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067fe:	f022 0203 	bic.w	r2, r2, #3
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8006804:	e034      	b.n	8006870 <RCC_USARTCLKConfig+0xc0>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8006806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800680a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800680e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006812:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006816:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006818:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800681e:	e027      	b.n	8006870 <RCC_USARTCLKConfig+0xc0>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8006820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800682c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006832:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8006838:	e01a      	b.n	8006870 <RCC_USARTCLKConfig+0xc0>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 800683a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800683e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006846:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800684a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800684c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8006852:	e00d      	b.n	8006870 <RCC_USARTCLKConfig+0xc0>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8006854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006858:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800685c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006860:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006864:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006866:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800686c:	e000      	b.n	8006870 <RCC_USARTCLKConfig+0xc0>
    default:
      break;
 800686e:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8006870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006874:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800687c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006880:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	430a      	orrs	r2, r1
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006888:	f107 0714 	add.w	r7, r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800689c:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 80068a0:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
}
 80068a8:	f107 070c 	add.w	r7, r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80068bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80068cc:	6a11      	ldr	r1, [r2, #32]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	f107 070c 	add.w	r7, r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop

080068e0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80068e8:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 80068ec:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
}
 80068f4:	f107 070c 	add.w	r7, r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800690a:	f240 433c 	movw	r3, #1084	; 0x43c
 800690e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006912:	79fa      	ldrb	r2, [r7, #7]
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	f107 070c 	add.w	r7, r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800692a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800692e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006932:	79fa      	ldrb	r2, [r7, #7]
 8006934:	601a      	str	r2, [r3, #0]
}
 8006936:	f107 070c 	add.w	r7, r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8006952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800695a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800695e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006962:	6951      	ldr	r1, [r2, #20]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	430a      	orrs	r2, r1
 8006968:	615a      	str	r2, [r3, #20]
 800696a:	e00d      	b.n	8006988 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800696c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006978:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800697c:	6951      	ldr	r1, [r2, #20]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	ea6f 0202 	mvn.w	r2, r2
 8006984:	400a      	ands	r2, r1
 8006986:	615a      	str	r2, [r3, #20]
  }
}
 8006988:	f107 070c 	add.w	r7, r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop

08006994 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80069a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069b6:	6991      	ldr	r1, [r2, #24]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	619a      	str	r2, [r3, #24]
 80069be:	e00d      	b.n	80069dc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80069c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069d0:	6991      	ldr	r1, [r2, #24]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	ea6f 0202 	mvn.w	r2, r2
 80069d8:	400a      	ands	r2, r1
 80069da:	619a      	str	r2, [r3, #24]
  }
}
 80069dc:	f107 070c 	add.w	r7, r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80069fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a0a:	69d1      	ldr	r1, [r2, #28]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	61da      	str	r2, [r3, #28]
 8006a12:	e00d      	b.n	8006a30 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a24:	69d1      	ldr	r1, [r2, #28]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	ea6f 0202 	mvn.w	r2, r2
 8006a2c:	400a      	ands	r2, r1
 8006a2e:	61da      	str	r2, [r3, #28]
  }
}
 8006a30:	f107 070c 	add.w	r7, r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8006a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	629a      	str	r2, [r3, #40]	; 0x28
 8006a66:	e00d      	b.n	8006a84 <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8006a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	ea6f 0202 	mvn.w	r2, r2
 8006a80:	400a      	ands	r2, r1
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006a84:	f107 070c 	add.w	r7, r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00c      	beq.n	8006abc <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8006aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ab2:	68d1      	ldr	r1, [r2, #12]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	e00d      	b.n	8006ad8 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8006abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ac8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006acc:	68d1      	ldr	r1, [r2, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	ea6f 0202 	mvn.w	r2, r2
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	60da      	str	r2, [r3, #12]
  }
}
 8006ad8:	f107 070c 	add.w	r7, r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8006af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b06:	6911      	ldr	r1, [r2, #16]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	611a      	str	r2, [r3, #16]
 8006b0e:	e00d      	b.n	8006b2c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8006b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b20:	6911      	ldr	r1, [r2, #16]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	ea6f 0202 	mvn.w	r2, r2
 8006b28:	400a      	ands	r2, r1
 8006b2a:	611a      	str	r2, [r3, #16]
  }
}
 8006b2c:	f107 070c 	add.w	r7, r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop

08006b38 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	71fa      	strb	r2, [r7, #7]
 8006b44:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006b46:	79bb      	ldrb	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8006b4c:	f241 0309 	movw	r3, #4105	; 0x1009
 8006b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b54:	f241 0209 	movw	r2, #4105	; 0x1009
 8006b58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	b2d1      	uxtb	r1, r2
 8006b60:	79fa      	ldrb	r2, [r7, #7]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e010      	b.n	8006b8c <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8006b6a:	f241 0309 	movw	r3, #4105	; 0x1009
 8006b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b72:	f241 0209 	movw	r2, #4105	; 0x1009
 8006b76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	b2d1      	uxtb	r1, r2
 8006b7e:	79fa      	ldrb	r2, [r7, #7]
 8006b80:	ea6f 0202 	mvn.w	r2, r2
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	400a      	ands	r2, r1
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
  }
}
 8006b8c:	f107 070c 	add.w	r7, r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8006bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e019      	b.n	8006c06 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d106      	bne.n	8006be6 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8006bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e00f      	b.n	8006c06 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d106      	bne.n	8006bfa <RCC_GetFlagStatus+0x62>
  {
    statusreg = RCC->CFGR;
 8006bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e005      	b.n	8006c06 <RCC_GetFlagStatus+0x6e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8006bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	fa22 f303 	lsr.w	r3, r2, r3
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <RCC_GetFlagStatus+0x8e>
  {
    bitstatus = SET;
 8006c1e:	f04f 0301 	mov.w	r3, #1
 8006c22:	74fb      	strb	r3, [r7, #19]
 8006c24:	e002      	b.n	8006c2c <RCC_GetFlagStatus+0x94>
  }
  else
  {
    bitstatus = RESET;
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8006c2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f107 071c 	add.w	r7, r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop

08006c3c <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8006c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop

08006c60 <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8006c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8006c82:	f04f 0301 	mov.w	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e002      	b.n	8006c90 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	f107 0714 	add.w	r7, r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop

08006ca0 <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8006caa:	f241 030a 	movw	r3, #4106	; 0x100a
 8006cae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	701a      	strb	r2, [r3, #0]
}
 8006cb6:	f107 070c 	add.w	r7, r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d10c      	bne.n	8006cf0 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8006cd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006cda:	f04f 0101 	mov.w	r1, #1
 8006cde:	f7ff fed7 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8006ce2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	f7ff fed1 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8006cee:	e026      	b.n	8006d3e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006cf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d10c      	bne.n	8006d18 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8006cfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006d02:	f04f 0101 	mov.w	r1, #1
 8006d06:	f7ff feed 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8006d0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006d0e:	f04f 0100 	mov.w	r1, #0
 8006d12:	f7ff fee7 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8006d16:	e012      	b.n	8006d3e <SPI_I2S_DeInit+0x7e>
  }
  else
  {
    if (SPIx == SPI3)
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d10b      	bne.n	8006d3e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8006d26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d2a:	f04f 0101 	mov.w	r1, #1
 8006d2e:	f7ff fed9 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8006d32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	f7ff fed3 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8006d3e:	f107 0708 	add.w	r7, r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	801a      	strh	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	805a      	strh	r2, [r3, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006d66:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f04f 0207 	mov.w	r2, #7
 8006d96:	821a      	strh	r2, [r3, #16]
}
 8006d98:	f107 070c 	add.w	r7, r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbc:	d136      	bne.n	8006e2c <SPI_Init+0x88>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8006dc4:	89fb      	ldrh	r3, [r7, #14]
 8006dc6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006dca:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	881a      	ldrh	r2, [r3, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	885b      	ldrh	r3, [r3, #2]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	88d9      	ldrh	r1, [r3, #6]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	891b      	ldrh	r3, [r3, #8]
 8006de0:	430b      	orrs	r3, r1
 8006de2:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	8958      	ldrh	r0, [r3, #10]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	899b      	ldrh	r3, [r3, #12]
 8006dec:	4303      	orrs	r3, r0
 8006dee:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006df4:	4303      	orrs	r3, r0
 8006df6:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	89fb      	ldrh	r3, [r7, #14]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	89fa      	ldrh	r2, [r7, #14]
 8006e0a:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	889b      	ldrh	r3, [r3, #4]
 8006e10:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8006e12:	89fb      	ldrh	r3, [r7, #14]
 8006e14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e18:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	889a      	ldrh	r2, [r3, #4]
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	89fa      	ldrh	r2, [r7, #14]
 8006e28:	809a      	strh	r2, [r3, #4]
 8006e2a:	e035      	b.n	8006e98 <SPI_Init+0xf4>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	889b      	ldrh	r3, [r3, #4]
 8006e30:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8006e32:	89fb      	ldrh	r3, [r7, #14]
 8006e34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e38:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	889a      	ldrh	r2, [r3, #4]
 8006e3e:	89fb      	ldrh	r3, [r7, #14]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	89fa      	ldrh	r2, [r7, #14]
 8006e48:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8006e50:	89fb      	ldrh	r3, [r7, #14]
 8006e52:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006e56:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	881a      	ldrh	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	88d9      	ldrh	r1, [r3, #6]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	891b      	ldrh	r3, [r3, #8]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	8958      	ldrh	r0, [r3, #10]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	899b      	ldrh	r3, [r3, #12]
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006e80:	4303      	orrs	r3, r0
 8006e82:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8006e84:	430b      	orrs	r3, r1
 8006e86:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	89fb      	ldrh	r3, [r7, #14]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	89fa      	ldrh	r2, [r7, #14]
 8006e96:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8b9b      	ldrh	r3, [r3, #28]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	8a1a      	ldrh	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	821a      	strh	r2, [r3, #16]
}
 8006eb0:	f107 0714 	add.w	r7, r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop

08006ebc <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	801a      	strh	r2, [r3, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	805a      	strh	r2, [r3, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	809a      	strh	r2, [r3, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	80da      	strh	r2, [r3, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f04f 0202 	mov.w	r2, #2
 8006eea:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	819a      	strh	r2, [r3, #12]
}
 8006ef4:	f107 070c 	add.w	r7, r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop

08006f00 <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.     
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b096      	sub	sp, #88	; 0x58
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f12:	f04f 0302 	mov.w	r3, #2
 8006f16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8006f22:	f04f 0301 	mov.w	r3, #1
 8006f26:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  uint32_t tmp = 0;
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8b9b      	ldrh	r3, [r3, #28]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f40:	f023 030f 	bic.w	r3, r3, #15
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f04f 0202 	mov.w	r2, #2
 8006f50:	841a      	strh	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8b9b      	ldrh	r3, [r3, #28]
 8006f56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d108      	bne.n	8006f74 <I2S_Init+0x74>
  {
    i2sodd = (uint16_t)0;
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    i2sdiv = (uint16_t)2;   
 8006f6a:	f04f 0302 	mov.w	r3, #2
 8006f6e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f72:	e061      	b.n	8007038 <I2S_Init+0x138>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	889b      	ldrh	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <I2S_Init+0x86>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8006f7c:	f04f 0301 	mov.w	r3, #1
 8006f80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006f84:	e003      	b.n	8006f8e <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8006f86:	f04f 0302 	mov.w	r3, #2
 8006f8a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff f8bc 	bl	8006110 <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88db      	ldrh	r3, [r3, #6]
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d113      	bne.n	8006fce <I2S_Init+0xce>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa8:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8006fac:	4613      	mov	r3, r2
 8006fae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fb8:	461a      	mov	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f103 0305 	add.w	r3, r3, #5
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fcc:	e016      	b.n	8006ffc <I2S_Init+0xfc>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8006fce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006fd2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8006fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fdc:	4613      	mov	r3, r2
 8006fde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fe8:	461a      	mov	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f103 0305 	add.w	r3, r3, #5
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8006ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ffe:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8007002:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8007006:	fba3 1302 	umull	r1, r3, r3, r2
 800700a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8007010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007012:	b29b      	uxth	r3, r3
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800701c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8007028:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800702c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007030:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007034:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8007038:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800703c:	2b01      	cmp	r3, #1
 800703e:	d903      	bls.n	8007048 <I2S_Init+0x148>
 8007040:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007044:	2bff      	cmp	r3, #255	; 0xff
 8007046:	d907      	bls.n	8007058 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8007048:	f04f 0302 	mov.w	r3, #2
 800704c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    i2sodd = 0;
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	88da      	ldrh	r2, [r3, #6]
 800705c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007060:	4313      	orrs	r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007068:	4313      	orrs	r3, r2
 800706a:	b29a      	uxth	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	841a      	strh	r2, [r3, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	881a      	ldrh	r2, [r3, #0]
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	8859      	ldrh	r1, [r3, #2]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	889b      	ldrh	r3, [r3, #4]
 800707c:	430b      	orrs	r3, r1
 800707e:	b299      	uxth	r1, r3
                       I2S_InitStruct->I2S_CPOL)));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8007084:	430b      	orrs	r3, r1
 8007086:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8007088:	4313      	orrs	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007090:	4313      	orrs	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007098:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
                       I2S_InitStruct->I2S_CPOL)));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80070a2:	839a      	strh	r2, [r3, #28]
}
 80070a4:	f107 0758 	add.w	r7, r7, #88	; 0x58
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e007      	b.n	80070e0 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	801a      	strh	r2, [r3, #0]
  }
}
 80070e0:	f107 070c 	add.w	r7, r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	889b      	ldrh	r3, [r3, #4]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f043 0310 	orr.w	r3, r3, #16
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	809a      	strh	r2, [r3, #4]
 800710e:	e007      	b.n	8007120 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	889b      	ldrh	r3, [r3, #4]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	809a      	strh	r2, [r3, #4]
  }
}
 8007120:	f107 070c 	add.w	r7, r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop

0800712c <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8b9b      	ldrh	r3, [r3, #28]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	839a      	strh	r2, [r3, #28]
 800714e:	e007      	b.n	8007160 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8b9b      	ldrh	r3, [r3, #28]
 8007154:	b29b      	uxth	r3, r3
 8007156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	839a      	strh	r2, [r3, #28]
  }
}
 8007160:	f107 070c 	add.w	r7, r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop

0800716c <SPI_DataSizeConfig>:
  *     @arg SPI_DataSize_15b: Set data size to 15 bits
  *     @arg SPI_DataSize_16b: Set data size to 16 bits
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	889b      	ldrh	r3, [r3, #4]
 8007182:	81fb      	strh	r3, [r7, #14]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800718a:	81fb      	strh	r3, [r7, #14]
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 800718c:	89fa      	ldrh	r2, [r7, #14]
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	4313      	orrs	r3, r2
 8007192:	81fb      	strh	r3, [r7, #14]
  SPIx->CR2 = tmpreg;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	89fa      	ldrh	r2, [r7, #14]
 8007198:	809a      	strh	r2, [r3, #4]
}
 800719a:	f107 0714 	add.w	r7, r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <SPI_RxFIFOThresholdConfig>:
  *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *          level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	889b      	ldrh	r3, [r3, #4]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	809a      	strh	r2, [r3, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	889b      	ldrh	r3, [r3, #4]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	887b      	ldrh	r3, [r7, #2]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	809a      	strh	r2, [r3, #4]
}
 80071d0:	f107 070c 	add.w	r7, r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop

080071dc <SPI_BiDirectionalLineConfig>:
  *     @arg SPI_Direction_Tx: Selects Tx transmission direction
  *     @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ee:	d108      	bne.n	8007202 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e007      	b.n	8007212 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	801a      	strh	r2, [r3, #0]
  }
}
 8007212:	f107 070c 	add.w	r7, r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <SPI_NSSInternalSoftwareConfig>:
  *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8007228:	887a      	ldrh	r2, [r7, #2]
 800722a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800722e:	429a      	cmp	r2, r3
 8007230:	d008      	beq.n	8007244 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e007      	b.n	8007254 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	801a      	strh	r2, [r3, #0]
  }
}
 8007254:	f107 070c 	add.w	r7, r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	81bb      	strh	r3, [r7, #12]
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8b9b      	ldrh	r3, [r3, #28]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007280:	f023 030f 	bic.w	r3, r3, #15
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f04f 0202 	mov.w	r2, #2
 8007290:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8b9b      	ldrh	r3, [r3, #28]
 8007296:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a0:	d003      	beq.n	80072aa <I2S_FullDuplexConfig+0x4a>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 80072aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ae:	81fb      	strh	r3, [r7, #14]
 80072b0:	e00c      	b.n	80072cc <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ba:	d004      	beq.n	80072c6 <I2S_FullDuplexConfig+0x66>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d102      	bne.n	80072cc <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	885a      	ldrh	r2, [r3, #2]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80072d8:	430b      	orrs	r3, r1
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4313      	orrs	r3, r2
 80072de:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	89bb      	ldrh	r3, [r7, #12]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072f0:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	89ba      	ldrh	r2, [r7, #12]
 80072f6:	839a      	strh	r2, [r3, #28]
}
 80072f8:	f107 0714 	add.w	r7, r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d008      	beq.n	8007328 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f043 0304 	orr.w	r3, r3, #4
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	809a      	strh	r2, [r3, #4]
 8007326:	e007      	b.n	8007338 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	889b      	ldrh	r3, [r3, #4]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f023 0304 	bic.w	r3, r3, #4
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	809a      	strh	r2, [r3, #4]
  }
}
 8007338:	f107 070c 	add.w	r7, r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop

08007344 <SPI_NSSPulseModeCmd>:
  * @param  NewState: new state of the NSS pulse management mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <SPI_NSSPulseModeCmd+0x24>
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	889b      	ldrh	r3, [r3, #4]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f043 0308 	orr.w	r3, r3, #8
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	809a      	strh	r2, [r3, #4]
 8007366:	e007      	b.n	8007378 <SPI_NSSPulseModeCmd+0x34>
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	889b      	ldrh	r3, [r3, #4]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f023 0308 	bic.w	r3, r3, #8
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	809a      	strh	r2, [r3, #4]
  }
}
 8007378:	f107 070c 	add.w	r7, r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop

08007384 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f103 030c 	add.w	r3, r3, #12
 80073a0:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	701a      	strb	r2, [r3, #0]
}
 80073a8:	f107 0714 	add.w	r7, r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop

080073b4 <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	887a      	ldrh	r2, [r7, #2]
 80073c4:	819a      	strh	r2, [r3, #12]
}
 80073c6:	f107 070c 	add.w	r7, r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 030c 	add.w	r3, r3, #12
 80073e8:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	f107 0714 	add.w	r7, r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	899b      	ldrh	r3, [r3, #12]
 8007408:	b29b      	uxth	r3, r3
}
 800740a:	4618      	mov	r0, r3
 800740c:	f107 070c 	add.w	r7, r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <SPI_CRCLengthConfig>:
  *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
  *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
  * @retval None
  */
void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	801a      	strh	r2, [r3, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	887b      	ldrh	r3, [r7, #2]
 800743c:	4313      	orrs	r3, r2
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	801a      	strh	r2, [r3, #0]
}
 8007444:	f107 070c 	add.w	r7, r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop

08007450 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e007      	b.n	8007484 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	801a      	strh	r2, [r3, #0]
  }
}
 8007484:	f107 070c 	add.w	r7, r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop

08007490 <SPI_TransmitCRC>:
  * @brief  Transmits the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	801a      	strh	r2, [r3, #0]
}
 80074a8:	f107 070c 	add.w	r7, r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop

080074b4 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d003      	beq.n	80074d4 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8b1b      	ldrh	r3, [r3, #24]
 80074d0:	81fb      	strh	r3, [r7, #14]
 80074d2:	e002      	b.n	80074da <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8a9b      	ldrh	r3, [r3, #20]
 80074d8:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80074da:	89fb      	ldrh	r3, [r7, #14]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	f107 0714 	add.w	r7, r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8a1b      	ldrh	r3, [r3, #16]
 80074f4:	b29b      	uxth	r3, r3
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	f107 070c 	add.w	r7, r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop

08007504 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	460a      	mov	r2, r1
 8007510:	807a      	strh	r2, [r7, #2]
 8007512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8007514:	787b      	ldrb	r3, [r7, #1]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	889b      	ldrh	r3, [r3, #4]
 800751e:	b29a      	uxth	r2, r3
 8007520:	887b      	ldrh	r3, [r7, #2]
 8007522:	4313      	orrs	r3, r2
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	809a      	strh	r2, [r3, #4]
 800752a:	e00a      	b.n	8007542 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	889b      	ldrh	r3, [r3, #4]
 8007530:	b29a      	uxth	r2, r3
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	ea6f 0303 	mvn.w	r3, r3
 8007538:	b29b      	uxth	r3, r3
 800753a:	4013      	ands	r3, r2
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	809a      	strh	r2, [r3, #4]
  }
}
 8007542:	f107 070c 	add.w	r7, r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <SPI_LastDMATransferCmd>:
  *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
  *          and number of data for reception Odd.
  * @retval None
  */
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	889b      	ldrh	r3, [r3, #4]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	809a      	strh	r2, [r3, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	889b      	ldrh	r3, [r3, #4]
 800756c:	b29a      	uxth	r2, r3
 800756e:	887b      	ldrh	r3, [r7, #2]
 8007570:	4313      	orrs	r3, r2
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	809a      	strh	r2, [r3, #4]
}
 8007578:	f107 070c 	add.w	r7, r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	460a      	mov	r2, r1
 8007590:	70fa      	strb	r2, [r7, #3]
 8007592:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	81fb      	strh	r3, [r7, #14]
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80075aa:	89fb      	ldrh	r3, [r7, #14]
 80075ac:	f04f 0201 	mov.w	r2, #1
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80075b6:	78bb      	ldrb	r3, [r7, #2]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	889b      	ldrh	r3, [r3, #4]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	89bb      	ldrh	r3, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	809a      	strh	r2, [r3, #4]
 80075cc:	e00a      	b.n	80075e4 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	889b      	ldrh	r3, [r3, #4]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	89bb      	ldrh	r3, [r7, #12]
 80075d6:	ea6f 0303 	mvn.w	r3, r3
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4013      	ands	r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	809a      	strh	r2, [r3, #4]
  }
}
 80075e4:	f107 0714 	add.w	r7, r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop

080075f0 <SPI_GetTransmissionFIFOStatus>:
  *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007602:	b29b      	uxth	r3, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	f107 070c 	add.w	r7, r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <SPI_GetReceptionFIFOStatus>:
  *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	891b      	ldrh	r3, [r3, #8]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007622:	b29b      	uxth	r3, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	f107 070c 	add.w	r7, r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	891b      	ldrh	r3, [r3, #8]
 8007646:	b29a      	uxth	r2, r3
 8007648:	887b      	ldrh	r3, [r7, #2]
 800764a:	4013      	ands	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8007652:	f04f 0301 	mov.w	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
 8007658:	e002      	b.n	8007660 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	f107 0714 	add.w	r7, r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <SPI_I2S_ClearFlag>:
  *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800767c:	887b      	ldrh	r3, [r7, #2]
 800767e:	ea6f 0303 	mvn.w	r3, r3
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	811a      	strh	r2, [r3, #8]
}
 8007688:	f107 070c 	add.w	r7, r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop

08007694 <SPI_I2S_GetITStatus>:
  *     @arg I2S_IT_UDR: Underrun interrupt.  
  *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	81bb      	strh	r3, [r7, #12]
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	817b      	strh	r3, [r7, #10]
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	f04f 0201 	mov.w	r2, #1
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80076d2:	897b      	ldrh	r3, [r7, #10]
 80076d4:	f04f 0201 	mov.w	r2, #1
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	889b      	ldrh	r3, [r3, #4]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	897b      	ldrh	r3, [r7, #10]
 80076e6:	4013      	ands	r3, r2
 80076e8:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	891b      	ldrh	r3, [r3, #8]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	4013      	ands	r3, r2
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d006      	beq.n	8007708 <SPI_I2S_GetITStatus+0x74>
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8007700:	f04f 0301 	mov.w	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
 8007706:	e002      	b.n	800770e <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	f107 0714 	add.w	r7, r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <SYSCFG_DeInit>:
  * @retval None
  * @note   MEM_MODE bits are not affected by APB reset.
  *         MEM_MODE bits took the value from the user option bytes.
  */
void SYSCFG_DeInit(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	f002 0203 	and.w	r2, r2, #3
 8007736:	601a      	str	r2, [r3, #0]
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	f042 42f8 	orr.w	r2, r2, #2080374784	; 0x7c000000
 800774e:	601a      	str	r2, [r3, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value */
  SYSCFG->CFGR2 = 0;
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	619a      	str	r2, [r3, #24]
}
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <SYSCFG_MemoryRemapConfig>:
  *     @arg SYSCFG_MemoryRemap_SystemMemory: System Flash memory mapped at 0x00000000
  *     @arg SYSCFG_MemoryRemap_SRAM: Embedded SRAM mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr1 = 0;
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpcfgr1 = SYSCFG->CFGR1;
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Clear MEM_MODE bits */
  tmpcfgr1 &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 0303 	bic.w	r3, r3, #3
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Set the new MEM_MODE bits value */
  tmpcfgr1 |= (uint32_t) SYSCFG_MemoryRemap;
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpcfgr1;
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
}
 80077e2:	f107 0714 	add.w	r7, r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr

080077ec <SYSCFG_DMAChannelRemapConfig>:
  *           use SYSCFG_DMAChannelRemapConfig(SYSCFG_DMARemap_TIM17, Disable)
  *           to map TIM17 DMA requests to DMA1 channel 1 (default mapping)
  * @retval None
  */
void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <SYSCFG_DMAChannelRemapConfig+0x2c>
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800780e:	6811      	ldr	r1, [r2, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	430a      	orrs	r2, r1
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e00d      	b.n	8007834 <SYSCFG_DMAChannelRemapConfig+0x48>
  }
  else
  {
    /* use the default DMA channel mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	ea6f 0202 	mvn.w	r2, r2
 8007830:	400a      	ands	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
  }
}
 8007834:	f107 070c 	add.w	r7, r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop

08007840 <SYSCFG_TriggerRemapConfig>:
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_TriggerRemapConfig(uint32_t SYSCFG_TriggerRemap, FunctionalState NewState)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_TRIGGER_REMAP(SYSCFG_TriggerRemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <SYSCFG_TriggerRemapConfig+0x2c>
  {
    /* Remap the trigger */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007862:	6811      	ldr	r1, [r2, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e00d      	b.n	8007888 <SYSCFG_TriggerRemapConfig+0x48>
  }
  else
  {
    /* Use the default trigger mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_TriggerRemap);
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	ea6f 0202 	mvn.w	r2, r2
 8007884:	400a      	ands	r2, r1
 8007886:	601a      	str	r2, [r3, #0]
  }
}
 8007888:	f107 070c 	add.w	r7, r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop

08007894 <SYSCFG_EncoderRemapConfig>:
  *     @arg SYSCFG_EncoderRemap_TIM3: Timer 3 IC1 and IC2 connected to TIM15 IC1 and IC2
  *     @arg SYSCFG_EncoderRemap_TIM4: Timer 4 IC1 and IC2 connected to TIM15 IC1 and IC2
  * @retval None
  */
void SYSCFG_EncoderRemapConfig(uint32_t SYSCFG_EncoderRemap)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ENCODER_REMAP(SYSCFG_EncoderRemap));

  /* Reset the encoder mode remapping bits */
  SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_CFGR1_ENCODER_MODE);
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80078b2:	601a      	str	r2, [r3, #0]

  /* Set the selected configuration */
  SYSCFG->CFGR1 |= (uint32_t)(SYSCFG_EncoderRemap);
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80078c4:	6811      	ldr	r1, [r2, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]
}
 80078cc:	f107 070c 	add.w	r7, r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <SYSCFG_USBInterruptLineRemapCmd>:
  *         @arg  USB Device Low Priority (USB_LP) interrupt mapped to line 20.
  *         @arg  USB Wakeup Interrupt (USB_WKUP) interrupt mapped to line 42.
  * @retval None
  */
void SYSCFG_USBInterruptLineRemapCmd(FunctionalState NewState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Remap the USB interupt lines */
  *(__IO uint32_t *) CFGR1_USBITRMP_BB = (uint32_t)NewState;
 80078e2:	f04f 0314 	mov.w	r3, #20
 80078e6:	f2c4 2320 	movt	r3, #16928	; 0x4220
 80078ea:	79fa      	ldrb	r2, [r7, #7]
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	f107 070c 	add.w	r7, r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <SYSCFG_I2CFastModePlusConfig>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using SYSCFG_I2CFastModePlus_I2C2 parameter.
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <SYSCFG_I2CFastModePlusConfig+0x2c>
  {
    /* Enable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800791a:	6811      	ldr	r1, [r2, #0]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	430a      	orrs	r2, r1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e00d      	b.n	8007940 <SYSCFG_I2CFastModePlusConfig+0x48>
  }
  else
  {
    /* Disable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007934:	6811      	ldr	r1, [r2, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	ea6f 0202 	mvn.w	r2, r2
 800793c:	400a      	ands	r2, r1
 800793e:	601a      	str	r2, [r3, #0]
  }
}
 8007940:	f107 070c 	add.w	r7, r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <SYSCFG_ITConfig>:
  * @param  NewState: new state of the specified SYSCFG interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState)  
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <SYSCFG_ITConfig+0x2c>
  {
    /* Enable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 |= SYSCFG_IT;
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800796e:	6811      	ldr	r1, [r2, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	430a      	orrs	r2, r1
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e00d      	b.n	8007994 <SYSCFG_ITConfig+0x48>
  }
  else
  {
    /* Disable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007988:	6811      	ldr	r1, [r2, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	ea6f 0202 	mvn.w	r2, r2
 8007990:	400a      	ands	r2, r1
 8007992:	601a      	str	r2, [r3, #0]
  }
}
 8007994:	f107 070c 	add.w	r7, r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop

080079a0 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80079a0:	b490      	push	{r4, r7}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	71fa      	strb	r2, [r7, #7]
 80079ac:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80079b4:	79bb      	ldrb	r3, [r7, #6]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80079be:	f04f 020f 	mov.w	r2, #15
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80079d0:	79ba      	ldrb	r2, [r7, #6]
 80079d2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	4610      	mov	r0, r2
 80079da:	f04f 0200 	mov.w	r2, #0
 80079de:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80079e2:	79b9      	ldrb	r1, [r7, #6]
 80079e4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80079e8:	b2c9      	uxtb	r1, r1
 80079ea:	f101 0102 	add.w	r1, r1, #2
 80079ee:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	ea6f 0202 	mvn.w	r2, r2
 80079f8:	4011      	ands	r1, r2
 80079fa:	f100 0202 	add.w	r2, r0, #2
 80079fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007a0a:	79ba      	ldrb	r2, [r7, #6]
 8007a0c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	4610      	mov	r0, r2
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007a1c:	79b9      	ldrb	r1, [r7, #6]
 8007a1e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8007a22:	b2c9      	uxtb	r1, r1
 8007a24:	f101 0102 	add.w	r1, r1, #2
 8007a28:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8007a2c:	79fc      	ldrb	r4, [r7, #7]
 8007a2e:	79ba      	ldrb	r2, [r7, #6]
 8007a30:	f002 0203 	and.w	r2, r2, #3
 8007a34:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007a38:	fa04 f202 	lsl.w	r2, r4, r2
 8007a3c:	4311      	orrs	r1, r2
 8007a3e:	f100 0202 	add.w	r2, r0, #2
 8007a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007a46:	f107 0710 	add.w	r7, r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc90      	pop	{r4, r7}
 8007a4e:	4770      	bx	lr

08007a50 <SYSCFG_BreakConfig>:
  *     @arg SYSCFG_Break_SRAMParity: SRAM Parity error is connected to the break input of TIM1.
  *     @arg SYSCFG_Break_HardFault: Lockup output of CortexM4 is connected to the break input of TIM1.
  * @retval None
  */
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007a68:	6991      	ldr	r1, [r2, #24]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	619a      	str	r2, [r3, #24]
}
 8007a70:	f107 070c 	add.w	r7, r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop

08007a7c <SYSCFG_BypassParityCheckDisable>:
  *         To re-enable the parity check on RAM perform a system reset.  
  * @param  None
  * @retval None
  */
void SYSCFG_BypassParityCheckDisable(void)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
  /* Disable the adddress parity check on RAM */
  *(__IO uint32_t *) CFGR1_BYPADDRPAR_BB = (uint32_t)0x00000001;
 8007a80:	f44f 7344 	mov.w	r3, #784	; 0x310
 8007a84:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8007a88:	f04f 0201 	mov.w	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <SYSCFG_SRAMWRPEnable>:
  *         To disable the ICODE SRAM write protection perform a system reset.
  * @param  None
  * @retval None
  */
void SYSCFG_SRAMWRPEnable(uint32_t SYSCFG_SRAMWRP)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_PAGE(SYSCFG_SRAMWRP));

  /* Enable the write-protection on the selected ICODE SRAM page */
  SYSCFG->RCR |= (uint32_t)SYSCFG_SRAMWRP;
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007aac:	6851      	ldr	r1, [r2, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
}
 8007ab4:	f107 070c 	add.w	r7, r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <SYSCFG_GetFlagStatus>:
  *   This parameter can be one of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval The new state of SYSCFG_Flag (SET or RESET).
  */
FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <SYSCFG_GetFlagStatus+0x28>
  {
    /* SYSCFG_Flag is set */
    bitstatus = SET;
 8007ae0:	f04f 0301 	mov.w	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
 8007ae6:	e002      	b.n	8007aee <SYSCFG_GetFlagStatus+0x2e>
  }
  else
  {
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	f107 0714 	add.w	r7, r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <SYSCFG_ClearFlag>:
  *   This parameter can be any combination of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval None
  */
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007b14:	6991      	ldr	r1, [r2, #24]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
}
 8007b1c:	f107 070c 	add.w	r7, r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007b36:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d10c      	bne.n	8007b58 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b42:	f04f 0101 	mov.w	r1, #1
 8007b46:	f7fe ffa3 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8007b4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b4e:	f04f 0100 	mov.w	r1, #0
 8007b52:	f7fe ff9d 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8007b56:	e0af      	b.n	8007cb8 <TIM_DeInit+0x190>
  } 
  else if (TIMx == TIM2) 
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5e:	d10c      	bne.n	8007b7a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8007b60:	f04f 0001 	mov.w	r0, #1
 8007b64:	f04f 0101 	mov.w	r1, #1
 8007b68:	f7fe ffbc 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8007b6c:	f04f 0001 	mov.w	r0, #1
 8007b70:	f04f 0100 	mov.w	r1, #0
 8007b74:	f7fe ffb6 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8007b78:	e09e      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM3)
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d10c      	bne.n	8007ba2 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8007b88:	f04f 0002 	mov.w	r0, #2
 8007b8c:	f04f 0101 	mov.w	r1, #1
 8007b90:	f7fe ffa8 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8007b94:	f04f 0002 	mov.w	r0, #2
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	f7fe ffa2 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8007ba0:	e08a      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM4)
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ba8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d10c      	bne.n	8007bca <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8007bb0:	f04f 0004 	mov.w	r0, #4
 8007bb4:	f04f 0101 	mov.w	r1, #1
 8007bb8:	f7fe ff94 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8007bbc:	f04f 0004 	mov.w	r0, #4
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	f7fe ff8e 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8007bc8:	e076      	b.n	8007cb8 <TIM_DeInit+0x190>
  }   
  else if (TIMx == TIM6)  
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d10c      	bne.n	8007bf2 <TIM_DeInit+0xca>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8007bd8:	f04f 0010 	mov.w	r0, #16
 8007bdc:	f04f 0101 	mov.w	r1, #1
 8007be0:	f7fe ff80 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8007be4:	f04f 0010 	mov.w	r0, #16
 8007be8:	f04f 0100 	mov.w	r1, #0
 8007bec:	f7fe ff7a 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8007bf0:	e062      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM7)
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007bf8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d10c      	bne.n	8007c1a <TIM_DeInit+0xf2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8007c00:	f04f 0020 	mov.w	r0, #32
 8007c04:	f04f 0101 	mov.w	r1, #1
 8007c08:	f7fe ff6c 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8007c0c:	f04f 0020 	mov.w	r0, #32
 8007c10:	f04f 0100 	mov.w	r1, #0
 8007c14:	f7fe ff66 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8007c18:	e04e      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM8)
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007c20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d10c      	bne.n	8007c42 <TIM_DeInit+0x11a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8007c28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c2c:	f04f 0101 	mov.w	r1, #1
 8007c30:	f7fe ff2e 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8007c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	f7fe ff28 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8007c40:	e03a      	b.n	8007cb8 <TIM_DeInit+0x190>
  }    
  else if (TIMx == TIM15)
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c48:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d10c      	bne.n	8007c6a <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8007c50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c54:	f04f 0101 	mov.w	r1, #1
 8007c58:	f7fe ff1a 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8007c5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c60:	f04f 0100 	mov.w	r1, #0
 8007c64:	f7fe ff14 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8007c68:	e026      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM16) 
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8007c70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d10c      	bne.n	8007c92 <TIM_DeInit+0x16a>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8007c78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007c7c:	f04f 0101 	mov.w	r1, #1
 8007c80:	f7fe ff06 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8007c84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007c88:	f04f 0100 	mov.w	r1, #0
 8007c8c:	f7fe ff00 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8007c90:	e012      	b.n	8007cb8 <TIM_DeInit+0x190>
  }  
  else
  { 
    if (TIMx == TIM17) 
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8007c98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d10b      	bne.n	8007cb8 <TIM_DeInit+0x190>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8007ca0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007ca4:	f04f 0101 	mov.w	r1, #1
 8007ca8:	f7fe fef2 	bl	8006a90 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8007cac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007cb0:	f04f 0100 	mov.w	r1, #0
 8007cb4:	f7fe feec 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    }   
  }
}
 8007cb8:	f107 0708 	add.w	r7, r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007cdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d018      	beq.n	8007d16 <TIM_TimeBaseInit+0x56>
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007cea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d011      	beq.n	8007d16 <TIM_TimeBaseInit+0x56>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d00d      	beq.n	8007d16 <TIM_TimeBaseInit+0x56>
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d006      	beq.n	8007d16 <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d108      	bne.n	8007d28 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885a      	ldrh	r2, [r3, #2]
 8007d22:	89fb      	ldrh	r3, [r7, #14]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d00f      	beq.n	8007d56 <TIM_TimeBaseInit+0x96>
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d008      	beq.n	8007d56 <TIM_TimeBaseInit+0x96>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	891a      	ldrh	r2, [r3, #8]
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	89fa      	ldrh	r2, [r7, #14]
 8007d5a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	881a      	ldrh	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007d72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d01b      	beq.n	8007db2 <TIM_TimeBaseInit+0xf2>
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007d80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d014      	beq.n	8007db2 <TIM_TimeBaseInit+0xf2>
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d00d      	beq.n	8007db2 <TIM_TimeBaseInit+0xf2>
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8007d9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d006      	beq.n	8007db2 <TIM_TimeBaseInit+0xf2>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8007daa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d104      	bne.n	8007dbc <TIM_TimeBaseInit+0xfc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	7a9b      	ldrb	r3, [r3, #10]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f04f 0201 	mov.w	r2, #1
 8007dc2:	615a      	str	r2, [r3, #20]
}
 8007dc4:	f107 0714 	add.w	r7, r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	729a      	strb	r2, [r3, #10]
}
 8007e00:	f107 070c 	add.w	r7, r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop

08007e0c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	460a      	mov	r2, r1
 8007e18:	807a      	strh	r2, [r7, #2]
 8007e1a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	887a      	ldrh	r2, [r7, #2]
 8007e20:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8007e22:	883a      	ldrh	r2, [r7, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	615a      	str	r2, [r3, #20]
}
 8007e28:	f107 070c 	add.w	r7, r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e4c:	89fb      	ldrh	r3, [r7, #14]
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8007e54:	89fa      	ldrh	r2, [r7, #14]
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	89fa      	ldrh	r2, [r7, #14]
 8007e60:	801a      	strh	r2, [r3, #0]
}
 8007e62:	f107 0714 	add.w	r7, r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007e7c:	f107 070c 	add.w	r7, r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop

08007e88 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e98:	f107 070c 	add.w	r7, r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f107 070c 	add.w	r7, r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec8:	b29b      	uxth	r3, r3
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f107 070c 	add.w	r7, r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop

08007ed8 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e007      	b.n	8007f0c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f023 0302 	bic.w	r3, r3, #2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	801a      	strh	r2, [r3, #0]
  }
}
 8007f0c:	f107 070c 	add.w	r7, r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop

08007f18 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f043 0304 	orr.w	r3, r3, #4
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e007      	b.n	8007f4c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f023 0304 	bic.w	r3, r3, #4
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	801a      	strh	r2, [r3, #0]
  }
}
 8007f4c:	f107 070c 	add.w	r7, r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop

08007f58 <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	e007      	b.n	8007f8c <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	801a      	strh	r2, [r3, #0]
  }  
}
 8007f8c:	f107 070c 	add.w	r7, r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop

08007f98 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d008      	beq.n	8007fbc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e007      	b.n	8007fcc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	801a      	strh	r2, [r3, #0]
  }
}
 8007fcc:	f107 070c 	add.w	r7, r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 0308 	bic.w	r3, r3, #8
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	887b      	ldrh	r3, [r7, #2]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	801a      	strh	r2, [r3, #0]
}
 8008004:	f107 070c 	add.w	r7, r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	887b      	ldrh	r3, [r7, #2]
 8008034:	4313      	orrs	r3, r2
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	801a      	strh	r2, [r3, #0]
}
 800803c:	f107 070c 	add.w	r7, r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop

08008048 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d008      	beq.n	800806c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	e007      	b.n	800807c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f023 0301 	bic.w	r3, r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	801a      	strh	r2, [r3, #0]
  }
}
 800807c:	f107 070c 	add.w	r7, r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	bc80      	pop	{r7}
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop

08008088 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f023 0201 	bic.w	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f023 0303 	bic.w	r3, r3, #3
 80080d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f023 0302 	bic.w	r3, r3, #2
 80080e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	899b      	ldrh	r3, [r3, #12]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	889b      	ldrh	r3, [r3, #4]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008102:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008106:	429a      	cmp	r2, r3
 8008108:	d01b      	beq.n	8008142 <TIM_OC1Init+0xba>
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008110:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008114:	429a      	cmp	r2, r3
 8008116:	d014      	beq.n	8008142 <TIM_OC1Init+0xba>
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800811e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008122:	429a      	cmp	r2, r3
 8008124:	d00d      	beq.n	8008142 <TIM_OC1Init+0xba>
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800812c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008130:	429a      	cmp	r2, r3
 8008132:	d006      	beq.n	8008142 <TIM_OC1Init+0xba>
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800813a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800813e:	429a      	cmp	r2, r3
 8008140:	d123      	bne.n	800818a <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f023 0308 	bic.w	r3, r3, #8
 8008148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	89db      	ldrh	r3, [r3, #14]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f023 0304 	bic.w	r3, r3, #4
 800815a:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	8a1b      	ldrh	r3, [r3, #16]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	8a5b      	ldrh	r3, [r3, #18]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	621a      	str	r2, [r3, #32]
}
 80081a4:	f107 071c 	add.w	r7, r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	f023 0210 	bic.w	r2, r3, #16
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fc:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f023 0320 	bic.w	r3, r3, #32
 8008212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	899b      	ldrh	r3, [r3, #12]
 8008218:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	889b      	ldrh	r3, [r3, #4]
 8008226:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008236:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800823a:	429a      	cmp	r2, r3
 800823c:	d006      	beq.n	800824c <TIM_OC2Init+0x9c>
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008244:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008248:	429a      	cmp	r2, r3
 800824a:	d12b      	bne.n	80082a4 <TIM_OC2Init+0xf4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	89db      	ldrh	r3, [r3, #14]
 8008258:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	4313      	orrs	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008268:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88db      	ldrh	r3, [r3, #6]
 800826e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	8a1b      	ldrh	r3, [r3, #16]
 800828c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	8a5b      	ldrh	r3, [r3, #18]
 800829a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	f107 071c 	add.w	r7, r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008308:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	899b      	ldrh	r3, [r3, #12]
 8008328:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	4313      	orrs	r3, r2
 8008330:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	889b      	ldrh	r3, [r3, #4]
 8008336:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008346:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800834a:	429a      	cmp	r2, r3
 800834c:	d006      	beq.n	800835c <TIM_OC3Init+0x94>
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008354:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008358:	429a      	cmp	r2, r3
 800835a:	d12b      	bne.n	80083b4 <TIM_OC3Init+0xec>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	89db      	ldrh	r3, [r3, #14]
 8008368:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008378:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800838e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	8a1b      	ldrh	r3, [r3, #16]
 800839c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	8a5b      	ldrh	r3, [r3, #18]
 80083aa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	f107 071c 	add.w	r7, r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr

080083d8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80083e2:	f04f 0300 	mov.w	r3, #0
 80083e6:	613b      	str	r3, [r7, #16]
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008418:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008420:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008436:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	899b      	ldrh	r3, [r3, #12]
 800843c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	889b      	ldrh	r3, [r3, #4]
 800844a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800845a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800845e:	429a      	cmp	r2, r3
 8008460:	d006      	beq.n	8008470 <TIM_OC4Init+0x98>
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800846c:	429a      	cmp	r2, r3
 800846e:	d10a      	bne.n	8008486 <TIM_OC4Init+0xae>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	8a1b      	ldrh	r3, [r3, #16]
 800847c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	621a      	str	r2, [r3, #32]
}
 80084a0:	f107 071c 	add.w	r7, r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop

080084ac <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ec:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084fe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	899b      	ldrh	r3, [r3, #12]
 8008504:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008522:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008526:	429a      	cmp	r2, r3
 8008528:	d006      	beq.n	8008538 <TIM_OC5Init+0x8c>
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008530:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008534:	429a      	cmp	r2, r3
 8008536:	d10a      	bne.n	800854e <TIM_OC5Init+0xa2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	8a1b      	ldrh	r3, [r3, #16]
 8008544:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	f107 071c 	add.w	r7, r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop

08008574 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b4:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ca:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	899b      	ldrh	r3, [r3, #12]
 80085d0:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	889b      	ldrh	r3, [r3, #4]
 80085de:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80085ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d006      	beq.n	8008604 <TIM_OC6Init+0x90>
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80085fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008600:	429a      	cmp	r2, r3
 8008602:	d103      	bne.n	800860c <TIM_OC6Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	f107 071c 	add.w	r7, r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008646:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	659a      	str	r2, [r3, #88]	; 0x58
 800864e:	e005      	b.n	800865c <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008654:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800865c:	f107 070c 	add.w	r7, r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d006      	beq.n	8008688 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	659a      	str	r2, [r3, #88]	; 0x58
 8008686:	e005      	b.n	8008694 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008694:	f107 070c 	add.w	r7, r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop

080086a0 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	659a      	str	r2, [r3, #88]	; 0x58
 80086be:	e005      	b.n	80086cc <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80086cc:	f107 070c 	add.w	r7, r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f04f 0200 	mov.w	r2, #0
 80086f6:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	825a      	strh	r2, [r3, #18]
}
 8008720:	f107 070c 	add.w	r7, r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop

0800872c <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	460b      	mov	r3, r1
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f103 0318 	add.w	r3, r3, #24
 8008750:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8008752:	897b      	ldrh	r3, [r7, #10]
 8008754:	f04f 0201 	mov.w	r2, #1
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	8a7b      	ldrh	r3, [r7, #18]
 8008764:	ea6f 0303 	mvn.w	r3, r3
 8008768:	b29b      	uxth	r3, r3
 800876a:	401a      	ands	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8008770:	897b      	ldrh	r3, [r7, #10]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <TIM_SelectOCxM+0x50>
 8008776:	897b      	ldrh	r3, [r7, #10]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d115      	bne.n	80087a8 <TIM_SelectOCxM+0x7c>
  {
    tmp += (TIM_Channel>>1);
 800877c:	897b      	ldrh	r3, [r7, #10]
 800877e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8008782:	b29b      	uxth	r3, r3
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	18d3      	adds	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008798:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	6811      	ldr	r1, [r2, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e019      	b.n	80087dc <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 80087a8:	897b      	ldrh	r3, [r7, #10]
 80087aa:	f1a3 0304 	sub.w	r3, r3, #4
 80087ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	18d3      	adds	r3, r2, r3
 80087b6:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c6:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	6811      	ldr	r1, [r2, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	b292      	uxth	r2, r2
 80087d2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80087d6:	b292      	uxth	r2, r2
 80087d8:	430a      	orrs	r2, r1
 80087da:	601a      	str	r2, [r3, #0]
  }
}
 80087dc:	f107 071c 	add.w	r7, r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80087f8:	f107 070c 	add.w	r7, r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop

08008804 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008814:	f107 070c 	add.w	r7, r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop

08008820 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008830:	f107 070c 	add.w	r7, r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop

0800883c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800884c:	f107 070c 	add.w	r7, r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop

08008858 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008868:	f107 070c 	add.w	r7, r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop

08008874 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008884:	f107 070c 	add.w	r7, r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80088b4:	887b      	ldrh	r3, [r7, #2]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	619a      	str	r2, [r3, #24]
}
 80088c2:	f107 0714 	add.w	r7, r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr

080088cc <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 80088f0:	887b      	ldrh	r3, [r7, #2]
 80088f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	619a      	str	r2, [r3, #24]
}
 8008902:	f107 0714 	add.w	r7, r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr

0800890c <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800892c:	887b      	ldrh	r3, [r7, #2]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	61da      	str	r2, [r3, #28]
}
 800893a:	f107 0714 	add.w	r7, r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008950:	f04f 0300 	mov.w	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008962:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	61da      	str	r2, [r3, #28]
}
 8008976:	f107 0714 	add.w	r7, r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr

08008980 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 80089a0:	887b      	ldrh	r3, [r7, #2]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
}
 80089ae:	f107 0714 	add.w	r7, r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80089c4:	f04f 0300 	mov.w	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80089ea:	f107 0714 	add.w	r7, r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0308 	bic.w	r3, r3, #8
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8008a14:	887b      	ldrh	r3, [r7, #2]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	619a      	str	r2, [r3, #24]
}
 8008a22:	f107 0714 	add.w	r7, r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr

08008a2c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	619a      	str	r2, [r3, #24]
}
 8008a5e:	f107 0714 	add.w	r7, r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr

08008a68 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0308 	bic.w	r3, r3, #8
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8008a88:	887b      	ldrh	r3, [r7, #2]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	61da      	str	r2, [r3, #28]
}
 8008a96:	f107 0714 	add.w	r7, r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr

08008aa0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 8008ac0:	887b      	ldrh	r3, [r7, #2]
 8008ac2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	61da      	str	r2, [r3, #28]
}
 8008ad2:	f107 0714 	add.w	r7, r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0308 	bic.w	r3, r3, #8
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 8008afc:	887b      	ldrh	r3, [r7, #2]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008b0a:	f107 0714 	add.w	r7, r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008b20:	f04f 0300 	mov.w	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 8008b34:	887b      	ldrh	r3, [r7, #2]
 8008b36:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008b46:	f107 0714 	add.w	r7, r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0304 	bic.w	r3, r3, #4
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	619a      	str	r2, [r3, #24]
}
 8008b7e:	f107 0714 	add.w	r7, r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	619a      	str	r2, [r3, #24]
}
 8008bba:	f107 0714 	add.w	r7, r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bc80      	pop	{r7}
 8008bc2:	4770      	bx	lr

08008bc4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0304 	bic.w	r3, r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8008be4:	887b      	ldrh	r3, [r7, #2]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	61da      	str	r2, [r3, #28]
}
 8008bf2:	f107 0714 	add.w	r7, r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 8008c1c:	887b      	ldrh	r3, [r7, #2]
 8008c1e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	61da      	str	r2, [r3, #28]
}
 8008c2e:	f107 0714 	add.w	r7, r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	619a      	str	r2, [r3, #24]
}
 8008c66:	f107 0714 	add.w	r7, r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr

08008c70 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8008c90:	887b      	ldrh	r3, [r7, #2]
 8008c92:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	619a      	str	r2, [r3, #24]
}
 8008ca2:	f107 0714 	add.w	r7, r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8008ccc:	887b      	ldrh	r3, [r7, #2]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	61da      	str	r2, [r3, #28]
}
 8008cda:	f107 0714 	add.w	r7, r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8008d04:	887b      	ldrh	r3, [r7, #2]
 8008d06:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	61da      	str	r2, [r3, #28]
}
 8008d16:	f107 0714 	add.w	r7, r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 8008d40:	887b      	ldrh	r3, [r7, #2]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008d4e:	f107 0714 	add.w	r7, r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr

08008d58 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 8008d78:	887b      	ldrh	r3, [r7, #2]
 8008d7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008d8a:	f107 0714 	add.w	r7, r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8008da8:	4013      	ands	r3, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	431a      	orrs	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	609a      	str	r2, [r3, #8]
}
 8008dba:	f107 070c 	add.w	r7, r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0302 	bic.w	r3, r3, #2
 8008de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 8008de4:	887b      	ldrh	r3, [r7, #2]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	f107 0714 	add.w	r7, r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr

08008dfc <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0308 	bic.w	r3, r3, #8
 8008e1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 8008e1c:	887b      	ldrh	r3, [r7, #2]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	621a      	str	r2, [r3, #32]
}
 8008e2a:	f107 0714 	add.w	r7, r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0320 	bic.w	r3, r3, #32
 8008e52:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	f107 0714 	add.w	r7, r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bc80      	pop	{r7}
 8008e6e:	4770      	bx	lr

08008e70 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	f107 0714 	add.w	r7, r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008eca:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 8008ecc:	887b      	ldrh	r3, [r7, #2]
 8008ece:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	f107 0714 	add.w	r7, r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f06:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	f107 0714 	add.w	r7, r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr

08008f24 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008f30:	f04f 0300 	mov.w	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f42:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 8008f44:	887b      	ldrh	r3, [r7, #2]
 8008f46:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	f107 0714 	add.w	r7, r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr

08008f60 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 8008f80:	887b      	ldrh	r3, [r7, #2]
 8008f82:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	f107 0714 	add.w	r7, r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr

08008f9c <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 8008fbc:	887b      	ldrh	r3, [r7, #2]
 8008fbe:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	f107 0714 	add.w	r7, r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	807a      	strh	r2, [r7, #2]
 8008fe6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	f04f 0201 	mov.w	r2, #1
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1a      	ldr	r2, [r3, #32]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	ea6f 0303 	mvn.w	r3, r3
 8009004:	401a      	ands	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1a      	ldr	r2, [r3, #32]
 800900e:	8839      	ldrh	r1, [r7, #0]
 8009010:	887b      	ldrh	r3, [r7, #2]
 8009012:	fa01 f303 	lsl.w	r3, r1, r3
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	f107 0714 	add.w	r7, r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop

08009028 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	460a      	mov	r2, r1
 8009034:	807a      	strh	r2, [r7, #2]
 8009036:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 800903e:	887b      	ldrh	r3, [r7, #2]
 8009040:	f04f 0204 	mov.w	r2, #4
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1a      	ldr	r2, [r3, #32]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	ea6f 0303 	mvn.w	r3, r3
 8009054:	401a      	ands	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	8839      	ldrh	r1, [r7, #0]
 8009060:	887b      	ldrh	r3, [r7, #2]
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	621a      	str	r2, [r3, #32]
}
 800906c:	f107 0714 	add.w	r7, r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop

08009078 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10f      	bne.n	80090aa <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800908e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009090:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8009092:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009094:	891b      	ldrh	r3, [r3, #8]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fd02 	bl	8009aa0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	88db      	ldrh	r3, [r3, #6]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4619      	mov	r1, r3
 80090a4:	f000 f8ec 	bl	8009280 <TIM_SetIC1Prescaler>
 80090a8:	e036      	b.n	8009118 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d10f      	bne.n	80090d2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80090b6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80090b8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80090ba:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80090bc:	891b      	ldrh	r3, [r3, #8]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd2a 	bl	8009b18 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	88db      	ldrh	r3, [r3, #6]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4619      	mov	r1, r3
 80090cc:	f000 f8f0 	bl	80092b0 <TIM_SetIC2Prescaler>
 80090d0:	e022      	b.n	8009118 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	d10f      	bne.n	80090fa <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80090de:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80090e0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80090e2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80090e4:	891b      	ldrh	r3, [r3, #8]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fd60 	bl	8009bac <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	88db      	ldrh	r3, [r3, #6]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4619      	mov	r1, r3
 80090f4:	f000 f8f6 	bl	80092e4 <TIM_SetIC3Prescaler>
 80090f8:	e00e      	b.n	8009118 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80090fe:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009100:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8009102:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009104:	891b      	ldrh	r3, [r3, #8]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fd96 	bl	8009c38 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	4619      	mov	r1, r3
 8009114:	f000 f8fe 	bl	8009314 <TIM_SetIC4Prescaler>
  }
}
 8009118:	f107 0708 	add.w	r7, r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f04f 0201 	mov.w	r2, #1
 800913e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	811a      	strh	r2, [r3, #8]
}
 8009150:	f107 070c 	add.w	r7, r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	bc80      	pop	{r7}
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop

0800915c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800916c:	f04f 0301 	mov.w	r3, #1
 8009170:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800917a:	f04f 0302 	mov.w	r3, #2
 800917e:	81fb      	strh	r3, [r7, #14]
 8009180:	e002      	b.n	8009188 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	889b      	ldrh	r3, [r3, #4]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d103      	bne.n	8009198 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8009190:	f04f 0302 	mov.w	r3, #2
 8009194:	81bb      	strh	r3, [r7, #12]
 8009196:	e002      	b.n	800919e <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8009198:	f04f 0301 	mov.w	r3, #1
 800919c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11c      	bne.n	80091e0 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	8859      	ldrh	r1, [r3, #2]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80091ae:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80091b0:	891b      	ldrh	r3, [r3, #8]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc74 	bl	8009aa0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	88db      	ldrh	r3, [r3, #6]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	4619      	mov	r1, r3
 80091c0:	f000 f85e 	bl	8009280 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	891b      	ldrh	r3, [r3, #8]
 80091c8:	89f9      	ldrh	r1, [r7, #14]
 80091ca:	89ba      	ldrh	r2, [r7, #12]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fca3 	bl	8009b18 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4619      	mov	r1, r3
 80091da:	f000 f869 	bl	80092b0 <TIM_SetIC2Prescaler>
 80091de:	e01b      	b.n	8009218 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	8859      	ldrh	r1, [r3, #2]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80091e8:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80091ea:	891b      	ldrh	r3, [r3, #8]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fc93 	bl	8009b18 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4619      	mov	r1, r3
 80091fa:	f000 f859 	bl	80092b0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	891b      	ldrh	r3, [r3, #8]
 8009202:	89f9      	ldrh	r1, [r7, #14]
 8009204:	89ba      	ldrh	r2, [r7, #12]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fc4a 	bl	8009aa0 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	88db      	ldrh	r3, [r3, #6]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4619      	mov	r1, r3
 8009214:	f000 f834 	bl	8009280 <TIM_SetIC1Prescaler>
  }
}
 8009218:	f107 0710 	add.w	r7, r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800922c:	4618      	mov	r0, r3
 800922e:	f107 070c 	add.w	r7, r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr

08009238 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8009244:	4618      	mov	r0, r3
 8009246:	f107 070c 	add.w	r7, r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr

08009250 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800925c:	4618      	mov	r0, r3
 800925e:	f107 070c 	add.w	r7, r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	bc80      	pop	{r7}
 8009266:	4770      	bx	lr

08009268 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009274:	4618      	mov	r0, r3
 8009276:	f107 070c 	add.w	r7, r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr

08009280 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	f023 020c 	bic.w	r2, r3, #12
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	887b      	ldrh	r3, [r7, #2]
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	619a      	str	r2, [r3, #24]
}
 80092a4:	f107 070c 	add.w	r7, r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bc80      	pop	{r7}
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop

080092b0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	887b      	ldrh	r3, [r7, #2]
 80092ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	619a      	str	r2, [r3, #24]
}
 80092d8:	f107 070c 	add.w	r7, r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop

080092e4 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69da      	ldr	r2, [r3, #28]
 80092f4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80092f8:	4013      	ands	r3, r2
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69da      	ldr	r2, [r3, #28]
 8009302:	887b      	ldrh	r3, [r7, #2]
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	61da      	str	r2, [r3, #28]
}
 800930a:	f107 070c 	add.w	r7, r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr

08009314 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69da      	ldr	r2, [r3, #28]
 8009324:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8009328:	4013      	ands	r3, r2
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69da      	ldr	r2, [r3, #28]
 8009332:	887b      	ldrh	r3, [r7, #2]
 8009334:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009338:	b29b      	uxth	r3, r3
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	61da      	str	r2, [r3, #28]
}
 8009340:	f107 070c 	add.w	r7, r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop

0800934c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	881a      	ldrh	r2, [r3, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800935e:	4313      	orrs	r3, r2
 8009360:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8009366:	4313      	orrs	r3, r2
 8009368:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800936e:	4313      	orrs	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	891b      	ldrh	r3, [r3, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	b29a      	uxth	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	895b      	ldrh	r3, [r3, #10]
 800937e:	4313      	orrs	r3, r2
 8009380:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8009386:	4313      	orrs	r3, r2
 8009388:	b29b      	uxth	r3, r3
 800938a:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8009390:	f107 070c 	add.w	r7, r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop

0800939c <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	ea4f 4103 	mov.w	r1, r3, lsl #16
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	430b      	orrs	r3, r1
 80093c4:	431a      	orrs	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44
}
 80093ca:	f107 0714 	add.w	r7, r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e6:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	ea4f 5103 	mov.w	r1, r3, lsl #20
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	430b      	orrs	r3, r1
 80093fc:	431a      	orrs	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009402:	f107 0714 	add.w	r7, r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	645a      	str	r2, [r3, #68]	; 0x44
 800942a:	e005      	b.n	8009438 <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009430:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 8009438:	f107 070c 	add.w	r7, r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop

08009444 <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d006      	beq.n	8009464 <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	645a      	str	r2, [r3, #68]	; 0x44
 8009462:	e005      	b.n	8009470 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009468:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009470:	f107 070c 	add.w	r7, r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bc80      	pop	{r7}
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop

0800947c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	819a      	strh	r2, [r3, #12]
}
 80094bc:	f107 070c 	add.w	r7, r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d006      	beq.n	80094e8 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	645a      	str	r2, [r3, #68]	; 0x44
 80094e6:	e007      	b.n	80094f8 <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ec:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80094f0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 80094f8:	f107 070c 	add.w	r7, r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f043 0204 	orr.w	r2, r3, #4
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	e006      	b.n	8009532 <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800952c:	4013      	ands	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6053      	str	r3, [r2, #4]
  }
}
 8009532:	f107 070c 	add.w	r7, r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d006      	beq.n	800955c <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f043 0201 	orr.w	r2, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	e006      	b.n	800956a <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009564:	4013      	ands	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6053      	str	r3, [r2, #4]
  }
}
 800956a:	f107 070c 	add.w	r7, r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	460a      	mov	r2, r1
 8009580:	807a      	strh	r2, [r7, #2]
 8009582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009584:	787b      	ldrb	r3, [r7, #1]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d006      	beq.n	8009598 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	887b      	ldrh	r3, [r7, #2]
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	e008      	b.n	80095aa <TIM_ITConfig+0x36>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	887b      	ldrh	r3, [r7, #2]
 800959e:	ea6f 0303 	mvn.w	r3, r3
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	401a      	ands	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
  }
}
 80095aa:	f107 070c 	add.w	r7, r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bc80      	pop	{r7}
 80095b2:	4770      	bx	lr

080095b4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	615a      	str	r2, [r3, #20]
}
 80095c6:	f107 070c 	add.w	r7, r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 80095ec:	f04f 0301 	mov.w	r3, #1
 80095f0:	73fb      	strb	r3, [r7, #15]
 80095f2:	e002      	b.n	80095fa <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	f107 0714 	add.w	r7, r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8009614:	887b      	ldrh	r3, [r7, #2]
 8009616:	ea6f 0303 	mvn.w	r3, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	461a      	mov	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	611a      	str	r2, [r3, #16]
}
 8009622:	f107 070c 	add.w	r7, r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	bc80      	pop	{r7}
 800962a:	4770      	bx	lr

0800962c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	81bb      	strh	r3, [r7, #12]
 8009644:	f04f 0300 	mov.w	r3, #0
 8009648:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	b29a      	uxth	r2, r3
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	4013      	ands	r3, r2
 8009654:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	b29a      	uxth	r2, r3
 800965c:	887b      	ldrh	r3, [r7, #2]
 800965e:	4013      	ands	r3, r2
 8009660:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8009662:	89bb      	ldrh	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <TIM_GetITStatus+0x4a>
 8009668:	897b      	ldrh	r3, [r7, #10]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800966e:	f04f 0301 	mov.w	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	e002      	b.n	800967c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	f107 0714 	add.w	r7, r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop

0800968c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8009698:	887b      	ldrh	r3, [r7, #2]
 800969a:	ea6f 0303 	mvn.w	r3, r3
 800969e:	b29b      	uxth	r3, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	611a      	str	r2, [r3, #16]
}
 80096a6:	f107 070c 	add.w	r7, r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr

080096b0 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	460a      	mov	r2, r1
 80096bc:	807a      	strh	r2, [r7, #2]
 80096be:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80096c0:	887a      	ldrh	r2, [r7, #2]
 80096c2:	883b      	ldrh	r3, [r7, #0]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80096ce:	f107 070c 	add.w	r7, r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	460a      	mov	r2, r1
 80096e4:	807a      	strh	r2, [r7, #2]
 80096e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80096e8:	787b      	ldrb	r3, [r7, #1]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d006      	beq.n	80096fc <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60da      	str	r2, [r3, #12]
 80096fa:	e008      	b.n	800970e <TIM_DMACmd+0x36>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	ea6f 0303 	mvn.w	r3, r3
 8009706:	b29b      	uxth	r3, r3
 8009708:	401a      	ands	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
  }
}
 800970e:	f107 070c 	add.w	r7, r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f043 0208 	orr.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	e006      	b.n	8009746 <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8009740:	4013      	ands	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6053      	str	r3, [r2, #4]
  }
}
 8009746:	f107 070c 	add.w	r7, r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr

08009750 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8009760:	4013      	ands	r3, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6093      	str	r3, [r2, #8]
}
 8009766:	f107 070c 	add.w	r7, r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800977c:	887b      	ldrh	r3, [r7, #2]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4619      	mov	r1, r3
 8009782:	f000 f877 	bl	8009874 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f043 0207 	orr.w	r2, r3, #7
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	609a      	str	r2, [r3, #8]
}
 8009792:	f107 0708 	add.w	r7, r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop

0800979c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	8179      	strh	r1, [r7, #10]
 80097a6:	813a      	strh	r2, [r7, #8]
 80097a8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80097aa:	897b      	ldrh	r3, [r7, #10]
 80097ac:	2b60      	cmp	r3, #96	; 0x60
 80097ae:	d108      	bne.n	80097c2 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80097b0:	893a      	ldrh	r2, [r7, #8]
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	4611      	mov	r1, r2
 80097b8:	f04f 0201 	mov.w	r2, #1
 80097bc:	f000 f9ac 	bl	8009b18 <TI2_Config>
 80097c0:	e007      	b.n	80097d2 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80097c2:	893a      	ldrh	r2, [r7, #8]
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	4611      	mov	r1, r2
 80097ca:	f04f 0201 	mov.w	r2, #1
 80097ce:	f000 f967 	bl	8009aa0 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80097d2:	897b      	ldrh	r3, [r7, #10]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	4619      	mov	r1, r3
 80097d8:	f000 f84c 	bl	8009874 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f043 0207 	orr.w	r2, r3, #7
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	f107 0710 	add.w	r7, r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	8179      	strh	r1, [r7, #10]
 80097fa:	813a      	strh	r2, [r7, #8]
 80097fc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8009804:	8979      	ldrh	r1, [r7, #10]
 8009806:	893a      	ldrh	r2, [r7, #8]
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f8ac 	bl	8009968 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8009816:	8afb      	ldrh	r3, [r7, #22]
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800981e:	8afb      	ldrh	r3, [r7, #22]
 8009820:	f043 0307 	orr.w	r3, r3, #7
 8009824:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8009826:	8afb      	ldrh	r3, [r7, #22]
 8009828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009834:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009836:	8afa      	ldrh	r2, [r7, #22]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	609a      	str	r2, [r3, #8]
}
 800983c:	f107 0718 	add.w	r7, r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	8179      	strh	r1, [r7, #10]
 800984e:	813a      	strh	r2, [r7, #8]
 8009850:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8009852:	8979      	ldrh	r1, [r7, #10]
 8009854:	893a      	ldrh	r2, [r7, #8]
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f885 	bl	8009968 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	609a      	str	r2, [r3, #8]
}
 800986a:	f107 0710 	add.w	r7, r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop

08009874 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800988c:	89fb      	ldrh	r3, [r7, #14]
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009892:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8009894:	89fa      	ldrh	r2, [r7, #14]
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	4313      	orrs	r3, r2
 800989a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989c:	89fa      	ldrh	r2, [r7, #14]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	609a      	str	r2, [r3, #8]
}
 80098a2:	f107 0714 	add.w	r7, r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr

080098ac <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80098c0:	4013      	ands	r3, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	887b      	ldrh	r3, [r7, #2]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]
}
 80098d2:	f107 070c 	add.w	r7, r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr

080098dc <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]
}
 80098fe:	f107 070c 	add.w	r7, r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr

08009908 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800991a:	f023 0307 	bic.w	r3, r3, #7
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	609a      	str	r2, [r3, #8]
}
 800992e:	f107 070c 	add.w	r7, r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	887b      	ldrh	r3, [r7, #2]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	609a      	str	r2, [r3, #8]
}
 800995e:	f107 070c 	add.w	r7, r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr

08009968 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	8179      	strh	r1, [r7, #10]
 8009972:	813a      	strh	r2, [r7, #8]
 8009974:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8009976:	f04f 0300 	mov.w	r3, #0
 800997a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8009982:	8afb      	ldrh	r3, [r7, #22]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800998e:	b29a      	uxth	r2, r3
 8009990:	893b      	ldrh	r3, [r7, #8]
 8009992:	4313      	orrs	r3, r2
 8009994:	b29a      	uxth	r2, r3
 8009996:	897b      	ldrh	r3, [r7, #10]
 8009998:	4313      	orrs	r3, r2
 800999a:	b29a      	uxth	r2, r3
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	4313      	orrs	r3, r2
 80099a0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a2:	8afa      	ldrh	r2, [r7, #22]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	609a      	str	r2, [r3, #8]
}
 80099a8:	f107 071c 	add.w	r7, r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop

080099b4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	8179      	strh	r1, [r7, #10]
 80099be:	813a      	strh	r2, [r7, #8]
 80099c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80099c8:	f04f 0300 	mov.w	r3, #0
 80099cc:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80099e6:	8afb      	ldrh	r3, [r7, #22]
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80099ee:	8afa      	ldrh	r2, [r7, #22]
 80099f0:	897b      	ldrh	r3, [r7, #10]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80099f6:	8abb      	ldrh	r3, [r7, #20]
 80099f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8009a02:	8abb      	ldrh	r3, [r7, #20]
 8009a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8009a0e:	8a7b      	ldrh	r3, [r7, #18]
 8009a10:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a14:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	8a7b      	ldrh	r3, [r7, #18]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2a:	8afa      	ldrh	r2, [r7, #22]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8009a30:	8aba      	ldrh	r2, [r7, #20]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a36:	8a7a      	ldrh	r2, [r7, #18]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	f107 071c 	add.w	r7, r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	e006      	b.n	8009a76 <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8009a70:	4013      	ands	r3, r2
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6053      	str	r3, [r2, #4]
  }
}
 8009a76:	f107 070c 	add.w	r7, r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr

08009a80 <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	887a      	ldrh	r2, [r7, #2]
 8009a90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8009a94:	f107 070c 	add.w	r7, r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bc80      	pop	{r7}
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop

08009aa0 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	8179      	strh	r1, [r7, #10]
 8009aaa:	813a      	strh	r2, [r7, #8]
 8009aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f023 0201 	bic.w	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8009ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8009ada:	893a      	ldrh	r2, [r7, #8]
 8009adc:	88fb      	ldrh	r3, [r7, #6]
 8009ade:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f023 030a 	bic.w	r3, r3, #10
 8009af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8009af2:	897b      	ldrh	r3, [r7, #10]
 8009af4:	f043 0301 	orr.w	r3, r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	621a      	str	r2, [r3, #32]
}
 8009b0c:	f107 071c 	add.w	r7, r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc80      	pop	{r7}
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop

08009b18 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	8179      	strh	r1, [r7, #10]
 8009b22:	813a      	strh	r2, [r7, #8]
 8009b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	61bb      	str	r3, [r7, #24]
 8009b32:	f04f 0300 	mov.w	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1a      	ldr	r2, [r3, #32]
 8009b3c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009b40:	4013      	ands	r3, r2
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8009b52:	897b      	ldrh	r3, [r7, #10]
 8009b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8009b62:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009b6a:	69fa      	ldr	r2, [r7, #28]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8009b70:	893b      	ldrh	r3, [r7, #8]
 8009b72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8009b82:	4013      	ands	r3, r2
 8009b84:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f043 0310 	orr.w	r3, r3, #16
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	621a      	str	r2, [r3, #32]
}
 8009ba2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	8179      	strh	r1, [r7, #10]
 8009bb6:	813a      	strh	r2, [r7, #8]
 8009bb8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8009bba:	f04f 0300 	mov.w	r3, #0
 8009bbe:	82fb      	strh	r3, [r7, #22]
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	82bb      	strh	r3, [r7, #20]
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6a1a      	ldr	r2, [r3, #32]
 8009bd0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8009be6:	897b      	ldrh	r3, [r7, #10]
 8009be8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009bec:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8009bee:	8afb      	ldrh	r3, [r7, #22]
 8009bf0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8009bf4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	893b      	ldrh	r3, [r7, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	8afb      	ldrh	r3, [r7, #22]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c0a:	8abb      	ldrh	r3, [r7, #20]
 8009c0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009c10:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8009c12:	8a7a      	ldrh	r2, [r7, #18]
 8009c14:	8abb      	ldrh	r3, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c1e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c20:	8afa      	ldrh	r2, [r7, #22]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c26:	8aba      	ldrh	r2, [r7, #20]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	621a      	str	r2, [r3, #32]
}
 8009c2c:	f107 071c 	add.w	r7, r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop

08009c38 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	8179      	strh	r1, [r7, #10]
 8009c42:	813a      	strh	r2, [r7, #8]
 8009c44:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	82fb      	strh	r3, [r7, #22]
 8009c4c:	f04f 0300 	mov.w	r3, #0
 8009c50:	82bb      	strh	r3, [r7, #20]
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a1a      	ldr	r2, [r3, #32]
 8009c5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009c60:	4013      	ands	r3, r2
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8009c72:	897b      	ldrh	r3, [r7, #10]
 8009c74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009c78:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8009c7a:	8afb      	ldrh	r3, [r7, #22]
 8009c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c80:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8009c84:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8009c88:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8009c8a:	893b      	ldrh	r3, [r7, #8]
 8009c8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	8afb      	ldrh	r3, [r7, #22]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	8afb      	ldrh	r3, [r7, #22]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ca6:	8abb      	ldrh	r3, [r7, #20]
 8009ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cac:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8009cb0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8009cb4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8009cb6:	8a7a      	ldrh	r2, [r7, #18]
 8009cb8:	8abb      	ldrh	r3, [r7, #20]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cc2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cc4:	8afa      	ldrh	r2, [r7, #22]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009cca:	8aba      	ldrh	r2, [r7, #20]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	621a      	str	r2, [r3, #32]
}
 8009cd0:	f107 071c 	add.w	r7, r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop

08009cdc <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d10c      	bne.n	8009d0c <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8009cf2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009cf6:	f04f 0101 	mov.w	r1, #1
 8009cfa:	f7fc fec9 	bl	8006a90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8009cfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009d02:	f04f 0100 	mov.w	r1, #0
 8009d06:	f7fc fec3 	bl	8006a90 <RCC_APB2PeriphResetCmd>
 8009d0a:	e04e      	b.n	8009daa <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009d12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d10c      	bne.n	8009d34 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8009d1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009d1e:	f04f 0101 	mov.w	r1, #1
 8009d22:	f7fc fedf 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8009d26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009d2a:	f04f 0100 	mov.w	r1, #0
 8009d2e:	f7fc fed9 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8009d32:	e03a      	b.n	8009daa <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8009d3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d10c      	bne.n	8009d5c <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8009d42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009d46:	f04f 0101 	mov.w	r1, #1
 8009d4a:	f7fc fecb 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8009d4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009d52:	f04f 0100 	mov.w	r1, #0
 8009d56:	f7fc fec5 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8009d5a:	e026      	b.n	8009daa <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8009d62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d10c      	bne.n	8009d84 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8009d6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009d6e:	f04f 0101 	mov.w	r1, #1
 8009d72:	f7fc feb7 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8009d76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009d7a:	f04f 0100 	mov.w	r1, #0
 8009d7e:	f7fc feb1 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
 8009d82:	e012      	b.n	8009daa <USART_DeInit+0xce>
  }
  else
  {
    if  (USARTx == UART5)
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009d8a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d10b      	bne.n	8009daa <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8009d92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009d96:	f04f 0101 	mov.w	r1, #1
 8009d9a:	f7fc fea3 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8009d9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009da2:	f04f 0100 	mov.w	r1, #0
 8009da6:	f7fc fe9d 	bl	8006ae4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8009daa:	f107 0708 	add.w	r7, r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop

08009db4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b094      	sub	sp, #80	; 0x50
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dc4:	f04f 0300 	mov.w	r3, #0
 8009dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dca:	f04f 0300 	mov.w	r3, #0
 8009dce:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f023 0201 	bic.w	r2, r3, #1
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009de8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df0:	4313      	orrs	r3, r2
 8009df2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009e06:	f023 030c 	bic.w	r3, r3, #12
 8009e0a:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	647b      	str	r3, [r7, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e26:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8009e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e34:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e44:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fc f960 	bl	8006110 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d102      	bne.n	8009e64 <USART_Init+0xb0>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e62:	e01f      	b.n	8009ea4 <USART_Init+0xf0>
  }
  else if (USARTx == USART2)
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009e6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d102      	bne.n	8009e78 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8009e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e76:	e015      	b.n	8009ea4 <USART_Init+0xf0>
  }
  else if (USARTx == USART3)
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8009e7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d102      	bne.n	8009e8c <USART_Init+0xd8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e8a:	e00b      	b.n	8009ea4 <USART_Init+0xf0>
  }
  else if (USARTx == UART4)
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8009e92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d102      	bne.n	8009ea0 <USART_Init+0xec>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8009e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e9e:	e001      	b.n	8009ea4 <USART_Init+0xf0>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8009ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d013      	beq.n	8009ed8 <USART_Init+0x124>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8009eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb2:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8009ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	6812      	ldr	r2, [r2, #0]
 8009eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ece:	fb02 f201 	mul.w	r2, r2, r1
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed6:	e00e      	b.n	8009ef6 <USART_Init+0x142>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eea:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eee:	fb02 f201 	mul.w	r2, r2, r1
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8009efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d803      	bhi.n	8009f0c <USART_Init+0x158>
  {
    divider++;
 8009f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f06:	f103 0301 	add.w	r3, r3, #1
 8009f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00c      	beq.n	8009f32 <USART_Init+0x17e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8009f22:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8009f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	819a      	strh	r2, [r3, #12]
}
 8009f3a:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop

08009f44 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009f52:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f04f 0200 	mov.w	r2, #0
 8009f62:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f04f 020c 	mov.w	r2, #12
 8009f72:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f04f 0200 	mov.w	r2, #0
 8009f7a:	615a      	str	r2, [r3, #20]
}
 8009f7c:	f107 070c 	add.w	r7, r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop

08009f88 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fa4:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009fb4:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	605a      	str	r2, [r3, #4]
}
 8009fc8:	f107 0714 	add.w	r7, r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop

08009fd4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f04f 0200 	mov.w	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f04f 0200 	mov.w	r2, #0
 8009ff2:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	60da      	str	r2, [r3, #12]
}
 8009ffc:	f107 070c 	add.w	r7, r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	bc80      	pop	{r7}
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop

0800a008 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d006      	beq.n	800a028 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f043 0201 	orr.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e005      	b.n	800a034 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f023 0201 	bic.w	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]
  }
}
 800a034:	f107 070c 	add.w	r7, r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	bc80      	pop	{r7}
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop

0800a040 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	4613      	mov	r3, r2
 800a04c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d006      	beq.n	800a062 <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e007      	b.n	800a072 <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	ea6f 0303 	mvn.w	r3, r3
 800a06c:	401a      	ands	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]
  }
}
 800a072:	f107 0714 	add.w	r7, r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr

0800a07c <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d006      	beq.n	800a09c <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	e005      	b.n	800a0a8 <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	601a      	str	r2, [r3, #0]
  }
}
 800a0a8:	f107 070c 	add.w	r7, r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop

0800a0b4 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d006      	beq.n	800a0d4 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
 800a0d2:	e005      	b.n	800a0e0 <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	609a      	str	r2, [r3, #8]
  }
}
 800a0e0:	f107 070c 	add.w	r7, r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop

0800a0ec <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d006      	beq.n	800a10c <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	605a      	str	r2, [r3, #4]
 800a10a:	e005      	b.n	800a118 <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	605a      	str	r2, [r3, #4]
  }
}
 800a118:	f107 070c 	add.w	r7, r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bc80      	pop	{r7}
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop

0800a124 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d006      	beq.n	800a144 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	e005      	b.n	800a150 <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	605a      	str	r2, [r3, #4]
  }
}
 800a150:	f107 070c 	add.w	r7, r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop

0800a15c <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	431a      	orrs	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	605a      	str	r2, [r3, #4]
 800a17c:	e007      	b.n	800a18e <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	ea6f 0303 	mvn.w	r3, r3
 800a188:	401a      	ands	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	605a      	str	r2, [r3, #4]
  }
}
 800a18e:	f107 0714 	add.w	r7, r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr

0800a198 <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d006      	beq.n	800a1b8 <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]
 800a1b6:	e005      	b.n	800a1c4 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	605a      	str	r2, [r3, #4]
  }
}
 800a1c4:	f107 070c 	add.w	r7, r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop

0800a1d0 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d006      	beq.n	800a1f0 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	e005      	b.n	800a1fc <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	605a      	str	r2, [r3, #4]
  }
}
 800a1fc:	f107 070c 	add.w	r7, r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	695a      	ldr	r2, [r3, #20]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	615a      	str	r2, [r3, #20]
}
 800a22a:	f107 070c 	add.w	r7, r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	bc80      	pop	{r7}
 800a232:	4770      	bx	lr

0800a234 <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	8a1b      	ldrh	r3, [r3, #16]
 800a244:	b29b      	uxth	r3, r3
 800a246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8a1b      	ldrh	r3, [r3, #16]
 800a254:	b29a      	uxth	r2, r3
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	821a      	strh	r2, [r3, #16]
}
 800a262:	f107 070c 	add.w	r7, r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr

0800a26c <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d006      	beq.n	800a28c <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f043 0202 	orr.w	r2, r3, #2
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e005      	b.n	800a298 <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f023 0202 	bic.w	r2, r3, #2
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
  }
}
 800a298:	f107 070c 	add.w	r7, r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bc80      	pop	{r7}
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop

0800a2a4 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
}
 800a2c6:	f107 070c 	add.w	r7, r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	605a      	str	r2, [r3, #4]
 800a2ee:	e005      	b.n	800a2fc <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	605a      	str	r2, [r3, #4]
  }
}
 800a2fc:	f107 070c 	add.w	r7, r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop

0800a308 <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	605a      	str	r2, [r3, #4]
}
 800a32a:	f107 070c 	add.w	r7, r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	bc80      	pop	{r7}
 800a332:	4770      	bx	lr

0800a334 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800a340:	887b      	ldrh	r3, [r7, #2]
 800a342:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a346:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800a350:	f107 070c 	add.w	r7, r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop

0800a35c <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a368:	b29b      	uxth	r3, r3
 800a36a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a36e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a372:	b29b      	uxth	r3, r3
}
 800a374:	4618      	mov	r0, r3
 800a376:	f107 070c 	add.w	r7, r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bc80      	pop	{r7}
 800a37e:	4770      	bx	lr

0800a380 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	605a      	str	r2, [r3, #4]
}
 800a3a8:	f107 070c 	add.w	r7, r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop

0800a3b4 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d006      	beq.n	800a3d4 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	e005      	b.n	800a3e0 <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
  }
}
 800a3e0:	f107 070c 	add.w	r7, r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bc80      	pop	{r7}
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop

0800a3ec <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
}
 800a40e:	f107 070c 	add.w	r7, r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	bc80      	pop	{r7}
 800a416:	4770      	bx	lr

0800a418 <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f023 0210 	bic.w	r2, r3, #16
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	431a      	orrs	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
}
 800a43a:	f107 070c 	add.w	r7, r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f023 0220 	bic.w	r2, r3, #32
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	605a      	str	r2, [r3, #4]
}
 800a466:	f107 070c 	add.w	r7, r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bc80      	pop	{r7}
 800a46e:	4770      	bx	lr

0800a470 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]
 800a48e:	e005      	b.n	800a49c <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	605a      	str	r2, [r3, #4]
  }
}
 800a49c:	f107 070c 	add.w	r7, r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop

0800a4a8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f043 0208 	orr.w	r2, r3, #8
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	609a      	str	r2, [r3, #8]
 800a4c6:	e005      	b.n	800a4d4 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f023 0208 	bic.w	r2, r3, #8
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	609a      	str	r2, [r3, #8]
  }
}
 800a4d4:	f107 070c 	add.w	r7, r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop

0800a4e0 <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	8a1b      	ldrh	r3, [r3, #16]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	8a1b      	ldrh	r3, [r3, #16]
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	b29b      	uxth	r3, r3
 800a504:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	821a      	strh	r2, [r3, #16]
}
 800a512:	f107 070c 	add.w	r7, r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d006      	beq.n	800a53c <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f043 0220 	orr.w	r2, r3, #32
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	609a      	str	r2, [r3, #8]
 800a53a:	e005      	b.n	800a548 <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f023 0220 	bic.w	r2, r3, #32
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	609a      	str	r2, [r3, #8]
  }
}
 800a548:	f107 070c 	add.w	r7, r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bc80      	pop	{r7}
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop

0800a554 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d006      	beq.n	800a574 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f043 0210 	orr.w	r2, r3, #16
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	609a      	str	r2, [r3, #8]
 800a572:	e005      	b.n	800a580 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f023 0210 	bic.w	r2, r3, #16
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	609a      	str	r2, [r3, #8]
  }
}
 800a580:	f107 070c 	add.w	r7, r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop

0800a58c <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	609a      	str	r2, [r3, #8]
}
 800a5b4:	f107 070c 	add.w	r7, r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop

0800a5c0 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	695a      	ldr	r2, [r3, #20]
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	615a      	str	r2, [r3, #20]
}
 800a5e8:	f107 070c 	add.w	r7, r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop

0800a5f4 <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f023 0204 	bic.w	r2, r3, #4
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	609a      	str	r2, [r3, #8]
}
 800a616:	f107 070c 	add.w	r7, r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bc80      	pop	{r7}
 800a61e:	4770      	bx	lr

0800a620 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d006      	beq.n	800a640 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f043 0202 	orr.w	r2, r3, #2
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	609a      	str	r2, [r3, #8]
 800a63e:	e005      	b.n	800a64c <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f023 0202 	bic.w	r2, r3, #2
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	609a      	str	r2, [r3, #8]
  }
}
 800a64c:	f107 070c 	add.w	r7, r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	bc80      	pop	{r7}
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop

0800a658 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d006      	beq.n	800a678 <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	609a      	str	r2, [r3, #8]
 800a676:	e005      	b.n	800a684 <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	609a      	str	r2, [r3, #8]
  }
}
 800a684:	f107 070c 	add.w	r7, r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	bc80      	pop	{r7}
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop

0800a690 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	609a      	str	r2, [r3, #8]
}
 800a6b2:	f107 070c 	add.w	r7, r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr

0800a6bc <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	ea4f 5343 	mov.w	r3, r3, lsl #21
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
}
 800a6e2:	f107 070c 	add.w	r7, r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc80      	pop	{r7}
 800a6ea:	4770      	bx	lr

0800a6ec <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800a70c:	431a      	orrs	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]
}
 800a712:	f107 070c 	add.w	r7, r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	bc80      	pop	{r7}
 800a71a:	4770      	bx	lr

0800a71c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d006      	beq.n	800a73e <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	431a      	orrs	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	609a      	str	r2, [r3, #8]
 800a73c:	e007      	b.n	800a74e <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	ea6f 0303 	mvn.w	r3, r3
 800a748:	401a      	ands	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	609a      	str	r2, [r3, #8]
  }
}
 800a74e:	f107 0714 	add.w	r7, r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689a      	ldr	r2, [r3, #8]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	609a      	str	r2, [r3, #8]
}
 800a77a:	f107 070c 	add.w	r7, r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	bc80      	pop	{r7}
 800a782:	4770      	bx	lr

0800a784 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800a784:	b480      	push	{r7}
 800a786:	b089      	sub	sp, #36	; 0x24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4613      	mov	r3, r2
 800a790:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800a792:	f04f 0300 	mov.w	r3, #0
 800a796:	61bb      	str	r3, [r7, #24]
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	f04f 0300 	mov.w	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800a7a4:	f04f 0300 	mov.w	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f04f 0201 	mov.w	r2, #1
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d104      	bne.n	800a7dc <USART_ITConfig+0x58>
  {
    usartxbase += 0x04;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	f103 0304 	add.w	r3, r3, #4
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	e006      	b.n	800a7ea <USART_ITConfig+0x66>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d103      	bne.n	800a7ea <USART_ITConfig+0x66>
  {
    usartxbase += 0x08;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	f103 0308 	add.w	r3, r3, #8
 800a7e8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	6811      	ldr	r1, [r2, #0]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	e007      	b.n	800a80e <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	69fa      	ldr	r2, [r7, #28]
 800a802:	6811      	ldr	r1, [r2, #0]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	ea6f 0202 	mvn.w	r2, r2
 800a80a:	400a      	ands	r2, r1
 800a80c:	601a      	str	r2, [r3, #0]
  }
}
 800a80e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d009      	beq.n	800a840 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	8b1b      	ldrh	r3, [r3, #24]
 800a830:	b29a      	uxth	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	b29b      	uxth	r3, r3
 800a836:	4313      	orrs	r3, r2
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	831a      	strh	r2, [r3, #24]
 800a83e:	e00b      	b.n	800a858 <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8b1b      	ldrh	r3, [r3, #24]
 800a844:	b29a      	uxth	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	ea6f 0303 	mvn.w	r3, r3
 800a84e:	b29b      	uxth	r3, r3
 800a850:	4013      	ands	r3, r2
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	831a      	strh	r2, [r3, #24]
  }
}
 800a858:	f107 0714 	add.w	r7, r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop

0800a864 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	609a      	str	r2, [r3, #8]
}
 800a886:	f107 070c 	add.w	r7, r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bc80      	pop	{r7}
 800a88e:	4770      	bx	lr

0800a890 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 800a8ac:	f04f 0301 	mov.w	r3, #1
 800a8b0:	73fb      	strb	r3, [r7, #15]
 800a8b2:	e002      	b.n	800a8ba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f107 0714 	add.w	r7, r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	621a      	str	r2, [r3, #32]
}
 800a8d8:	f107 070c 	add.w	r7, r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop

0800a8e4 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	f04f 0300 	mov.w	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	f04f 0300 	mov.w	r3, #0
 800a8fe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800a900:	f04f 0300 	mov.w	r3, #0
 800a904:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a90e:	b29b      	uxth	r3, r3
 800a910:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f04f 0201 	mov.w	r2, #1
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
 800a922:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d105      	bne.n	800a936 <USART_GetITStatus+0x52>
  {
    itmask &= USARTx->CR1;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4013      	ands	r3, r2
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e00d      	b.n	800a952 <USART_GetITStatus+0x6e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d105      	bne.n	800a948 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4013      	ands	r3, r2
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	e004      	b.n	800a952 <USART_GetITStatus+0x6e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	4013      	ands	r3, r2
 800a950:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a958:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f04f 0201 	mov.w	r2, #1
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4013      	ands	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d006      	beq.n	800a984 <USART_GetITStatus+0xa0>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 800a97c:	f04f 0301 	mov.w	r3, #1
 800a980:	74fb      	strb	r3, [r7, #19]
 800a982:	e002      	b.n	800a98a <USART_GetITStatus+0xa6>
  }
  else
  {
    bitstatus = RESET;
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800a98a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	f107 071c 	add.w	r7, r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	f04f 0300 	mov.w	r3, #0
 800a9ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a9b4:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f04f 0201 	mov.w	r2, #1
 800a9bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c0:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	621a      	str	r2, [r3, #32]
}
 800a9c8:	f107 0714 	add.w	r7, r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop

0800a9d4 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	73fb      	strb	r3, [r7, #15]
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 800a9e8:	f000 f9c6 	bl	800ad78 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800aa04:	4313      	orrs	r3, r2
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	791a      	ldrb	r2, [r3, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	795b      	ldrb	r3, [r3, #5]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 800aa2c:	f107 030f 	add.w	r3, r7, #15
 800aa30:	4618      	mov	r0, r3
 800aa32:	f04f 0120 	mov.w	r1, #32
 800aa36:	f04f 0201 	mov.w	r2, #1
 800aa3a:	f000 f925 	bl	800ac88 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800aa3e:	f107 030e 	add.w	r3, r7, #14
 800aa42:	4618      	mov	r0, r3
 800aa44:	f04f 0123 	mov.w	r1, #35	; 0x23
 800aa48:	f04f 0201 	mov.w	r2, #1
 800aa4c:	f000 f91c 	bl	800ac88 <L3GD20_Write>
}
 800aa50:	f107 0710 	add.w	r7, r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800aa5e:	f107 0307 	add.w	r3, r7, #7
 800aa62:	4618      	mov	r0, r3
 800aa64:	f04f 0124 	mov.w	r1, #36	; 0x24
 800aa68:	f04f 0201 	mov.w	r2, #1
 800aa6c:	f000 f944 	bl	800acf8 <L3GD20_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800aa7a:	f107 0307 	add.w	r3, r7, #7
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f04f 0124 	mov.w	r1, #36	; 0x24
 800aa84:	f04f 0201 	mov.w	r2, #1
 800aa88:	f000 f8fe 	bl	800ac88 <L3GD20_Write>
}
 800aa8c:	f107 0708 	add.w	r7, r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800aa9c:	f04f 0300 	mov.w	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800aaa8:	f107 030f 	add.w	r3, r7, #15
 800aaac:	4618      	mov	r0, r3
 800aaae:	f04f 0130 	mov.w	r1, #48	; 0x30
 800aab2:	f04f 0201 	mov.w	r2, #1
 800aab6:	f000 f91f 	bl	800acf8 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800aaba:	f107 030e 	add.w	r3, r7, #14
 800aabe:	4618      	mov	r0, r3
 800aac0:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aac4:	f04f 0201 	mov.w	r2, #1
 800aac8:	f000 f916 	bl	800acf8 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	f023 0320 	bic.w	r3, r3, #32
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800aae8:	4313      	orrs	r3, r2
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	789a      	ldrb	r2, [r3, #2]
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800ab00:	f107 030f 	add.w	r3, r7, #15
 800ab04:	4618      	mov	r0, r3
 800ab06:	f04f 0130 	mov.w	r1, #48	; 0x30
 800ab0a:	f04f 0201 	mov.w	r2, #1
 800ab0e:	f000 f8bb 	bl	800ac88 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800ab12:	f107 030e 	add.w	r3, r7, #14
 800ab16:	4618      	mov	r0, r3
 800ab18:	f04f 0122 	mov.w	r1, #34	; 0x22
 800ab1c:	f04f 0201 	mov.w	r2, #1
 800ab20:	f000 f8b2 	bl	800ac88 <L3GD20_Write>
}
 800ab24:	f107 0710 	add.w	r7, r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ab36:	f107 030f 	add.w	r3, r7, #15
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f04f 0122 	mov.w	r1, #34	; 0x22
 800ab40:	f04f 0201 	mov.w	r2, #1
 800ab44:	f000 f8d8 	bl	800acf8 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800ab52:	7bfa      	ldrb	r2, [r7, #15]
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ab5c:	f107 030f 	add.w	r3, r7, #15
 800ab60:	4618      	mov	r0, r3
 800ab62:	f04f 0122 	mov.w	r1, #34	; 0x22
 800ab66:	f04f 0201 	mov.w	r2, #1
 800ab6a:	f000 f88d 	bl	800ac88 <L3GD20_Write>
}
 800ab6e:	f107 0710 	add.w	r7, r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop

0800ab78 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ab82:	f107 030f 	add.w	r3, r7, #15
 800ab86:	4618      	mov	r0, r3
 800ab88:	f04f 0122 	mov.w	r1, #34	; 0x22
 800ab8c:	f04f 0201 	mov.w	r2, #1
 800ab90:	f000 f8b2 	bl	800acf8 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	f023 0308 	bic.w	r3, r3, #8
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800ab9e:	7bfa      	ldrb	r2, [r7, #15]
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800aba8:	f107 030f 	add.w	r3, r7, #15
 800abac:	4618      	mov	r0, r3
 800abae:	f04f 0122 	mov.w	r1, #34	; 0x22
 800abb2:	f04f 0201 	mov.w	r2, #1
 800abb6:	f000 f867 	bl	800ac88 <L3GD20_Write>
}
 800abba:	f107 0710 	add.w	r7, r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop

0800abc4 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800abcc:	f107 030f 	add.w	r3, r7, #15
 800abd0:	4618      	mov	r0, r3
 800abd2:	f04f 0121 	mov.w	r1, #33	; 0x21
 800abd6:	f04f 0201 	mov.w	r2, #1
 800abda:	f000 f88d 	bl	800acf8 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800abf0:	4313      	orrs	r3, r2
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800abfc:	f107 030f 	add.w	r3, r7, #15
 800ac00:	4618      	mov	r0, r3
 800ac02:	f04f 0121 	mov.w	r1, #33	; 0x21
 800ac06:	f04f 0201 	mov.w	r2, #1
 800ac0a:	f000 f83d 	bl	800ac88 <L3GD20_Write>
}
 800ac0e:	f107 0710 	add.w	r7, r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop

0800ac18 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ac22:	f107 030f 	add.w	r3, r7, #15
 800ac26:	4618      	mov	r0, r3
 800ac28:	f04f 0124 	mov.w	r1, #36	; 0x24
 800ac2c:	f04f 0201 	mov.w	r2, #1
 800ac30:	f000 f862 	bl	800acf8 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	f023 0310 	bic.w	r3, r3, #16
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800ac3e:	7bfa      	ldrb	r2, [r7, #15]
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ac48:	f107 030f 	add.w	r3, r7, #15
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f04f 0124 	mov.w	r1, #36	; 0x24
 800ac52:	f04f 0201 	mov.w	r2, #1
 800ac56:	f000 f817 	bl	800ac88 <L3GD20_Write>
}
 800ac5a:	f107 0710 	add.w	r7, r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop

0800ac64 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval Data status in a L3GD20 Data
  */
uint8_t L3GD20_GetDataStatus(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 800ac6a:	f107 0307 	add.w	r3, r7, #7
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f04f 0127 	mov.w	r1, #39	; 0x27
 800ac74:	f04f 0201 	mov.w	r2, #1
 800ac78:	f000 f83e 	bl	800acf8 <L3GD20_Read>
                  
  return tmpreg;
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f107 0708 	add.w	r7, r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	4613      	mov	r3, r2
 800ac92:	460a      	mov	r2, r1
 800ac94:	70fa      	strb	r2, [r7, #3]
 800ac96:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800ac98:	883b      	ldrh	r3, [r7, #0]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d903      	bls.n	800aca6 <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800aca6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800acaa:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800acae:	f04f 0108 	mov.w	r1, #8
 800acb2:	f7fa fe69 	bl	8005988 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 f93f 	bl	800af3c <L3GD20_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800acbe:	e00c      	b.n	800acda <L3GD20_Write+0x52>
  {
    L3GD20_SendByte(*pBuffer);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f939 	bl	800af3c <L3GD20_SendByte>
    NumByteToWrite--;
 800acca:	883b      	ldrh	r3, [r7, #0]
 800accc:	f103 33ff 	add.w	r3, r3, #4294967295
 800acd0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f103 0301 	add.w	r3, r3, #1
 800acd8:	607b      	str	r3, [r7, #4]
  L3GD20_CS_LOW();
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800acda:	883b      	ldrh	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1ef      	bne.n	800acc0 <L3GD20_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 800ace0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ace4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ace8:	f04f 0108 	mov.w	r1, #8
 800acec:	f7fa fe3e 	bl	800596c <GPIO_SetBits>
}
 800acf0:	f107 0708 	add.w	r7, r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	460a      	mov	r2, r1
 800ad04:	70fa      	strb	r2, [r7, #3]
 800ad06:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800ad08:	883b      	ldrh	r3, [r7, #0]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d904      	bls.n	800ad18 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800ad14:	70fb      	strb	r3, [r7, #3]
 800ad16:	e003      	b.n	800ad20 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad1e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800ad20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ad24:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ad28:	f04f 0108 	mov.w	r1, #8
 800ad2c:	f7fa fe2c 	bl	8005988 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f902 	bl	800af3c <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800ad38:	e00f      	b.n	800ad5a <L3GD20_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 800ad3a:	f04f 0000 	mov.w	r0, #0
 800ad3e:	f000 f8fd 	bl	800af3c <L3GD20_SendByte>
 800ad42:	4603      	mov	r3, r0
 800ad44:	461a      	mov	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800ad4a:	883b      	ldrh	r3, [r7, #0]
 800ad4c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad50:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f103 0301 	add.w	r3, r3, #1
 800ad58:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800ad5a:	883b      	ldrh	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1ec      	bne.n	800ad3a <L3GD20_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 800ad60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ad64:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ad68:	f04f 0108 	mov.w	r1, #8
 800ad6c:	f7fa fdfe 	bl	800596c <GPIO_SetBits>
}  
 800ad70:	f107 0708 	add.w	r7, r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 800ad7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ad82:	f04f 0101 	mov.w	r1, #1
 800ad86:	f7fb fe05 	bl	8006994 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 800ad8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ad8e:	f04f 0101 	mov.w	r1, #1
 800ad92:	f7fb fdd5 	bl	8006940 <RCC_AHBPeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 800ad96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ad9a:	f04f 0101 	mov.w	r1, #1
 800ad9e:	f7fb fdcf 	bl	8006940 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 800ada2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ada6:	f04f 0101 	mov.w	r1, #1
 800adaa:	f7fb fdc9 	bl	8006940 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 800adae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800adb2:	f04f 0101 	mov.w	r1, #1
 800adb6:	f7fb fdc3 	bl	8006940 <RCC_AHBPeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 800adba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adbe:	f04f 0105 	mov.w	r1, #5
 800adc2:	f04f 0205 	mov.w	r2, #5
 800adc6:	f7fa fe13 	bl	80059f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 800adca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adce:	f04f 0106 	mov.w	r1, #6
 800add2:	f04f 0205 	mov.w	r2, #5
 800add6:	f7fa fe0b 	bl	80059f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 800adda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adde:	f04f 0107 	mov.w	r1, #7
 800ade2:	f04f 0205 	mov.w	r2, #5
 800ade6:	f7fa fe03 	bl	80059f0 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800adea:	f04f 0302 	mov.w	r3, #2
 800adee:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;//GPIO_PuPd_DOWN;
 800adf6:	f04f 0300 	mov.w	r3, #0
 800adfa:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800adfc:	f04f 0303 	mov.w	r3, #3
 800ae00:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 800ae02:	f04f 0320 	mov.w	r3, #32
 800ae06:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800ae08:	f107 0318 	add.w	r3, r7, #24
 800ae0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae10:	4619      	mov	r1, r3
 800ae12:	f7fa fc67 	bl	80056e4 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 800ae16:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ae1a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800ae1c:	f107 0318 	add.w	r3, r7, #24
 800ae20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae24:	4619      	mov	r1, r3
 800ae26:	f7fa fc5d 	bl	80056e4 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 800ae2a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ae2e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800ae30:	f107 0318 	add.w	r3, r7, #24
 800ae34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f7fa fc53 	bl	80056e4 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 800ae3e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ae42:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae46:	f7fb ff3b 	bl	8006cc0 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800ae50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800ae54:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800ae62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae66:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800ae68:	f04f 0310 	mov.w	r3, #16
 800ae6c:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 800ae74:	f04f 0307 	mov.w	r3, #7
 800ae78:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800ae7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ae7e:	80fb      	strh	r3, [r7, #6]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 800ae80:	f107 0304 	add.w	r3, r7, #4
 800ae84:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ae88:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f7fb ff89 	bl	8006da4 <SPI_Init>

  /* Configure the RX FIFO Threshold */
  SPI_RxFIFOThresholdConfig(L3GD20_SPI, SPI_RxFIFOThreshold_QF);
 800ae92:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ae96:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae9e:	f7fc f981 	bl	80071a4 <SPI_RxFIFOThresholdConfig>
  /* Enable SPI1  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 800aea2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800aea6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800aeaa:	f04f 0101 	mov.w	r1, #1
 800aeae:	f7fc f8fd 	bl	80070ac <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 800aeb2:	f04f 0308 	mov.w	r3, #8
 800aeb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800aeb8:	f04f 0301 	mov.w	r3, #1
 800aebc:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800aec4:	f04f 0303 	mov.w	r3, #3
 800aec8:	777b      	strb	r3, [r7, #29]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 800aeca:	f107 0318 	add.w	r3, r7, #24
 800aece:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800aed2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800aed6:	4619      	mov	r1, r3
 800aed8:	f7fa fc04 	bl	80056e4 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 800aedc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800aee0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800aee4:	f04f 0108 	mov.w	r1, #8
 800aee8:	f7fa fd40 	bl	800596c <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 800aeec:	f04f 0301 	mov.w	r3, #1
 800aef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800aef2:	f04f 0300 	mov.w	r3, #0
 800aef6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800aef8:	f04f 0300 	mov.w	r3, #0
 800aefc:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800aefe:	f04f 0303 	mov.w	r3, #3
 800af02:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800af04:	f04f 0300 	mov.w	r3, #0
 800af08:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 800af0a:	f107 0318 	add.w	r3, r7, #24
 800af0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af12:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800af16:	4619      	mov	r1, r3
 800af18:	f7fa fbe4 	bl	80056e4 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 800af1c:	f04f 0302 	mov.w	r3, #2
 800af20:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 800af22:	f107 0318 	add.w	r3, r7, #24
 800af26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af2a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800af2e:	4619      	mov	r1, r3
 800af30:	f7fa fbd8 	bl	80056e4 <GPIO_Init>
}  
 800af34:	f107 0720 	add.w	r7, r7, #32
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 800af46:	f240 0348 	movw	r3, #72	; 0x48
 800af4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af52:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800af54:	e017      	b.n	800af86 <L3GD20_SendByte+0x4a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 800af56:	f240 0348 	movw	r3, #72	; 0x48
 800af5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	bf14      	ite	ne
 800af64:	2200      	movne	r2, #0
 800af66:	2201      	moveq	r2, #1
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	f103 31ff 	add.w	r1, r3, #4294967295
 800af6e:	f240 0348 	movw	r3, #72	; 0x48
 800af72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af76:	6019      	str	r1, [r3, #0]
 800af78:	2a00      	cmp	r2, #0
 800af7a:	d004      	beq.n	800af86 <L3GD20_SendByte+0x4a>
 800af7c:	f7f6 fde6 	bl	8001b4c <L3GD20_TIMEOUT_UserCallback>
 800af80:	4603      	mov	r3, r0
 800af82:	b2db      	uxtb	r3, r3
 800af84:	e044      	b.n	800b010 <L3GD20_SendByte+0xd4>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800af86:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800af8a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af8e:	f04f 0102 	mov.w	r1, #2
 800af92:	f7fc fb4d 	bl	8007630 <SPI_I2S_GetFlagStatus>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0dc      	beq.n	800af56 <L3GD20_SendByte+0x1a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800afa2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800afa6:	4619      	mov	r1, r3
 800afa8:	f7fc f9ec 	bl	8007384 <SPI_SendData8>
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 800afac:	f240 0348 	movw	r3, #72	; 0x48
 800afb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afb8:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800afba:	e017      	b.n	800afec <L3GD20_SendByte+0xb0>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 800afbc:	f240 0348 	movw	r3, #72	; 0x48
 800afc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bf14      	ite	ne
 800afca:	2200      	movne	r2, #0
 800afcc:	2201      	moveq	r2, #1
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	f103 31ff 	add.w	r1, r3, #4294967295
 800afd4:	f240 0348 	movw	r3, #72	; 0x48
 800afd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afdc:	6019      	str	r1, [r3, #0]
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d004      	beq.n	800afec <L3GD20_SendByte+0xb0>
 800afe2:	f7f6 fdb3 	bl	8001b4c <L3GD20_TIMEOUT_UserCallback>
 800afe6:	4603      	mov	r3, r0
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	e011      	b.n	800b010 <L3GD20_SendByte+0xd4>
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800afec:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800aff0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800aff4:	f04f 0101 	mov.w	r1, #1
 800aff8:	f7fc fb1a 	bl	8007630 <SPI_I2S_GetFlagStatus>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0dc      	beq.n	800afbc <L3GD20_SendByte+0x80>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_ReceiveData8(L3GD20_SPI);
 800b002:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800b006:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b00a:	f7fc f9e1 	bl	80073d0 <SPI_ReceiveData8>
 800b00e:	4603      	mov	r3, r0
}
 800b010:	4618      	mov	r0, r3
 800b012:	f107 0708 	add.w	r7, r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b020:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b024:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b028:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b02c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b030:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800b034:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b040:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b048:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	f042 0201 	orr.w	r2, r2, #1
 800b052:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800b054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b058:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b05c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b064:	6859      	ldr	r1, [r3, #4]
 800b066:	f24c 030c 	movw	r3, #49164	; 0xc00c
 800b06a:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 800b06e:	400b      	ands	r3, r1
 800b070:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b07a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b07e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b082:	6812      	ldr	r2, [r2, #0]
 800b084:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b088:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b08c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b08e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b09a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b09e:	6812      	ldr	r2, [r2, #0]
 800b0a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800b0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b0b6:	6852      	ldr	r2, [r2, #4]
 800b0b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800b0bc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800b0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b0ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b0d0:	f022 020f 	bic.w	r2, r2, #15
 800b0d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800b0d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b0e8:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 800b0ec:	f6cf 7300 	movt	r3, #65280	; 0xff00
 800b0f0:	400b      	ands	r3, r1
 800b0f2:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0fc:	f04f 0200 	mov.w	r2, #0
 800b100:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800b102:	f000 f8a7 	bl	800b254 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800b106:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b10a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b10e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b112:	609a      	str	r2, [r3, #8]
#endif  
}
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop

0800b118 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	f04f 0300 	mov.w	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	f04f 0300 	mov.w	r3, #0
 800b134:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b13a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f003 030c 	and.w	r3, r3, #12
 800b144:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d00d      	beq.n	800b168 <SystemCoreClockUpdate+0x50>
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d015      	beq.n	800b17c <SystemCoreClockUpdate+0x64>
 800b150:	2b00      	cmp	r3, #0
 800b152:	d153      	bne.n	800b1fc <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800b154:	f240 034c 	movw	r3, #76	; 0x4c
 800b158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b15c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b160:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b164:	601a      	str	r2, [r3, #0]
      break;
 800b166:	e053      	b.n	800b210 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800b168:	f240 034c 	movw	r3, #76	; 0x4c
 800b16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b170:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b174:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b178:	601a      	str	r2, [r3, #0]
      break;
 800b17a:	e049      	b.n	800b210 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800b17c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b180:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800b18a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800b18c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b190:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b19a:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800b1a2:	f103 0302 	add.w	r3, r3, #2
 800b1a6:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10c      	bne.n	800b1c8 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b1b4:	f2c0 033d 	movt	r3, #61	; 0x3d
 800b1b8:	fb03 f202 	mul.w	r2, r3, r2
 800b1bc:	f240 034c 	movw	r3, #76	; 0x4c
 800b1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1c4:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 800b1c6:	e023      	b.n	800b210 <SystemCoreClockUpdate+0xf8>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800b1c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	f103 0301 	add.w	r3, r3, #1
 800b1da:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800b1dc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b1e0:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	fb02 f203 	mul.w	r2, r2, r3
 800b1f0:	f240 034c 	movw	r3, #76	; 0x4c
 800b1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1f8:	601a      	str	r2, [r3, #0]
      }      
      break;
 800b1fa:	e009      	b.n	800b210 <SystemCoreClockUpdate+0xf8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800b1fc:	f240 034c 	movw	r3, #76	; 0x4c
 800b200:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b204:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b208:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b20c:	601a      	str	r2, [r3, #0]
      break;
 800b20e:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b21e:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800b222:	f240 0350 	movw	r3, #80	; 0x50
 800b226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b22a:	5c9b      	ldrb	r3, [r3, r2]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800b230:	f240 034c 	movw	r3, #76	; 0x4c
 800b234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	fa22 f203 	lsr.w	r2, r2, r3
 800b240:	f240 034c 	movw	r3, #76	; 0x4c
 800b244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b248:	601a      	str	r2, [r3, #0]
}
 800b24a:	f107 0714 	add.w	r7, r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bc80      	pop	{r7}
 800b252:	4770      	bx	lr

0800b254 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	607b      	str	r3, [r7, #4]
 800b260:	f04f 0300 	mov.w	r3, #0
 800b264:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800b266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b26a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b26e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b272:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b27c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800b27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b282:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b28c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f103 0301 	add.w	r3, r3, #1
 800b294:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d103      	bne.n	800b2a4 <SetSysClock+0x50>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b2a2:	d1ec      	bne.n	800b27e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800b2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800b2b6:	f04f 0301 	mov.w	r3, #1
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	e002      	b.n	800b2c4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d176      	bne.n	800b3b8 <SetSysClock+0x164>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800b2ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2d2:	f04f 0212 	mov.w	r2, #18
 800b2d6:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800b2d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b2e8:	6852      	ldr	r2, [r2, #4]
 800b2ea:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800b2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b2f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b2fc:	6852      	ldr	r2, [r2, #4]
 800b2fe:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800b300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b304:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b30c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b310:	6852      	ldr	r2, [r2, #4]
 800b312:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b316:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800b318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b324:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b328:	6852      	ldr	r2, [r2, #4]
 800b32a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800b32e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 800b330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b33c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b340:	6852      	ldr	r2, [r2, #4]
 800b342:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800b346:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800b348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b34c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b354:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b35e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800b360:	bf00      	nop
 800b362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b366:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0f6      	beq.n	800b362 <SetSysClock+0x10e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800b374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b378:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b380:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b384:	6852      	ldr	r2, [r2, #4]
 800b386:	f022 0203 	bic.w	r2, r2, #3
 800b38a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800b38c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b390:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b398:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b39c:	6852      	ldr	r2, [r2, #4]
 800b39e:	f042 0202 	orr.w	r2, r2, #2
 800b3a2:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800b3a4:	bf00      	nop
 800b3a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f003 030c 	and.w	r3, r3, #12
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d1f6      	bne.n	800b3a6 <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 800b3b8:	f107 070c 	add.w	r7, r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop

0800b3c4 <__aeabi_drsub>:
 800b3c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b3c8:	e002      	b.n	800b3d0 <__adddf3>
 800b3ca:	bf00      	nop

0800b3cc <__aeabi_dsub>:
 800b3cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b3d0 <__adddf3>:
 800b3d0:	b530      	push	{r4, r5, lr}
 800b3d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b3d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b3da:	ea94 0f05 	teq	r4, r5
 800b3de:	bf08      	it	eq
 800b3e0:	ea90 0f02 	teqeq	r0, r2
 800b3e4:	bf1f      	itttt	ne
 800b3e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b3ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b3ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b3f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b3f6:	f000 80e2 	beq.w	800b5be <__adddf3+0x1ee>
 800b3fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b3fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b402:	bfb8      	it	lt
 800b404:	426d      	neglt	r5, r5
 800b406:	dd0c      	ble.n	800b422 <__adddf3+0x52>
 800b408:	442c      	add	r4, r5
 800b40a:	ea80 0202 	eor.w	r2, r0, r2
 800b40e:	ea81 0303 	eor.w	r3, r1, r3
 800b412:	ea82 0000 	eor.w	r0, r2, r0
 800b416:	ea83 0101 	eor.w	r1, r3, r1
 800b41a:	ea80 0202 	eor.w	r2, r0, r2
 800b41e:	ea81 0303 	eor.w	r3, r1, r3
 800b422:	2d36      	cmp	r5, #54	; 0x36
 800b424:	bf88      	it	hi
 800b426:	bd30      	pophi	{r4, r5, pc}
 800b428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b42c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b438:	d002      	beq.n	800b440 <__adddf3+0x70>
 800b43a:	4240      	negs	r0, r0
 800b43c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b44c:	d002      	beq.n	800b454 <__adddf3+0x84>
 800b44e:	4252      	negs	r2, r2
 800b450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b454:	ea94 0f05 	teq	r4, r5
 800b458:	f000 80a7 	beq.w	800b5aa <__adddf3+0x1da>
 800b45c:	f1a4 0401 	sub.w	r4, r4, #1
 800b460:	f1d5 0e20 	rsbs	lr, r5, #32
 800b464:	db0d      	blt.n	800b482 <__adddf3+0xb2>
 800b466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b46a:	fa22 f205 	lsr.w	r2, r2, r5
 800b46e:	1880      	adds	r0, r0, r2
 800b470:	f141 0100 	adc.w	r1, r1, #0
 800b474:	fa03 f20e 	lsl.w	r2, r3, lr
 800b478:	1880      	adds	r0, r0, r2
 800b47a:	fa43 f305 	asr.w	r3, r3, r5
 800b47e:	4159      	adcs	r1, r3
 800b480:	e00e      	b.n	800b4a0 <__adddf3+0xd0>
 800b482:	f1a5 0520 	sub.w	r5, r5, #32
 800b486:	f10e 0e20 	add.w	lr, lr, #32
 800b48a:	2a01      	cmp	r2, #1
 800b48c:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b490:	bf28      	it	cs
 800b492:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b496:	fa43 f305 	asr.w	r3, r3, r5
 800b49a:	18c0      	adds	r0, r0, r3
 800b49c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b4a4:	d507      	bpl.n	800b4b6 <__adddf3+0xe6>
 800b4a6:	f04f 0e00 	mov.w	lr, #0
 800b4aa:	f1dc 0c00 	rsbs	ip, ip, #0
 800b4ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b4b2:	eb6e 0101 	sbc.w	r1, lr, r1
 800b4b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b4ba:	d31b      	bcc.n	800b4f4 <__adddf3+0x124>
 800b4bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b4c0:	d30c      	bcc.n	800b4dc <__adddf3+0x10c>
 800b4c2:	0849      	lsrs	r1, r1, #1
 800b4c4:	ea5f 0030 	movs.w	r0, r0, rrx
 800b4c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b4cc:	f104 0401 	add.w	r4, r4, #1
 800b4d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b4d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b4d8:	f080 809a 	bcs.w	800b610 <__adddf3+0x240>
 800b4dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b4e0:	bf08      	it	eq
 800b4e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b4e6:	f150 0000 	adcs.w	r0, r0, #0
 800b4ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b4ee:	ea41 0105 	orr.w	r1, r1, r5
 800b4f2:	bd30      	pop	{r4, r5, pc}
 800b4f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b4f8:	4140      	adcs	r0, r0
 800b4fa:	eb41 0101 	adc.w	r1, r1, r1
 800b4fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b502:	f1a4 0401 	sub.w	r4, r4, #1
 800b506:	d1e9      	bne.n	800b4dc <__adddf3+0x10c>
 800b508:	f091 0f00 	teq	r1, #0
 800b50c:	bf04      	itt	eq
 800b50e:	4601      	moveq	r1, r0
 800b510:	2000      	moveq	r0, #0
 800b512:	fab1 f381 	clz	r3, r1
 800b516:	bf08      	it	eq
 800b518:	3320      	addeq	r3, #32
 800b51a:	f1a3 030b 	sub.w	r3, r3, #11
 800b51e:	f1b3 0220 	subs.w	r2, r3, #32
 800b522:	da0c      	bge.n	800b53e <__adddf3+0x16e>
 800b524:	320c      	adds	r2, #12
 800b526:	dd08      	ble.n	800b53a <__adddf3+0x16a>
 800b528:	f102 0c14 	add.w	ip, r2, #20
 800b52c:	f1c2 020c 	rsb	r2, r2, #12
 800b530:	fa01 f00c 	lsl.w	r0, r1, ip
 800b534:	fa21 f102 	lsr.w	r1, r1, r2
 800b538:	e00c      	b.n	800b554 <__adddf3+0x184>
 800b53a:	f102 0214 	add.w	r2, r2, #20
 800b53e:	bfd8      	it	le
 800b540:	f1c2 0c20 	rsble	ip, r2, #32
 800b544:	fa01 f102 	lsl.w	r1, r1, r2
 800b548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b54c:	bfdc      	itt	le
 800b54e:	ea41 010c 	orrle.w	r1, r1, ip
 800b552:	4090      	lslle	r0, r2
 800b554:	1ae4      	subs	r4, r4, r3
 800b556:	bfa2      	ittt	ge
 800b558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b55c:	4329      	orrge	r1, r5
 800b55e:	bd30      	popge	{r4, r5, pc}
 800b560:	ea6f 0404 	mvn.w	r4, r4
 800b564:	3c1f      	subs	r4, #31
 800b566:	da1c      	bge.n	800b5a2 <__adddf3+0x1d2>
 800b568:	340c      	adds	r4, #12
 800b56a:	dc0e      	bgt.n	800b58a <__adddf3+0x1ba>
 800b56c:	f104 0414 	add.w	r4, r4, #20
 800b570:	f1c4 0220 	rsb	r2, r4, #32
 800b574:	fa20 f004 	lsr.w	r0, r0, r4
 800b578:	fa01 f302 	lsl.w	r3, r1, r2
 800b57c:	ea40 0003 	orr.w	r0, r0, r3
 800b580:	fa21 f304 	lsr.w	r3, r1, r4
 800b584:	ea45 0103 	orr.w	r1, r5, r3
 800b588:	bd30      	pop	{r4, r5, pc}
 800b58a:	f1c4 040c 	rsb	r4, r4, #12
 800b58e:	f1c4 0220 	rsb	r2, r4, #32
 800b592:	fa20 f002 	lsr.w	r0, r0, r2
 800b596:	fa01 f304 	lsl.w	r3, r1, r4
 800b59a:	ea40 0003 	orr.w	r0, r0, r3
 800b59e:	4629      	mov	r1, r5
 800b5a0:	bd30      	pop	{r4, r5, pc}
 800b5a2:	fa21 f004 	lsr.w	r0, r1, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	bd30      	pop	{r4, r5, pc}
 800b5aa:	f094 0f00 	teq	r4, #0
 800b5ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b5b2:	bf06      	itte	eq
 800b5b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b5b8:	3401      	addeq	r4, #1
 800b5ba:	3d01      	subne	r5, #1
 800b5bc:	e74e      	b.n	800b45c <__adddf3+0x8c>
 800b5be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b5c2:	bf18      	it	ne
 800b5c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b5c8:	d029      	beq.n	800b61e <__adddf3+0x24e>
 800b5ca:	ea94 0f05 	teq	r4, r5
 800b5ce:	bf08      	it	eq
 800b5d0:	ea90 0f02 	teqeq	r0, r2
 800b5d4:	d005      	beq.n	800b5e2 <__adddf3+0x212>
 800b5d6:	ea54 0c00 	orrs.w	ip, r4, r0
 800b5da:	bf04      	itt	eq
 800b5dc:	4619      	moveq	r1, r3
 800b5de:	4610      	moveq	r0, r2
 800b5e0:	bd30      	pop	{r4, r5, pc}
 800b5e2:	ea91 0f03 	teq	r1, r3
 800b5e6:	bf1e      	ittt	ne
 800b5e8:	2100      	movne	r1, #0
 800b5ea:	2000      	movne	r0, #0
 800b5ec:	bd30      	popne	{r4, r5, pc}
 800b5ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b5f2:	d105      	bne.n	800b600 <__adddf3+0x230>
 800b5f4:	0040      	lsls	r0, r0, #1
 800b5f6:	4149      	adcs	r1, r1
 800b5f8:	bf28      	it	cs
 800b5fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b5fe:	bd30      	pop	{r4, r5, pc}
 800b600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b604:	bf3c      	itt	cc
 800b606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b60a:	bd30      	popcc	{r4, r5, pc}
 800b60c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b618:	f04f 0000 	mov.w	r0, #0
 800b61c:	bd30      	pop	{r4, r5, pc}
 800b61e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b622:	bf1a      	itte	ne
 800b624:	4619      	movne	r1, r3
 800b626:	4610      	movne	r0, r2
 800b628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b62c:	bf1c      	itt	ne
 800b62e:	460b      	movne	r3, r1
 800b630:	4602      	movne	r2, r0
 800b632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b636:	bf06      	itte	eq
 800b638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b63c:	ea91 0f03 	teqeq	r1, r3
 800b640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b644:	bd30      	pop	{r4, r5, pc}
 800b646:	bf00      	nop

0800b648 <__aeabi_ui2d>:
 800b648:	f090 0f00 	teq	r0, #0
 800b64c:	bf04      	itt	eq
 800b64e:	2100      	moveq	r1, #0
 800b650:	4770      	bxeq	lr
 800b652:	b530      	push	{r4, r5, lr}
 800b654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b65c:	f04f 0500 	mov.w	r5, #0
 800b660:	f04f 0100 	mov.w	r1, #0
 800b664:	e750      	b.n	800b508 <__adddf3+0x138>
 800b666:	bf00      	nop

0800b668 <__aeabi_i2d>:
 800b668:	f090 0f00 	teq	r0, #0
 800b66c:	bf04      	itt	eq
 800b66e:	2100      	moveq	r1, #0
 800b670:	4770      	bxeq	lr
 800b672:	b530      	push	{r4, r5, lr}
 800b674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b67c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b680:	bf48      	it	mi
 800b682:	4240      	negmi	r0, r0
 800b684:	f04f 0100 	mov.w	r1, #0
 800b688:	e73e      	b.n	800b508 <__adddf3+0x138>
 800b68a:	bf00      	nop

0800b68c <__aeabi_f2d>:
 800b68c:	0042      	lsls	r2, r0, #1
 800b68e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b692:	ea4f 0131 	mov.w	r1, r1, rrx
 800b696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b69a:	bf1f      	itttt	ne
 800b69c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b6a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b6a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b6a8:	4770      	bxne	lr
 800b6aa:	f092 0f00 	teq	r2, #0
 800b6ae:	bf14      	ite	ne
 800b6b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b6b4:	4770      	bxeq	lr
 800b6b6:	b530      	push	{r4, r5, lr}
 800b6b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b6bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b6c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b6c4:	e720      	b.n	800b508 <__adddf3+0x138>
 800b6c6:	bf00      	nop

0800b6c8 <__aeabi_ul2d>:
 800b6c8:	ea50 0201 	orrs.w	r2, r0, r1
 800b6cc:	bf08      	it	eq
 800b6ce:	4770      	bxeq	lr
 800b6d0:	b530      	push	{r4, r5, lr}
 800b6d2:	f04f 0500 	mov.w	r5, #0
 800b6d6:	e00a      	b.n	800b6ee <__aeabi_l2d+0x16>

0800b6d8 <__aeabi_l2d>:
 800b6d8:	ea50 0201 	orrs.w	r2, r0, r1
 800b6dc:	bf08      	it	eq
 800b6de:	4770      	bxeq	lr
 800b6e0:	b530      	push	{r4, r5, lr}
 800b6e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b6e6:	d502      	bpl.n	800b6ee <__aeabi_l2d+0x16>
 800b6e8:	4240      	negs	r0, r0
 800b6ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b6ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b6f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b6f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b6fa:	f43f aedc 	beq.w	800b4b6 <__adddf3+0xe6>
 800b6fe:	f04f 0203 	mov.w	r2, #3
 800b702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b706:	bf18      	it	ne
 800b708:	3203      	addne	r2, #3
 800b70a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b70e:	bf18      	it	ne
 800b710:	3203      	addne	r2, #3
 800b712:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b716:	f1c2 0320 	rsb	r3, r2, #32
 800b71a:	fa00 fc03 	lsl.w	ip, r0, r3
 800b71e:	fa20 f002 	lsr.w	r0, r0, r2
 800b722:	fa01 fe03 	lsl.w	lr, r1, r3
 800b726:	ea40 000e 	orr.w	r0, r0, lr
 800b72a:	fa21 f102 	lsr.w	r1, r1, r2
 800b72e:	4414      	add	r4, r2
 800b730:	e6c1      	b.n	800b4b6 <__adddf3+0xe6>
 800b732:	bf00      	nop

0800b734 <__aeabi_dmul>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b73a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b73e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b742:	bf1d      	ittte	ne
 800b744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b748:	ea94 0f0c 	teqne	r4, ip
 800b74c:	ea95 0f0c 	teqne	r5, ip
 800b750:	f000 f8de 	bleq	800b910 <__aeabi_dmul+0x1dc>
 800b754:	442c      	add	r4, r5
 800b756:	ea81 0603 	eor.w	r6, r1, r3
 800b75a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800b75e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800b762:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800b766:	bf18      	it	ne
 800b768:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800b76c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b774:	d038      	beq.n	800b7e8 <__aeabi_dmul+0xb4>
 800b776:	fba0 ce02 	umull	ip, lr, r0, r2
 800b77a:	f04f 0500 	mov.w	r5, #0
 800b77e:	fbe1 e502 	umlal	lr, r5, r1, r2
 800b782:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800b786:	fbe0 e503 	umlal	lr, r5, r0, r3
 800b78a:	f04f 0600 	mov.w	r6, #0
 800b78e:	fbe1 5603 	umlal	r5, r6, r1, r3
 800b792:	f09c 0f00 	teq	ip, #0
 800b796:	bf18      	it	ne
 800b798:	f04e 0e01 	orrne.w	lr, lr, #1
 800b79c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800b7a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800b7a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800b7a8:	d204      	bcs.n	800b7b4 <__aeabi_dmul+0x80>
 800b7aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800b7ae:	416d      	adcs	r5, r5
 800b7b0:	eb46 0606 	adc.w	r6, r6, r6
 800b7b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800b7b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800b7bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800b7c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800b7c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800b7c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b7cc:	bf88      	it	hi
 800b7ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b7d2:	d81e      	bhi.n	800b812 <__aeabi_dmul+0xde>
 800b7d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800b7d8:	bf08      	it	eq
 800b7da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800b7de:	f150 0000 	adcs.w	r0, r0, #0
 800b7e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800b7ec:	ea46 0101 	orr.w	r1, r6, r1
 800b7f0:	ea40 0002 	orr.w	r0, r0, r2
 800b7f4:	ea81 0103 	eor.w	r1, r1, r3
 800b7f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800b7fc:	bfc2      	ittt	gt
 800b7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b806:	bd70      	popgt	{r4, r5, r6, pc}
 800b808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b80c:	f04f 0e00 	mov.w	lr, #0
 800b810:	3c01      	subs	r4, #1
 800b812:	f300 80ab 	bgt.w	800b96c <__aeabi_dmul+0x238>
 800b816:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800b81a:	bfde      	ittt	le
 800b81c:	2000      	movle	r0, #0
 800b81e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800b822:	bd70      	pople	{r4, r5, r6, pc}
 800b824:	f1c4 0400 	rsb	r4, r4, #0
 800b828:	3c20      	subs	r4, #32
 800b82a:	da35      	bge.n	800b898 <__aeabi_dmul+0x164>
 800b82c:	340c      	adds	r4, #12
 800b82e:	dc1b      	bgt.n	800b868 <__aeabi_dmul+0x134>
 800b830:	f104 0414 	add.w	r4, r4, #20
 800b834:	f1c4 0520 	rsb	r5, r4, #32
 800b838:	fa00 f305 	lsl.w	r3, r0, r5
 800b83c:	fa20 f004 	lsr.w	r0, r0, r4
 800b840:	fa01 f205 	lsl.w	r2, r1, r5
 800b844:	ea40 0002 	orr.w	r0, r0, r2
 800b848:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800b84c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b854:	fa21 f604 	lsr.w	r6, r1, r4
 800b858:	eb42 0106 	adc.w	r1, r2, r6
 800b85c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b860:	bf08      	it	eq
 800b862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	f1c4 040c 	rsb	r4, r4, #12
 800b86c:	f1c4 0520 	rsb	r5, r4, #32
 800b870:	fa00 f304 	lsl.w	r3, r0, r4
 800b874:	fa20 f005 	lsr.w	r0, r0, r5
 800b878:	fa01 f204 	lsl.w	r2, r1, r4
 800b87c:	ea40 0002 	orr.w	r0, r0, r2
 800b880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b888:	f141 0100 	adc.w	r1, r1, #0
 800b88c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b890:	bf08      	it	eq
 800b892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	f1c4 0520 	rsb	r5, r4, #32
 800b89c:	fa00 f205 	lsl.w	r2, r0, r5
 800b8a0:	ea4e 0e02 	orr.w	lr, lr, r2
 800b8a4:	fa20 f304 	lsr.w	r3, r0, r4
 800b8a8:	fa01 f205 	lsl.w	r2, r1, r5
 800b8ac:	ea43 0302 	orr.w	r3, r3, r2
 800b8b0:	fa21 f004 	lsr.w	r0, r1, r4
 800b8b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b8b8:	fa21 f204 	lsr.w	r2, r1, r4
 800b8bc:	ea20 0002 	bic.w	r0, r0, r2
 800b8c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800b8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b8c8:	bf08      	it	eq
 800b8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	f094 0f00 	teq	r4, #0
 800b8d4:	d10f      	bne.n	800b8f6 <__aeabi_dmul+0x1c2>
 800b8d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800b8da:	0040      	lsls	r0, r0, #1
 800b8dc:	eb41 0101 	adc.w	r1, r1, r1
 800b8e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b8e4:	bf08      	it	eq
 800b8e6:	3c01      	subeq	r4, #1
 800b8e8:	d0f7      	beq.n	800b8da <__aeabi_dmul+0x1a6>
 800b8ea:	ea41 0106 	orr.w	r1, r1, r6
 800b8ee:	f095 0f00 	teq	r5, #0
 800b8f2:	bf18      	it	ne
 800b8f4:	4770      	bxne	lr
 800b8f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800b8fa:	0052      	lsls	r2, r2, #1
 800b8fc:	eb43 0303 	adc.w	r3, r3, r3
 800b900:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b904:	bf08      	it	eq
 800b906:	3d01      	subeq	r5, #1
 800b908:	d0f7      	beq.n	800b8fa <__aeabi_dmul+0x1c6>
 800b90a:	ea43 0306 	orr.w	r3, r3, r6
 800b90e:	4770      	bx	lr
 800b910:	ea94 0f0c 	teq	r4, ip
 800b914:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b918:	bf18      	it	ne
 800b91a:	ea95 0f0c 	teqne	r5, ip
 800b91e:	d00c      	beq.n	800b93a <__aeabi_dmul+0x206>
 800b920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b924:	bf18      	it	ne
 800b926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b92a:	d1d1      	bne.n	800b8d0 <__aeabi_dmul+0x19c>
 800b92c:	ea81 0103 	eor.w	r1, r1, r3
 800b930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b934:	f04f 0000 	mov.w	r0, #0
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b93e:	bf06      	itte	eq
 800b940:	4610      	moveq	r0, r2
 800b942:	4619      	moveq	r1, r3
 800b944:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b948:	d019      	beq.n	800b97e <__aeabi_dmul+0x24a>
 800b94a:	ea94 0f0c 	teq	r4, ip
 800b94e:	d102      	bne.n	800b956 <__aeabi_dmul+0x222>
 800b950:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800b954:	d113      	bne.n	800b97e <__aeabi_dmul+0x24a>
 800b956:	ea95 0f0c 	teq	r5, ip
 800b95a:	d105      	bne.n	800b968 <__aeabi_dmul+0x234>
 800b95c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800b960:	bf1c      	itt	ne
 800b962:	4610      	movne	r0, r2
 800b964:	4619      	movne	r1, r3
 800b966:	d10a      	bne.n	800b97e <__aeabi_dmul+0x24a>
 800b968:	ea81 0103 	eor.w	r1, r1, r3
 800b96c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b970:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b974:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b978:	f04f 0000 	mov.w	r0, #0
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
 800b97e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b982:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800b986:	bd70      	pop	{r4, r5, r6, pc}

0800b988 <__aeabi_ddiv>:
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b98e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b996:	bf1d      	ittte	ne
 800b998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b99c:	ea94 0f0c 	teqne	r4, ip
 800b9a0:	ea95 0f0c 	teqne	r5, ip
 800b9a4:	f000 f8a7 	bleq	800baf6 <__aeabi_ddiv+0x16e>
 800b9a8:	eba4 0405 	sub.w	r4, r4, r5
 800b9ac:	ea81 0e03 	eor.w	lr, r1, r3
 800b9b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b9b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b9b8:	f000 8088 	beq.w	800bacc <__aeabi_ddiv+0x144>
 800b9bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b9c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800b9c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800b9c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800b9cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800b9d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800b9d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800b9d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800b9dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800b9e0:	429d      	cmp	r5, r3
 800b9e2:	bf08      	it	eq
 800b9e4:	4296      	cmpeq	r6, r2
 800b9e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800b9ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800b9ee:	d202      	bcs.n	800b9f6 <__aeabi_ddiv+0x6e>
 800b9f0:	085b      	lsrs	r3, r3, #1
 800b9f2:	ea4f 0232 	mov.w	r2, r2, rrx
 800b9f6:	1ab6      	subs	r6, r6, r2
 800b9f8:	eb65 0503 	sbc.w	r5, r5, r3
 800b9fc:	085b      	lsrs	r3, r3, #1
 800b9fe:	ea4f 0232 	mov.w	r2, r2, rrx
 800ba02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800ba0a:	ebb6 0e02 	subs.w	lr, r6, r2
 800ba0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ba12:	bf22      	ittt	cs
 800ba14:	1ab6      	subcs	r6, r6, r2
 800ba16:	4675      	movcs	r5, lr
 800ba18:	ea40 000c 	orrcs.w	r0, r0, ip
 800ba1c:	085b      	lsrs	r3, r3, #1
 800ba1e:	ea4f 0232 	mov.w	r2, r2, rrx
 800ba22:	ebb6 0e02 	subs.w	lr, r6, r2
 800ba26:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ba2a:	bf22      	ittt	cs
 800ba2c:	1ab6      	subcs	r6, r6, r2
 800ba2e:	4675      	movcs	r5, lr
 800ba30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ba34:	085b      	lsrs	r3, r3, #1
 800ba36:	ea4f 0232 	mov.w	r2, r2, rrx
 800ba3a:	ebb6 0e02 	subs.w	lr, r6, r2
 800ba3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ba42:	bf22      	ittt	cs
 800ba44:	1ab6      	subcs	r6, r6, r2
 800ba46:	4675      	movcs	r5, lr
 800ba48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800ba4c:	085b      	lsrs	r3, r3, #1
 800ba4e:	ea4f 0232 	mov.w	r2, r2, rrx
 800ba52:	ebb6 0e02 	subs.w	lr, r6, r2
 800ba56:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ba5a:	bf22      	ittt	cs
 800ba5c:	1ab6      	subcs	r6, r6, r2
 800ba5e:	4675      	movcs	r5, lr
 800ba60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ba64:	ea55 0e06 	orrs.w	lr, r5, r6
 800ba68:	d018      	beq.n	800ba9c <__aeabi_ddiv+0x114>
 800ba6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800ba6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800ba72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800ba76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ba7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800ba7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ba82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800ba86:	d1c0      	bne.n	800ba0a <__aeabi_ddiv+0x82>
 800ba88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ba8c:	d10b      	bne.n	800baa6 <__aeabi_ddiv+0x11e>
 800ba8e:	ea41 0100 	orr.w	r1, r1, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800ba9a:	e7b6      	b.n	800ba0a <__aeabi_ddiv+0x82>
 800ba9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800baa0:	bf04      	itt	eq
 800baa2:	4301      	orreq	r1, r0
 800baa4:	2000      	moveq	r0, #0
 800baa6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800baaa:	bf88      	it	hi
 800baac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bab0:	f63f aeaf 	bhi.w	800b812 <__aeabi_dmul+0xde>
 800bab4:	ebb5 0c03 	subs.w	ip, r5, r3
 800bab8:	bf04      	itt	eq
 800baba:	ebb6 0c02 	subseq.w	ip, r6, r2
 800babe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800bac2:	f150 0000 	adcs.w	r0, r0, #0
 800bac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800bad0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800bad4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800bad8:	bfc2      	ittt	gt
 800bada:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bae2:	bd70      	popgt	{r4, r5, r6, pc}
 800bae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bae8:	f04f 0e00 	mov.w	lr, #0
 800baec:	3c01      	subs	r4, #1
 800baee:	e690      	b.n	800b812 <__aeabi_dmul+0xde>
 800baf0:	ea45 0e06 	orr.w	lr, r5, r6
 800baf4:	e68d      	b.n	800b812 <__aeabi_dmul+0xde>
 800baf6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bafa:	ea94 0f0c 	teq	r4, ip
 800bafe:	bf08      	it	eq
 800bb00:	ea95 0f0c 	teqeq	r5, ip
 800bb04:	f43f af3b 	beq.w	800b97e <__aeabi_dmul+0x24a>
 800bb08:	ea94 0f0c 	teq	r4, ip
 800bb0c:	d10a      	bne.n	800bb24 <__aeabi_ddiv+0x19c>
 800bb0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800bb12:	f47f af34 	bne.w	800b97e <__aeabi_dmul+0x24a>
 800bb16:	ea95 0f0c 	teq	r5, ip
 800bb1a:	f47f af25 	bne.w	800b968 <__aeabi_dmul+0x234>
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	e72c      	b.n	800b97e <__aeabi_dmul+0x24a>
 800bb24:	ea95 0f0c 	teq	r5, ip
 800bb28:	d106      	bne.n	800bb38 <__aeabi_ddiv+0x1b0>
 800bb2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800bb2e:	f43f aefd 	beq.w	800b92c <__aeabi_dmul+0x1f8>
 800bb32:	4610      	mov	r0, r2
 800bb34:	4619      	mov	r1, r3
 800bb36:	e722      	b.n	800b97e <__aeabi_dmul+0x24a>
 800bb38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bb3c:	bf18      	it	ne
 800bb3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bb42:	f47f aec5 	bne.w	800b8d0 <__aeabi_dmul+0x19c>
 800bb46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800bb4a:	f47f af0d 	bne.w	800b968 <__aeabi_dmul+0x234>
 800bb4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800bb52:	f47f aeeb 	bne.w	800b92c <__aeabi_dmul+0x1f8>
 800bb56:	e712      	b.n	800b97e <__aeabi_dmul+0x24a>

0800bb58 <__gedf2>:
 800bb58:	f04f 3cff 	mov.w	ip, #4294967295
 800bb5c:	e006      	b.n	800bb6c <__cmpdf2+0x4>
 800bb5e:	bf00      	nop

0800bb60 <__ledf2>:
 800bb60:	f04f 0c01 	mov.w	ip, #1
 800bb64:	e002      	b.n	800bb6c <__cmpdf2+0x4>
 800bb66:	bf00      	nop

0800bb68 <__cmpdf2>:
 800bb68:	f04f 0c01 	mov.w	ip, #1
 800bb6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800bb70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800bb74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bb78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bb7c:	bf18      	it	ne
 800bb7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800bb82:	d01b      	beq.n	800bbbc <__cmpdf2+0x54>
 800bb84:	b001      	add	sp, #4
 800bb86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800bb8a:	bf0c      	ite	eq
 800bb8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800bb90:	ea91 0f03 	teqne	r1, r3
 800bb94:	bf02      	ittt	eq
 800bb96:	ea90 0f02 	teqeq	r0, r2
 800bb9a:	2000      	moveq	r0, #0
 800bb9c:	4770      	bxeq	lr
 800bb9e:	f110 0f00 	cmn.w	r0, #0
 800bba2:	ea91 0f03 	teq	r1, r3
 800bba6:	bf58      	it	pl
 800bba8:	4299      	cmppl	r1, r3
 800bbaa:	bf08      	it	eq
 800bbac:	4290      	cmpeq	r0, r2
 800bbae:	bf2c      	ite	cs
 800bbb0:	17d8      	asrcs	r0, r3, #31
 800bbb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800bbb6:	f040 0001 	orr.w	r0, r0, #1
 800bbba:	4770      	bx	lr
 800bbbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800bbc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bbc4:	d102      	bne.n	800bbcc <__cmpdf2+0x64>
 800bbc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800bbca:	d107      	bne.n	800bbdc <__cmpdf2+0x74>
 800bbcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bbd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bbd4:	d1d6      	bne.n	800bb84 <__cmpdf2+0x1c>
 800bbd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800bbda:	d0d3      	beq.n	800bb84 <__cmpdf2+0x1c>
 800bbdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <__aeabi_cdrcmple>:
 800bbe4:	4684      	mov	ip, r0
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4662      	mov	r2, ip
 800bbea:	468c      	mov	ip, r1
 800bbec:	4619      	mov	r1, r3
 800bbee:	4663      	mov	r3, ip
 800bbf0:	e000      	b.n	800bbf4 <__aeabi_cdcmpeq>
 800bbf2:	bf00      	nop

0800bbf4 <__aeabi_cdcmpeq>:
 800bbf4:	b501      	push	{r0, lr}
 800bbf6:	f7ff ffb7 	bl	800bb68 <__cmpdf2>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	bf48      	it	mi
 800bbfe:	f110 0f00 	cmnmi.w	r0, #0
 800bc02:	bd01      	pop	{r0, pc}

0800bc04 <__aeabi_dcmpeq>:
 800bc04:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bc08:	f7ff fff4 	bl	800bbf4 <__aeabi_cdcmpeq>
 800bc0c:	bf0c      	ite	eq
 800bc0e:	2001      	moveq	r0, #1
 800bc10:	2000      	movne	r0, #0
 800bc12:	f85d fb08 	ldr.w	pc, [sp], #8
 800bc16:	bf00      	nop

0800bc18 <__aeabi_dcmplt>:
 800bc18:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bc1c:	f7ff ffea 	bl	800bbf4 <__aeabi_cdcmpeq>
 800bc20:	bf34      	ite	cc
 800bc22:	2001      	movcc	r0, #1
 800bc24:	2000      	movcs	r0, #0
 800bc26:	f85d fb08 	ldr.w	pc, [sp], #8
 800bc2a:	bf00      	nop

0800bc2c <__aeabi_dcmple>:
 800bc2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bc30:	f7ff ffe0 	bl	800bbf4 <__aeabi_cdcmpeq>
 800bc34:	bf94      	ite	ls
 800bc36:	2001      	movls	r0, #1
 800bc38:	2000      	movhi	r0, #0
 800bc3a:	f85d fb08 	ldr.w	pc, [sp], #8
 800bc3e:	bf00      	nop

0800bc40 <__aeabi_dcmpge>:
 800bc40:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bc44:	f7ff ffce 	bl	800bbe4 <__aeabi_cdrcmple>
 800bc48:	bf94      	ite	ls
 800bc4a:	2001      	movls	r0, #1
 800bc4c:	2000      	movhi	r0, #0
 800bc4e:	f85d fb08 	ldr.w	pc, [sp], #8
 800bc52:	bf00      	nop

0800bc54 <__aeabi_dcmpgt>:
 800bc54:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bc58:	f7ff ffc4 	bl	800bbe4 <__aeabi_cdrcmple>
 800bc5c:	bf34      	ite	cc
 800bc5e:	2001      	movcc	r0, #1
 800bc60:	2000      	movcs	r0, #0
 800bc62:	f85d fb08 	ldr.w	pc, [sp], #8
 800bc66:	bf00      	nop

0800bc68 <__aeabi_d2iz>:
 800bc68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800bc6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800bc70:	d215      	bcs.n	800bc9e <__aeabi_d2iz+0x36>
 800bc72:	d511      	bpl.n	800bc98 <__aeabi_d2iz+0x30>
 800bc74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800bc78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800bc7c:	d912      	bls.n	800bca4 <__aeabi_d2iz+0x3c>
 800bc7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bc82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bc8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800bc8e:	fa23 f002 	lsr.w	r0, r3, r2
 800bc92:	bf18      	it	ne
 800bc94:	4240      	negne	r0, r0
 800bc96:	4770      	bx	lr
 800bc98:	f04f 0000 	mov.w	r0, #0
 800bc9c:	4770      	bx	lr
 800bc9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800bca2:	d105      	bne.n	800bcb0 <__aeabi_d2iz+0x48>
 800bca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800bca8:	bf08      	it	eq
 800bcaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800bcae:	4770      	bx	lr
 800bcb0:	f04f 0000 	mov.w	r0, #0
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop

0800bcb8 <__aeabi_d2f>:
 800bcb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800bcbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800bcc0:	bf24      	itt	cs
 800bcc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800bcc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800bcca:	d90d      	bls.n	800bce8 <__aeabi_d2f+0x30>
 800bccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800bcd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800bcd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800bcd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800bcdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800bce0:	bf08      	it	eq
 800bce2:	f020 0001 	biceq.w	r0, r0, #1
 800bce6:	4770      	bx	lr
 800bce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800bcec:	d121      	bne.n	800bd32 <__aeabi_d2f+0x7a>
 800bcee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800bcf2:	bfbc      	itt	lt
 800bcf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800bcf8:	4770      	bxlt	lr
 800bcfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bcfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800bd02:	f1c2 0218 	rsb	r2, r2, #24
 800bd06:	f1c2 0c20 	rsb	ip, r2, #32
 800bd0a:	fa10 f30c 	lsls.w	r3, r0, ip
 800bd0e:	fa20 f002 	lsr.w	r0, r0, r2
 800bd12:	bf18      	it	ne
 800bd14:	f040 0001 	orrne.w	r0, r0, #1
 800bd18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bd1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800bd20:	fa03 fc0c 	lsl.w	ip, r3, ip
 800bd24:	ea40 000c 	orr.w	r0, r0, ip
 800bd28:	fa23 f302 	lsr.w	r3, r3, r2
 800bd2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd30:	e7cc      	b.n	800bccc <__aeabi_d2f+0x14>
 800bd32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800bd36:	d107      	bne.n	800bd48 <__aeabi_d2f+0x90>
 800bd38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800bd3c:	bf1e      	ittt	ne
 800bd3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800bd42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800bd46:	4770      	bxne	lr
 800bd48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800bd4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800bd50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop

0800bd58 <__aeabi_uldivmod>:
 800bd58:	b94b      	cbnz	r3, 800bd6e <__aeabi_uldivmod+0x16>
 800bd5a:	b942      	cbnz	r2, 800bd6e <__aeabi_uldivmod+0x16>
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	bf08      	it	eq
 800bd60:	2800      	cmpeq	r0, #0
 800bd62:	d002      	beq.n	800bd6a <__aeabi_uldivmod+0x12>
 800bd64:	f04f 31ff 	mov.w	r1, #4294967295
 800bd68:	4608      	mov	r0, r1
 800bd6a:	f000 b837 	b.w	800bddc <__aeabi_idiv0>
 800bd6e:	b082      	sub	sp, #8
 800bd70:	46ec      	mov	ip, sp
 800bd72:	e92d 5000 	stmdb	sp!, {ip, lr}
 800bd76:	f000 f81b 	bl	800bdb0 <__gnu_uldivmod_helper>
 800bd7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd7e:	b002      	add	sp, #8
 800bd80:	bc0c      	pop	{r2, r3}
 800bd82:	4770      	bx	lr

0800bd84 <__gnu_ldivmod_helper>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	4616      	mov	r6, r2
 800bd88:	4604      	mov	r4, r0
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	461f      	mov	r7, r3
 800bd8e:	f000 f827 	bl	800bde0 <__divdi3>
 800bd92:	fb06 f301 	mul.w	r3, r6, r1
 800bd96:	fb00 3707 	mla	r7, r0, r7, r3
 800bd9a:	fba6 2300 	umull	r2, r3, r6, r0
 800bd9e:	18fb      	adds	r3, r7, r3
 800bda0:	1aa2      	subs	r2, r4, r2
 800bda2:	eb65 0303 	sbc.w	r3, r5, r3
 800bda6:	9c06      	ldr	r4, [sp, #24]
 800bda8:	e9c4 2300 	strd	r2, r3, [r4]
 800bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdae:	bf00      	nop

0800bdb0 <__gnu_uldivmod_helper>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	4616      	mov	r6, r2
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	461f      	mov	r7, r3
 800bdba:	f000 f96f 	bl	800c09c <__udivdi3>
 800bdbe:	fb00 f707 	mul.w	r7, r0, r7
 800bdc2:	fba0 2306 	umull	r2, r3, r0, r6
 800bdc6:	fb06 7701 	mla	r7, r6, r1, r7
 800bdca:	18fb      	adds	r3, r7, r3
 800bdcc:	1aa2      	subs	r2, r4, r2
 800bdce:	eb65 0303 	sbc.w	r3, r5, r3
 800bdd2:	9c06      	ldr	r4, [sp, #24]
 800bdd4:	e9c4 2300 	strd	r2, r3, [r4]
 800bdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdda:	bf00      	nop

0800bddc <__aeabi_idiv0>:
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop

0800bde0 <__divdi3>:
 800bde0:	2900      	cmp	r1, #0
 800bde2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bde6:	461d      	mov	r5, r3
 800bde8:	f2c0 809d 	blt.w	800bf26 <__divdi3+0x146>
 800bdec:	2400      	movs	r4, #0
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	f2c0 8094 	blt.w	800bf1c <__divdi3+0x13c>
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	4694      	mov	ip, r2
 800bdfa:	461e      	mov	r6, r3
 800bdfc:	bbe3      	cbnz	r3, 800be78 <__divdi3+0x98>
 800bdfe:	428a      	cmp	r2, r1
 800be00:	d955      	bls.n	800beae <__divdi3+0xce>
 800be02:	fab2 f782 	clz	r7, r2
 800be06:	b147      	cbz	r7, 800be1a <__divdi3+0x3a>
 800be08:	f1c7 0520 	rsb	r5, r7, #32
 800be0c:	fa20 f605 	lsr.w	r6, r0, r5
 800be10:	fa01 f107 	lsl.w	r1, r1, r7
 800be14:	40ba      	lsls	r2, r7
 800be16:	4331      	orrs	r1, r6
 800be18:	40b8      	lsls	r0, r7
 800be1a:	0c17      	lsrs	r7, r2, #16
 800be1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800be20:	0c03      	lsrs	r3, r0, #16
 800be22:	fa1f fc82 	uxth.w	ip, r2
 800be26:	fb07 1116 	mls	r1, r7, r6, r1
 800be2a:	fb0c f506 	mul.w	r5, ip, r6
 800be2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800be32:	429d      	cmp	r5, r3
 800be34:	d908      	bls.n	800be48 <__divdi3+0x68>
 800be36:	1e71      	subs	r1, r6, #1
 800be38:	189b      	adds	r3, r3, r2
 800be3a:	f080 8113 	bcs.w	800c064 <__divdi3+0x284>
 800be3e:	429d      	cmp	r5, r3
 800be40:	f240 8110 	bls.w	800c064 <__divdi3+0x284>
 800be44:	3e02      	subs	r6, #2
 800be46:	189b      	adds	r3, r3, r2
 800be48:	1b59      	subs	r1, r3, r5
 800be4a:	fbb1 f5f7 	udiv	r5, r1, r7
 800be4e:	fb07 1315 	mls	r3, r7, r5, r1
 800be52:	b280      	uxth	r0, r0
 800be54:	fb0c fc05 	mul.w	ip, ip, r5
 800be58:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 800be5c:	458c      	cmp	ip, r1
 800be5e:	d907      	bls.n	800be70 <__divdi3+0x90>
 800be60:	1e6b      	subs	r3, r5, #1
 800be62:	188a      	adds	r2, r1, r2
 800be64:	f080 8100 	bcs.w	800c068 <__divdi3+0x288>
 800be68:	4594      	cmp	ip, r2
 800be6a:	f240 80fd 	bls.w	800c068 <__divdi3+0x288>
 800be6e:	3d02      	subs	r5, #2
 800be70:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 800be74:	2500      	movs	r5, #0
 800be76:	e003      	b.n	800be80 <__divdi3+0xa0>
 800be78:	428b      	cmp	r3, r1
 800be7a:	d90c      	bls.n	800be96 <__divdi3+0xb6>
 800be7c:	2500      	movs	r5, #0
 800be7e:	4629      	mov	r1, r5
 800be80:	460a      	mov	r2, r1
 800be82:	462b      	mov	r3, r5
 800be84:	b114      	cbz	r4, 800be8c <__divdi3+0xac>
 800be86:	4252      	negs	r2, r2
 800be88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800be8c:	4610      	mov	r0, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be94:	4770      	bx	lr
 800be96:	fab3 f583 	clz	r5, r3
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	f040 8087 	bne.w	800bfae <__divdi3+0x1ce>
 800bea0:	428b      	cmp	r3, r1
 800bea2:	d301      	bcc.n	800bea8 <__divdi3+0xc8>
 800bea4:	4282      	cmp	r2, r0
 800bea6:	d8ea      	bhi.n	800be7e <__divdi3+0x9e>
 800bea8:	2500      	movs	r5, #0
 800beaa:	2101      	movs	r1, #1
 800beac:	e7e8      	b.n	800be80 <__divdi3+0xa0>
 800beae:	b912      	cbnz	r2, 800beb6 <__divdi3+0xd6>
 800beb0:	2601      	movs	r6, #1
 800beb2:	fbb6 f2f2 	udiv	r2, r6, r2
 800beb6:	fab2 f682 	clz	r6, r2
 800beba:	2e00      	cmp	r6, #0
 800bebc:	d139      	bne.n	800bf32 <__divdi3+0x152>
 800bebe:	1a8e      	subs	r6, r1, r2
 800bec0:	0c13      	lsrs	r3, r2, #16
 800bec2:	fa1f fc82 	uxth.w	ip, r2
 800bec6:	2501      	movs	r5, #1
 800bec8:	fbb6 f7f3 	udiv	r7, r6, r3
 800becc:	fb03 6117 	mls	r1, r3, r7, r6
 800bed0:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800bed4:	fb0c f807 	mul.w	r8, ip, r7
 800bed8:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 800bedc:	45b0      	cmp	r8, r6
 800bede:	d906      	bls.n	800beee <__divdi3+0x10e>
 800bee0:	1e79      	subs	r1, r7, #1
 800bee2:	18b6      	adds	r6, r6, r2
 800bee4:	d202      	bcs.n	800beec <__divdi3+0x10c>
 800bee6:	45b0      	cmp	r8, r6
 800bee8:	f200 80d3 	bhi.w	800c092 <__divdi3+0x2b2>
 800beec:	460f      	mov	r7, r1
 800beee:	ebc8 0606 	rsb	r6, r8, r6
 800bef2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bef6:	fb03 6311 	mls	r3, r3, r1, r6
 800befa:	b280      	uxth	r0, r0
 800befc:	fb0c fc01 	mul.w	ip, ip, r1
 800bf00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800bf04:	459c      	cmp	ip, r3
 800bf06:	d906      	bls.n	800bf16 <__divdi3+0x136>
 800bf08:	1e4e      	subs	r6, r1, #1
 800bf0a:	189a      	adds	r2, r3, r2
 800bf0c:	d202      	bcs.n	800bf14 <__divdi3+0x134>
 800bf0e:	4594      	cmp	ip, r2
 800bf10:	f200 80c2 	bhi.w	800c098 <__divdi3+0x2b8>
 800bf14:	4631      	mov	r1, r6
 800bf16:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf1a:	e7b1      	b.n	800be80 <__divdi3+0xa0>
 800bf1c:	43e4      	mvns	r4, r4
 800bf1e:	4252      	negs	r2, r2
 800bf20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800bf24:	e766      	b.n	800bdf4 <__divdi3+0x14>
 800bf26:	4240      	negs	r0, r0
 800bf28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800bf2c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf30:	e75d      	b.n	800bdee <__divdi3+0xe>
 800bf32:	40b2      	lsls	r2, r6
 800bf34:	f1c6 0920 	rsb	r9, r6, #32
 800bf38:	fa21 f709 	lsr.w	r7, r1, r9
 800bf3c:	fa20 f509 	lsr.w	r5, r0, r9
 800bf40:	0c13      	lsrs	r3, r2, #16
 800bf42:	fa01 f106 	lsl.w	r1, r1, r6
 800bf46:	fbb7 f8f3 	udiv	r8, r7, r3
 800bf4a:	ea45 0901 	orr.w	r9, r5, r1
 800bf4e:	fa1f fc82 	uxth.w	ip, r2
 800bf52:	fb03 7718 	mls	r7, r3, r8, r7
 800bf56:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800bf5a:	fb0c f508 	mul.w	r5, ip, r8
 800bf5e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800bf62:	40b0      	lsls	r0, r6
 800bf64:	42bd      	cmp	r5, r7
 800bf66:	d90a      	bls.n	800bf7e <__divdi3+0x19e>
 800bf68:	18bf      	adds	r7, r7, r2
 800bf6a:	f108 36ff 	add.w	r6, r8, #4294967295
 800bf6e:	f080 808e 	bcs.w	800c08e <__divdi3+0x2ae>
 800bf72:	42bd      	cmp	r5, r7
 800bf74:	f240 808b 	bls.w	800c08e <__divdi3+0x2ae>
 800bf78:	f1a8 0802 	sub.w	r8, r8, #2
 800bf7c:	18bf      	adds	r7, r7, r2
 800bf7e:	1b79      	subs	r1, r7, r5
 800bf80:	fbb1 f5f3 	udiv	r5, r1, r3
 800bf84:	fb03 1715 	mls	r7, r3, r5, r1
 800bf88:	fa1f f989 	uxth.w	r9, r9
 800bf8c:	fb0c f605 	mul.w	r6, ip, r5
 800bf90:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 800bf94:	428e      	cmp	r6, r1
 800bf96:	d906      	bls.n	800bfa6 <__divdi3+0x1c6>
 800bf98:	1e6f      	subs	r7, r5, #1
 800bf9a:	1889      	adds	r1, r1, r2
 800bf9c:	d271      	bcs.n	800c082 <__divdi3+0x2a2>
 800bf9e:	428e      	cmp	r6, r1
 800bfa0:	d96f      	bls.n	800c082 <__divdi3+0x2a2>
 800bfa2:	3d02      	subs	r5, #2
 800bfa4:	1889      	adds	r1, r1, r2
 800bfa6:	1b8e      	subs	r6, r1, r6
 800bfa8:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 800bfac:	e78c      	b.n	800bec8 <__divdi3+0xe8>
 800bfae:	f1c5 0120 	rsb	r1, r5, #32
 800bfb2:	fa22 f301 	lsr.w	r3, r2, r1
 800bfb6:	fa06 f605 	lsl.w	r6, r6, r5
 800bfba:	431e      	orrs	r6, r3
 800bfbc:	fa27 f201 	lsr.w	r2, r7, r1
 800bfc0:	ea4f 4916 	mov.w	r9, r6, lsr #16
 800bfc4:	fa07 f705 	lsl.w	r7, r7, r5
 800bfc8:	fa20 f101 	lsr.w	r1, r0, r1
 800bfcc:	fbb2 f8f9 	udiv	r8, r2, r9
 800bfd0:	430f      	orrs	r7, r1
 800bfd2:	0c3b      	lsrs	r3, r7, #16
 800bfd4:	fa1f fa86 	uxth.w	sl, r6
 800bfd8:	fb09 2218 	mls	r2, r9, r8, r2
 800bfdc:	fb0a fb08 	mul.w	fp, sl, r8
 800bfe0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bfe4:	4593      	cmp	fp, r2
 800bfe6:	fa0c fc05 	lsl.w	ip, ip, r5
 800bfea:	d908      	bls.n	800bffe <__divdi3+0x21e>
 800bfec:	1992      	adds	r2, r2, r6
 800bfee:	f108 31ff 	add.w	r1, r8, #4294967295
 800bff2:	d24a      	bcs.n	800c08a <__divdi3+0x2aa>
 800bff4:	4593      	cmp	fp, r2
 800bff6:	d948      	bls.n	800c08a <__divdi3+0x2aa>
 800bff8:	f1a8 0802 	sub.w	r8, r8, #2
 800bffc:	1992      	adds	r2, r2, r6
 800bffe:	ebcb 0302 	rsb	r3, fp, r2
 800c002:	fbb3 f1f9 	udiv	r1, r3, r9
 800c006:	fb09 3211 	mls	r2, r9, r1, r3
 800c00a:	b2bf      	uxth	r7, r7
 800c00c:	fb0a fa01 	mul.w	sl, sl, r1
 800c010:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 800c014:	459a      	cmp	sl, r3
 800c016:	d906      	bls.n	800c026 <__divdi3+0x246>
 800c018:	1e4a      	subs	r2, r1, #1
 800c01a:	199b      	adds	r3, r3, r6
 800c01c:	d233      	bcs.n	800c086 <__divdi3+0x2a6>
 800c01e:	459a      	cmp	sl, r3
 800c020:	d931      	bls.n	800c086 <__divdi3+0x2a6>
 800c022:	3902      	subs	r1, #2
 800c024:	199b      	adds	r3, r3, r6
 800c026:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800c02a:	0c0f      	lsrs	r7, r1, #16
 800c02c:	fa1f f88c 	uxth.w	r8, ip
 800c030:	fb08 f607 	mul.w	r6, r8, r7
 800c034:	b28a      	uxth	r2, r1
 800c036:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c03a:	fb08 f802 	mul.w	r8, r8, r2
 800c03e:	fb0c 6202 	mla	r2, ip, r2, r6
 800c042:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c046:	fb0c fc07 	mul.w	ip, ip, r7
 800c04a:	4296      	cmp	r6, r2
 800c04c:	bf88      	it	hi
 800c04e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 800c052:	ebca 0303 	rsb	r3, sl, r3
 800c056:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 800c05a:	4563      	cmp	r3, ip
 800c05c:	d30e      	bcc.n	800c07c <__divdi3+0x29c>
 800c05e:	d005      	beq.n	800c06c <__divdi3+0x28c>
 800c060:	2500      	movs	r5, #0
 800c062:	e70d      	b.n	800be80 <__divdi3+0xa0>
 800c064:	460e      	mov	r6, r1
 800c066:	e6ef      	b.n	800be48 <__divdi3+0x68>
 800c068:	461d      	mov	r5, r3
 800c06a:	e701      	b.n	800be70 <__divdi3+0x90>
 800c06c:	fa1f f888 	uxth.w	r8, r8
 800c070:	fa00 f005 	lsl.w	r0, r0, r5
 800c074:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 800c078:	42a8      	cmp	r0, r5
 800c07a:	d2f1      	bcs.n	800c060 <__divdi3+0x280>
 800c07c:	3901      	subs	r1, #1
 800c07e:	2500      	movs	r5, #0
 800c080:	e6fe      	b.n	800be80 <__divdi3+0xa0>
 800c082:	463d      	mov	r5, r7
 800c084:	e78f      	b.n	800bfa6 <__divdi3+0x1c6>
 800c086:	4611      	mov	r1, r2
 800c088:	e7cd      	b.n	800c026 <__divdi3+0x246>
 800c08a:	4688      	mov	r8, r1
 800c08c:	e7b7      	b.n	800bffe <__divdi3+0x21e>
 800c08e:	46b0      	mov	r8, r6
 800c090:	e775      	b.n	800bf7e <__divdi3+0x19e>
 800c092:	3f02      	subs	r7, #2
 800c094:	18b6      	adds	r6, r6, r2
 800c096:	e72a      	b.n	800beee <__divdi3+0x10e>
 800c098:	3902      	subs	r1, #2
 800c09a:	e73c      	b.n	800bf16 <__divdi3+0x136>

0800c09c <__udivdi3>:
 800c09c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d13d      	bne.n	800c126 <__udivdi3+0x8a>
 800c0aa:	428a      	cmp	r2, r1
 800c0ac:	d949      	bls.n	800c142 <__udivdi3+0xa6>
 800c0ae:	fab2 f782 	clz	r7, r2
 800c0b2:	b147      	cbz	r7, 800c0c6 <__udivdi3+0x2a>
 800c0b4:	f1c7 0120 	rsb	r1, r7, #32
 800c0b8:	fa20 f201 	lsr.w	r2, r0, r1
 800c0bc:	fa06 f607 	lsl.w	r6, r6, r7
 800c0c0:	40bc      	lsls	r4, r7
 800c0c2:	4316      	orrs	r6, r2
 800c0c4:	40bd      	lsls	r5, r7
 800c0c6:	0c22      	lsrs	r2, r4, #16
 800c0c8:	fbb6 f0f2 	udiv	r0, r6, r2
 800c0cc:	0c2f      	lsrs	r7, r5, #16
 800c0ce:	b2a1      	uxth	r1, r4
 800c0d0:	fb02 6610 	mls	r6, r2, r0, r6
 800c0d4:	fb01 f300 	mul.w	r3, r1, r0
 800c0d8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800c0dc:	42b3      	cmp	r3, r6
 800c0de:	d908      	bls.n	800c0f2 <__udivdi3+0x56>
 800c0e0:	1e47      	subs	r7, r0, #1
 800c0e2:	1936      	adds	r6, r6, r4
 800c0e4:	f080 80f8 	bcs.w	800c2d8 <__udivdi3+0x23c>
 800c0e8:	42b3      	cmp	r3, r6
 800c0ea:	f240 80f5 	bls.w	800c2d8 <__udivdi3+0x23c>
 800c0ee:	3802      	subs	r0, #2
 800c0f0:	1936      	adds	r6, r6, r4
 800c0f2:	1af6      	subs	r6, r6, r3
 800c0f4:	fbb6 f3f2 	udiv	r3, r6, r2
 800c0f8:	fb02 6213 	mls	r2, r2, r3, r6
 800c0fc:	b2ad      	uxth	r5, r5
 800c0fe:	fb01 f103 	mul.w	r1, r1, r3
 800c102:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800c106:	4291      	cmp	r1, r2
 800c108:	d907      	bls.n	800c11a <__udivdi3+0x7e>
 800c10a:	1e5e      	subs	r6, r3, #1
 800c10c:	1912      	adds	r2, r2, r4
 800c10e:	f080 80e5 	bcs.w	800c2dc <__udivdi3+0x240>
 800c112:	4291      	cmp	r1, r2
 800c114:	f240 80e2 	bls.w	800c2dc <__udivdi3+0x240>
 800c118:	3b02      	subs	r3, #2
 800c11a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800c11e:	2100      	movs	r1, #0
 800c120:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c124:	4770      	bx	lr
 800c126:	428b      	cmp	r3, r1
 800c128:	d843      	bhi.n	800c1b2 <__udivdi3+0x116>
 800c12a:	fab3 f483 	clz	r4, r3
 800c12e:	2c00      	cmp	r4, #0
 800c130:	d142      	bne.n	800c1b8 <__udivdi3+0x11c>
 800c132:	428b      	cmp	r3, r1
 800c134:	d302      	bcc.n	800c13c <__udivdi3+0xa0>
 800c136:	4282      	cmp	r2, r0
 800c138:	f200 80df 	bhi.w	800c2fa <__udivdi3+0x25e>
 800c13c:	2100      	movs	r1, #0
 800c13e:	2001      	movs	r0, #1
 800c140:	e7ee      	b.n	800c120 <__udivdi3+0x84>
 800c142:	b912      	cbnz	r2, 800c14a <__udivdi3+0xae>
 800c144:	2701      	movs	r7, #1
 800c146:	fbb7 f4f2 	udiv	r4, r7, r2
 800c14a:	fab4 f284 	clz	r2, r4
 800c14e:	2a00      	cmp	r2, #0
 800c150:	f040 8088 	bne.w	800c264 <__udivdi3+0x1c8>
 800c154:	1b0a      	subs	r2, r1, r4
 800c156:	0c23      	lsrs	r3, r4, #16
 800c158:	b2a7      	uxth	r7, r4
 800c15a:	2101      	movs	r1, #1
 800c15c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c160:	fb03 2216 	mls	r2, r3, r6, r2
 800c164:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 800c168:	fb07 f006 	mul.w	r0, r7, r6
 800c16c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 800c170:	4290      	cmp	r0, r2
 800c172:	d907      	bls.n	800c184 <__udivdi3+0xe8>
 800c174:	1912      	adds	r2, r2, r4
 800c176:	f106 3cff 	add.w	ip, r6, #4294967295
 800c17a:	d202      	bcs.n	800c182 <__udivdi3+0xe6>
 800c17c:	4290      	cmp	r0, r2
 800c17e:	f200 80ce 	bhi.w	800c31e <__udivdi3+0x282>
 800c182:	4666      	mov	r6, ip
 800c184:	1a12      	subs	r2, r2, r0
 800c186:	fbb2 f0f3 	udiv	r0, r2, r3
 800c18a:	fb03 2310 	mls	r3, r3, r0, r2
 800c18e:	b2ad      	uxth	r5, r5
 800c190:	fb07 f700 	mul.w	r7, r7, r0
 800c194:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c198:	429f      	cmp	r7, r3
 800c19a:	d907      	bls.n	800c1ac <__udivdi3+0x110>
 800c19c:	1e42      	subs	r2, r0, #1
 800c19e:	191b      	adds	r3, r3, r4
 800c1a0:	f080 809e 	bcs.w	800c2e0 <__udivdi3+0x244>
 800c1a4:	429f      	cmp	r7, r3
 800c1a6:	f240 809b 	bls.w	800c2e0 <__udivdi3+0x244>
 800c1aa:	3802      	subs	r0, #2
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	e7b6      	b.n	800c120 <__udivdi3+0x84>
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	e7b3      	b.n	800c120 <__udivdi3+0x84>
 800c1b8:	f1c4 0620 	rsb	r6, r4, #32
 800c1bc:	fa22 f506 	lsr.w	r5, r2, r6
 800c1c0:	fa03 f304 	lsl.w	r3, r3, r4
 800c1c4:	432b      	orrs	r3, r5
 800c1c6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800c1ca:	fa21 f506 	lsr.w	r5, r1, r6
 800c1ce:	fa01 f104 	lsl.w	r1, r1, r4
 800c1d2:	fa20 f606 	lsr.w	r6, r0, r6
 800c1d6:	fbb5 f7fc 	udiv	r7, r5, ip
 800c1da:	ea46 0a01 	orr.w	sl, r6, r1
 800c1de:	fa1f f883 	uxth.w	r8, r3
 800c1e2:	fb0c 5517 	mls	r5, ip, r7, r5
 800c1e6:	ea4f 411a 	mov.w	r1, sl, lsr #16
 800c1ea:	fb08 f907 	mul.w	r9, r8, r7
 800c1ee:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800c1f2:	45a9      	cmp	r9, r5
 800c1f4:	fa02 f204 	lsl.w	r2, r2, r4
 800c1f8:	d903      	bls.n	800c202 <__udivdi3+0x166>
 800c1fa:	1e7e      	subs	r6, r7, #1
 800c1fc:	18ed      	adds	r5, r5, r3
 800c1fe:	d37f      	bcc.n	800c300 <__udivdi3+0x264>
 800c200:	4637      	mov	r7, r6
 800c202:	ebc9 0105 	rsb	r1, r9, r5
 800c206:	fbb1 f6fc 	udiv	r6, r1, ip
 800c20a:	fb0c 1516 	mls	r5, ip, r6, r1
 800c20e:	fa1f fa8a 	uxth.w	sl, sl
 800c212:	fb08 f806 	mul.w	r8, r8, r6
 800c216:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 800c21a:	4588      	cmp	r8, r1
 800c21c:	d903      	bls.n	800c226 <__udivdi3+0x18a>
 800c21e:	1e75      	subs	r5, r6, #1
 800c220:	18c9      	adds	r1, r1, r3
 800c222:	d373      	bcc.n	800c30c <__udivdi3+0x270>
 800c224:	462e      	mov	r6, r5
 800c226:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800c22a:	0c37      	lsrs	r7, r6, #16
 800c22c:	fa1f fc82 	uxth.w	ip, r2
 800c230:	fb0c f507 	mul.w	r5, ip, r7
 800c234:	0c12      	lsrs	r2, r2, #16
 800c236:	b2b3      	uxth	r3, r6
 800c238:	fb0c fc03 	mul.w	ip, ip, r3
 800c23c:	fb02 5303 	mla	r3, r2, r3, r5
 800c240:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 800c244:	fb02 f207 	mul.w	r2, r2, r7
 800c248:	429d      	cmp	r5, r3
 800c24a:	bf88      	it	hi
 800c24c:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 800c250:	ebc8 0101 	rsb	r1, r8, r1
 800c254:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c258:	4291      	cmp	r1, r2
 800c25a:	d34b      	bcc.n	800c2f4 <__udivdi3+0x258>
 800c25c:	d042      	beq.n	800c2e4 <__udivdi3+0x248>
 800c25e:	4630      	mov	r0, r6
 800c260:	2100      	movs	r1, #0
 800c262:	e75d      	b.n	800c120 <__udivdi3+0x84>
 800c264:	4094      	lsls	r4, r2
 800c266:	f1c2 0520 	rsb	r5, r2, #32
 800c26a:	fa21 f605 	lsr.w	r6, r1, r5
 800c26e:	0c23      	lsrs	r3, r4, #16
 800c270:	fa20 f705 	lsr.w	r7, r0, r5
 800c274:	fa01 f102 	lsl.w	r1, r1, r2
 800c278:	fbb6 fcf3 	udiv	ip, r6, r3
 800c27c:	4339      	orrs	r1, r7
 800c27e:	0c0d      	lsrs	r5, r1, #16
 800c280:	b2a7      	uxth	r7, r4
 800c282:	fb03 661c 	mls	r6, r3, ip, r6
 800c286:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c28a:	fb07 f80c 	mul.w	r8, r7, ip
 800c28e:	45b0      	cmp	r8, r6
 800c290:	fa00 f502 	lsl.w	r5, r0, r2
 800c294:	d908      	bls.n	800c2a8 <__udivdi3+0x20c>
 800c296:	1936      	adds	r6, r6, r4
 800c298:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c29c:	d23d      	bcs.n	800c31a <__udivdi3+0x27e>
 800c29e:	45b0      	cmp	r8, r6
 800c2a0:	d93b      	bls.n	800c31a <__udivdi3+0x27e>
 800c2a2:	f1ac 0c02 	sub.w	ip, ip, #2
 800c2a6:	1936      	adds	r6, r6, r4
 800c2a8:	ebc8 0206 	rsb	r2, r8, r6
 800c2ac:	fbb2 f0f3 	udiv	r0, r2, r3
 800c2b0:	fb03 2610 	mls	r6, r3, r0, r2
 800c2b4:	b28a      	uxth	r2, r1
 800c2b6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c2ba:	fb07 f100 	mul.w	r1, r7, r0
 800c2be:	4291      	cmp	r1, r2
 800c2c0:	d906      	bls.n	800c2d0 <__udivdi3+0x234>
 800c2c2:	1e46      	subs	r6, r0, #1
 800c2c4:	1912      	adds	r2, r2, r4
 800c2c6:	d226      	bcs.n	800c316 <__udivdi3+0x27a>
 800c2c8:	4291      	cmp	r1, r2
 800c2ca:	d924      	bls.n	800c316 <__udivdi3+0x27a>
 800c2cc:	3802      	subs	r0, #2
 800c2ce:	1912      	adds	r2, r2, r4
 800c2d0:	1a52      	subs	r2, r2, r1
 800c2d2:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 800c2d6:	e741      	b.n	800c15c <__udivdi3+0xc0>
 800c2d8:	4638      	mov	r0, r7
 800c2da:	e70a      	b.n	800c0f2 <__udivdi3+0x56>
 800c2dc:	4633      	mov	r3, r6
 800c2de:	e71c      	b.n	800c11a <__udivdi3+0x7e>
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	e763      	b.n	800c1ac <__udivdi3+0x110>
 800c2e4:	fa1f fc8c 	uxth.w	ip, ip
 800c2e8:	fa00 f004 	lsl.w	r0, r0, r4
 800c2ec:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 800c2f0:	4298      	cmp	r0, r3
 800c2f2:	d2b4      	bcs.n	800c25e <__udivdi3+0x1c2>
 800c2f4:	1e70      	subs	r0, r6, #1
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	e712      	b.n	800c120 <__udivdi3+0x84>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	e70f      	b.n	800c120 <__udivdi3+0x84>
 800c300:	45a9      	cmp	r9, r5
 800c302:	f67f af7d 	bls.w	800c200 <__udivdi3+0x164>
 800c306:	3f02      	subs	r7, #2
 800c308:	18ed      	adds	r5, r5, r3
 800c30a:	e77a      	b.n	800c202 <__udivdi3+0x166>
 800c30c:	4588      	cmp	r8, r1
 800c30e:	d989      	bls.n	800c224 <__udivdi3+0x188>
 800c310:	3e02      	subs	r6, #2
 800c312:	18c9      	adds	r1, r1, r3
 800c314:	e787      	b.n	800c226 <__udivdi3+0x18a>
 800c316:	4630      	mov	r0, r6
 800c318:	e7da      	b.n	800c2d0 <__udivdi3+0x234>
 800c31a:	4684      	mov	ip, r0
 800c31c:	e7c4      	b.n	800c2a8 <__udivdi3+0x20c>
 800c31e:	3e02      	subs	r6, #2
 800c320:	1912      	adds	r2, r2, r4
 800c322:	e72f      	b.n	800c184 <__udivdi3+0xe8>

0800c324 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c324:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c326:	f000 b804 	b.w	800c332 <LoopCopyDataInit>

0800c32a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 800c32c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c32e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c330:	3104      	adds	r1, #4

0800c332 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c332:	480b      	ldr	r0, [pc, #44]	; (800c360 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 800c334:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 800c336:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c338:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c33a:	f4ff aff6 	bcc.w	800c32a <CopyDataInit>
  ldr  r2, =_sbss
 800c33e:	4a0a      	ldr	r2, [pc, #40]	; (800c368 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 800c340:	f000 b803 	b.w	800c34a <LoopFillZerobss>

0800c344 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c344:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c346:	f842 3b04 	str.w	r3, [r2], #4

0800c34a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c34a:	4b08      	ldr	r3, [pc, #32]	; (800c36c <LoopFillZerobss+0x22>)
  cmp  r2, r3
 800c34c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c34e:	f4ff aff9 	bcc.w	800c344 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c352:	f7fe fe63 	bl	800b01c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800c356:	f7f5 fa73 	bl	8001840 <main>
  bx  lr    
 800c35a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800c35c:	08013808 	.word	0x08013808
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c360:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c364:	20000904 	.word	0x20000904
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800c368:	20000904 	.word	0x20000904
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c36c:	20000a1c 	.word	0x20000a1c

0800c370 <ADC4_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c370:	f7ff bffe 	b.w	800c370 <ADC4_IRQHandler>

0800c374 <pow>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 800c660 <pow+0x2ec>
 800c37c:	b08b      	sub	sp, #44	; 0x2c
 800c37e:	461f      	mov	r7, r3
 800c380:	4680      	mov	r8, r0
 800c382:	4689      	mov	r9, r1
 800c384:	4616      	mov	r6, r2
 800c386:	f000 f9df 	bl	800c748 <__ieee754_pow>
 800c38a:	f99a 3000 	ldrsb.w	r3, [sl]
 800c38e:	3301      	adds	r3, #1
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	d004      	beq.n	800c3a0 <pow+0x2c>
 800c396:	4630      	mov	r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	f001 f87b 	bl	800d494 <__fpclassifyd>
 800c39e:	b920      	cbnz	r0, 800c3aa <pow+0x36>
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	b00b      	add	sp, #44	; 0x2c
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f001 f871 	bl	800d494 <__fpclassifyd>
 800c3b2:	4683      	mov	fp, r0
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d12e      	bne.n	800c416 <pow+0xa2>
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f7ff fc20 	bl	800bc04 <__aeabi_dcmpeq>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d0eb      	beq.n	800c3a0 <pow+0x2c>
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4aa4      	ldr	r2, [pc, #656]	; (800c65c <pow+0x2e8>)
 800c3cc:	f99a 3000 	ldrsb.w	r3, [sl]
 800c3d0:	9201      	str	r2, [sp, #4]
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c3d8:	ec41 0b10 	vmov	d0, r0, r1
 800c3dc:	2501      	movs	r5, #1
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	9500      	str	r5, [sp, #0]
 800c3e2:	f8cd b020 	str.w	fp, [sp, #32]
 800c3e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c3ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c3ee:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c3f2:	d00d      	beq.n	800c410 <pow+0x9c>
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d00b      	beq.n	800c410 <pow+0x9c>
 800c3f8:	4668      	mov	r0, sp
 800c3fa:	f001 f87f 	bl	800d4fc <matherr>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	f000 809b 	beq.w	800c53a <pow+0x1c6>
 800c404:	9808      	ldr	r0, [sp, #32]
 800c406:	b118      	cbz	r0, 800c410 <pow+0x9c>
 800c408:	f001 f9fc 	bl	800d804 <__errno>
 800c40c:	9c08      	ldr	r4, [sp, #32]
 800c40e:	6004      	str	r4, [r0, #0]
 800c410:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c414:	e7c4      	b.n	800c3a0 <pow+0x2c>
 800c416:	4640      	mov	r0, r8
 800c418:	4649      	mov	r1, r9
 800c41a:	2200      	movs	r2, #0
 800c41c:	2300      	movs	r3, #0
 800c41e:	f7ff fbf1 	bl	800bc04 <__aeabi_dcmpeq>
 800c422:	b320      	cbz	r0, 800c46e <pow+0xfa>
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	2200      	movs	r2, #0
 800c42a:	2300      	movs	r3, #0
 800c42c:	f7ff fbea 	bl	800bc04 <__aeabi_dcmpeq>
 800c430:	2800      	cmp	r0, #0
 800c432:	d055      	beq.n	800c4e0 <pow+0x16c>
 800c434:	4889      	ldr	r0, [pc, #548]	; (800c65c <pow+0x2e8>)
 800c436:	f99a 5000 	ldrsb.w	r5, [sl]
 800c43a:	9001      	str	r0, [sp, #4]
 800c43c:	2101      	movs	r1, #1
 800c43e:	9100      	str	r1, [sp, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	2100      	movs	r1, #0
 800c444:	ec41 0b16 	vmov	d6, r0, r1
 800c448:	2400      	movs	r4, #0
 800c44a:	9408      	str	r4, [sp, #32]
 800c44c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c450:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c454:	ed8d 6b06 	vstr	d6, [sp, #24]
 800c458:	2d00      	cmp	r5, #0
 800c45a:	d0cd      	beq.n	800c3f8 <pow+0x84>
 800c45c:	2100      	movs	r1, #0
 800c45e:	2000      	movs	r0, #0
 800c460:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c464:	ec41 0b17 	vmov	d7, r0, r1
 800c468:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c46c:	e7d0      	b.n	800c410 <pow+0x9c>
 800c46e:	4620      	mov	r0, r4
 800c470:	4629      	mov	r1, r5
 800c472:	f001 f809 	bl	800d488 <finite>
 800c476:	4683      	mov	fp, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d063      	beq.n	800c544 <pow+0x1d0>
 800c47c:	4620      	mov	r0, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	2200      	movs	r2, #0
 800c482:	2300      	movs	r3, #0
 800c484:	f7ff fbbe 	bl	800bc04 <__aeabi_dcmpeq>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d089      	beq.n	800c3a0 <pow+0x2c>
 800c48c:	4640      	mov	r0, r8
 800c48e:	4649      	mov	r1, r9
 800c490:	f000 fffa 	bl	800d488 <finite>
 800c494:	2800      	cmp	r0, #0
 800c496:	d083      	beq.n	800c3a0 <pow+0x2c>
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	f000 fff4 	bl	800d488 <finite>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f43f af7d 	beq.w	800c3a0 <pow+0x2c>
 800c4a6:	2004      	movs	r0, #4
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	f99a 4000 	ldrsb.w	r4, [sl]
 800c4ae:	9000      	str	r0, [sp, #0]
 800c4b0:	9108      	str	r1, [sp, #32]
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	4a69      	ldr	r2, [pc, #420]	; (800c65c <pow+0x2e8>)
 800c4b8:	ec41 0b17 	vmov	d7, r0, r1
 800c4bc:	2c02      	cmp	r4, #2
 800c4be:	9201      	str	r2, [sp, #4]
 800c4c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c4c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c4c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4cc:	d06a      	beq.n	800c5a4 <pow+0x230>
 800c4ce:	4668      	mov	r0, sp
 800c4d0:	f001 f814 	bl	800d4fc <matherr>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d065      	beq.n	800c5a4 <pow+0x230>
 800c4d8:	9a08      	ldr	r2, [sp, #32]
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	d098      	beq.n	800c410 <pow+0x9c>
 800c4de:	e793      	b.n	800c408 <pow+0x94>
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	4639      	mov	r1, r7
 800c4e4:	f000 ffd0 	bl	800d488 <finite>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f af59 	beq.w	800c3a0 <pow+0x2c>
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f7ff fb8f 	bl	800bc18 <__aeabi_dcmplt>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f43f af50 	beq.w	800c3a0 <pow+0x2c>
 800c500:	4856      	ldr	r0, [pc, #344]	; (800c65c <pow+0x2e8>)
 800c502:	f89a 5000 	ldrb.w	r5, [sl]
 800c506:	9001      	str	r0, [sp, #4]
 800c508:	2101      	movs	r1, #1
 800c50a:	2400      	movs	r4, #0
 800c50c:	9100      	str	r1, [sp, #0]
 800c50e:	9408      	str	r4, [sp, #32]
 800c510:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c514:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c518:	2000      	movs	r0, #0
 800c51a:	2100      	movs	r1, #0
 800c51c:	2d00      	cmp	r5, #0
 800c51e:	d03e      	beq.n	800c59e <pow+0x22a>
 800c520:	f6cf 71f0 	movt	r1, #65520	; 0xfff0
 800c524:	ec41 0b14 	vmov	d4, r0, r1
 800c528:	2d02      	cmp	r5, #2
 800c52a:	ed8d 4b06 	vstr	d4, [sp, #24]
 800c52e:	d130      	bne.n	800c592 <pow+0x21e>
 800c530:	f001 f968 	bl	800d804 <__errno>
 800c534:	2321      	movs	r3, #33	; 0x21
 800c536:	6003      	str	r3, [r0, #0]
 800c538:	e7ce      	b.n	800c4d8 <pow+0x164>
 800c53a:	f001 f963 	bl	800d804 <__errno>
 800c53e:	2121      	movs	r1, #33	; 0x21
 800c540:	6001      	str	r1, [r0, #0]
 800c542:	e75f      	b.n	800c404 <pow+0x90>
 800c544:	4640      	mov	r0, r8
 800c546:	4649      	mov	r1, r9
 800c548:	f000 ff9e 	bl	800d488 <finite>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d095      	beq.n	800c47c <pow+0x108>
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f000 ff98 	bl	800d488 <finite>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d08f      	beq.n	800c47c <pow+0x108>
 800c55c:	4620      	mov	r0, r4
 800c55e:	4629      	mov	r1, r5
 800c560:	f000 ff98 	bl	800d494 <__fpclassifyd>
 800c564:	bb18      	cbnz	r0, 800c5ae <pow+0x23a>
 800c566:	4b3d      	ldr	r3, [pc, #244]	; (800c65c <pow+0x2e8>)
 800c568:	f89a 4000 	ldrb.w	r4, [sl]
 800c56c:	9008      	str	r0, [sp, #32]
 800c56e:	2201      	movs	r2, #1
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	9200      	str	r2, [sp, #0]
 800c574:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c578:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c57c:	2000      	movs	r0, #0
 800c57e:	2100      	movs	r1, #0
 800c580:	b16c      	cbz	r4, 800c59e <pow+0x22a>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	f7ff f9ff 	bl	800b988 <__aeabi_ddiv>
 800c58a:	2c02      	cmp	r4, #2
 800c58c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c590:	d0ce      	beq.n	800c530 <pow+0x1bc>
 800c592:	4668      	mov	r0, sp
 800c594:	f000 ffb2 	bl	800d4fc <matherr>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d19d      	bne.n	800c4d8 <pow+0x164>
 800c59c:	e7c8      	b.n	800c530 <pow+0x1bc>
 800c59e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5a2:	e7f6      	b.n	800c592 <pow+0x21e>
 800c5a4:	f001 f92e 	bl	800d804 <__errno>
 800c5a8:	2522      	movs	r5, #34	; 0x22
 800c5aa:	6005      	str	r5, [r0, #0]
 800c5ac:	e794      	b.n	800c4d8 <pow+0x164>
 800c5ae:	4c2b      	ldr	r4, [pc, #172]	; (800c65c <pow+0x2e8>)
 800c5b0:	f99a 3000 	ldrsb.w	r3, [sl]
 800c5b4:	9401      	str	r4, [sp, #4]
 800c5b6:	2203      	movs	r2, #3
 800c5b8:	9200      	str	r2, [sp, #0]
 800c5ba:	f8cd b020 	str.w	fp, [sp, #32]
 800c5be:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c5c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	b9eb      	cbnz	r3, 800c60a <pow+0x296>
 800c5ce:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800c5d2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800c5d6:	f2c4 75ef 	movt	r5, #18415	; 0x47ef
 800c5da:	ec45 4b12 	vmov	d2, r4, r5
 800c5de:	2300      	movs	r3, #0
 800c5e0:	ed8d 2b06 	vstr	d2, [sp, #24]
 800c5e4:	f7ff fb18 	bl	800bc18 <__aeabi_dcmplt>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d13b      	bne.n	800c664 <pow+0x2f0>
 800c5ec:	f99a 0000 	ldrsb.w	r0, [sl]
 800c5f0:	2802      	cmp	r0, #2
 800c5f2:	d005      	beq.n	800c600 <pow+0x28c>
 800c5f4:	4668      	mov	r0, sp
 800c5f6:	f000 ff81 	bl	800d4fc <matherr>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f47f af02 	bne.w	800c404 <pow+0x90>
 800c600:	f001 f900 	bl	800d804 <__errno>
 800c604:	2122      	movs	r1, #34	; 0x22
 800c606:	6001      	str	r1, [r0, #0]
 800c608:	e6fc      	b.n	800c404 <pow+0x90>
 800c60a:	2500      	movs	r5, #0
 800c60c:	2400      	movs	r4, #0
 800c60e:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800c612:	ec45 4b10 	vmov	d0, r4, r5
 800c616:	2300      	movs	r3, #0
 800c618:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c61c:	f7ff fafc 	bl	800bc18 <__aeabi_dcmplt>
 800c620:	2800      	cmp	r0, #0
 800c622:	d0e3      	beq.n	800c5ec <pow+0x278>
 800c624:	2300      	movs	r3, #0
 800c626:	2200      	movs	r2, #0
 800c628:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	f7ff f880 	bl	800b734 <__aeabi_dmul>
 800c634:	4604      	mov	r4, r0
 800c636:	460d      	mov	r5, r1
 800c638:	f000 ff68 	bl	800d50c <rint>
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	f7ff fae0 	bl	800bc04 <__aeabi_dcmpeq>
 800c644:	2800      	cmp	r0, #0
 800c646:	d1d1      	bne.n	800c5ec <pow+0x278>
 800c648:	2100      	movs	r1, #0
 800c64a:	2000      	movs	r0, #0
 800c64c:	f6cf 71f0 	movt	r1, #65520	; 0xfff0
 800c650:	ec41 0b11 	vmov	d1, r0, r1
 800c654:	ed8d 1b06 	vstr	d1, [sp, #24]
 800c658:	e7c8      	b.n	800c5ec <pow+0x278>
 800c65a:	bf00      	nop
 800c65c:	08013600 	.word	0x08013600
 800c660:	20000060 	.word	0x20000060
 800c664:	2300      	movs	r3, #0
 800c666:	2200      	movs	r2, #0
 800c668:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c66c:	4630      	mov	r0, r6
 800c66e:	4639      	mov	r1, r7
 800c670:	f7ff f860 	bl	800b734 <__aeabi_dmul>
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	f000 ff48 	bl	800d50c <rint>
 800c67c:	4622      	mov	r2, r4
 800c67e:	462b      	mov	r3, r5
 800c680:	f7ff fac0 	bl	800bc04 <__aeabi_dcmpeq>
 800c684:	2800      	cmp	r0, #0
 800c686:	d1b1      	bne.n	800c5ec <pow+0x278>
 800c688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c68c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800c690:	f2cc 71ef 	movt	r1, #51183	; 0xc7ef
 800c694:	ec41 0b13 	vmov	d3, r0, r1
 800c698:	ed8d 3b06 	vstr	d3, [sp, #24]
 800c69c:	e7a6      	b.n	800c5ec <pow+0x278>
 800c69e:	bf00      	nop

0800c6a0 <sqrt>:
 800c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800c744 <sqrt+0xa4>
 800c6a8:	b08a      	sub	sp, #40	; 0x28
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	f000 fde3 	bl	800d278 <__ieee754_sqrt>
 800c6b2:	f998 3000 	ldrsb.w	r3, [r8]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	d00b      	beq.n	800c6d6 <sqrt+0x36>
 800c6be:	4620      	mov	r0, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f000 fee7 	bl	800d494 <__fpclassifyd>
 800c6c6:	b130      	cbz	r0, 800c6d6 <sqrt+0x36>
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f7ff faa2 	bl	800bc18 <__aeabi_dcmplt>
 800c6d4:	b920      	cbnz	r0, 800c6e0 <sqrt+0x40>
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	4639      	mov	r1, r7
 800c6da:	b00a      	add	sp, #40	; 0x28
 800c6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e0:	4817      	ldr	r0, [pc, #92]	; (800c740 <sqrt+0xa0>)
 800c6e2:	f898 6000 	ldrb.w	r6, [r8]
 800c6e6:	9001      	str	r0, [sp, #4]
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	9100      	str	r1, [sp, #0]
 800c6ee:	9208      	str	r2, [sp, #32]
 800c6f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c6f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c6f8:	b976      	cbnz	r6, 800c718 <sqrt+0x78>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	ec43 2b17 	vmov	d7, r2, r3
 800c702:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c706:	4668      	mov	r0, sp
 800c708:	f000 fef8 	bl	800d4fc <matherr>
 800c70c:	b170      	cbz	r0, 800c72c <sqrt+0x8c>
 800c70e:	9b08      	ldr	r3, [sp, #32]
 800c710:	b98b      	cbnz	r3, 800c736 <sqrt+0x96>
 800c712:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800c716:	e7de      	b.n	800c6d6 <sqrt+0x36>
 800c718:	2000      	movs	r0, #0
 800c71a:	2100      	movs	r1, #0
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	f7ff f932 	bl	800b988 <__aeabi_ddiv>
 800c724:	2e02      	cmp	r6, #2
 800c726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c72a:	d1ec      	bne.n	800c706 <sqrt+0x66>
 800c72c:	f001 f86a 	bl	800d804 <__errno>
 800c730:	2721      	movs	r7, #33	; 0x21
 800c732:	6007      	str	r7, [r0, #0]
 800c734:	e7eb      	b.n	800c70e <sqrt+0x6e>
 800c736:	f001 f865 	bl	800d804 <__errno>
 800c73a:	9e08      	ldr	r6, [sp, #32]
 800c73c:	6006      	str	r6, [r0, #0]
 800c73e:	e7e8      	b.n	800c712 <sqrt+0x72>
 800c740:	08013604 	.word	0x08013604
 800c744:	20000060 	.word	0x20000060

0800c748 <__ieee754_pow>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	469a      	mov	sl, r3
 800c74e:	4693      	mov	fp, r2
 800c750:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
 800c754:	4688      	mov	r8, r1
 800c756:	4614      	mov	r4, r2
 800c758:	4607      	mov	r7, r0
 800c75a:	4602      	mov	r2, r0
 800c75c:	ea55 000b 	orrs.w	r0, r5, fp
 800c760:	b091      	sub	sp, #68	; 0x44
 800c762:	46d1      	mov	r9, sl
 800c764:	4659      	mov	r1, fp
 800c766:	46c4      	mov	ip, r8
 800c768:	d044      	beq.n	800c7f4 <__ieee754_pow+0xac>
 800c76a:	2300      	movs	r3, #0
 800c76c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c770:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800c774:	429c      	cmp	r4, r3
 800c776:	dd0f      	ble.n	800c798 <__ieee754_pow+0x50>
 800c778:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c77c:	f504 1b80 	add.w	fp, r4, #1048576	; 0x100000
 800c780:	ea5b 0b02 	orrs.w	fp, fp, r2
 800c784:	d13c      	bne.n	800c800 <__ieee754_pow+0xb8>
 800c786:	f04f 0a00 	mov.w	sl, #0
 800c78a:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800c78e:	4658      	mov	r0, fp
 800c790:	4651      	mov	r1, sl
 800c792:	b011      	add	sp, #68	; 0x44
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	d038      	beq.n	800c80c <__ieee754_pow+0xc4>
 800c79a:	2000      	movs	r0, #0
 800c79c:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c7a0:	4285      	cmp	r5, r0
 800c7a2:	dce9      	bgt.n	800c778 <__ieee754_pow+0x30>
 800c7a4:	f000 80b9 	beq.w	800c91a <__ieee754_pow+0x1d2>
 800c7a8:	f1bc 0f00 	cmp.w	ip, #0
 800c7ac:	f2c0 808c 	blt.w	800c8c8 <__ieee754_pow+0x180>
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	d12e      	bne.n	800c814 <__ieee754_pow+0xcc>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c7bc:	4285      	cmp	r5, r0
 800c7be:	f000 80b0 	beq.w	800c922 <__ieee754_pow+0x1da>
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c7c8:	428d      	cmp	r5, r1
 800c7ca:	f000 809f 	beq.w	800c90c <__ieee754_pow+0x1c4>
 800c7ce:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7d2:	f000 83ed 	beq.w	800cfb0 <__ieee754_pow+0x868>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c7dc:	4599      	cmp	r9, r3
 800c7de:	d119      	bne.n	800c814 <__ieee754_pow+0xcc>
 800c7e0:	f1bc 0f00 	cmp.w	ip, #0
 800c7e4:	db16      	blt.n	800c814 <__ieee754_pow+0xcc>
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	4641      	mov	r1, r8
 800c7ea:	b011      	add	sp, #68	; 0x44
 800c7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	f000 bd42 	b.w	800d278 <__ieee754_sqrt>
 800c7f4:	f04f 0a00 	mov.w	sl, #0
 800c7f8:	4683      	mov	fp, r0
 800c7fa:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800c7fe:	e7c6      	b.n	800c78e <__ieee754_pow+0x46>
 800c800:	4859      	ldr	r0, [pc, #356]	; (800c968 <__ieee754_pow+0x220>)
 800c802:	b011      	add	sp, #68	; 0x44
 800c804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	f000 be7a 	b.w	800d500 <nan>
 800c80c:	2f00      	cmp	r7, #0
 800c80e:	d1b3      	bne.n	800c778 <__ieee754_pow+0x30>
 800c810:	e7c3      	b.n	800c79a <__ieee754_pow+0x52>
 800c812:	2600      	movs	r6, #0
 800c814:	4638      	mov	r0, r7
 800c816:	4641      	mov	r1, r8
 800c818:	9201      	str	r2, [sp, #4]
 800c81a:	f8cd c000 	str.w	ip, [sp]
 800c81e:	f000 fe2f 	bl	800d480 <fabs>
 800c822:	9a01      	ldr	r2, [sp, #4]
 800c824:	f8dd c000 	ldr.w	ip, [sp]
 800c828:	bb42      	cbnz	r2, 800c87c <__ieee754_pow+0x134>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800c830:	429c      	cmp	r4, r3
 800c832:	d005      	beq.n	800c840 <__ieee754_pow+0xf8>
 800c834:	b124      	cbz	r4, 800c840 <__ieee754_pow+0xf8>
 800c836:	2200      	movs	r2, #0
 800c838:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
 800c83c:	4294      	cmp	r4, r2
 800c83e:	d11d      	bne.n	800c87c <__ieee754_pow+0x134>
 800c840:	f1b9 0f00 	cmp.w	r9, #0
 800c844:	f2c0 841f 	blt.w	800d086 <__ieee754_pow+0x93e>
 800c848:	4683      	mov	fp, r0
 800c84a:	468a      	mov	sl, r1
 800c84c:	f1bc 0f00 	cmp.w	ip, #0
 800c850:	da9d      	bge.n	800c78e <__ieee754_pow+0x46>
 800c852:	f104 4040 	add.w	r0, r4, #3221225472	; 0xc0000000
 800c856:	f500 1280 	add.w	r2, r0, #1048576	; 0x100000
 800c85a:	ea56 0302 	orrs.w	r3, r6, r2
 800c85e:	f040 84b7 	bne.w	800d1d0 <__ieee754_pow+0xa88>
 800c862:	4658      	mov	r0, fp
 800c864:	465a      	mov	r2, fp
 800c866:	4651      	mov	r1, sl
 800c868:	4653      	mov	r3, sl
 800c86a:	f7fe fdaf 	bl	800b3cc <__aeabi_dsub>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	f7ff f889 	bl	800b988 <__aeabi_ddiv>
 800c876:	4683      	mov	fp, r0
 800c878:	468a      	mov	sl, r1
 800c87a:	e788      	b.n	800c78e <__ieee754_pow+0x46>
 800c87c:	ea4f 7edc 	mov.w	lr, ip, lsr #31
 800c880:	f10e 3cff 	add.w	ip, lr, #4294967295
 800c884:	ea56 030c 	orrs.w	r3, r6, ip
 800c888:	d064      	beq.n	800c954 <__ieee754_pow+0x20c>
 800c88a:	2300      	movs	r3, #0
 800c88c:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
 800c890:	429d      	cmp	r5, r3
 800c892:	dd6b      	ble.n	800c96c <__ieee754_pow+0x224>
 800c894:	2300      	movs	r3, #0
 800c896:	f2c4 33f0 	movt	r3, #17392	; 0x43f0
 800c89a:	429d      	cmp	r5, r3
 800c89c:	f340 8408 	ble.w	800d0b0 <__ieee754_pow+0x968>
 800c8a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c8a4:	f6c3 71ef 	movt	r1, #16367	; 0x3fef
 800c8a8:	428c      	cmp	r4, r1
 800c8aa:	f340 83e7 	ble.w	800d07c <__ieee754_pow+0x934>
 800c8ae:	f1b9 0f00 	cmp.w	r9, #0
 800c8b2:	dd49      	ble.n	800c948 <__ieee754_pow+0x200>
 800c8b4:	a12a      	add	r1, pc, #168	; (adr r1, 800c960 <__ieee754_pow+0x218>)
 800c8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	f7fe ff39 	bl	800b734 <__aeabi_dmul>
 800c8c2:	4683      	mov	fp, r0
 800c8c4:	468a      	mov	sl, r1
 800c8c6:	e762      	b.n	800c78e <__ieee754_pow+0x46>
 800c8c8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800c8cc:	f2c4 363f 	movt	r6, #17215	; 0x433f
 800c8d0:	42b5      	cmp	r5, r6
 800c8d2:	dc3d      	bgt.n	800c950 <__ieee754_pow+0x208>
 800c8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8d8:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800c8dc:	429d      	cmp	r5, r3
 800c8de:	f77f af67 	ble.w	800c7b0 <__ieee754_pow+0x68>
 800c8e2:	152e      	asrs	r6, r5, #20
 800c8e4:	f240 4013 	movw	r0, #1043	; 0x413
 800c8e8:	4286      	cmp	r6, r0
 800c8ea:	f340 8475 	ble.w	800d1d8 <__ieee754_pow+0xa90>
 800c8ee:	f5c6 6686 	rsb	r6, r6, #1072	; 0x430
 800c8f2:	1cf3      	adds	r3, r6, #3
 800c8f4:	fa21 f003 	lsr.w	r0, r1, r3
 800c8f8:	fa00 f603 	lsl.w	r6, r0, r3
 800c8fc:	428e      	cmp	r6, r1
 800c8fe:	f47f af57 	bne.w	800c7b0 <__ieee754_pow+0x68>
 800c902:	f000 0301 	and.w	r3, r0, #1
 800c906:	f1c3 0602 	rsb	r6, r3, #2
 800c90a:	e752      	b.n	800c7b2 <__ieee754_pow+0x6a>
 800c90c:	f1b9 0f00 	cmp.w	r9, #0
 800c910:	f2c0 8442 	blt.w	800d198 <__ieee754_pow+0xa50>
 800c914:	46bb      	mov	fp, r7
 800c916:	46c2      	mov	sl, r8
 800c918:	e739      	b.n	800c78e <__ieee754_pow+0x46>
 800c91a:	2900      	cmp	r1, #0
 800c91c:	f43f af44 	beq.w	800c7a8 <__ieee754_pow+0x60>
 800c920:	e72a      	b.n	800c778 <__ieee754_pow+0x30>
 800c922:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c926:	f503 1080 	add.w	r0, r3, #1048576	; 0x100000
 800c92a:	ea50 0302 	orrs.w	r3, r0, r2
 800c92e:	f000 8338 	beq.w	800cfa2 <__ieee754_pow+0x85a>
 800c932:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c936:	f6c3 71ef 	movt	r1, #16367	; 0x3fef
 800c93a:	428c      	cmp	r4, r1
 800c93c:	f340 8396 	ble.w	800d06c <__ieee754_pow+0x924>
 800c940:	f1b9 0f00 	cmp.w	r9, #0
 800c944:	f6bf af23 	bge.w	800c78e <__ieee754_pow+0x46>
 800c948:	f04f 0b00 	mov.w	fp, #0
 800c94c:	46da      	mov	sl, fp
 800c94e:	e71e      	b.n	800c78e <__ieee754_pow+0x46>
 800c950:	2602      	movs	r6, #2
 800c952:	e72e      	b.n	800c7b2 <__ieee754_pow+0x6a>
 800c954:	4638      	mov	r0, r7
 800c956:	4641      	mov	r1, r8
 800c958:	463a      	mov	r2, r7
 800c95a:	4643      	mov	r3, r8
 800c95c:	e785      	b.n	800c86a <__ieee754_pow+0x122>
 800c95e:	bf00      	nop
 800c960:	8800759c 	.word	0x8800759c
 800c964:	7e37e43c 	.word	0x7e37e43c
 800c968:	08013688 	.word	0x08013688
 800c96c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c970:	f280 839c 	bge.w	800d0ac <__ieee754_pow+0x964>
 800c974:	2300      	movs	r3, #0
 800c976:	2200      	movs	r2, #0
 800c978:	f2c4 3340 	movt	r3, #17216	; 0x4340
 800c97c:	f8cd c000 	str.w	ip, [sp]
 800c980:	f7fe fed8 	bl	800b734 <__aeabi_dmul>
 800c984:	f8dd c000 	ldr.w	ip, [sp]
 800c988:	f06f 0734 	mvn.w	r7, #52	; 0x34
 800c98c:	460c      	mov	r4, r1
 800c98e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
 800c992:	f649 018e 	movw	r1, #39054	; 0x988e
 800c996:	1524      	asrs	r4, r4, #20
 800c998:	f422 0370 	bic.w	r3, r2, #15728640	; 0xf00000
 800c99c:	f2c0 0103 	movt	r1, #3
 800c9a0:	f2a4 32ff 	subw	r2, r4, #1023	; 0x3ff
 800c9a4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800c9a8:	19d7      	adds	r7, r2, r7
 800c9aa:	428b      	cmp	r3, r1
 800c9ac:	970f      	str	r7, [sp, #60]	; 0x3c
 800c9ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9b2:	f340 8378 	ble.w	800d0a6 <__ieee754_pow+0x95e>
 800c9b6:	f24b 6479 	movw	r4, #46713	; 0xb679
 800c9ba:	f2c0 040b 	movt	r4, #11
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	f340 8419 	ble.w	800d1f6 <__ieee754_pow+0xaae>
 800c9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9c6:	2400      	movs	r4, #0
 800c9c8:	1c59      	adds	r1, r3, #1
 800c9ca:	910f      	str	r1, [sp, #60]	; 0x3c
 800c9cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9d0:	4627      	mov	r7, r4
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	48aa      	ldr	r0, [pc, #680]	; (800cc80 <__ieee754_pow+0x538>)
 800c9d6:	f8cd c000 	str.w	ip, [sp]
 800c9da:	00ff      	lsls	r7, r7, #3
 800c9dc:	19c1      	adds	r1, r0, r7
 800c9de:	e9d1 8900 	ldrd	r8, r9, [r1]
 800c9e2:	462b      	mov	r3, r5
 800c9e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9ec:	4642      	mov	r2, r8
 800c9ee:	464b      	mov	r3, r9
 800c9f0:	f7fe fcec 	bl	800b3cc <__aeabi_dsub>
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	464b      	mov	r3, r9
 800c9f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca00:	f7fe fce6 	bl	800b3d0 <__adddf3>
 800ca04:	460b      	mov	r3, r1
 800ca06:	2100      	movs	r1, #0
 800ca08:	4602      	mov	r2, r0
 800ca0a:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7fe ffba 	bl	800b988 <__aeabi_ddiv>
 800ca14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca20:	f7fe fe88 	bl	800b734 <__aeabi_dmul>
 800ca24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca28:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca32:	106d      	asrs	r5, r5, #1
 800ca34:	9008      	str	r0, [sp, #32]
 800ca36:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ca3a:	f045 5300 	orr.w	r3, r5, #536870912	; 0x20000000
 800ca3e:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 800ca42:	190d      	adds	r5, r1, r4
 800ca44:	2200      	movs	r2, #0
 800ca46:	ec51 0b10 	vmov	r0, r1, d0
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca50:	4614      	mov	r4, r2
 800ca52:	f7fe fe6f 	bl	800b734 <__aeabi_dmul>
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca5e:	f7fe fcb5 	bl	800b3cc <__aeabi_dsub>
 800ca62:	4642      	mov	r2, r8
 800ca64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca68:	464b      	mov	r3, r9
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7fe fcad 	bl	800b3cc <__aeabi_dsub>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca7a:	f7fe fca7 	bl	800b3cc <__aeabi_dsub>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca86:	f7fe fe55 	bl	800b734 <__aeabi_dmul>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca92:	f7fe fc9b 	bl	800b3cc <__aeabi_dsub>
 800ca96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca9a:	f7fe fe4b 	bl	800b734 <__aeabi_dmul>
 800ca9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	f7fe fe43 	bl	800b734 <__aeabi_dmul>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4604      	mov	r4, r0
 800cab4:	460d      	mov	r5, r1
 800cab6:	f7fe fe3d 	bl	800b734 <__aeabi_dmul>
 800caba:	a35f      	add	r3, pc, #380	; (adr r3, 800cc38 <__ieee754_pow+0x4f0>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	4680      	mov	r8, r0
 800cac2:	4689      	mov	r9, r1
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7fe fe34 	bl	800b734 <__aeabi_dmul>
 800cacc:	a35c      	add	r3, pc, #368	; (adr r3, 800cc40 <__ieee754_pow+0x4f8>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7fe fc7d 	bl	800b3d0 <__adddf3>
 800cad6:	4622      	mov	r2, r4
 800cad8:	462b      	mov	r3, r5
 800cada:	f7fe fe2b 	bl	800b734 <__aeabi_dmul>
 800cade:	a35a      	add	r3, pc, #360	; (adr r3, 800cc48 <__ieee754_pow+0x500>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7fe fc74 	bl	800b3d0 <__adddf3>
 800cae8:	4622      	mov	r2, r4
 800caea:	462b      	mov	r3, r5
 800caec:	f7fe fe22 	bl	800b734 <__aeabi_dmul>
 800caf0:	a357      	add	r3, pc, #348	; (adr r3, 800cc50 <__ieee754_pow+0x508>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7fe fc6b 	bl	800b3d0 <__adddf3>
 800cafa:	4622      	mov	r2, r4
 800cafc:	462b      	mov	r3, r5
 800cafe:	f7fe fe19 	bl	800b734 <__aeabi_dmul>
 800cb02:	a355      	add	r3, pc, #340	; (adr r3, 800cc58 <__ieee754_pow+0x510>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7fe fc62 	bl	800b3d0 <__adddf3>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	462b      	mov	r3, r5
 800cb10:	f7fe fe10 	bl	800b734 <__aeabi_dmul>
 800cb14:	a352      	add	r3, pc, #328	; (adr r3, 800cc60 <__ieee754_pow+0x518>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7fe fc59 	bl	800b3d0 <__adddf3>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	4640      	mov	r0, r8
 800cb24:	4649      	mov	r1, r9
 800cb26:	f7fe fe05 	bl	800b734 <__aeabi_dmul>
 800cb2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb36:	f7fe fc4b 	bl	800b3d0 <__adddf3>
 800cb3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb3e:	f7fe fdf9 	bl	800b734 <__aeabi_dmul>
 800cb42:	4622      	mov	r2, r4
 800cb44:	462b      	mov	r3, r5
 800cb46:	f7fe fc43 	bl	800b3d0 <__adddf3>
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	4689      	mov	r9, r1
 800cb4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	f7fe fded 	bl	800b734 <__aeabi_dmul>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800cb62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cb66:	f7fe fc33 	bl	800b3d0 <__adddf3>
 800cb6a:	4642      	mov	r2, r8
 800cb6c:	464b      	mov	r3, r9
 800cb6e:	f7fe fc2f 	bl	800b3d0 <__adddf3>
 800cb72:	9a08      	ldr	r2, [sp, #32]
 800cb74:	460d      	mov	r5, r1
 800cb76:	462b      	mov	r3, r5
 800cb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	f7fe fdd9 	bl	800b734 <__aeabi_dmul>
 800cb82:	4622      	mov	r2, r4
 800cb84:	462b      	mov	r3, r5
 800cb86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb8e:	f7fe fdd1 	bl	800b734 <__aeabi_dmul>
 800cb92:	2300      	movs	r3, #0
 800cb94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800cba2:	f7fe fc13 	bl	800b3cc <__aeabi_dsub>
 800cba6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cbaa:	f7fe fc0f 	bl	800b3cc <__aeabi_dsub>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7fe fc09 	bl	800b3cc <__aeabi_dsub>
 800cbba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbbe:	f7fe fdb9 	bl	800b734 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbca:	f7fe fc01 	bl	800b3d0 <__adddf3>
 800cbce:	4680      	mov	r8, r0
 800cbd0:	4689      	mov	r9, r1
 800cbd2:	4642      	mov	r2, r8
 800cbd4:	464b      	mov	r3, r9
 800cbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbda:	f7fe fbf9 	bl	800b3d0 <__adddf3>
 800cbde:	9808      	ldr	r0, [sp, #32]
 800cbe0:	a321      	add	r3, pc, #132	; (adr r3, 800cc68 <__ieee754_pow+0x520>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	f7fe fda3 	bl	800b734 <__aeabi_dmul>
 800cbee:	a320      	add	r3, pc, #128	; (adr r3, 800cc70 <__ieee754_pow+0x528>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7fe fd9a 	bl	800b734 <__aeabi_dmul>
 800cc00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc08:	4620      	mov	r0, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7fe fbde 	bl	800b3cc <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4640      	mov	r0, r8
 800cc16:	4649      	mov	r1, r9
 800cc18:	f7fe fbd8 	bl	800b3cc <__aeabi_dsub>
 800cc1c:	a316      	add	r3, pc, #88	; (adr r3, 800cc78 <__ieee754_pow+0x530>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7fe fd87 	bl	800b734 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc2e:	f7fe fbcf 	bl	800b3d0 <__adddf3>
 800cc32:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <__ieee754_pow+0x53c>)
 800cc34:	19da      	adds	r2, r3, r7
 800cc36:	e027      	b.n	800cc88 <__ieee754_pow+0x540>
 800cc38:	4a454eef 	.word	0x4a454eef
 800cc3c:	3fca7e28 	.word	0x3fca7e28
 800cc40:	93c9db65 	.word	0x93c9db65
 800cc44:	3fcd864a 	.word	0x3fcd864a
 800cc48:	a91d4101 	.word	0xa91d4101
 800cc4c:	3fd17460 	.word	0x3fd17460
 800cc50:	518f264d 	.word	0x518f264d
 800cc54:	3fd55555 	.word	0x3fd55555
 800cc58:	db6fabff 	.word	0xdb6fabff
 800cc5c:	3fdb6db6 	.word	0x3fdb6db6
 800cc60:	33333303 	.word	0x33333303
 800cc64:	3fe33333 	.word	0x3fe33333
 800cc68:	e0000000 	.word	0xe0000000
 800cc6c:	3feec709 	.word	0x3feec709
 800cc70:	145b01f5 	.word	0x145b01f5
 800cc74:	be3e2fe0 	.word	0xbe3e2fe0
 800cc78:	dc3a03fd 	.word	0xdc3a03fd
 800cc7c:	3feec709 	.word	0x3feec709
 800cc80:	08013630 	.word	0x08013630
 800cc84:	08013620 	.word	0x08013620
 800cc88:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cc8c:	f7fe fba0 	bl	800b3d0 <__adddf3>
 800cc90:	4680      	mov	r8, r0
 800cc92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cc94:	4689      	mov	r9, r1
 800cc96:	f7fe fce7 	bl	800b668 <__aeabi_i2d>
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	49ae      	ldr	r1, [pc, #696]	; (800cf58 <__ieee754_pow+0x810>)
 800cc9e:	19cf      	adds	r7, r1, r7
 800cca0:	ed97 1b00 	vldr	d1, [r7]
 800cca4:	4604      	mov	r4, r0
 800cca6:	4642      	mov	r2, r8
 800cca8:	464b      	mov	r3, r9
 800ccaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccae:	ed8d 1b06 	vstr	d1, [sp, #24]
 800ccb2:	f7fe fb8d 	bl	800b3d0 <__adddf3>
 800ccb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccba:	f7fe fb89 	bl	800b3d0 <__adddf3>
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	f7fe fb85 	bl	800b3d0 <__adddf3>
 800ccc6:	9808      	ldr	r0, [sp, #32]
 800ccc8:	4622      	mov	r2, r4
 800ccca:	462b      	mov	r3, r5
 800cccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd0:	f7fe fb7c 	bl	800b3cc <__aeabi_dsub>
 800ccd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccd8:	f7fe fb78 	bl	800b3cc <__aeabi_dsub>
 800ccdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce0:	f7fe fb74 	bl	800b3cc <__aeabi_dsub>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4640      	mov	r0, r8
 800ccea:	4649      	mov	r1, r9
 800ccec:	f7fe fb6e 	bl	800b3cc <__aeabi_dsub>
 800ccf0:	f8dd c000 	ldr.w	ip, [sp]
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	4689      	mov	r9, r1
 800ccf8:	3e01      	subs	r6, #1
 800ccfa:	ea56 060c 	orrs.w	r6, r6, ip
 800ccfe:	f040 81b0 	bne.w	800d062 <__ieee754_pow+0x91a>
 800cd02:	ed9f 3b81 	vldr	d3, [pc, #516]	; 800cf08 <__ieee754_pow+0x7c0>
 800cd06:	ed8d 3b08 	vstr	d3, [sp, #32]
 800cd0a:	2400      	movs	r4, #0
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	4653      	mov	r3, sl
 800cd10:	4658      	mov	r0, fp
 800cd12:	4651      	mov	r1, sl
 800cd14:	f7fe fb5a 	bl	800b3cc <__aeabi_dsub>
 800cd18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd1c:	f7fe fd0a 	bl	800b734 <__aeabi_dmul>
 800cd20:	4655      	mov	r5, sl
 800cd22:	4606      	mov	r6, r0
 800cd24:	460f      	mov	r7, r1
 800cd26:	4642      	mov	r2, r8
 800cd28:	464b      	mov	r3, r9
 800cd2a:	4658      	mov	r0, fp
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7fe fd01 	bl	800b734 <__aeabi_dmul>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4630      	mov	r0, r6
 800cd38:	4639      	mov	r1, r7
 800cd3a:	f7fe fb49 	bl	800b3d0 <__adddf3>
 800cd3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd42:	4682      	mov	sl, r0
 800cd44:	468b      	mov	fp, r1
 800cd46:	4620      	mov	r0, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7fe fcf3 	bl	800b734 <__aeabi_dmul>
 800cd4e:	4604      	mov	r4, r0
 800cd50:	460d      	mov	r5, r1
 800cd52:	4650      	mov	r0, sl
 800cd54:	4659      	mov	r1, fp
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	f7fe fb39 	bl	800b3d0 <__adddf3>
 800cd5e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800cd62:	f2c4 088f 	movt	r8, #16527	; 0x408f
 800cd66:	4541      	cmp	r1, r8
 800cd68:	4606      	mov	r6, r0
 800cd6a:	460f      	mov	r7, r1
 800cd6c:	4689      	mov	r9, r1
 800cd6e:	f340 8122 	ble.w	800cfb6 <__ieee754_pow+0x86e>
 800cd72:	f101 403f 	add.w	r0, r1, #3204448256	; 0xbf000000
 800cd76:	f500 01e0 	add.w	r1, r0, #7340032	; 0x700000
 800cd7a:	ea51 0306 	orrs.w	r3, r1, r6
 800cd7e:	f040 8217 	bne.w	800d1b0 <__ieee754_pow+0xa68>
 800cd82:	a363      	add	r3, pc, #396	; (adr r3, 800cf10 <__ieee754_pow+0x7c8>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	4650      	mov	r0, sl
 800cd8a:	4659      	mov	r1, fp
 800cd8c:	f7fe fb20 	bl	800b3d0 <__adddf3>
 800cd90:	4622      	mov	r2, r4
 800cd92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd96:	462b      	mov	r3, r5
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7fe fb16 	bl	800b3cc <__aeabi_dsub>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda8:	f7fe ff54 	bl	800bc54 <__aeabi_dcmpgt>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	f040 81ff 	bne.w	800d1b0 <__ieee754_pow+0xa68>
 800cdb2:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cdb6:	2600      	movs	r6, #0
 800cdb8:	f6c3 76e0 	movt	r6, #16352	; 0x3fe0
 800cdbc:	45b0      	cmp	r8, r6
 800cdbe:	f300 8118 	bgt.w	800cff2 <__ieee754_pow+0x8aa>
 800cdc2:	f04f 0c00 	mov.w	ip, #0
 800cdc6:	f8cd c008 	str.w	ip, [sp, #8]
 800cdca:	2600      	movs	r6, #0
 800cdcc:	a352      	add	r3, pc, #328	; (adr r3, 800cf18 <__ieee754_pow+0x7d0>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f8cd c000 	str.w	ip, [sp]
 800cdda:	f7fe fcab 	bl	800b734 <__aeabi_dmul>
 800cdde:	4622      	mov	r2, r4
 800cde0:	4680      	mov	r8, r0
 800cde2:	4689      	mov	r9, r1
 800cde4:	462b      	mov	r3, r5
 800cde6:	4630      	mov	r0, r6
 800cde8:	4639      	mov	r1, r7
 800cdea:	f7fe faef 	bl	800b3cc <__aeabi_dsub>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	4659      	mov	r1, fp
 800cdf6:	f7fe fae9 	bl	800b3cc <__aeabi_dsub>
 800cdfa:	a349      	add	r3, pc, #292	; (adr r3, 800cf20 <__ieee754_pow+0x7d8>)
 800cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce00:	f7fe fc98 	bl	800b734 <__aeabi_dmul>
 800ce04:	a348      	add	r3, pc, #288	; (adr r3, 800cf28 <__ieee754_pow+0x7e0>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	4630      	mov	r0, r6
 800ce10:	4639      	mov	r1, r7
 800ce12:	f7fe fc8f 	bl	800b734 <__aeabi_dmul>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7fe fad7 	bl	800b3d0 <__adddf3>
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	4632      	mov	r2, r6
 800ce28:	463b      	mov	r3, r7
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	f7fe facf 	bl	800b3d0 <__adddf3>
 800ce32:	4642      	mov	r2, r8
 800ce34:	464b      	mov	r3, r9
 800ce36:	4604      	mov	r4, r0
 800ce38:	460d      	mov	r5, r1
 800ce3a:	f7fe fac7 	bl	800b3cc <__aeabi_dsub>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7fe fac1 	bl	800b3cc <__aeabi_dsub>
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	4682      	mov	sl, r0
 800ce4e:	468b      	mov	fp, r1
 800ce50:	462b      	mov	r3, r5
 800ce52:	4620      	mov	r0, r4
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7fe fc6d 	bl	800b734 <__aeabi_dmul>
 800ce5a:	a335      	add	r3, pc, #212	; (adr r3, 800cf30 <__ieee754_pow+0x7e8>)
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	4606      	mov	r6, r0
 800ce62:	460f      	mov	r7, r1
 800ce64:	f7fe fc66 	bl	800b734 <__aeabi_dmul>
 800ce68:	a333      	add	r3, pc, #204	; (adr r3, 800cf38 <__ieee754_pow+0x7f0>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7fe faad 	bl	800b3cc <__aeabi_dsub>
 800ce72:	4632      	mov	r2, r6
 800ce74:	463b      	mov	r3, r7
 800ce76:	f7fe fc5d 	bl	800b734 <__aeabi_dmul>
 800ce7a:	a331      	add	r3, pc, #196	; (adr r3, 800cf40 <__ieee754_pow+0x7f8>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	f7fe faa6 	bl	800b3d0 <__adddf3>
 800ce84:	4632      	mov	r2, r6
 800ce86:	463b      	mov	r3, r7
 800ce88:	f7fe fc54 	bl	800b734 <__aeabi_dmul>
 800ce8c:	a32e      	add	r3, pc, #184	; (adr r3, 800cf48 <__ieee754_pow+0x800>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f7fe fa9b 	bl	800b3cc <__aeabi_dsub>
 800ce96:	4632      	mov	r2, r6
 800ce98:	463b      	mov	r3, r7
 800ce9a:	f7fe fc4b 	bl	800b734 <__aeabi_dmul>
 800ce9e:	a32c      	add	r3, pc, #176	; (adr r3, 800cf50 <__ieee754_pow+0x808>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f7fe fa94 	bl	800b3d0 <__adddf3>
 800cea8:	4632      	mov	r2, r6
 800ceaa:	463b      	mov	r3, r7
 800ceac:	f7fe fc42 	bl	800b734 <__aeabi_dmul>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f7fe fa88 	bl	800b3cc <__aeabi_dsub>
 800cebc:	4606      	mov	r6, r0
 800cebe:	460f      	mov	r7, r1
 800cec0:	4632      	mov	r2, r6
 800cec2:	463b      	mov	r3, r7
 800cec4:	4620      	mov	r0, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	f7fe fc34 	bl	800b734 <__aeabi_dmul>
 800cecc:	2200      	movs	r2, #0
 800cece:	4680      	mov	r8, r0
 800ced0:	4689      	mov	r9, r1
 800ced2:	4630      	mov	r0, r6
 800ced4:	4639      	mov	r1, r7
 800ced6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ceda:	f7fe fa77 	bl	800b3cc <__aeabi_dsub>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f7fe fd4f 	bl	800b988 <__aeabi_ddiv>
 800ceea:	4652      	mov	r2, sl
 800ceec:	4606      	mov	r6, r0
 800ceee:	460f      	mov	r7, r1
 800cef0:	4620      	mov	r0, r4
 800cef2:	4629      	mov	r1, r5
 800cef4:	465b      	mov	r3, fp
 800cef6:	f7fe fc1d 	bl	800b734 <__aeabi_dmul>
 800cefa:	4652      	mov	r2, sl
 800cefc:	465b      	mov	r3, fp
 800cefe:	f7fe fa67 	bl	800b3d0 <__adddf3>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	e029      	b.n	800cf5c <__ieee754_pow+0x814>
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	bff00000 	.word	0xbff00000
 800cf10:	652b82fe 	.word	0x652b82fe
 800cf14:	3c971547 	.word	0x3c971547
 800cf18:	00000000 	.word	0x00000000
 800cf1c:	3fe62e43 	.word	0x3fe62e43
 800cf20:	fefa39ef 	.word	0xfefa39ef
 800cf24:	3fe62e42 	.word	0x3fe62e42
 800cf28:	0ca86c39 	.word	0x0ca86c39
 800cf2c:	be205c61 	.word	0xbe205c61
 800cf30:	72bea4d0 	.word	0x72bea4d0
 800cf34:	3e663769 	.word	0x3e663769
 800cf38:	c5d26bf1 	.word	0xc5d26bf1
 800cf3c:	3ebbbd41 	.word	0x3ebbbd41
 800cf40:	af25de2c 	.word	0xaf25de2c
 800cf44:	3f11566a 	.word	0x3f11566a
 800cf48:	16bebd93 	.word	0x16bebd93
 800cf4c:	3f66c16c 	.word	0x3f66c16c
 800cf50:	5555553e 	.word	0x5555553e
 800cf54:	3fc55555 	.word	0x3fc55555
 800cf58:	08013610 	.word	0x08013610
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	f7fe fa34 	bl	800b3cc <__aeabi_dsub>
 800cf64:	4622      	mov	r2, r4
 800cf66:	462b      	mov	r3, r5
 800cf68:	f7fe fa30 	bl	800b3cc <__aeabi_dsub>
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4602      	mov	r2, r0
 800cf72:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800cf76:	2000      	movs	r0, #0
 800cf78:	f7fe fa28 	bl	800b3cc <__aeabi_dsub>
 800cf7c:	f8dd c000 	ldr.w	ip, [sp]
 800cf80:	eb0c 0301 	add.w	r3, ip, r1
 800cf84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf88:	4602      	mov	r2, r0
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	460d      	mov	r5, r1
 800cf8e:	f2c0 814a 	blt.w	800d226 <__ieee754_pow+0xade>
 800cf92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf96:	f7fe fbcd 	bl	800b734 <__aeabi_dmul>
 800cf9a:	4683      	mov	fp, r0
 800cf9c:	468a      	mov	sl, r1
 800cf9e:	f7ff bbf6 	b.w	800c78e <__ieee754_pow+0x46>
 800cfa2:	f04f 0a00 	mov.w	sl, #0
 800cfa6:	468b      	mov	fp, r1
 800cfa8:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800cfac:	f7ff bbef 	b.w	800c78e <__ieee754_pow+0x46>
 800cfb0:	4638      	mov	r0, r7
 800cfb2:	4641      	mov	r1, r8
 800cfb4:	e481      	b.n	800c8ba <__ieee754_pow+0x172>
 800cfb6:	f64c 33ff 	movw	r3, #52223	; 0xcbff
 800cfba:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cfbe:	f2c4 0390 	movt	r3, #16528	; 0x4090
 800cfc2:	4598      	cmp	r8, r3
 800cfc4:	f77f aef7 	ble.w	800cdb6 <__ieee754_pow+0x66e>
 800cfc8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800cfcc:	f6c3 736f 	movt	r3, #16239	; 0x3f6f
 800cfd0:	18cb      	adds	r3, r1, r3
 800cfd2:	4303      	orrs	r3, r0
 800cfd4:	f040 8114 	bne.w	800d200 <__ieee754_pow+0xab8>
 800cfd8:	4622      	mov	r2, r4
 800cfda:	462b      	mov	r3, r5
 800cfdc:	f7fe f9f6 	bl	800b3cc <__aeabi_dsub>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	4659      	mov	r1, fp
 800cfe8:	f7fe fe20 	bl	800bc2c <__aeabi_dcmple>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	f040 8107 	bne.w	800d200 <__ieee754_pow+0xab8>
 800cff2:	ea4f 5728 	mov.w	r7, r8, asr #20
 800cff6:	f2a7 32fe 	subw	r2, r7, #1022	; 0x3fe
 800cffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cffe:	fa43 f302 	asr.w	r3, r3, r2
 800d002:	eb03 0109 	add.w	r1, r3, r9
 800d006:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800d00a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800d00e:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 800d012:	f2c0 060f 	movt	r6, #15
 800d016:	f021 487f 	bic.w	r8, r1, #4278190080	; 0xff000000
 800d01a:	fa46 f307 	asr.w	r3, r6, r7
 800d01e:	f5c0 6082 	rsb	r0, r0, #1040	; 0x410
 800d022:	f428 0670 	bic.w	r6, r8, #15728640	; 0xf00000
 800d026:	ea21 0303 	bic.w	r3, r1, r3
 800d02a:	f446 1780 	orr.w	r7, r6, #1048576	; 0x100000
 800d02e:	1cc1      	adds	r1, r0, #3
 800d030:	2200      	movs	r2, #0
 800d032:	fa47 f601 	asr.w	r6, r7, r1
 800d036:	f1b9 0f00 	cmp.w	r9, #0
 800d03a:	9602      	str	r6, [sp, #8]
 800d03c:	f2c0 80f0 	blt.w	800d220 <__ieee754_pow+0xad8>
 800d040:	4620      	mov	r0, r4
 800d042:	4629      	mov	r1, r5
 800d044:	f7fe f9c2 	bl	800b3cc <__aeabi_dsub>
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	4622      	mov	r2, r4
 800d04e:	4650      	mov	r0, sl
 800d050:	4659      	mov	r1, fp
 800d052:	462b      	mov	r3, r5
 800d054:	f7fe f9bc 	bl	800b3d0 <__adddf3>
 800d058:	9a02      	ldr	r2, [sp, #8]
 800d05a:	460f      	mov	r7, r1
 800d05c:	ea4f 5c02 	mov.w	ip, r2, lsl #20
 800d060:	e6b3      	b.n	800cdca <__ieee754_pow+0x682>
 800d062:	ed9f 2b77 	vldr	d2, [pc, #476]	; 800d240 <__ieee754_pow+0xaf8>
 800d066:	ed8d 2b08 	vstr	d2, [sp, #32]
 800d06a:	e64e      	b.n	800cd0a <__ieee754_pow+0x5c2>
 800d06c:	f1b9 0f00 	cmp.w	r9, #0
 800d070:	f6bf ac6a 	bge.w	800c948 <__ieee754_pow+0x200>
 800d074:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 800d078:	f7ff bb89 	b.w	800c78e <__ieee754_pow+0x46>
 800d07c:	f1b9 0f00 	cmp.w	r9, #0
 800d080:	f6bf ac62 	bge.w	800c948 <__ieee754_pow+0x200>
 800d084:	e416      	b.n	800c8b4 <__ieee754_pow+0x16c>
 800d086:	460b      	mov	r3, r1
 800d088:	2100      	movs	r1, #0
 800d08a:	4602      	mov	r2, r0
 800d08c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800d090:	2000      	movs	r0, #0
 800d092:	f8cd c000 	str.w	ip, [sp]
 800d096:	f7fe fc77 	bl	800b988 <__aeabi_ddiv>
 800d09a:	f8dd c000 	ldr.w	ip, [sp]
 800d09e:	4683      	mov	fp, r0
 800d0a0:	468a      	mov	sl, r1
 800d0a2:	f7ff bbd3 	b.w	800c84c <__ieee754_pow+0x104>
 800d0a6:	2400      	movs	r4, #0
 800d0a8:	4627      	mov	r7, r4
 800d0aa:	e492      	b.n	800c9d2 <__ieee754_pow+0x28a>
 800d0ac:	2700      	movs	r7, #0
 800d0ae:	e46e      	b.n	800c98e <__ieee754_pow+0x246>
 800d0b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0b4:	f6c3 72ef 	movt	r2, #16367	; 0x3fef
 800d0b8:	4294      	cmp	r4, r2
 800d0ba:	dddf      	ble.n	800d07c <__ieee754_pow+0x934>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800d0c2:	429c      	cmp	r4, r3
 800d0c4:	f73f abf3 	bgt.w	800c8ae <__ieee754_pow+0x166>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800d0d0:	f8cd c000 	str.w	ip, [sp]
 800d0d4:	f7fe f97a 	bl	800b3cc <__aeabi_dsub>
 800d0d8:	a35b      	add	r3, pc, #364	; (adr r3, 800d248 <__ieee754_pow+0xb00>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	4607      	mov	r7, r0
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	f7fe fb27 	bl	800b734 <__aeabi_dmul>
 800d0e6:	a35a      	add	r3, pc, #360	; (adr r3, 800d250 <__ieee754_pow+0xb08>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	4680      	mov	r8, r0
 800d0ee:	4689      	mov	r9, r1
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	f7fe fb1e 	bl	800b734 <__aeabi_dmul>
 800d0f8:	463a      	mov	r2, r7
 800d0fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0fe:	4623      	mov	r3, r4
 800d100:	4638      	mov	r0, r7
 800d102:	4621      	mov	r1, r4
 800d104:	f7fe fb16 	bl	800b734 <__aeabi_dmul>
 800d108:	2300      	movs	r3, #0
 800d10a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d10e:	2200      	movs	r2, #0
 800d110:	4638      	mov	r0, r7
 800d112:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
 800d116:	4621      	mov	r1, r4
 800d118:	f7fe fb0c 	bl	800b734 <__aeabi_dmul>
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	a14d      	add	r1, pc, #308	; (adr r1, 800d258 <__ieee754_pow+0xb10>)
 800d122:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d126:	f7fe f951 	bl	800b3cc <__aeabi_dsub>
 800d12a:	463a      	mov	r2, r7
 800d12c:	4623      	mov	r3, r4
 800d12e:	f7fe fb01 	bl	800b734 <__aeabi_dmul>
 800d132:	460b      	mov	r3, r1
 800d134:	2100      	movs	r1, #0
 800d136:	4602      	mov	r2, r0
 800d138:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800d13c:	2000      	movs	r0, #0
 800d13e:	f7fe f945 	bl	800b3cc <__aeabi_dsub>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d14a:	f7fe faf3 	bl	800b734 <__aeabi_dmul>
 800d14e:	a344      	add	r3, pc, #272	; (adr r3, 800d260 <__ieee754_pow+0xb18>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7fe faee 	bl	800b734 <__aeabi_dmul>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d160:	f7fe f934 	bl	800b3cc <__aeabi_dsub>
 800d164:	4607      	mov	r7, r0
 800d166:	460d      	mov	r5, r1
 800d168:	4640      	mov	r0, r8
 800d16a:	4649      	mov	r1, r9
 800d16c:	463a      	mov	r2, r7
 800d16e:	462b      	mov	r3, r5
 800d170:	f7fe f92e 	bl	800b3d0 <__adddf3>
 800d174:	4642      	mov	r2, r8
 800d176:	464b      	mov	r3, r9
 800d178:	2000      	movs	r0, #0
 800d17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d17e:	f7fe f925 	bl	800b3cc <__aeabi_dsub>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4638      	mov	r0, r7
 800d188:	4629      	mov	r1, r5
 800d18a:	f7fe f91f 	bl	800b3cc <__aeabi_dsub>
 800d18e:	f8dd c000 	ldr.w	ip, [sp]
 800d192:	4680      	mov	r8, r0
 800d194:	4689      	mov	r9, r1
 800d196:	e5af      	b.n	800ccf8 <__ieee754_pow+0x5b0>
 800d198:	2100      	movs	r1, #0
 800d19a:	463a      	mov	r2, r7
 800d19c:	4643      	mov	r3, r8
 800d19e:	2000      	movs	r0, #0
 800d1a0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800d1a4:	f7fe fbf0 	bl	800b988 <__aeabi_ddiv>
 800d1a8:	4683      	mov	fp, r0
 800d1aa:	468a      	mov	sl, r1
 800d1ac:	f7ff baef 	b.w	800c78e <__ieee754_pow+0x46>
 800d1b0:	a32d      	add	r3, pc, #180	; (adr r3, 800d268 <__ieee754_pow+0xb20>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1ba:	f7fe fabb 	bl	800b734 <__aeabi_dmul>
 800d1be:	a32a      	add	r3, pc, #168	; (adr r3, 800d268 <__ieee754_pow+0xb20>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7fe fab6 	bl	800b734 <__aeabi_dmul>
 800d1c8:	4683      	mov	fp, r0
 800d1ca:	468a      	mov	sl, r1
 800d1cc:	f7ff badf 	b.w	800c78e <__ieee754_pow+0x46>
 800d1d0:	2e01      	cmp	r6, #1
 800d1d2:	f47f aadc 	bne.w	800c78e <__ieee754_pow+0x46>
 800d1d6:	e74d      	b.n	800d074 <__ieee754_pow+0x92c>
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	f47f ab1a 	bne.w	800c812 <__ieee754_pow+0xca>
 800d1de:	f5c6 6382 	rsb	r3, r6, #1040	; 0x410
 800d1e2:	1cde      	adds	r6, r3, #3
 800d1e4:	fa45 f306 	asr.w	r3, r5, r6
 800d1e8:	fa03 f006 	lsl.w	r0, r3, r6
 800d1ec:	42a8      	cmp	r0, r5
 800d1ee:	d020      	beq.n	800d232 <__ieee754_pow+0xaea>
 800d1f0:	460e      	mov	r6, r1
 800d1f2:	f7ff bae6 	b.w	800c7c2 <__ieee754_pow+0x7a>
 800d1f6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d1fa:	2701      	movs	r7, #1
 800d1fc:	f7ff bbe9 	b.w	800c9d2 <__ieee754_pow+0x28a>
 800d200:	a31b      	add	r3, pc, #108	; (adr r3, 800d270 <__ieee754_pow+0xb28>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d20a:	f7fe fa93 	bl	800b734 <__aeabi_dmul>
 800d20e:	a318      	add	r3, pc, #96	; (adr r3, 800d270 <__ieee754_pow+0xb28>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	f7fe fa8e 	bl	800b734 <__aeabi_dmul>
 800d218:	4683      	mov	fp, r0
 800d21a:	468a      	mov	sl, r1
 800d21c:	f7ff bab7 	b.w	800c78e <__ieee754_pow+0x46>
 800d220:	4270      	negs	r0, r6
 800d222:	9002      	str	r0, [sp, #8]
 800d224:	e70c      	b.n	800d040 <__ieee754_pow+0x8f8>
 800d226:	9a02      	ldr	r2, [sp, #8]
 800d228:	f000 fa06 	bl	800d638 <scalbn>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	e6af      	b.n	800cf92 <__ieee754_pow+0x84a>
 800d232:	f003 0101 	and.w	r1, r3, #1
 800d236:	f1c1 0602 	rsb	r6, r1, #2
 800d23a:	f7ff bac2 	b.w	800c7c2 <__ieee754_pow+0x7a>
 800d23e:	bf00      	nop
 800d240:	00000000 	.word	0x00000000
 800d244:	3ff00000 	.word	0x3ff00000
 800d248:	60000000 	.word	0x60000000
 800d24c:	3ff71547 	.word	0x3ff71547
 800d250:	f85ddf44 	.word	0xf85ddf44
 800d254:	3e54ae0b 	.word	0x3e54ae0b
 800d258:	55555555 	.word	0x55555555
 800d25c:	3fd55555 	.word	0x3fd55555
 800d260:	652b82fe 	.word	0x652b82fe
 800d264:	3ff71547 	.word	0x3ff71547
 800d268:	8800759c 	.word	0x8800759c
 800d26c:	7e37e43c 	.word	0x7e37e43c
 800d270:	c2f8f359 	.word	0xc2f8f359
 800d274:	01a56e1f 	.word	0x01a56e1f

0800d278 <__ieee754_sqrt>:
 800d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	2700      	movs	r7, #0
 800d27e:	46b9      	mov	r9, r7
 800d280:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800d284:	f6c7 79f0 	movt	r9, #32752	; 0x7ff0
 800d288:	400f      	ands	r7, r1
 800d28a:	454f      	cmp	r7, r9
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	460e      	mov	r6, r1
 800d296:	4680      	mov	r8, r0
 800d298:	f000 80d4 	beq.w	800d444 <__ieee754_sqrt+0x1cc>
 800d29c:	2900      	cmp	r1, #0
 800d29e:	f340 80ae 	ble.w	800d3fe <__ieee754_sqrt+0x186>
 800d2a2:	150c      	asrs	r4, r1, #20
 800d2a4:	f000 80b8 	beq.w	800d418 <__ieee754_sqrt+0x1a0>
 800d2a8:	f026 457f 	bic.w	r5, r6, #4278190080	; 0xff000000
 800d2ac:	f2a4 37ff 	subw	r7, r4, #1023	; 0x3ff
 800d2b0:	f425 0670 	bic.w	r6, r5, #15728640	; 0xf00000
 800d2b4:	07fa      	lsls	r2, r7, #31
 800d2b6:	f446 1180 	orr.w	r1, r6, #1048576	; 0x100000
 800d2ba:	f100 8093 	bmi.w	800d3e4 <__ieee754_sqrt+0x16c>
 800d2be:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800d2c2:	f04f 0c00 	mov.w	ip, #0
 800d2c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d2ca:	107f      	asrs	r7, r7, #1
 800d2cc:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800d2d0:	2516      	movs	r5, #22
 800d2d2:	4662      	mov	r2, ip
 800d2d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d2d8:	1816      	adds	r6, r2, r0
 800d2da:	0844      	lsrs	r4, r0, #1
 800d2dc:	429e      	cmp	r6, r3
 800d2de:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800d2e2:	f105 35ff 	add.w	r5, r5, #4294967295
 800d2e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d2ea:	dc02      	bgt.n	800d2f2 <__ieee754_sqrt+0x7a>
 800d2ec:	1832      	adds	r2, r6, r0
 800d2ee:	1b9b      	subs	r3, r3, r6
 800d2f0:	4484      	add	ip, r0
 800d2f2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 800d2f6:	1910      	adds	r0, r2, r4
 800d2f8:	4298      	cmp	r0, r3
 800d2fa:	dc02      	bgt.n	800d302 <__ieee754_sqrt+0x8a>
 800d2fc:	1a1b      	subs	r3, r3, r0
 800d2fe:	1902      	adds	r2, r0, r4
 800d300:	44a4      	add	ip, r4
 800d302:	0fce      	lsrs	r6, r1, #31
 800d304:	0860      	lsrs	r0, r4, #1
 800d306:	0049      	lsls	r1, r1, #1
 800d308:	3d01      	subs	r5, #1
 800d30a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d30e:	d1e3      	bne.n	800d2d8 <__ieee754_sqrt+0x60>
 800d310:	f04f 0820 	mov.w	r8, #32
 800d314:	462c      	mov	r4, r5
 800d316:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d31a:	e015      	b.n	800d348 <__ieee754_sqrt+0xd0>
 800d31c:	f000 808e 	beq.w	800d43c <__ieee754_sqrt+0x1c4>
 800d320:	0fce      	lsrs	r6, r1, #31
 800d322:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d326:	0840      	lsrs	r0, r0, #1
 800d328:	0049      	lsls	r1, r1, #1
 800d32a:	4293      	cmp	r3, r2
 800d32c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d330:	eb04 0600 	add.w	r6, r4, r0
 800d334:	dc1e      	bgt.n	800d374 <__ieee754_sqrt+0xfc>
 800d336:	d01b      	beq.n	800d370 <__ieee754_sqrt+0xf8>
 800d338:	0fce      	lsrs	r6, r1, #31
 800d33a:	0840      	lsrs	r0, r0, #1
 800d33c:	0049      	lsls	r1, r1, #1
 800d33e:	f1b8 0801 	subs.w	r8, r8, #1
 800d342:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d346:	d02d      	beq.n	800d3a4 <__ieee754_sqrt+0x12c>
 800d348:	4293      	cmp	r3, r2
 800d34a:	eb04 0600 	add.w	r6, r4, r0
 800d34e:	dde5      	ble.n	800d31c <__ieee754_sqrt+0xa4>
 800d350:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800d354:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800d358:	eb06 0400 	add.w	r4, r6, r0
 800d35c:	d03d      	beq.n	800d3da <__ieee754_sqrt+0x162>
 800d35e:	4691      	mov	r9, r2
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	428e      	cmp	r6, r1
 800d364:	bf88      	it	hi
 800d366:	3b01      	subhi	r3, #1
 800d368:	1b89      	subs	r1, r1, r6
 800d36a:	182d      	adds	r5, r5, r0
 800d36c:	464a      	mov	r2, r9
 800d36e:	e7d7      	b.n	800d320 <__ieee754_sqrt+0xa8>
 800d370:	428e      	cmp	r6, r1
 800d372:	d8e1      	bhi.n	800d338 <__ieee754_sqrt+0xc0>
 800d374:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800d378:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800d37c:	eb06 0400 	add.w	r4, r6, r0
 800d380:	d026      	beq.n	800d3d0 <__ieee754_sqrt+0x158>
 800d382:	4691      	mov	r9, r2
 800d384:	428e      	cmp	r6, r1
 800d386:	ebc2 0303 	rsb	r3, r2, r3
 800d38a:	d900      	bls.n	800d38e <__ieee754_sqrt+0x116>
 800d38c:	3b01      	subs	r3, #1
 800d38e:	1b89      	subs	r1, r1, r6
 800d390:	0fce      	lsrs	r6, r1, #31
 800d392:	182d      	adds	r5, r5, r0
 800d394:	0049      	lsls	r1, r1, #1
 800d396:	0840      	lsrs	r0, r0, #1
 800d398:	f1b8 0801 	subs.w	r8, r8, #1
 800d39c:	464a      	mov	r2, r9
 800d39e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d3a2:	d1d1      	bne.n	800d348 <__ieee754_sqrt+0xd0>
 800d3a4:	4319      	orrs	r1, r3
 800d3a6:	d124      	bne.n	800d3f2 <__ieee754_sqrt+0x17a>
 800d3a8:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800d3ac:	ea4f 056c 	mov.w	r5, ip, asr #1
 800d3b0:	f105 547f 	add.w	r4, r5, #1069547520	; 0x3fc00000
 800d3b4:	f01c 0f01 	tst.w	ip, #1
 800d3b8:	f504 1300 	add.w	r3, r4, #2097152	; 0x200000
 800d3bc:	bf18      	it	ne
 800d3be:	f048 4800 	orrne.w	r8, r8, #2147483648	; 0x80000000
 800d3c2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d3c6:	4644      	mov	r4, r8
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d0:	2c00      	cmp	r4, #0
 800d3d2:	dbd6      	blt.n	800d382 <__ieee754_sqrt+0x10a>
 800d3d4:	f102 0901 	add.w	r9, r2, #1
 800d3d8:	e7d4      	b.n	800d384 <__ieee754_sqrt+0x10c>
 800d3da:	2c00      	cmp	r4, #0
 800d3dc:	dbbf      	blt.n	800d35e <__ieee754_sqrt+0xe6>
 800d3de:	f102 0901 	add.w	r9, r2, #1
 800d3e2:	e7bd      	b.n	800d360 <__ieee754_sqrt+0xe8>
 800d3e4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 800d3e8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d3ec:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d3f0:	e765      	b.n	800d2be <__ieee754_sqrt+0x46>
 800d3f2:	1c6b      	adds	r3, r5, #1
 800d3f4:	d031      	beq.n	800d45a <__ieee754_sqrt+0x1e2>
 800d3f6:	f005 0201 	and.w	r2, r5, #1
 800d3fa:	1955      	adds	r5, r2, r5
 800d3fc:	e7d4      	b.n	800d3a8 <__ieee754_sqrt+0x130>
 800d3fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d402:	4306      	orrs	r6, r0
 800d404:	d0e0      	beq.n	800d3c8 <__ieee754_sqrt+0x150>
 800d406:	bb79      	cbnz	r1, 800d468 <__ieee754_sqrt+0x1f0>
 800d408:	460c      	mov	r4, r1
 800d40a:	ea4f 26d8 	mov.w	r6, r8, lsr #11
 800d40e:	3c15      	subs	r4, #21
 800d410:	ea4f 5848 	mov.w	r8, r8, lsl #21
 800d414:	2e00      	cmp	r6, #0
 800d416:	d0f8      	beq.n	800d40a <__ieee754_sqrt+0x192>
 800d418:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 800d41c:	d120      	bne.n	800d460 <__ieee754_sqrt+0x1e8>
 800d41e:	0076      	lsls	r6, r6, #1
 800d420:	3301      	adds	r3, #1
 800d422:	02f1      	lsls	r1, r6, #11
 800d424:	d5fb      	bpl.n	800d41e <__ieee754_sqrt+0x1a6>
 800d426:	f1c3 0101 	rsb	r1, r3, #1
 800d42a:	f1c3 0220 	rsb	r2, r3, #32
 800d42e:	fa28 f002 	lsr.w	r0, r8, r2
 800d432:	1864      	adds	r4, r4, r1
 800d434:	4306      	orrs	r6, r0
 800d436:	fa08 f803 	lsl.w	r8, r8, r3
 800d43a:	e735      	b.n	800d2a8 <__ieee754_sqrt+0x30>
 800d43c:	428e      	cmp	r6, r1
 800d43e:	d987      	bls.n	800d350 <__ieee754_sqrt+0xd8>
 800d440:	461a      	mov	r2, r3
 800d442:	e76d      	b.n	800d320 <__ieee754_sqrt+0xa8>
 800d444:	f7fe f976 	bl	800b734 <__aeabi_dmul>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	4620      	mov	r0, r4
 800d44e:	4629      	mov	r1, r5
 800d450:	f7fd ffbe 	bl	800b3d0 <__adddf3>
 800d454:	4604      	mov	r4, r0
 800d456:	460d      	mov	r5, r1
 800d458:	e7b6      	b.n	800d3c8 <__ieee754_sqrt+0x150>
 800d45a:	f10c 0c01 	add.w	ip, ip, #1
 800d45e:	e7a5      	b.n	800d3ac <__ieee754_sqrt+0x134>
 800d460:	2220      	movs	r2, #32
 800d462:	2101      	movs	r1, #1
 800d464:	2300      	movs	r3, #0
 800d466:	e7e2      	b.n	800d42e <__ieee754_sqrt+0x1b6>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	f7fd ffae 	bl	800b3cc <__aeabi_dsub>
 800d470:	4602      	mov	r2, r0
 800d472:	460b      	mov	r3, r1
 800d474:	f7fe fa88 	bl	800b988 <__aeabi_ddiv>
 800d478:	4604      	mov	r4, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	e7a4      	b.n	800d3c8 <__ieee754_sqrt+0x150>
 800d47e:	bf00      	nop

0800d480 <fabs>:
 800d480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop

0800d488 <finite>:
 800d488:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800d48c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800d490:	0fc0      	lsrs	r0, r0, #31
 800d492:	4770      	bx	lr

0800d494 <__fpclassifyd>:
 800d494:	460b      	mov	r3, r1
 800d496:	b161      	cbz	r1, 800d4b2 <__fpclassifyd+0x1e>
 800d498:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800d49c:	d009      	beq.n	800d4b2 <__fpclassifyd+0x1e>
 800d49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4a2:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 800d4a6:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800d4aa:	4291      	cmp	r1, r2
 800d4ac:	d805      	bhi.n	800d4ba <__fpclassifyd+0x26>
 800d4ae:	2004      	movs	r0, #4
 800d4b0:	4770      	bx	lr
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d1f3      	bne.n	800d49e <__fpclassifyd+0xa>
 800d4b6:	2002      	movs	r0, #2
 800d4b8:	4770      	bx	lr
 800d4ba:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 800d4be:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	d9f3      	bls.n	800d4ae <__fpclassifyd+0x1a>
 800d4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4ca:	f2c0 020f 	movt	r2, #15
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d801      	bhi.n	800d4d6 <__fpclassifyd+0x42>
 800d4d2:	2003      	movs	r0, #3
 800d4d4:	4770      	bx	lr
 800d4d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d4da:	4291      	cmp	r1, r2
 800d4dc:	d9f9      	bls.n	800d4d2 <__fpclassifyd+0x3e>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d004      	beq.n	800d4f2 <__fpclassifyd+0x5e>
 800d4e8:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800d4ec:	d001      	beq.n	800d4f2 <__fpclassifyd+0x5e>
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	4770      	bx	lr
 800d4f2:	f1d0 0001 	rsbs	r0, r0, #1
 800d4f6:	bf38      	it	cc
 800d4f8:	2000      	movcc	r0, #0
 800d4fa:	4770      	bx	lr

0800d4fc <matherr>:
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	4770      	bx	lr

0800d500 <nan>:
 800d500:	2100      	movs	r1, #0
 800d502:	2000      	movs	r0, #0
 800d504:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop

0800d50c <rint>:
 800d50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d510:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800d514:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 800d518:	2e13      	cmp	r6, #19
 800d51a:	b083      	sub	sp, #12
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4604      	mov	r4, r0
 800d522:	460d      	mov	r5, r1
 800d524:	460f      	mov	r7, r1
 800d526:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800d52a:	dc38      	bgt.n	800d59e <rint+0x92>
 800d52c:	2e00      	cmp	r6, #0
 800d52e:	db53      	blt.n	800d5d8 <rint+0xcc>
 800d530:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d534:	f2c0 010f 	movt	r1, #15
 800d538:	fa41 f106 	asr.w	r1, r1, r6
 800d53c:	ea01 0003 	and.w	r0, r1, r3
 800d540:	4310      	orrs	r0, r2
 800d542:	d027      	beq.n	800d594 <rint+0x88>
 800d544:	084f      	lsrs	r7, r1, #1
 800d546:	ea07 0203 	and.w	r2, r7, r3
 800d54a:	4314      	orrs	r4, r2
 800d54c:	d00b      	beq.n	800d566 <rint+0x5a>
 800d54e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d552:	ea25 0507 	bic.w	r5, r5, r7
 800d556:	fa43 f306 	asr.w	r3, r3, r6
 800d55a:	2e13      	cmp	r6, #19
 800d55c:	bf0c      	ite	eq
 800d55e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d562:	2400      	movne	r4, #0
 800d564:	431d      	orrs	r5, r3
 800d566:	4e32      	ldr	r6, [pc, #200]	; (800d630 <rint+0x124>)
 800d568:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 800d56c:	e9d8 8900 	ldrd	r8, r9, [r8]
 800d570:	4622      	mov	r2, r4
 800d572:	462b      	mov	r3, r5
 800d574:	4640      	mov	r0, r8
 800d576:	4649      	mov	r1, r9
 800d578:	f7fd ff2a 	bl	800b3d0 <__adddf3>
 800d57c:	e9cd 0100 	strd	r0, r1, [sp]
 800d580:	4642      	mov	r2, r8
 800d582:	464b      	mov	r3, r9
 800d584:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d588:	f7fd ff20 	bl	800b3cc <__aeabi_dsub>
 800d58c:	462f      	mov	r7, r5
 800d58e:	4626      	mov	r6, r4
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4610      	mov	r0, r2
 800d596:	4619      	mov	r1, r3
 800d598:	b003      	add	sp, #12
 800d59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d59e:	2e33      	cmp	r6, #51	; 0x33
 800d5a0:	dd07      	ble.n	800d5b2 <rint+0xa6>
 800d5a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d5a6:	d1f5      	bne.n	800d594 <rint+0x88>
 800d5a8:	f7fd ff12 	bl	800b3d0 <__adddf3>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	e7f0      	b.n	800d594 <rint+0x88>
 800d5b2:	f2ac 4013 	subw	r0, ip, #1043	; 0x413
 800d5b6:	f04f 31ff 	mov.w	r1, #4294967295
 800d5ba:	fa21 f100 	lsr.w	r1, r1, r0
 800d5be:	4211      	tst	r1, r2
 800d5c0:	d0e8      	beq.n	800d594 <rint+0x88>
 800d5c2:	084a      	lsrs	r2, r1, #1
 800d5c4:	4222      	tst	r2, r4
 800d5c6:	d0ce      	beq.n	800d566 <rint+0x5a>
 800d5c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5cc:	ea24 0402 	bic.w	r4, r4, r2
 800d5d0:	fa43 f600 	asr.w	r6, r3, r0
 800d5d4:	4334      	orrs	r4, r6
 800d5d6:	e7c6      	b.n	800d566 <rint+0x5a>
 800d5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d5dc:	4301      	orrs	r1, r0
 800d5de:	d0d9      	beq.n	800d594 <rint+0x88>
 800d5e0:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
 800d5e4:	f425 0070 	bic.w	r0, r5, #15728640	; 0xf00000
 800d5e8:	ea40 0402 	orr.w	r4, r0, r2
 800d5ec:	4263      	negs	r3, r4
 800d5ee:	4810      	ldr	r0, [pc, #64]	; (800d630 <rint+0x124>)
 800d5f0:	ea43 0104 	orr.w	r1, r3, r4
 800d5f4:	0b0d      	lsrs	r5, r1, #12
 800d5f6:	eb00 04c8 	add.w	r4, r0, r8, lsl #3
 800d5fa:	f405 2300 	and.w	r3, r5, #524288	; 0x80000
 800d5fe:	e9d4 4500 	ldrd	r4, r5, [r4]
 800d602:	0c7f      	lsrs	r7, r7, #17
 800d604:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
 800d608:	4620      	mov	r0, r4
 800d60a:	4629      	mov	r1, r5
 800d60c:	f7fd fee0 	bl	800b3d0 <__adddf3>
 800d610:	e9cd 0100 	strd	r0, r1, [sp]
 800d614:	4622      	mov	r2, r4
 800d616:	462b      	mov	r3, r5
 800d618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d61c:	f7fd fed6 	bl	800b3cc <__aeabi_dsub>
 800d620:	460d      	mov	r5, r1
 800d622:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d626:	4604      	mov	r4, r0
 800d628:	4602      	mov	r2, r0
 800d62a:	ea41 73c8 	orr.w	r3, r1, r8, lsl #31
 800d62e:	e7b1      	b.n	800d594 <rint+0x88>
 800d630:	08013640 	.word	0x08013640
 800d634:	00000000 	.word	0x00000000

0800d638 <scalbn>:
 800d638:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	4604      	mov	r4, r0
 800d642:	460d      	mov	r5, r1
 800d644:	4606      	mov	r6, r0
 800d646:	460f      	mov	r7, r1
 800d648:	4690      	mov	r8, r2
 800d64a:	bb7b      	cbnz	r3, 800d6ac <scalbn+0x74>
 800d64c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d650:	ea53 0c00 	orrs.w	ip, r3, r0
 800d654:	d026      	beq.n	800d6a4 <scalbn+0x6c>
 800d656:	2300      	movs	r3, #0
 800d658:	2200      	movs	r2, #0
 800d65a:	f2c4 3350 	movt	r3, #17232	; 0x4350
 800d65e:	f7fe f869 	bl	800b734 <__aeabi_dmul>
 800d662:	f643 42b0 	movw	r2, #15536	; 0x3cb0
 800d666:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800d66a:	4590      	cmp	r8, r2
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	4606      	mov	r6, r0
 800d672:	460f      	mov	r7, r1
 800d674:	db3b      	blt.n	800d6ee <scalbn+0xb6>
 800d676:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d67a:	3b36      	subs	r3, #54	; 0x36
 800d67c:	eb03 0008 	add.w	r0, r3, r8
 800d680:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d684:	4290      	cmp	r0, r2
 800d686:	dd1b      	ble.n	800d6c0 <scalbn+0x88>
 800d688:	4622      	mov	r2, r4
 800d68a:	462b      	mov	r3, r5
 800d68c:	a128      	add	r1, pc, #160	; (adr r1, 800d730 <scalbn+0xf8>)
 800d68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d692:	f000 f855 	bl	800d740 <copysign>
 800d696:	a326      	add	r3, pc, #152	; (adr r3, 800d730 <scalbn+0xf8>)
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f7fe f84a 	bl	800b734 <__aeabi_dmul>
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d024      	beq.n	800d6fe <scalbn+0xc6>
 800d6b4:	eb03 0008 	add.w	r0, r3, r8
 800d6b8:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d6bc:	4290      	cmp	r0, r2
 800d6be:	dce3      	bgt.n	800d688 <scalbn+0x50>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	dd06      	ble.n	800d6d2 <scalbn+0x9a>
 800d6c4:	f021 42ff 	bic.w	r2, r1, #2139095040	; 0x7f800000
 800d6c8:	f422 05e0 	bic.w	r5, r2, #7340032	; 0x700000
 800d6cc:	ea45 5500 	orr.w	r5, r5, r0, lsl #20
 800d6d0:	e7e8      	b.n	800d6a4 <scalbn+0x6c>
 800d6d2:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800d6d6:	da19      	bge.n	800d70c <scalbn+0xd4>
 800d6d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d6dc:	4580      	cmp	r8, r0
 800d6de:	4622      	mov	r2, r4
 800d6e0:	462b      	mov	r3, r5
 800d6e2:	dcd3      	bgt.n	800d68c <scalbn+0x54>
 800d6e4:	a114      	add	r1, pc, #80	; (adr r1, 800d738 <scalbn+0x100>)
 800d6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ea:	f000 f829 	bl	800d740 <copysign>
 800d6ee:	a312      	add	r3, pc, #72	; (adr r3, 800d738 <scalbn+0x100>)
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	f7fe f81e 	bl	800b734 <__aeabi_dmul>
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	e7d2      	b.n	800d6a4 <scalbn+0x6c>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	f7fd fe65 	bl	800b3d0 <__adddf3>
 800d706:	4604      	mov	r4, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	e7cb      	b.n	800d6a4 <scalbn+0x6c>
 800d70c:	f021 45ff 	bic.w	r5, r1, #2139095040	; 0x7f800000
 800d710:	f425 01e0 	bic.w	r1, r5, #7340032	; 0x700000
 800d714:	3036      	adds	r0, #54	; 0x36
 800d716:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d71a:	4619      	mov	r1, r3
 800d71c:	2300      	movs	r3, #0
 800d71e:	4620      	mov	r0, r4
 800d720:	2200      	movs	r2, #0
 800d722:	f6c3 4390 	movt	r3, #15504	; 0x3c90
 800d726:	f7fe f805 	bl	800b734 <__aeabi_dmul>
 800d72a:	4604      	mov	r4, r0
 800d72c:	460d      	mov	r5, r1
 800d72e:	e7b9      	b.n	800d6a4 <scalbn+0x6c>
 800d730:	8800759c 	.word	0x8800759c
 800d734:	7e37e43c 	.word	0x7e37e43c
 800d738:	c2f8f359 	.word	0xc2f8f359
 800d73c:	01a56e1f 	.word	0x01a56e1f

0800d740 <copysign>:
 800d740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d744:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d748:	b430      	push	{r4, r5}
 800d74a:	460d      	mov	r5, r1
 800d74c:	4604      	mov	r4, r0
 800d74e:	ea43 0102 	orr.w	r1, r3, r2
 800d752:	bc30      	pop	{r4, r5}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop

0800d758 <__register_exitproc>:
 800d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75c:	4c27      	ldr	r4, [pc, #156]	; (800d7fc <__register_exitproc+0xa4>)
 800d75e:	6825      	ldr	r5, [r4, #0]
 800d760:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800d764:	b084      	sub	sp, #16
 800d766:	4607      	mov	r7, r0
 800d768:	2c00      	cmp	r4, #0
 800d76a:	d041      	beq.n	800d7f0 <__register_exitproc+0x98>
 800d76c:	6866      	ldr	r6, [r4, #4]
 800d76e:	2e1f      	cmp	r6, #31
 800d770:	dd1c      	ble.n	800d7ac <__register_exitproc+0x54>
 800d772:	4823      	ldr	r0, [pc, #140]	; (800d800 <__register_exitproc+0xa8>)
 800d774:	b910      	cbnz	r0, 800d77c <__register_exitproc+0x24>
 800d776:	f04f 30ff 	mov.w	r0, #4294967295
 800d77a:	e01f      	b.n	800d7bc <__register_exitproc+0x64>
 800d77c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d780:	9103      	str	r1, [sp, #12]
 800d782:	9202      	str	r2, [sp, #8]
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	f3af 8000 	nop.w
 800d78a:	9903      	ldr	r1, [sp, #12]
 800d78c:	9a02      	ldr	r2, [sp, #8]
 800d78e:	9b01      	ldr	r3, [sp, #4]
 800d790:	4604      	mov	r4, r0
 800d792:	2800      	cmp	r0, #0
 800d794:	d0ef      	beq.n	800d776 <__register_exitproc+0x1e>
 800d796:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800d79a:	2000      	movs	r0, #0
 800d79c:	6060      	str	r0, [r4, #4]
 800d79e:	6026      	str	r6, [r4, #0]
 800d7a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800d7a4:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800d7a8:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800d7ac:	6865      	ldr	r5, [r4, #4]
 800d7ae:	b947      	cbnz	r7, 800d7c2 <__register_exitproc+0x6a>
 800d7b0:	1ca8      	adds	r0, r5, #2
 800d7b2:	3501      	adds	r5, #1
 800d7b4:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800d7b8:	6065      	str	r5, [r4, #4]
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	b004      	add	sp, #16
 800d7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c2:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800d7c6:	2001      	movs	r0, #1
 800d7c8:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 800d7cc:	fa00 f005 	lsl.w	r0, r0, r5
 800d7d0:	4306      	orrs	r6, r0
 800d7d2:	2f02      	cmp	r7, #2
 800d7d4:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800d7d8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800d7dc:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800d7e0:	d1e6      	bne.n	800d7b0 <__register_exitproc+0x58>
 800d7e2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800d7e6:	ea43 0200 	orr.w	r2, r3, r0
 800d7ea:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800d7ee:	e7df      	b.n	800d7b0 <__register_exitproc+0x58>
 800d7f0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800d7f4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800d7f8:	e7b8      	b.n	800d76c <__register_exitproc+0x14>
 800d7fa:	bf00      	nop
 800d7fc:	08013654 	.word	0x08013654
 800d800:	00000000 	.word	0x00000000

0800d804 <__errno>:
 800d804:	f240 4390 	movw	r3, #1168	; 0x490
 800d808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d80c:	6818      	ldr	r0, [r3, #0]
 800d80e:	4770      	bx	lr

0800d810 <__libc_fini_array>:
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	4b11      	ldr	r3, [pc, #68]	; (800d858 <__libc_fini_array+0x48>)
 800d814:	4c11      	ldr	r4, [pc, #68]	; (800d85c <__libc_fini_array+0x4c>)
 800d816:	1b18      	subs	r0, r3, r4
 800d818:	1081      	asrs	r1, r0, #2
 800d81a:	d018      	beq.n	800d84e <__libc_fini_array+0x3e>
 800d81c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d820:	1e4e      	subs	r6, r1, #1
 800d822:	4635      	mov	r5, r6
 800d824:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 800d828:	f006 0601 	and.w	r6, r6, #1
 800d82c:	4790      	blx	r2
 800d82e:	b175      	cbz	r5, 800d84e <__libc_fini_array+0x3e>
 800d830:	b126      	cbz	r6, 800d83c <__libc_fini_array+0x2c>
 800d832:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d836:	4798      	blx	r3
 800d838:	3d01      	subs	r5, #1
 800d83a:	d008      	beq.n	800d84e <__libc_fini_array+0x3e>
 800d83c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800d840:	4780      	blx	r0
 800d842:	3d01      	subs	r5, #1
 800d844:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800d848:	4788      	blx	r1
 800d84a:	3d01      	subs	r5, #1
 800d84c:	d1f6      	bne.n	800d83c <__libc_fini_array+0x2c>
 800d84e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d852:	f005 bfc7 	b.w	80137e4 <_fini>
 800d856:	bf00      	nop
 800d858:	08013804 	.word	0x08013804
 800d85c:	08013800 	.word	0x08013800

0800d860 <memset>:
 800d860:	b4f0      	push	{r4, r5, r6, r7}
 800d862:	0784      	lsls	r4, r0, #30
 800d864:	4603      	mov	r3, r0
 800d866:	f000 808e 	beq.w	800d986 <memset+0x126>
 800d86a:	1e54      	subs	r4, r2, #1
 800d86c:	2a00      	cmp	r2, #0
 800d86e:	f000 8088 	beq.w	800d982 <memset+0x122>
 800d872:	07e5      	lsls	r5, r4, #31
 800d874:	b2ce      	uxtb	r6, r1
 800d876:	d411      	bmi.n	800d89c <memset+0x3c>
 800d878:	461a      	mov	r2, r3
 800d87a:	1e67      	subs	r7, r4, #1
 800d87c:	f802 6b01 	strb.w	r6, [r2], #1
 800d880:	4613      	mov	r3, r2
 800d882:	4615      	mov	r5, r2
 800d884:	0792      	lsls	r2, r2, #30
 800d886:	d00f      	beq.n	800d8a8 <memset+0x48>
 800d888:	2c00      	cmp	r4, #0
 800d88a:	d07a      	beq.n	800d982 <memset+0x122>
 800d88c:	f803 6b01 	strb.w	r6, [r3], #1
 800d890:	079a      	lsls	r2, r3, #30
 800d892:	463c      	mov	r4, r7
 800d894:	461d      	mov	r5, r3
 800d896:	d007      	beq.n	800d8a8 <memset+0x48>
 800d898:	3c01      	subs	r4, #1
 800d89a:	e7ed      	b.n	800d878 <memset+0x18>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f803 6b01 	strb.w	r6, [r3], #1
 800d8a2:	079a      	lsls	r2, r3, #30
 800d8a4:	461d      	mov	r5, r3
 800d8a6:	d1f7      	bne.n	800d898 <memset+0x38>
 800d8a8:	2c03      	cmp	r4, #3
 800d8aa:	d952      	bls.n	800d952 <memset+0xf2>
 800d8ac:	b2ce      	uxtb	r6, r1
 800d8ae:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800d8b2:	2c0f      	cmp	r4, #15
 800d8b4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800d8b8:	d92d      	bls.n	800d916 <memset+0xb6>
 800d8ba:	f1a4 0210 	sub.w	r2, r4, #16
 800d8be:	4617      	mov	r7, r2
 800d8c0:	2f0f      	cmp	r7, #15
 800d8c2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800d8c6:	602b      	str	r3, [r5, #0]
 800d8c8:	606b      	str	r3, [r5, #4]
 800d8ca:	60ab      	str	r3, [r5, #8]
 800d8cc:	60eb      	str	r3, [r5, #12]
 800d8ce:	f105 0210 	add.w	r2, r5, #16
 800d8d2:	d916      	bls.n	800d902 <memset+0xa2>
 800d8d4:	b13e      	cbz	r6, 800d8e6 <memset+0x86>
 800d8d6:	3f10      	subs	r7, #16
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	6053      	str	r3, [r2, #4]
 800d8dc:	6093      	str	r3, [r2, #8]
 800d8de:	60d3      	str	r3, [r2, #12]
 800d8e0:	3210      	adds	r2, #16
 800d8e2:	2f0f      	cmp	r7, #15
 800d8e4:	d90d      	bls.n	800d902 <memset+0xa2>
 800d8e6:	3f20      	subs	r7, #32
 800d8e8:	f102 0610 	add.w	r6, r2, #16
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	6053      	str	r3, [r2, #4]
 800d8f0:	6093      	str	r3, [r2, #8]
 800d8f2:	60d3      	str	r3, [r2, #12]
 800d8f4:	6113      	str	r3, [r2, #16]
 800d8f6:	6153      	str	r3, [r2, #20]
 800d8f8:	6193      	str	r3, [r2, #24]
 800d8fa:	61d3      	str	r3, [r2, #28]
 800d8fc:	3220      	adds	r2, #32
 800d8fe:	2f0f      	cmp	r7, #15
 800d900:	d8f1      	bhi.n	800d8e6 <memset+0x86>
 800d902:	f1a4 0210 	sub.w	r2, r4, #16
 800d906:	f022 020f 	bic.w	r2, r2, #15
 800d90a:	f004 040f 	and.w	r4, r4, #15
 800d90e:	3210      	adds	r2, #16
 800d910:	2c03      	cmp	r4, #3
 800d912:	4415      	add	r5, r2
 800d914:	d91d      	bls.n	800d952 <memset+0xf2>
 800d916:	1f27      	subs	r7, r4, #4
 800d918:	463e      	mov	r6, r7
 800d91a:	462a      	mov	r2, r5
 800d91c:	2e03      	cmp	r6, #3
 800d91e:	f842 3b04 	str.w	r3, [r2], #4
 800d922:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800d926:	d90d      	bls.n	800d944 <memset+0xe4>
 800d928:	b127      	cbz	r7, 800d934 <memset+0xd4>
 800d92a:	3e04      	subs	r6, #4
 800d92c:	2e03      	cmp	r6, #3
 800d92e:	f842 3b04 	str.w	r3, [r2], #4
 800d932:	d907      	bls.n	800d944 <memset+0xe4>
 800d934:	4617      	mov	r7, r2
 800d936:	3e08      	subs	r6, #8
 800d938:	f847 3b04 	str.w	r3, [r7], #4
 800d93c:	6053      	str	r3, [r2, #4]
 800d93e:	1d3a      	adds	r2, r7, #4
 800d940:	2e03      	cmp	r6, #3
 800d942:	d8f7      	bhi.n	800d934 <memset+0xd4>
 800d944:	1f23      	subs	r3, r4, #4
 800d946:	f023 0203 	bic.w	r2, r3, #3
 800d94a:	1d13      	adds	r3, r2, #4
 800d94c:	f004 0403 	and.w	r4, r4, #3
 800d950:	18ed      	adds	r5, r5, r3
 800d952:	b1b4      	cbz	r4, 800d982 <memset+0x122>
 800d954:	462b      	mov	r3, r5
 800d956:	b2c9      	uxtb	r1, r1
 800d958:	f803 1b01 	strb.w	r1, [r3], #1
 800d95c:	192c      	adds	r4, r5, r4
 800d95e:	43ed      	mvns	r5, r5
 800d960:	1962      	adds	r2, r4, r5
 800d962:	42a3      	cmp	r3, r4
 800d964:	f002 0501 	and.w	r5, r2, #1
 800d968:	d00b      	beq.n	800d982 <memset+0x122>
 800d96a:	b11d      	cbz	r5, 800d974 <memset+0x114>
 800d96c:	f803 1b01 	strb.w	r1, [r3], #1
 800d970:	42a3      	cmp	r3, r4
 800d972:	d006      	beq.n	800d982 <memset+0x122>
 800d974:	461a      	mov	r2, r3
 800d976:	f802 1b01 	strb.w	r1, [r2], #1
 800d97a:	7059      	strb	r1, [r3, #1]
 800d97c:	1c53      	adds	r3, r2, #1
 800d97e:	42a3      	cmp	r3, r4
 800d980:	d1f8      	bne.n	800d974 <memset+0x114>
 800d982:	bcf0      	pop	{r4, r5, r6, r7}
 800d984:	4770      	bx	lr
 800d986:	4605      	mov	r5, r0
 800d988:	4614      	mov	r4, r2
 800d98a:	e78d      	b.n	800d8a8 <memset+0x48>

0800d98c <printf>:
 800d98c:	b40f      	push	{r0, r1, r2, r3}
 800d98e:	b500      	push	{lr}
 800d990:	f240 4290 	movw	r2, #1168	; 0x490
 800d994:	b083      	sub	sp, #12
 800d996:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d99a:	ab04      	add	r3, sp, #16
 800d99c:	6810      	ldr	r0, [r2, #0]
 800d99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a2:	6881      	ldr	r1, [r0, #8]
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	f000 f805 	bl	800d9b4 <_vfprintf_r>
 800d9aa:	b003      	add	sp, #12
 800d9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9b0:	b004      	add	sp, #16
 800d9b2:	4770      	bx	lr

0800d9b4 <_vfprintf_r>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 800d9bc:	4689      	mov	r9, r1
 800d9be:	4615      	mov	r5, r2
 800d9c0:	9310      	str	r3, [sp, #64]	; 0x40
 800d9c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9c4:	f003 fcde 	bl	8011384 <_localeconv_r>
 800d9c8:	6800      	ldr	r0, [r0, #0]
 800d9ca:	9015      	str	r0, [sp, #84]	; 0x54
 800d9cc:	f004 feb0 	bl	8012730 <strlen>
 800d9d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d9d2:	9017      	str	r0, [sp, #92]	; 0x5c
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800d9dc:	b11c      	cbz	r4, 800d9e6 <_vfprintf_r+0x32>
 800d9de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 8152 	beq.w	800dc8a <_vfprintf_r+0x2d6>
 800d9e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d9ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d9ee:	b210      	sxth	r0, r2
 800d9f0:	b948      	cbnz	r0, 800da06 <_vfprintf_r+0x52>
 800d9f2:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800d9f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d9fa:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
 800d9fe:	f8a9 300c 	strh.w	r3, [r9, #12]
 800da02:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 800da06:	f003 0008 	and.w	r0, r3, #8
 800da0a:	b201      	sxth	r1, r0
 800da0c:	2900      	cmp	r1, #0
 800da0e:	f000 80d1 	beq.w	800dbb4 <_vfprintf_r+0x200>
 800da12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800da16:	2a00      	cmp	r2, #0
 800da18:	f000 80cc 	beq.w	800dbb4 <_vfprintf_r+0x200>
 800da1c:	f003 041a 	and.w	r4, r3, #26
 800da20:	2c0a      	cmp	r4, #10
 800da22:	f000 80d4 	beq.w	800dbce <_vfprintf_r+0x21a>
 800da26:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
 800da2a:	f10d 00cf 	add.w	r0, sp, #207	; 0xcf
 800da2e:	aa34      	add	r2, sp, #208	; 0xd0
 800da30:	2100      	movs	r1, #0
 800da32:	9008      	str	r0, [sp, #32]
 800da34:	9207      	str	r2, [sp, #28]
 800da36:	9111      	str	r1, [sp, #68]	; 0x44
 800da38:	f8ca 1008 	str.w	r1, [sl, #8]
 800da3c:	f8ca 1004 	str.w	r1, [sl, #4]
 800da40:	911a      	str	r1, [sp, #104]	; 0x68
 800da42:	911b      	str	r1, [sp, #108]	; 0x6c
 800da44:	910e      	str	r1, [sp, #56]	; 0x38
 800da46:	9c08      	ldr	r4, [sp, #32]
 800da48:	9907      	ldr	r1, [sp, #28]
 800da4a:	950a      	str	r5, [sp, #40]	; 0x28
 800da4c:	ab4e      	add	r3, sp, #312	; 0x138
 800da4e:	1b08      	subs	r0, r1, r4
 800da50:	f8ca 3000 	str.w	r3, [sl]
 800da54:	469b      	mov	fp, r3
 800da56:	901d      	str	r0, [sp, #116]	; 0x74
 800da58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800da5a:	782a      	ldrb	r2, [r5, #0]
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	f000 8118 	beq.w	800dc92 <_vfprintf_r+0x2de>
 800da62:	2a25      	cmp	r2, #37	; 0x25
 800da64:	f000 8115 	beq.w	800dc92 <_vfprintf_r+0x2de>
 800da68:	3501      	adds	r5, #1
 800da6a:	e002      	b.n	800da72 <_vfprintf_r+0xbe>
 800da6c:	2925      	cmp	r1, #37	; 0x25
 800da6e:	f000 8093 	beq.w	800db98 <_vfprintf_r+0x1e4>
 800da72:	462c      	mov	r4, r5
 800da74:	3501      	adds	r5, #1
 800da76:	7821      	ldrb	r1, [r4, #0]
 800da78:	2900      	cmp	r1, #0
 800da7a:	d1f7      	bne.n	800da6c <_vfprintf_r+0xb8>
 800da7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da7e:	1a25      	subs	r5, r4, r0
 800da80:	b1b5      	cbz	r5, 800dab0 <_vfprintf_r+0xfc>
 800da82:	f8da 1008 	ldr.w	r1, [sl, #8]
 800da86:	f8da 3004 	ldr.w	r3, [sl, #4]
 800da8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da8c:	f8cb 5004 	str.w	r5, [fp, #4]
 800da90:	194a      	adds	r2, r1, r5
 800da92:	1c59      	adds	r1, r3, #1
 800da94:	2907      	cmp	r1, #7
 800da96:	f8cb 0000 	str.w	r0, [fp]
 800da9a:	f8ca 2008 	str.w	r2, [sl, #8]
 800da9e:	f8ca 1004 	str.w	r1, [sl, #4]
 800daa2:	f300 80e8 	bgt.w	800dc76 <_vfprintf_r+0x2c2>
 800daa6:	f10b 0b08 	add.w	fp, fp, #8
 800daaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daac:	1958      	adds	r0, r3, r5
 800daae:	900e      	str	r0, [sp, #56]	; 0x38
 800dab0:	7822      	ldrb	r2, [r4, #0]
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	f000 80c8 	beq.w	800dc48 <_vfprintf_r+0x294>
 800dab8:	2600      	movs	r6, #0
 800daba:	1c65      	adds	r5, r4, #1
 800dabc:	f04f 3cff 	mov.w	ip, #4294967295
 800dac0:	f894 8001 	ldrb.w	r8, [r4, #1]
 800dac4:	960d      	str	r6, [sp, #52]	; 0x34
 800dac6:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800daca:	9609      	str	r6, [sp, #36]	; 0x24
 800dacc:	950a      	str	r5, [sp, #40]	; 0x28
 800dace:	2120      	movs	r1, #32
 800dad0:	222b      	movs	r2, #43	; 0x2b
 800dad2:	462b      	mov	r3, r5
 800dad4:	4666      	mov	r6, ip
 800dad6:	3301      	adds	r3, #1
 800dad8:	f1a8 0020 	sub.w	r0, r8, #32
 800dadc:	2858      	cmp	r0, #88	; 0x58
 800dade:	f200 833b 	bhi.w	800e158 <_vfprintf_r+0x7a4>
 800dae2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800dae6:	034b      	.short	0x034b
 800dae8:	03390339 	.word	0x03390339
 800daec:	03390355 	.word	0x03390355
 800daf0:	03390339 	.word	0x03390339
 800daf4:	03390339 	.word	0x03390339
 800daf8:	038e0339 	.word	0x038e0339
 800dafc:	033900d8 	.word	0x033900d8
 800db00:	00dd0060 	.word	0x00dd0060
 800db04:	00f80339 	.word	0x00f80339
 800db08:	00ff00ff 	.word	0x00ff00ff
 800db0c:	00ff00ff 	.word	0x00ff00ff
 800db10:	00ff00ff 	.word	0x00ff00ff
 800db14:	00ff00ff 	.word	0x00ff00ff
 800db18:	033900ff 	.word	0x033900ff
 800db1c:	03390339 	.word	0x03390339
 800db20:	03390339 	.word	0x03390339
 800db24:	03390339 	.word	0x03390339
 800db28:	03390339 	.word	0x03390339
 800db2c:	01100339 	.word	0x01100339
 800db30:	033901da 	.word	0x033901da
 800db34:	033901da 	.word	0x033901da
 800db38:	03390339 	.word	0x03390339
 800db3c:	021b0339 	.word	0x021b0339
 800db40:	03390339 	.word	0x03390339
 800db44:	03390222 	.word	0x03390222
 800db48:	03390339 	.word	0x03390339
 800db4c:	03390339 	.word	0x03390339
 800db50:	0339023d 	.word	0x0339023d
 800db54:	02540339 	.word	0x02540339
 800db58:	03390339 	.word	0x03390339
 800db5c:	03390339 	.word	0x03390339
 800db60:	03390339 	.word	0x03390339
 800db64:	03390339 	.word	0x03390339
 800db68:	03390339 	.word	0x03390339
 800db6c:	03070323 	.word	0x03070323
 800db70:	01da01da 	.word	0x01da01da
 800db74:	031c01da 	.word	0x031c01da
 800db78:	03390307 	.word	0x03390307
 800db7c:	02b00339 	.word	0x02b00339
 800db80:	02bc0339 	.word	0x02bc0339
 800db84:	02ed02ca 	.word	0x02ed02ca
 800db88:	0339027a 	.word	0x0339027a
 800db8c:	03390281 	.word	0x03390281
 800db90:	0339035c 	.word	0x0339035c
 800db94:	03730339 	.word	0x03730339
 800db98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db9a:	1aa5      	subs	r5, r4, r2
 800db9c:	e770      	b.n	800da80 <_vfprintf_r+0xcc>
 800db9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dba0:	9010      	str	r0, [sp, #64]	; 0x40
 800dba2:	426d      	negs	r5, r5
 800dba4:	950d      	str	r5, [sp, #52]	; 0x34
 800dba6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dba8:	f044 0004 	orr.w	r0, r4, #4
 800dbac:	9009      	str	r0, [sp, #36]	; 0x24
 800dbae:	f893 8000 	ldrb.w	r8, [r3]
 800dbb2:	e790      	b.n	800dad6 <_vfprintf_r+0x122>
 800dbb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	f001 fe40 	bl	800f83c <__swsetup_r>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d151      	bne.n	800dc64 <_vfprintf_r+0x2b0>
 800dbc0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dbc4:	f003 041a 	and.w	r4, r3, #26
 800dbc8:	2c0a      	cmp	r4, #10
 800dbca:	f47f af2c 	bne.w	800da26 <_vfprintf_r+0x72>
 800dbce:	f8b9 600e 	ldrh.w	r6, [r9, #14]
 800dbd2:	0432      	lsls	r2, r6, #16
 800dbd4:	f53f af27 	bmi.w	800da26 <_vfprintf_r+0x72>
 800dbd8:	f8d9 4064 	ldr.w	r4, [r9, #100]	; 0x64
 800dbdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dbde:	944d      	str	r4, [sp, #308]	; 0x134
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800dbe6:	f8ad 60de 	strh.w	r6, [sp, #222]	; 0xde
 800dbea:	ac4e      	add	r4, sp, #312	; 0x138
 800dbec:	953b      	str	r5, [sp, #236]	; 0xec
 800dbee:	f8d9 5024 	ldr.w	r5, [r9, #36]	; 0x24
 800dbf2:	9434      	str	r4, [sp, #208]	; 0xd0
 800dbf4:	f023 0e02 	bic.w	lr, r3, #2
 800dbf8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800dbfc:	9438      	str	r4, [sp, #224]	; 0xe0
 800dbfe:	a934      	add	r1, sp, #208	; 0xd0
 800dc00:	2400      	movs	r4, #0
 800dc02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc04:	f8ad e0dc 	strh.w	lr, [sp, #220]	; 0xdc
 800dc08:	953d      	str	r5, [sp, #244]	; 0xf4
 800dc0a:	9736      	str	r7, [sp, #216]	; 0xd8
 800dc0c:	9739      	str	r7, [sp, #228]	; 0xe4
 800dc0e:	943a      	str	r4, [sp, #232]	; 0xe8
 800dc10:	f7ff fed0 	bl	800d9b4 <_vfprintf_r>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	900e      	str	r0, [sp, #56]	; 0x38
 800dc18:	db09      	blt.n	800dc2e <_vfprintf_r+0x27a>
 800dc1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dc1c:	a934      	add	r1, sp, #208	; 0xd0
 800dc1e:	f003 f927 	bl	8010e70 <_fflush_r>
 800dc22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800dc24:	2800      	cmp	r0, #0
 800dc26:	bf18      	it	ne
 800dc28:	f04f 34ff 	movne.w	r4, #4294967295
 800dc2c:	940e      	str	r4, [sp, #56]	; 0x38
 800dc2e:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 800dc32:	f002 0140 	and.w	r1, r2, #64	; 0x40
 800dc36:	b20b      	sxth	r3, r1
 800dc38:	b1bb      	cbz	r3, 800dc6a <_vfprintf_r+0x2b6>
 800dc3a:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 800dc3e:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 800dc42:	f8a9 200c 	strh.w	r2, [r9, #12]
 800dc46:	e010      	b.n	800dc6a <_vfprintf_r+0x2b6>
 800dc48:	f8da 2008 	ldr.w	r2, [sl, #8]
 800dc4c:	b122      	cbz	r2, 800dc58 <_vfprintf_r+0x2a4>
 800dc4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dc50:	4649      	mov	r1, r9
 800dc52:	4652      	mov	r2, sl
 800dc54:	f004 fd9c 	bl	8012790 <__sprint_r>
 800dc58:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800dc5c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 800dc60:	b218      	sxth	r0, r3
 800dc62:	b110      	cbz	r0, 800dc6a <_vfprintf_r+0x2b6>
 800dc64:	f04f 35ff 	mov.w	r5, #4294967295
 800dc68:	950e      	str	r5, [sp, #56]	; 0x38
 800dc6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dc6c:	b04f      	add	sp, #316	; 0x13c
 800dc6e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dc78:	4649      	mov	r1, r9
 800dc7a:	4652      	mov	r2, sl
 800dc7c:	f004 fd88 	bl	8012790 <__sprint_r>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d1e9      	bne.n	800dc58 <_vfprintf_r+0x2a4>
 800dc84:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800dc88:	e70f      	b.n	800daaa <_vfprintf_r+0xf6>
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f003 f9d2 	bl	8011034 <__sinit>
 800dc90:	e6a9      	b.n	800d9e6 <_vfprintf_r+0x32>
 800dc92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dc94:	e70c      	b.n	800dab0 <_vfprintf_r+0xfc>
 800dc96:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800dc9a:	f893 8000 	ldrb.w	r8, [r3]
 800dc9e:	e71a      	b.n	800dad6 <_vfprintf_r+0x122>
 800dca0:	461c      	mov	r4, r3
 800dca2:	f814 8b01 	ldrb.w	r8, [r4], #1
 800dca6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800dcaa:	f001 85a8 	beq.w	800f7fe <_vfprintf_r+0x1e4a>
 800dcae:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800dcb2:	2600      	movs	r6, #0
 800dcb4:	2809      	cmp	r0, #9
 800dcb6:	f201 84dc 	bhi.w	800f672 <_vfprintf_r+0x1cbe>
 800dcba:	f814 8b01 	ldrb.w	r8, [r4], #1
 800dcbe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800dcc2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800dcc6:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800dcca:	2809      	cmp	r0, #9
 800dccc:	4623      	mov	r3, r4
 800dcce:	d9f4      	bls.n	800dcba <_vfprintf_r+0x306>
 800dcd0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800dcd4:	e700      	b.n	800dad8 <_vfprintf_r+0x124>
 800dcd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dcd8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 800dcdc:	9009      	str	r0, [sp, #36]	; 0x24
 800dcde:	f893 8000 	ldrb.w	r8, [r3]
 800dce2:	e6f8      	b.n	800dad6 <_vfprintf_r+0x122>
 800dce4:	461c      	mov	r4, r3
 800dce6:	2000      	movs	r0, #0
 800dce8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800dcec:	f814 8b01 	ldrb.w	r8, [r4], #1
 800dcf0:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 800dcf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dcf8:	2d09      	cmp	r5, #9
 800dcfa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dcfe:	4623      	mov	r3, r4
 800dd00:	d9f2      	bls.n	800dce8 <_vfprintf_r+0x334>
 800dd02:	900d      	str	r0, [sp, #52]	; 0x34
 800dd04:	e6e8      	b.n	800dad8 <_vfprintf_r+0x124>
 800dd06:	930a      	str	r3, [sp, #40]	; 0x28
 800dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dd0e:	f043 0710 	orr.w	r7, r3, #16
 800dd12:	9709      	str	r7, [sp, #36]	; 0x24
 800dd14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd16:	06ac      	lsls	r4, r5, #26
 800dd18:	46b6      	mov	lr, r6
 800dd1a:	f140 81f3 	bpl.w	800e104 <_vfprintf_r+0x750>
 800dd1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dd20:	1dec      	adds	r4, r5, #7
 800dd22:	f024 0107 	bic.w	r1, r4, #7
 800dd26:	e9d1 2300 	ldrd	r2, r3, [r1]
 800dd2a:	3108      	adds	r1, #8
 800dd2c:	9110      	str	r1, [sp, #64]	; 0x40
 800dd2e:	4614      	mov	r4, r2
 800dd30:	461d      	mov	r5, r3
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	f173 0100 	sbcs.w	r1, r3, #0
 800dd38:	f2c1 814a 	blt.w	800efd0 <_vfprintf_r+0x161c>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f1be 0f00 	cmp.w	lr, #0
 800dd42:	db03      	blt.n	800dd4c <_vfprintf_r+0x398>
 800dd44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd46:	f020 0780 	bic.w	r7, r0, #128	; 0x80
 800dd4a:	9709      	str	r7, [sp, #36]	; 0x24
 800dd4c:	ea54 0105 	orrs.w	r1, r4, r5
 800dd50:	f040 841c 	bne.w	800e58c <_vfprintf_r+0xbd8>
 800dd54:	f1be 0f00 	cmp.w	lr, #0
 800dd58:	f040 8418 	bne.w	800e58c <_vfprintf_r+0xbd8>
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f040 862b 	bne.w	800e9b8 <_vfprintf_r+0x1004>
 800dd62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd64:	07e9      	lsls	r1, r5, #31
 800dd66:	f140 8627 	bpl.w	800e9b8 <_vfprintf_r+0x1004>
 800dd6a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dd6c:	2430      	movs	r4, #48	; 0x30
 800dd6e:	f88d 40cf 	strb.w	r4, [sp, #207]	; 0xcf
 800dd72:	910f      	str	r1, [sp, #60]	; 0x3c
 800dd74:	f10d 08cf 	add.w	r8, sp, #207	; 0xcf
 800dd78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800dd7a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800dd7e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800dd82:	4574      	cmp	r4, lr
 800dd84:	bfb8      	it	lt
 800dd86:	4674      	movlt	r4, lr
 800dd88:	2100      	movs	r1, #0
 800dd8a:	940c      	str	r4, [sp, #48]	; 0x30
 800dd8c:	9116      	str	r1, [sp, #88]	; 0x58
 800dd8e:	b113      	cbz	r3, 800dd96 <_vfprintf_r+0x3e2>
 800dd90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd92:	1c68      	adds	r0, r5, #1
 800dd94:	900c      	str	r0, [sp, #48]	; 0x30
 800dd96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd98:	f015 0102 	ands.w	r1, r5, #2
 800dd9c:	9113      	str	r1, [sp, #76]	; 0x4c
 800dd9e:	d002      	beq.n	800dda6 <_vfprintf_r+0x3f2>
 800dda0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dda2:	3402      	adds	r4, #2
 800dda4:	940c      	str	r4, [sp, #48]	; 0x30
 800dda6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dda8:	f015 0784 	ands.w	r7, r5, #132	; 0x84
 800ddac:	f040 823f 	bne.w	800e22e <_vfprintf_r+0x87a>
 800ddb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ddb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddb4:	1aac      	subs	r4, r5, r2
 800ddb6:	2c00      	cmp	r4, #0
 800ddb8:	f340 8239 	ble.w	800e22e <_vfprintf_r+0x87a>
 800ddbc:	2c10      	cmp	r4, #16
 800ddbe:	f341 8335 	ble.w	800f42c <_vfprintf_r+0x1a78>
 800ddc2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ddc6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ddca:	4db9      	ldr	r5, [pc, #740]	; (800e0b0 <_vfprintf_r+0x6fc>)
 800ddcc:	2610      	movs	r6, #16
 800ddce:	1c42      	adds	r2, r0, #1
 800ddd0:	1999      	adds	r1, r3, r6
 800ddd2:	f1a4 0c11 	sub.w	ip, r4, #17
 800ddd6:	2a07      	cmp	r2, #7
 800ddd8:	e88b 0060 	stmia.w	fp, {r5, r6}
 800dddc:	f3cc 1300 	ubfx	r3, ip, #4, #1
 800dde0:	f8ca 1008 	str.w	r1, [sl, #8]
 800dde4:	f8ca 2004 	str.w	r2, [sl, #4]
 800dde8:	f300 8625 	bgt.w	800ea36 <_vfprintf_r+0x1082>
 800ddec:	f10b 0b08 	add.w	fp, fp, #8
 800ddf0:	3c10      	subs	r4, #16
 800ddf2:	2c10      	cmp	r4, #16
 800ddf4:	f340 837d 	ble.w	800e4f2 <_vfprintf_r+0xb3e>
 800ddf8:	b1b3      	cbz	r3, 800de28 <_vfprintf_r+0x474>
 800ddfa:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ddfe:	f8da 0008 	ldr.w	r0, [sl, #8]
 800de02:	f8cb 5000 	str.w	r5, [fp]
 800de06:	1c4a      	adds	r2, r1, #1
 800de08:	3010      	adds	r0, #16
 800de0a:	2a07      	cmp	r2, #7
 800de0c:	f8cb 6004 	str.w	r6, [fp, #4]
 800de10:	f8ca 0008 	str.w	r0, [sl, #8]
 800de14:	f8ca 2004 	str.w	r2, [sl, #4]
 800de18:	f300 861b 	bgt.w	800ea52 <_vfprintf_r+0x109e>
 800de1c:	f10b 0b08 	add.w	fp, fp, #8
 800de20:	3c10      	subs	r4, #16
 800de22:	2c10      	cmp	r4, #16
 800de24:	f340 8365 	ble.w	800e4f2 <_vfprintf_r+0xb3e>
 800de28:	971c      	str	r7, [sp, #112]	; 0x70
 800de2a:	462f      	mov	r7, r5
 800de2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800de2e:	e019      	b.n	800de64 <_vfprintf_r+0x4b0>
 800de30:	f10b 0b08 	add.w	fp, fp, #8
 800de34:	f8da 2004 	ldr.w	r2, [sl, #4]
 800de38:	f8da 3008 	ldr.w	r3, [sl, #8]
 800de3c:	f8cb 7000 	str.w	r7, [fp]
 800de40:	1c50      	adds	r0, r2, #1
 800de42:	3310      	adds	r3, #16
 800de44:	3c10      	subs	r4, #16
 800de46:	2807      	cmp	r0, #7
 800de48:	f8cb 6004 	str.w	r6, [fp, #4]
 800de4c:	f8ca 3008 	str.w	r3, [sl, #8]
 800de50:	f8ca 0004 	str.w	r0, [sl, #4]
 800de54:	f300 833d 	bgt.w	800e4d2 <_vfprintf_r+0xb1e>
 800de58:	3c10      	subs	r4, #16
 800de5a:	2c10      	cmp	r4, #16
 800de5c:	f10b 0b08 	add.w	fp, fp, #8
 800de60:	f340 8345 	ble.w	800e4ee <_vfprintf_r+0xb3a>
 800de64:	f8da 0004 	ldr.w	r0, [sl, #4]
 800de68:	f8da 3008 	ldr.w	r3, [sl, #8]
 800de6c:	f8cb 7000 	str.w	r7, [fp]
 800de70:	1c41      	adds	r1, r0, #1
 800de72:	3310      	adds	r3, #16
 800de74:	2907      	cmp	r1, #7
 800de76:	f8cb 6004 	str.w	r6, [fp, #4]
 800de7a:	f8ca 3008 	str.w	r3, [sl, #8]
 800de7e:	f8ca 1004 	str.w	r1, [sl, #4]
 800de82:	ddd5      	ble.n	800de30 <_vfprintf_r+0x47c>
 800de84:	4628      	mov	r0, r5
 800de86:	4649      	mov	r1, r9
 800de88:	4652      	mov	r2, sl
 800de8a:	f004 fc81 	bl	8012790 <__sprint_r>
 800de8e:	2800      	cmp	r0, #0
 800de90:	f47f aee2 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800de94:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800de98:	e7cc      	b.n	800de34 <_vfprintf_r+0x480>
 800de9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800de9c:	930a      	str	r3, [sp, #40]	; 0x28
 800de9e:	46b6      	mov	lr, r6
 800dea0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dea2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dea6:	1dc3      	adds	r3, r0, #7
 800dea8:	f023 0107 	bic.w	r1, r3, #7
 800deac:	0732      	lsls	r2, r6, #28
 800deae:	bf53      	iteet	pl
 800deb0:	f101 0608 	addpl.w	r6, r1, #8
 800deb4:	f101 0508 	addmi.w	r5, r1, #8
 800deb8:	9510      	strmi	r5, [sp, #64]	; 0x40
 800deba:	9610      	strpl	r6, [sp, #64]	; 0x40
 800debc:	680e      	ldr	r6, [r1, #0]
 800debe:	684c      	ldr	r4, [r1, #4]
 800dec0:	f8cd e018 	str.w	lr, [sp, #24]
 800dec4:	4630      	mov	r0, r6
 800dec6:	4621      	mov	r1, r4
 800dec8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800decc:	4621      	mov	r1, r4
 800dece:	4630      	mov	r0, r6
 800ded0:	f7ff fae0 	bl	800d494 <__fpclassifyd>
 800ded4:	2801      	cmp	r0, #1
 800ded6:	f8dd c018 	ldr.w	ip, [sp, #24]
 800deda:	4630      	mov	r0, r6
 800dedc:	4621      	mov	r1, r4
 800dede:	f041 8083 	bne.w	800efe8 <_vfprintf_r+0x1634>
 800dee2:	2200      	movs	r2, #0
 800dee4:	2300      	movs	r3, #0
 800dee6:	f7fd fe97 	bl	800bc18 <__aeabi_dcmplt>
 800deea:	2800      	cmp	r0, #0
 800deec:	f041 8381 	bne.w	800f5f2 <_vfprintf_r+0x1c3e>
 800def0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800def4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800def6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800def8:	4f6e      	ldr	r7, [pc, #440]	; (800e0b4 <_vfprintf_r+0x700>)
 800defa:	4d6f      	ldr	r5, [pc, #444]	; (800e0b8 <_vfprintf_r+0x704>)
 800defc:	2003      	movs	r0, #3
 800defe:	2200      	movs	r2, #0
 800df00:	900c      	str	r0, [sp, #48]	; 0x30
 800df02:	9212      	str	r2, [sp, #72]	; 0x48
 800df04:	2c47      	cmp	r4, #71	; 0x47
 800df06:	bfcc      	ite	gt
 800df08:	46a8      	movgt	r8, r5
 800df0a:	46b8      	movle	r8, r7
 800df0c:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800df10:	2403      	movs	r4, #3
 800df12:	2200      	movs	r2, #0
 800df14:	9009      	str	r0, [sp, #36]	; 0x24
 800df16:	940f      	str	r4, [sp, #60]	; 0x3c
 800df18:	9216      	str	r2, [sp, #88]	; 0x58
 800df1a:	e738      	b.n	800dd8e <_vfprintf_r+0x3da>
 800df1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df1e:	f045 0508 	orr.w	r5, r5, #8
 800df22:	9509      	str	r5, [sp, #36]	; 0x24
 800df24:	f893 8000 	ldrb.w	r8, [r3]
 800df28:	e5d5      	b.n	800dad6 <_vfprintf_r+0x122>
 800df2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df2c:	930a      	str	r3, [sp, #40]	; 0x28
 800df2e:	f044 0110 	orr.w	r1, r4, #16
 800df32:	9109      	str	r1, [sp, #36]	; 0x24
 800df34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800df3a:	f017 0320 	ands.w	r3, r7, #32
 800df3e:	46b6      	mov	lr, r6
 800df40:	f000 80a4 	beq.w	800e08c <_vfprintf_r+0x6d8>
 800df44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df46:	1dd9      	adds	r1, r3, #7
 800df48:	f021 0707 	bic.w	r7, r1, #7
 800df4c:	f107 0408 	add.w	r4, r7, #8
 800df50:	9410      	str	r4, [sp, #64]	; 0x40
 800df52:	e9d7 4500 	ldrd	r4, r5, [r7]
 800df56:	2300      	movs	r3, #0
 800df58:	2200      	movs	r2, #0
 800df5a:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800df5e:	e6ee      	b.n	800dd3e <_vfprintf_r+0x38a>
 800df60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df62:	930a      	str	r3, [sp, #40]	; 0x28
 800df64:	f044 0010 	orr.w	r0, r4, #16
 800df68:	9009      	str	r0, [sp, #36]	; 0x24
 800df6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df6c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800df70:	06ad      	lsls	r5, r5, #26
 800df72:	46b6      	mov	lr, r6
 800df74:	f140 811b 	bpl.w	800e1ae <_vfprintf_r+0x7fa>
 800df78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800df7a:	1dea      	adds	r2, r5, #7
 800df7c:	f022 0007 	bic.w	r0, r2, #7
 800df80:	f100 0308 	add.w	r3, r0, #8
 800df84:	9310      	str	r3, [sp, #64]	; 0x40
 800df86:	e9d0 4500 	ldrd	r4, r5, [r0]
 800df8a:	2301      	movs	r3, #1
 800df8c:	e7e4      	b.n	800df58 <_vfprintf_r+0x5a4>
 800df8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df90:	4c4a      	ldr	r4, [pc, #296]	; (800e0bc <_vfprintf_r+0x708>)
 800df92:	930a      	str	r3, [sp, #40]	; 0x28
 800df94:	0681      	lsls	r1, r0, #26
 800df96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800df9a:	46b6      	mov	lr, r6
 800df9c:	941a      	str	r4, [sp, #104]	; 0x68
 800df9e:	f140 811f 	bpl.w	800e1e0 <_vfprintf_r+0x82c>
 800dfa2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dfa4:	1dcb      	adds	r3, r1, #7
 800dfa6:	f023 0007 	bic.w	r0, r3, #7
 800dfaa:	f100 0508 	add.w	r5, r0, #8
 800dfae:	9510      	str	r5, [sp, #64]	; 0x40
 800dfb0:	e9d0 4500 	ldrd	r4, r5, [r0]
 800dfb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfb6:	07cf      	lsls	r7, r1, #31
 800dfb8:	f140 8121 	bpl.w	800e1fe <_vfprintf_r+0x84a>
 800dfbc:	ea54 0205 	orrs.w	r2, r4, r5
 800dfc0:	f000 811d 	beq.w	800e1fe <_vfprintf_r+0x84a>
 800dfc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfc6:	f041 0302 	orr.w	r3, r1, #2
 800dfca:	2730      	movs	r7, #48	; 0x30
 800dfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dfce:	f88d 707c 	strb.w	r7, [sp, #124]	; 0x7c
 800dfd2:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e7be      	b.n	800df58 <_vfprintf_r+0x5a4>
 800dfda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfdc:	f040 0520 	orr.w	r5, r0, #32
 800dfe0:	9509      	str	r5, [sp, #36]	; 0x24
 800dfe2:	f893 8000 	ldrb.w	r8, [r3]
 800dfe6:	e576      	b.n	800dad6 <_vfprintf_r+0x122>
 800dfe8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dfea:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dfee:	2400      	movs	r4, #0
 800dff0:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
 800dff4:	f8d5 8000 	ldr.w	r8, [r5]
 800dff8:	930a      	str	r3, [sp, #40]	; 0x28
 800dffa:	46b6      	mov	lr, r6
 800dffc:	1d2f      	adds	r7, r5, #4
 800dffe:	f1b8 0f00 	cmp.w	r8, #0
 800e002:	f001 828a 	beq.w	800f51a <_vfprintf_r+0x1b66>
 800e006:	2e00      	cmp	r6, #0
 800e008:	4640      	mov	r0, r8
 800e00a:	f2c1 81f5 	blt.w	800f3f8 <_vfprintf_r+0x1a44>
 800e00e:	4621      	mov	r1, r4
 800e010:	4632      	mov	r2, r6
 800e012:	9606      	str	r6, [sp, #24]
 800e014:	f003 fcde 	bl	80119d4 <memchr>
 800e018:	f8dd c018 	ldr.w	ip, [sp, #24]
 800e01c:	2800      	cmp	r0, #0
 800e01e:	f001 831c 	beq.w	800f65a <_vfprintf_r+0x1ca6>
 800e022:	ebc8 0300 	rsb	r3, r8, r0
 800e026:	4563      	cmp	r3, ip
 800e028:	930f      	str	r3, [sp, #60]	; 0x3c
 800e02a:	9412      	str	r4, [sp, #72]	; 0x48
 800e02c:	f341 8187 	ble.w	800f33e <_vfprintf_r+0x198a>
 800e030:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e032:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800e036:	9710      	str	r7, [sp, #64]	; 0x40
 800e038:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800e03c:	940c      	str	r4, [sp, #48]	; 0x30
 800e03e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800e042:	9516      	str	r5, [sp, #88]	; 0x58
 800e044:	e6a3      	b.n	800dd8e <_vfprintf_r+0x3da>
 800e046:	f893 8000 	ldrb.w	r8, [r3]
 800e04a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800e04e:	4618      	mov	r0, r3
 800e050:	f001 81ab 	beq.w	800f3aa <_vfprintf_r+0x19f6>
 800e054:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e056:	f044 0010 	orr.w	r0, r4, #16
 800e05a:	9009      	str	r0, [sp, #36]	; 0x24
 800e05c:	e53b      	b.n	800dad6 <_vfprintf_r+0x122>
 800e05e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e060:	930a      	str	r3, [sp, #40]	; 0x28
 800e062:	06a2      	lsls	r2, r4, #26
 800e064:	f141 8068 	bpl.w	800f138 <_vfprintf_r+0x1784>
 800e068:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e06a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	17d1      	asrs	r1, r2, #31
 800e070:	1d25      	adds	r5, r4, #4
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	6059      	str	r1, [r3, #4]
 800e076:	9510      	str	r5, [sp, #64]	; 0x40
 800e078:	e4ee      	b.n	800da58 <_vfprintf_r+0xa4>
 800e07a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e07c:	930a      	str	r3, [sp, #40]	; 0x28
 800e07e:	f017 0320 	ands.w	r3, r7, #32
 800e082:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e086:	46b6      	mov	lr, r6
 800e088:	f47f af5c 	bne.w	800df44 <_vfprintf_r+0x590>
 800e08c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e08e:	f015 0210 	ands.w	r2, r5, #16
 800e092:	f040 860f 	bne.w	800ecb4 <_vfprintf_r+0x1300>
 800e096:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e098:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800e09c:	f000 860a 	beq.w	800ecb4 <_vfprintf_r+0x1300>
 800e0a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e0a2:	1d0f      	adds	r7, r1, #4
 800e0a4:	880c      	ldrh	r4, [r1, #0]
 800e0a6:	9710      	str	r7, [sp, #64]	; 0x40
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	2500      	movs	r5, #0
 800e0ac:	e754      	b.n	800df58 <_vfprintf_r+0x5a4>
 800e0ae:	bf00      	nop
 800e0b0:	08013658 	.word	0x08013658
 800e0b4:	08013668 	.word	0x08013668
 800e0b8:	0801366c 	.word	0x0801366c
 800e0bc:	08013678 	.word	0x08013678
 800e0c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e0c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0c8:	930a      	str	r3, [sp, #40]	; 0x28
 800e0ca:	4baa      	ldr	r3, [pc, #680]	; (800e374 <_vfprintf_r+0x9c0>)
 800e0cc:	f04f 0878 	mov.w	r8, #120	; 0x78
 800e0d0:	1d15      	adds	r5, r2, #4
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	f040 0702 	orr.w	r7, r0, #2
 800e0d8:	2130      	movs	r1, #48	; 0x30
 800e0da:	931a      	str	r3, [sp, #104]	; 0x68
 800e0dc:	9510      	str	r5, [sp, #64]	; 0x40
 800e0de:	46b6      	mov	lr, r6
 800e0e0:	2500      	movs	r5, #0
 800e0e2:	9709      	str	r7, [sp, #36]	; 0x24
 800e0e4:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
 800e0e8:	f88d 807d 	strb.w	r8, [sp, #125]	; 0x7d
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e0f2:	e731      	b.n	800df58 <_vfprintf_r+0x5a4>
 800e0f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e0f8:	06ac      	lsls	r4, r5, #26
 800e0fa:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e0fe:	46b6      	mov	lr, r6
 800e100:	f53f ae0d 	bmi.w	800dd1e <_vfprintf_r+0x36a>
 800e104:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e106:	06e0      	lsls	r0, r4, #27
 800e108:	f141 802d 	bpl.w	800f166 <_vfprintf_r+0x17b2>
 800e10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e112:	17d5      	asrs	r5, r2, #31
 800e114:	1d07      	adds	r7, r0, #4
 800e116:	4614      	mov	r4, r2
 800e118:	462b      	mov	r3, r5
 800e11a:	9710      	str	r7, [sp, #64]	; 0x40
 800e11c:	e609      	b.n	800dd32 <_vfprintf_r+0x37e>
 800e11e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e120:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800e124:	9009      	str	r0, [sp, #36]	; 0x24
 800e126:	f893 8000 	ldrb.w	r8, [r3]
 800e12a:	e4d4      	b.n	800dad6 <_vfprintf_r+0x122>
 800e12c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e12e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	930a      	str	r3, [sp, #40]	; 0x28
 800e134:	2401      	movs	r4, #1
 800e136:	1d0b      	adds	r3, r1, #4
 800e138:	2500      	movs	r5, #0
 800e13a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e13e:	940c      	str	r4, [sp, #48]	; 0x30
 800e140:	9310      	str	r3, [sp, #64]	; 0x40
 800e142:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e146:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800e14a:	940f      	str	r4, [sp, #60]	; 0x3c
 800e14c:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800e150:	2000      	movs	r0, #0
 800e152:	9012      	str	r0, [sp, #72]	; 0x48
 800e154:	9016      	str	r0, [sp, #88]	; 0x58
 800e156:	e61e      	b.n	800dd96 <_vfprintf_r+0x3e2>
 800e158:	4644      	mov	r4, r8
 800e15a:	930a      	str	r3, [sp, #40]	; 0x28
 800e15c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e160:	2c00      	cmp	r4, #0
 800e162:	f43f ad71 	beq.w	800dc48 <_vfprintf_r+0x294>
 800e166:	2701      	movs	r7, #1
 800e168:	2300      	movs	r3, #0
 800e16a:	f88d 80a8 	strb.w	r8, [sp, #168]	; 0xa8
 800e16e:	970c      	str	r7, [sp, #48]	; 0x30
 800e170:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800e174:	970f      	str	r7, [sp, #60]	; 0x3c
 800e176:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800e17a:	e7e9      	b.n	800e150 <_vfprintf_r+0x79c>
 800e17c:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800e180:	2c00      	cmp	r4, #0
 800e182:	f040 87fe 	bne.w	800f182 <_vfprintf_r+0x17ce>
 800e186:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 800e18a:	f893 8000 	ldrb.w	r8, [r3]
 800e18e:	e4a2      	b.n	800dad6 <_vfprintf_r+0x122>
 800e190:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e192:	f045 0501 	orr.w	r5, r5, #1
 800e196:	9509      	str	r5, [sp, #36]	; 0x24
 800e198:	f893 8000 	ldrb.w	r8, [r3]
 800e19c:	e49b      	b.n	800dad6 <_vfprintf_r+0x122>
 800e19e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a2:	06ad      	lsls	r5, r5, #26
 800e1a4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e1a8:	46b6      	mov	lr, r6
 800e1aa:	f53f aee5 	bmi.w	800df78 <_vfprintf_r+0x5c4>
 800e1ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1b0:	06cc      	lsls	r4, r1, #27
 800e1b2:	f100 84fa 	bmi.w	800ebaa <_vfprintf_r+0x11f6>
 800e1b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e1b8:	0678      	lsls	r0, r7, #25
 800e1ba:	f140 84f6 	bpl.w	800ebaa <_vfprintf_r+0x11f6>
 800e1be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1c0:	1d10      	adds	r0, r2, #4
 800e1c2:	8814      	ldrh	r4, [r2, #0]
 800e1c4:	9010      	str	r0, [sp, #64]	; 0x40
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	e6c5      	b.n	800df58 <_vfprintf_r+0x5a4>
 800e1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ce:	4f69      	ldr	r7, [pc, #420]	; (800e374 <_vfprintf_r+0x9c0>)
 800e1d0:	930a      	str	r3, [sp, #40]	; 0x28
 800e1d2:	0681      	lsls	r1, r0, #26
 800e1d4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e1d8:	46b6      	mov	lr, r6
 800e1da:	971a      	str	r7, [sp, #104]	; 0x68
 800e1dc:	f53f aee1 	bmi.w	800dfa2 <_vfprintf_r+0x5ee>
 800e1e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e1e2:	06fa      	lsls	r2, r7, #27
 800e1e4:	f140 87b4 	bpl.w	800f150 <_vfprintf_r+0x179c>
 800e1e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e1ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1f0:	1d3a      	adds	r2, r7, #4
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	07cf      	lsls	r7, r1, #31
 800e1f6:	461c      	mov	r4, r3
 800e1f8:	9210      	str	r2, [sp, #64]	; 0x40
 800e1fa:	f53f aedf 	bmi.w	800dfbc <_vfprintf_r+0x608>
 800e1fe:	2302      	movs	r3, #2
 800e200:	e6aa      	b.n	800df58 <_vfprintf_r+0x5a4>
 800e202:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e204:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e206:	6824      	ldr	r4, [r4, #0]
 800e208:	3004      	adds	r0, #4
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	940d      	str	r4, [sp, #52]	; 0x34
 800e20e:	f6ff acc6 	blt.w	800db9e <_vfprintf_r+0x1ea>
 800e212:	f893 8000 	ldrb.w	r8, [r3]
 800e216:	9010      	str	r0, [sp, #64]	; 0x40
 800e218:	e45d      	b.n	800dad6 <_vfprintf_r+0x122>
 800e21a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e21c:	4649      	mov	r1, r9
 800e21e:	4652      	mov	r2, sl
 800e220:	f004 fab6 	bl	8012790 <__sprint_r>
 800e224:	2800      	cmp	r0, #0
 800e226:	f47f ad17 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e22a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e22e:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800e232:	b1a9      	cbz	r1, 800e260 <_vfprintf_r+0x8ac>
 800e234:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e238:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e23c:	3301      	adds	r3, #1
 800e23e:	3201      	adds	r2, #1
 800e240:	2101      	movs	r1, #1
 800e242:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800e246:	2b07      	cmp	r3, #7
 800e248:	f8cb 0000 	str.w	r0, [fp]
 800e24c:	f8cb 1004 	str.w	r1, [fp, #4]
 800e250:	f8ca 2008 	str.w	r2, [sl, #8]
 800e254:	f8ca 3004 	str.w	r3, [sl, #4]
 800e258:	f300 83a3 	bgt.w	800e9a2 <_vfprintf_r+0xfee>
 800e25c:	f10b 0b08 	add.w	fp, fp, #8
 800e260:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e262:	b1a0      	cbz	r0, 800e28e <_vfprintf_r+0x8da>
 800e264:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e268:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e26c:	1c90      	adds	r0, r2, #2
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	a91f      	add	r1, sp, #124	; 0x7c
 800e272:	2302      	movs	r3, #2
 800e274:	2a07      	cmp	r2, #7
 800e276:	f8cb 1000 	str.w	r1, [fp]
 800e27a:	f8cb 3004 	str.w	r3, [fp, #4]
 800e27e:	f8ca 0008 	str.w	r0, [sl, #8]
 800e282:	f8ca 2004 	str.w	r2, [sl, #4]
 800e286:	f300 8381 	bgt.w	800e98c <_vfprintf_r+0xfd8>
 800e28a:	f10b 0b08 	add.w	fp, fp, #8
 800e28e:	2f80      	cmp	r7, #128	; 0x80
 800e290:	f000 8258 	beq.w	800e744 <_vfprintf_r+0xd90>
 800e294:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e296:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e298:	1b2c      	subs	r4, r5, r4
 800e29a:	2c00      	cmp	r4, #0
 800e29c:	f340 808e 	ble.w	800e3bc <_vfprintf_r+0xa08>
 800e2a0:	2c10      	cmp	r4, #16
 800e2a2:	f340 8787 	ble.w	800f1b4 <_vfprintf_r+0x1800>
 800e2a6:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e2aa:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e2ae:	4d32      	ldr	r5, [pc, #200]	; (800e378 <_vfprintf_r+0x9c4>)
 800e2b0:	2610      	movs	r6, #16
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	f1a4 0711 	sub.w	r7, r4, #17
 800e2b8:	198a      	adds	r2, r1, r6
 800e2ba:	2b07      	cmp	r3, #7
 800e2bc:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e2c0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e2c4:	f8ca 2008 	str.w	r2, [sl, #8]
 800e2c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e2cc:	f300 833d 	bgt.w	800e94a <_vfprintf_r+0xf96>
 800e2d0:	f10b 0b08 	add.w	fp, fp, #8
 800e2d4:	3c10      	subs	r4, #16
 800e2d6:	2c10      	cmp	r4, #16
 800e2d8:	dd5d      	ble.n	800e396 <_vfprintf_r+0x9e2>
 800e2da:	b1af      	cbz	r7, 800e308 <_vfprintf_r+0x954>
 800e2dc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e2e0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e2e4:	f8cb 5000 	str.w	r5, [fp]
 800e2e8:	1c42      	adds	r2, r0, #1
 800e2ea:	3110      	adds	r1, #16
 800e2ec:	2a07      	cmp	r2, #7
 800e2ee:	f8cb 6004 	str.w	r6, [fp, #4]
 800e2f2:	f8ca 1008 	str.w	r1, [sl, #8]
 800e2f6:	f8ca 2004 	str.w	r2, [sl, #4]
 800e2fa:	f300 8331 	bgt.w	800e960 <_vfprintf_r+0xfac>
 800e2fe:	f10b 0b08 	add.w	fp, fp, #8
 800e302:	3c10      	subs	r4, #16
 800e304:	2c10      	cmp	r4, #16
 800e306:	dd46      	ble.n	800e396 <_vfprintf_r+0x9e2>
 800e308:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e30a:	e017      	b.n	800e33c <_vfprintf_r+0x988>
 800e30c:	f10b 0b08 	add.w	fp, fp, #8
 800e310:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e314:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e318:	f8cb 5000 	str.w	r5, [fp]
 800e31c:	1c4b      	adds	r3, r1, #1
 800e31e:	3210      	adds	r2, #16
 800e320:	3c10      	subs	r4, #16
 800e322:	2b07      	cmp	r3, #7
 800e324:	f8cb 6004 	str.w	r6, [fp, #4]
 800e328:	f8ca 2008 	str.w	r2, [sl, #8]
 800e32c:	f8ca 3004 	str.w	r3, [sl, #4]
 800e330:	dc24      	bgt.n	800e37c <_vfprintf_r+0x9c8>
 800e332:	3c10      	subs	r4, #16
 800e334:	2c10      	cmp	r4, #16
 800e336:	f10b 0b08 	add.w	fp, fp, #8
 800e33a:	dd2c      	ble.n	800e396 <_vfprintf_r+0x9e2>
 800e33c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e340:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e344:	f8cb 5000 	str.w	r5, [fp]
 800e348:	1c58      	adds	r0, r3, #1
 800e34a:	3110      	adds	r1, #16
 800e34c:	2807      	cmp	r0, #7
 800e34e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e352:	f8ca 1008 	str.w	r1, [sl, #8]
 800e356:	f8ca 0004 	str.w	r0, [sl, #4]
 800e35a:	ddd7      	ble.n	800e30c <_vfprintf_r+0x958>
 800e35c:	4638      	mov	r0, r7
 800e35e:	4649      	mov	r1, r9
 800e360:	4652      	mov	r2, sl
 800e362:	f004 fa15 	bl	8012790 <__sprint_r>
 800e366:	2800      	cmp	r0, #0
 800e368:	f47f ac76 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e36c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e370:	e7ce      	b.n	800e310 <_vfprintf_r+0x95c>
 800e372:	bf00      	nop
 800e374:	0801368c 	.word	0x0801368c
 800e378:	080136ac 	.word	0x080136ac
 800e37c:	4638      	mov	r0, r7
 800e37e:	4649      	mov	r1, r9
 800e380:	4652      	mov	r2, sl
 800e382:	f004 fa05 	bl	8012790 <__sprint_r>
 800e386:	2800      	cmp	r0, #0
 800e388:	f47f ac66 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e38c:	3c10      	subs	r4, #16
 800e38e:	2c10      	cmp	r4, #16
 800e390:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e394:	dcd2      	bgt.n	800e33c <_vfprintf_r+0x988>
 800e396:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e39a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e39e:	f8cb 5000 	str.w	r5, [fp]
 800e3a2:	1c4b      	adds	r3, r1, #1
 800e3a4:	1902      	adds	r2, r0, r4
 800e3a6:	2b07      	cmp	r3, #7
 800e3a8:	f8cb 4004 	str.w	r4, [fp, #4]
 800e3ac:	f8ca 2008 	str.w	r2, [sl, #8]
 800e3b0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3b4:	f300 82df 	bgt.w	800e976 <_vfprintf_r+0xfc2>
 800e3b8:	f10b 0b08 	add.w	fp, fp, #8
 800e3bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e3be:	05e2      	lsls	r2, r4, #23
 800e3c0:	f100 8109 	bmi.w	800e5d6 <_vfprintf_r+0xc22>
 800e3c4:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e3c8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e3cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3ce:	f8cb 8000 	str.w	r8, [fp]
 800e3d2:	1c43      	adds	r3, r0, #1
 800e3d4:	194a      	adds	r2, r1, r5
 800e3d6:	2b07      	cmp	r3, #7
 800e3d8:	f8cb 5004 	str.w	r5, [fp, #4]
 800e3dc:	f8ca 2008 	str.w	r2, [sl, #8]
 800e3e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3e4:	f300 829c 	bgt.w	800e920 <_vfprintf_r+0xf6c>
 800e3e8:	f10b 0b08 	add.w	fp, fp, #8
 800e3ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e3ee:	076b      	lsls	r3, r5, #29
 800e3f0:	f140 80b8 	bpl.w	800e564 <_vfprintf_r+0xbb0>
 800e3f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e3f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e3f8:	1a64      	subs	r4, r4, r1
 800e3fa:	2c00      	cmp	r4, #0
 800e3fc:	f340 80b2 	ble.w	800e564 <_vfprintf_r+0xbb0>
 800e400:	2c10      	cmp	r4, #16
 800e402:	f341 80b0 	ble.w	800f566 <_vfprintf_r+0x1bb2>
 800e406:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e40a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e40e:	4dca      	ldr	r5, [pc, #808]	; (800e738 <_vfprintf_r+0xd84>)
 800e410:	2610      	movs	r6, #16
 800e412:	1c59      	adds	r1, r3, #1
 800e414:	f1a4 0711 	sub.w	r7, r4, #17
 800e418:	1982      	adds	r2, r0, r6
 800e41a:	2907      	cmp	r1, #7
 800e41c:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e420:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e424:	f8ca 2008 	str.w	r2, [sl, #8]
 800e428:	f8ca 1004 	str.w	r1, [sl, #4]
 800e42c:	f300 845e 	bgt.w	800ecec <_vfprintf_r+0x1338>
 800e430:	f10b 0b08 	add.w	fp, fp, #8
 800e434:	3c10      	subs	r4, #16
 800e436:	2c10      	cmp	r4, #16
 800e438:	dd7c      	ble.n	800e534 <_vfprintf_r+0xb80>
 800e43a:	b1af      	cbz	r7, 800e468 <_vfprintf_r+0xab4>
 800e43c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e440:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e444:	f8cb 5000 	str.w	r5, [fp]
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	3010      	adds	r0, #16
 800e44c:	2a07      	cmp	r2, #7
 800e44e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e452:	f8ca 0008 	str.w	r0, [sl, #8]
 800e456:	f8ca 2004 	str.w	r2, [sl, #4]
 800e45a:	f300 8453 	bgt.w	800ed04 <_vfprintf_r+0x1350>
 800e45e:	f10b 0b08 	add.w	fp, fp, #8
 800e462:	3c10      	subs	r4, #16
 800e464:	2c10      	cmp	r4, #16
 800e466:	dd65      	ble.n	800e534 <_vfprintf_r+0xb80>
 800e468:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e46a:	e017      	b.n	800e49c <_vfprintf_r+0xae8>
 800e46c:	f10b 0b08 	add.w	fp, fp, #8
 800e470:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e474:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e478:	f8cb 5000 	str.w	r5, [fp]
 800e47c:	1c48      	adds	r0, r1, #1
 800e47e:	3210      	adds	r2, #16
 800e480:	3c10      	subs	r4, #16
 800e482:	2807      	cmp	r0, #7
 800e484:	f8cb 6004 	str.w	r6, [fp, #4]
 800e488:	f8ca 2008 	str.w	r2, [sl, #8]
 800e48c:	f8ca 0004 	str.w	r0, [sl, #4]
 800e490:	dc43      	bgt.n	800e51a <_vfprintf_r+0xb66>
 800e492:	3c10      	subs	r4, #16
 800e494:	2c10      	cmp	r4, #16
 800e496:	f10b 0b08 	add.w	fp, fp, #8
 800e49a:	dd4b      	ble.n	800e534 <_vfprintf_r+0xb80>
 800e49c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e4a0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e4a4:	f8cb 5000 	str.w	r5, [fp]
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	3110      	adds	r1, #16
 800e4ac:	2b07      	cmp	r3, #7
 800e4ae:	f8cb 6004 	str.w	r6, [fp, #4]
 800e4b2:	f8ca 1008 	str.w	r1, [sl, #8]
 800e4b6:	f8ca 3004 	str.w	r3, [sl, #4]
 800e4ba:	ddd7      	ble.n	800e46c <_vfprintf_r+0xab8>
 800e4bc:	4638      	mov	r0, r7
 800e4be:	4649      	mov	r1, r9
 800e4c0:	4652      	mov	r2, sl
 800e4c2:	f004 f965 	bl	8012790 <__sprint_r>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f47f abc6 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e4cc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e4d0:	e7ce      	b.n	800e470 <_vfprintf_r+0xabc>
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	4649      	mov	r1, r9
 800e4d6:	4652      	mov	r2, sl
 800e4d8:	f004 f95a 	bl	8012790 <__sprint_r>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	f47f abbb 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e4e2:	3c10      	subs	r4, #16
 800e4e4:	2c10      	cmp	r4, #16
 800e4e6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e4ea:	f73f acbb 	bgt.w	800de64 <_vfprintf_r+0x4b0>
 800e4ee:	463d      	mov	r5, r7
 800e4f0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800e4f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e4f6:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e4fa:	f8cb 5000 	str.w	r5, [fp]
 800e4fe:	1c58      	adds	r0, r3, #1
 800e500:	190a      	adds	r2, r1, r4
 800e502:	2807      	cmp	r0, #7
 800e504:	f8cb 4004 	str.w	r4, [fp, #4]
 800e508:	f8ca 2008 	str.w	r2, [sl, #8]
 800e50c:	f8ca 0004 	str.w	r0, [sl, #4]
 800e510:	f73f ae83 	bgt.w	800e21a <_vfprintf_r+0x866>
 800e514:	f10b 0b08 	add.w	fp, fp, #8
 800e518:	e689      	b.n	800e22e <_vfprintf_r+0x87a>
 800e51a:	4638      	mov	r0, r7
 800e51c:	4649      	mov	r1, r9
 800e51e:	4652      	mov	r2, sl
 800e520:	f004 f936 	bl	8012790 <__sprint_r>
 800e524:	2800      	cmp	r0, #0
 800e526:	f47f ab97 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e52a:	3c10      	subs	r4, #16
 800e52c:	2c10      	cmp	r4, #16
 800e52e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e532:	dcb3      	bgt.n	800e49c <_vfprintf_r+0xae8>
 800e534:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e538:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e53c:	f8cb 5000 	str.w	r5, [fp]
 800e540:	1c51      	adds	r1, r2, #1
 800e542:	18e3      	adds	r3, r4, r3
 800e544:	2907      	cmp	r1, #7
 800e546:	f8cb 4004 	str.w	r4, [fp, #4]
 800e54a:	f8ca 3008 	str.w	r3, [sl, #8]
 800e54e:	f8ca 1004 	str.w	r1, [sl, #4]
 800e552:	dd09      	ble.n	800e568 <_vfprintf_r+0xbb4>
 800e554:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e556:	4649      	mov	r1, r9
 800e558:	4652      	mov	r2, sl
 800e55a:	f004 f919 	bl	8012790 <__sprint_r>
 800e55e:	2800      	cmp	r0, #0
 800e560:	f47f ab7a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e564:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e568:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e56a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e56c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e56e:	42a8      	cmp	r0, r5
 800e570:	bfac      	ite	ge
 800e572:	1824      	addge	r4, r4, r0
 800e574:	1964      	addlt	r4, r4, r5
 800e576:	940e      	str	r4, [sp, #56]	; 0x38
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f040 81dc 	bne.w	800e936 <_vfprintf_r+0xf82>
 800e57e:	2500      	movs	r5, #0
 800e580:	f8ca 5004 	str.w	r5, [sl, #4]
 800e584:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e588:	f7ff ba66 	b.w	800da58 <_vfprintf_r+0xa4>
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	f000 8239 	beq.w	800ea04 <_vfprintf_r+0x1050>
 800e592:	2b02      	cmp	r3, #2
 800e594:	f000 8216 	beq.w	800e9c4 <_vfprintf_r+0x1010>
 800e598:	f10d 06cf 	add.w	r6, sp, #207	; 0xcf
 800e59c:	2307      	movs	r3, #7
 800e59e:	08e2      	lsrs	r2, r4, #3
 800e5a0:	ea42 7745 	orr.w	r7, r2, r5, lsl #29
 800e5a4:	ea04 0003 	and.w	r0, r4, r3
 800e5a8:	08e9      	lsrs	r1, r5, #3
 800e5aa:	3030      	adds	r0, #48	; 0x30
 800e5ac:	463c      	mov	r4, r7
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	b2c2      	uxtb	r2, r0
 800e5b2:	ea54 0105 	orrs.w	r1, r4, r5
 800e5b6:	46b0      	mov	r8, r6
 800e5b8:	7032      	strb	r2, [r6, #0]
 800e5ba:	f106 36ff 	add.w	r6, r6, #4294967295
 800e5be:	d1ee      	bne.n	800e59e <_vfprintf_r+0xbea>
 800e5c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e5c2:	07e4      	lsls	r4, r4, #31
 800e5c4:	4645      	mov	r5, r8
 800e5c6:	f100 83a9 	bmi.w	800ed1c <_vfprintf_r+0x1368>
 800e5ca:	9b07      	ldr	r3, [sp, #28]
 800e5cc:	ebc8 0003 	rsb	r0, r8, r3
 800e5d0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e5d2:	f7ff bbd1 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800e5d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800e5d8:	2c65      	cmp	r4, #101	; 0x65
 800e5da:	f340 8143 	ble.w	800e864 <_vfprintf_r+0xeb0>
 800e5de:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f7fd fb0d 	bl	800bc04 <__aeabi_dcmpeq>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f000 8240 	beq.w	800ea70 <_vfprintf_r+0x10bc>
 800e5f0:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e5f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e5f8:	4950      	ldr	r1, [pc, #320]	; (800e73c <_vfprintf_r+0xd88>)
 800e5fa:	1c50      	adds	r0, r2, #1
 800e5fc:	1c5a      	adds	r2, r3, #1
 800e5fe:	2301      	movs	r3, #1
 800e600:	2a07      	cmp	r2, #7
 800e602:	f8cb 1000 	str.w	r1, [fp]
 800e606:	f8cb 3004 	str.w	r3, [fp, #4]
 800e60a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e60e:	f8ca 2004 	str.w	r2, [sl, #4]
 800e612:	f300 85d2 	bgt.w	800f1ba <_vfprintf_r+0x1806>
 800e616:	f10b 0b08 	add.w	fp, fp, #8
 800e61a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e61c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e61e:	42ac      	cmp	r4, r5
 800e620:	db03      	blt.n	800e62a <_vfprintf_r+0xc76>
 800e622:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e624:	07c3      	lsls	r3, r0, #31
 800e626:	f57f aee1 	bpl.w	800e3ec <_vfprintf_r+0xa38>
 800e62a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e62e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e632:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e634:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e636:	f8cb 4004 	str.w	r4, [fp, #4]
 800e63a:	1c4b      	adds	r3, r1, #1
 800e63c:	18a0      	adds	r0, r4, r2
 800e63e:	2b07      	cmp	r3, #7
 800e640:	f8cb 5000 	str.w	r5, [fp]
 800e644:	f8ca 0008 	str.w	r0, [sl, #8]
 800e648:	f8ca 3004 	str.w	r3, [sl, #4]
 800e64c:	f300 86b6 	bgt.w	800f3bc <_vfprintf_r+0x1a08>
 800e650:	f10b 0b08 	add.w	fp, fp, #8
 800e654:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e656:	3c01      	subs	r4, #1
 800e658:	2c00      	cmp	r4, #0
 800e65a:	f77f aec7 	ble.w	800e3ec <_vfprintf_r+0xa38>
 800e65e:	2c10      	cmp	r4, #16
 800e660:	f340 8331 	ble.w	800ecc6 <_vfprintf_r+0x1312>
 800e664:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e668:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e66c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800e66e:	4d34      	ldr	r5, [pc, #208]	; (800e740 <_vfprintf_r+0xd8c>)
 800e670:	2610      	movs	r6, #16
 800e672:	1c4b      	adds	r3, r1, #1
 800e674:	3f12      	subs	r7, #18
 800e676:	1990      	adds	r0, r2, r6
 800e678:	2b07      	cmp	r3, #7
 800e67a:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e67e:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e682:	f8ca 0008 	str.w	r0, [sl, #8]
 800e686:	f8ca 3004 	str.w	r3, [sl, #4]
 800e68a:	f300 86f6 	bgt.w	800f47a <_vfprintf_r+0x1ac6>
 800e68e:	f10b 0b08 	add.w	fp, fp, #8
 800e692:	3c10      	subs	r4, #16
 800e694:	2c10      	cmp	r4, #16
 800e696:	f340 8317 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800e69a:	b1b7      	cbz	r7, 800e6ca <_vfprintf_r+0xd16>
 800e69c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e6a0:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e6a4:	f8cb 5000 	str.w	r5, [fp]
 800e6a8:	1c48      	adds	r0, r1, #1
 800e6aa:	3210      	adds	r2, #16
 800e6ac:	2807      	cmp	r0, #7
 800e6ae:	f8cb 6004 	str.w	r6, [fp, #4]
 800e6b2:	f8ca 2008 	str.w	r2, [sl, #8]
 800e6b6:	f8ca 0004 	str.w	r0, [sl, #4]
 800e6ba:	f300 86f5 	bgt.w	800f4a8 <_vfprintf_r+0x1af4>
 800e6be:	f10b 0b08 	add.w	fp, fp, #8
 800e6c2:	3c10      	subs	r4, #16
 800e6c4:	2c10      	cmp	r4, #16
 800e6c6:	f340 82ff 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800e6ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e6cc:	e019      	b.n	800e702 <_vfprintf_r+0xd4e>
 800e6ce:	f10b 0b08 	add.w	fp, fp, #8
 800e6d2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e6d6:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e6da:	f8cb 5000 	str.w	r5, [fp]
 800e6de:	1c53      	adds	r3, r2, #1
 800e6e0:	3010      	adds	r0, #16
 800e6e2:	3c10      	subs	r4, #16
 800e6e4:	2b07      	cmp	r3, #7
 800e6e6:	f8cb 6004 	str.w	r6, [fp, #4]
 800e6ea:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6ee:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6f2:	f300 8195 	bgt.w	800ea20 <_vfprintf_r+0x106c>
 800e6f6:	f10b 0b08 	add.w	fp, fp, #8
 800e6fa:	3c10      	subs	r4, #16
 800e6fc:	2c10      	cmp	r4, #16
 800e6fe:	f340 82e3 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800e702:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e706:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e70a:	f8cb 5000 	str.w	r5, [fp]
 800e70e:	1c59      	adds	r1, r3, #1
 800e710:	3210      	adds	r2, #16
 800e712:	2907      	cmp	r1, #7
 800e714:	f8cb 6004 	str.w	r6, [fp, #4]
 800e718:	f8ca 2008 	str.w	r2, [sl, #8]
 800e71c:	f8ca 1004 	str.w	r1, [sl, #4]
 800e720:	ddd5      	ble.n	800e6ce <_vfprintf_r+0xd1a>
 800e722:	4638      	mov	r0, r7
 800e724:	4649      	mov	r1, r9
 800e726:	4652      	mov	r2, sl
 800e728:	f004 f832 	bl	8012790 <__sprint_r>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	f47f aa93 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e732:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e736:	e7cc      	b.n	800e6d2 <_vfprintf_r+0xd1e>
 800e738:	08013658 	.word	0x08013658
 800e73c:	080136a8 	.word	0x080136a8
 800e740:	080136ac 	.word	0x080136ac
 800e744:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e746:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e748:	1b2c      	subs	r4, r5, r4
 800e74a:	2c00      	cmp	r4, #0
 800e74c:	f77f ada2 	ble.w	800e294 <_vfprintf_r+0x8e0>
 800e750:	2c10      	cmp	r4, #16
 800e752:	f340 875e 	ble.w	800f612 <_vfprintf_r+0x1c5e>
 800e756:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e75a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e75e:	4dc3      	ldr	r5, [pc, #780]	; (800ea6c <_vfprintf_r+0x10b8>)
 800e760:	2610      	movs	r6, #16
 800e762:	1c4b      	adds	r3, r1, #1
 800e764:	f1a4 0711 	sub.w	r7, r4, #17
 800e768:	1982      	adds	r2, r0, r6
 800e76a:	2b07      	cmp	r3, #7
 800e76c:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e770:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e774:	f8ca 2008 	str.w	r2, [sl, #8]
 800e778:	f8ca 3004 	str.w	r3, [sl, #4]
 800e77c:	f300 83c0 	bgt.w	800ef00 <_vfprintf_r+0x154c>
 800e780:	f10b 0b08 	add.w	fp, fp, #8
 800e784:	3c10      	subs	r4, #16
 800e786:	2c10      	cmp	r4, #16
 800e788:	dd58      	ble.n	800e83c <_vfprintf_r+0xe88>
 800e78a:	b1af      	cbz	r7, 800e7b8 <_vfprintf_r+0xe04>
 800e78c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e790:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e794:	f8cb 5000 	str.w	r5, [fp]
 800e798:	1c4a      	adds	r2, r1, #1
 800e79a:	3010      	adds	r0, #16
 800e79c:	2a07      	cmp	r2, #7
 800e79e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e7a2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e7a6:	f8ca 2004 	str.w	r2, [sl, #4]
 800e7aa:	f300 83b4 	bgt.w	800ef16 <_vfprintf_r+0x1562>
 800e7ae:	f10b 0b08 	add.w	fp, fp, #8
 800e7b2:	3c10      	subs	r4, #16
 800e7b4:	2c10      	cmp	r4, #16
 800e7b6:	dd41      	ble.n	800e83c <_vfprintf_r+0xe88>
 800e7b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e7ba:	e017      	b.n	800e7ec <_vfprintf_r+0xe38>
 800e7bc:	f10b 0b08 	add.w	fp, fp, #8
 800e7c0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e7c4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e7c8:	f8cb 5000 	str.w	r5, [fp]
 800e7cc:	1c43      	adds	r3, r0, #1
 800e7ce:	3210      	adds	r2, #16
 800e7d0:	3c10      	subs	r4, #16
 800e7d2:	2b07      	cmp	r3, #7
 800e7d4:	f8cb 6004 	str.w	r6, [fp, #4]
 800e7d8:	f8ca 2008 	str.w	r2, [sl, #8]
 800e7dc:	f8ca 3004 	str.w	r3, [sl, #4]
 800e7e0:	dc1f      	bgt.n	800e822 <_vfprintf_r+0xe6e>
 800e7e2:	3c10      	subs	r4, #16
 800e7e4:	2c10      	cmp	r4, #16
 800e7e6:	f10b 0b08 	add.w	fp, fp, #8
 800e7ea:	dd27      	ble.n	800e83c <_vfprintf_r+0xe88>
 800e7ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e7f0:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e7f4:	f8cb 5000 	str.w	r5, [fp]
 800e7f8:	1c59      	adds	r1, r3, #1
 800e7fa:	3010      	adds	r0, #16
 800e7fc:	2907      	cmp	r1, #7
 800e7fe:	f8cb 6004 	str.w	r6, [fp, #4]
 800e802:	f8ca 0008 	str.w	r0, [sl, #8]
 800e806:	f8ca 1004 	str.w	r1, [sl, #4]
 800e80a:	ddd7      	ble.n	800e7bc <_vfprintf_r+0xe08>
 800e80c:	4638      	mov	r0, r7
 800e80e:	4649      	mov	r1, r9
 800e810:	4652      	mov	r2, sl
 800e812:	f003 ffbd 	bl	8012790 <__sprint_r>
 800e816:	2800      	cmp	r0, #0
 800e818:	f47f aa1e 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e81c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e820:	e7ce      	b.n	800e7c0 <_vfprintf_r+0xe0c>
 800e822:	4638      	mov	r0, r7
 800e824:	4649      	mov	r1, r9
 800e826:	4652      	mov	r2, sl
 800e828:	f003 ffb2 	bl	8012790 <__sprint_r>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	f47f aa13 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e832:	3c10      	subs	r4, #16
 800e834:	2c10      	cmp	r4, #16
 800e836:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e83a:	dcd7      	bgt.n	800e7ec <_vfprintf_r+0xe38>
 800e83c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e840:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e844:	f8cb 5000 	str.w	r5, [fp]
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	190a      	adds	r2, r1, r4
 800e84c:	2b07      	cmp	r3, #7
 800e84e:	f8cb 4004 	str.w	r4, [fp, #4]
 800e852:	f8ca 2008 	str.w	r2, [sl, #8]
 800e856:	f8ca 3004 	str.w	r3, [sl, #4]
 800e85a:	f300 83ad 	bgt.w	800efb8 <_vfprintf_r+0x1604>
 800e85e:	f10b 0b08 	add.w	fp, fp, #8
 800e862:	e517      	b.n	800e294 <_vfprintf_r+0x8e0>
 800e864:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e866:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e86a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e86e:	2d01      	cmp	r5, #1
 800e870:	f340 835c 	ble.w	800ef2c <_vfprintf_r+0x1578>
 800e874:	3301      	adds	r3, #1
 800e876:	1c42      	adds	r2, r0, #1
 800e878:	2001      	movs	r0, #1
 800e87a:	2b07      	cmp	r3, #7
 800e87c:	f8cb 8000 	str.w	r8, [fp]
 800e880:	f8cb 0004 	str.w	r0, [fp, #4]
 800e884:	f8ca 2008 	str.w	r2, [sl, #8]
 800e888:	f8ca 3004 	str.w	r3, [sl, #4]
 800e88c:	f300 836b 	bgt.w	800ef66 <_vfprintf_r+0x15b2>
 800e890:	f10b 0b08 	add.w	fp, fp, #8
 800e894:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e898:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e89c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e89e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e8a0:	f8cb 4004 	str.w	r4, [fp, #4]
 800e8a4:	1c58      	adds	r0, r3, #1
 800e8a6:	1862      	adds	r2, r4, r1
 800e8a8:	2807      	cmp	r0, #7
 800e8aa:	f8cb 5000 	str.w	r5, [fp]
 800e8ae:	f8ca 2008 	str.w	r2, [sl, #8]
 800e8b2:	f8ca 0004 	str.w	r0, [sl, #4]
 800e8b6:	f300 8374 	bgt.w	800efa2 <_vfprintf_r+0x15ee>
 800e8ba:	f10b 0b08 	add.w	fp, fp, #8
 800e8be:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f7fd f99d 	bl	800bc04 <__aeabi_dcmpeq>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f040 8176 	bne.w	800ebbc <_vfprintf_r+0x1208>
 800e8d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e8d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e8d6:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e8da:	1e6a      	subs	r2, r5, #1
 800e8dc:	3301      	adds	r3, #1
 800e8de:	f108 0001 	add.w	r0, r8, #1
 800e8e2:	1851      	adds	r1, r2, r1
 800e8e4:	2b07      	cmp	r3, #7
 800e8e6:	e88b 0005 	stmia.w	fp, {r0, r2}
 800e8ea:	f8ca 1008 	str.w	r1, [sl, #8]
 800e8ee:	f8ca 3004 	str.w	r3, [sl, #4]
 800e8f2:	f300 832d 	bgt.w	800ef50 <_vfprintf_r+0x159c>
 800e8f6:	f10b 0b08 	add.w	fp, fp, #8
 800e8fa:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e8fe:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e902:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	1912      	adds	r2, r2, r4
 800e908:	a923      	add	r1, sp, #140	; 0x8c
 800e90a:	2b07      	cmp	r3, #7
 800e90c:	f8cb 4004 	str.w	r4, [fp, #4]
 800e910:	f8cb 1000 	str.w	r1, [fp]
 800e914:	f8ca 2008 	str.w	r2, [sl, #8]
 800e918:	f8ca 3004 	str.w	r3, [sl, #4]
 800e91c:	f77f ad64 	ble.w	800e3e8 <_vfprintf_r+0xa34>
 800e920:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e922:	4649      	mov	r1, r9
 800e924:	4652      	mov	r2, sl
 800e926:	f003 ff33 	bl	8012790 <__sprint_r>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	f47f a994 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e930:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e934:	e55a      	b.n	800e3ec <_vfprintf_r+0xa38>
 800e936:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e938:	4649      	mov	r1, r9
 800e93a:	4652      	mov	r2, sl
 800e93c:	f003 ff28 	bl	8012790 <__sprint_r>
 800e940:	2800      	cmp	r0, #0
 800e942:	f43f ae1c 	beq.w	800e57e <_vfprintf_r+0xbca>
 800e946:	f7ff b987 	b.w	800dc58 <_vfprintf_r+0x2a4>
 800e94a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e94c:	4649      	mov	r1, r9
 800e94e:	4652      	mov	r2, sl
 800e950:	f003 ff1e 	bl	8012790 <__sprint_r>
 800e954:	2800      	cmp	r0, #0
 800e956:	f47f a97f 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e95a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e95e:	e4b9      	b.n	800e2d4 <_vfprintf_r+0x920>
 800e960:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e962:	4649      	mov	r1, r9
 800e964:	4652      	mov	r2, sl
 800e966:	f003 ff13 	bl	8012790 <__sprint_r>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	f47f a974 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e970:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e974:	e4c5      	b.n	800e302 <_vfprintf_r+0x94e>
 800e976:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e978:	4649      	mov	r1, r9
 800e97a:	4652      	mov	r2, sl
 800e97c:	f003 ff08 	bl	8012790 <__sprint_r>
 800e980:	2800      	cmp	r0, #0
 800e982:	f47f a969 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e986:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e98a:	e517      	b.n	800e3bc <_vfprintf_r+0xa08>
 800e98c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e98e:	4649      	mov	r1, r9
 800e990:	4652      	mov	r2, sl
 800e992:	f003 fefd 	bl	8012790 <__sprint_r>
 800e996:	2800      	cmp	r0, #0
 800e998:	f47f a95e 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e99c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e9a0:	e475      	b.n	800e28e <_vfprintf_r+0x8da>
 800e9a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	4652      	mov	r2, sl
 800e9a8:	f003 fef2 	bl	8012790 <__sprint_r>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f47f a953 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800e9b2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e9b6:	e453      	b.n	800e260 <_vfprintf_r+0x8ac>
 800e9b8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800e9bc:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 800e9c0:	f7ff b9da 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800e9c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e9c6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800e9ca:	f10d 01cf 	add.w	r1, sp, #207	; 0xcf
 800e9ce:	260f      	movs	r6, #15
 800e9d0:	ea04 0306 	and.w	r3, r4, r6
 800e9d4:	18c7      	adds	r7, r0, r3
 800e9d6:	0924      	lsrs	r4, r4, #4
 800e9d8:	ea44 7c05 	orr.w	ip, r4, r5, lsl #28
 800e9dc:	092a      	lsrs	r2, r5, #4
 800e9de:	4688      	mov	r8, r1
 800e9e0:	4664      	mov	r4, ip
 800e9e2:	7839      	ldrb	r1, [r7, #0]
 800e9e4:	4615      	mov	r5, r2
 800e9e6:	ea54 0205 	orrs.w	r2, r4, r5
 800e9ea:	f888 1000 	strb.w	r1, [r8]
 800e9ee:	f108 31ff 	add.w	r1, r8, #4294967295
 800e9f2:	d1ed      	bne.n	800e9d0 <_vfprintf_r+0x101c>
 800e9f4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800e9f8:	9d07      	ldr	r5, [sp, #28]
 800e9fa:	ebc8 0005 	rsb	r0, r8, r5
 800e9fe:	900f      	str	r0, [sp, #60]	; 0x3c
 800ea00:	f7ff b9ba 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800ea04:	2d00      	cmp	r5, #0
 800ea06:	bf08      	it	eq
 800ea08:	2c0a      	cmpeq	r4, #10
 800ea0a:	f080 8193 	bcs.w	800ed34 <_vfprintf_r+0x1380>
 800ea0e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ea10:	3430      	adds	r4, #48	; 0x30
 800ea12:	f88d 40cf 	strb.w	r4, [sp, #207]	; 0xcf
 800ea16:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea18:	f10d 08cf 	add.w	r8, sp, #207	; 0xcf
 800ea1c:	f7ff b9ac 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800ea20:	4638      	mov	r0, r7
 800ea22:	4649      	mov	r1, r9
 800ea24:	4652      	mov	r2, sl
 800ea26:	f003 feb3 	bl	8012790 <__sprint_r>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f47f a914 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ea30:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ea34:	e661      	b.n	800e6fa <_vfprintf_r+0xd46>
 800ea36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ea38:	9306      	str	r3, [sp, #24]
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4652      	mov	r2, sl
 800ea3e:	f003 fea7 	bl	8012790 <__sprint_r>
 800ea42:	9b06      	ldr	r3, [sp, #24]
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f47f a907 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ea4a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ea4e:	f7ff b9cf 	b.w	800ddf0 <_vfprintf_r+0x43c>
 800ea52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ea54:	4649      	mov	r1, r9
 800ea56:	4652      	mov	r2, sl
 800ea58:	f003 fe9a 	bl	8012790 <__sprint_r>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	f47f a8fb 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ea62:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ea66:	f7ff b9db 	b.w	800de20 <_vfprintf_r+0x46c>
 800ea6a:	bf00      	nop
 800ea6c:	080136ac 	.word	0x080136ac
 800ea70:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800ea72:	2c00      	cmp	r4, #0
 800ea74:	f340 83ad 	ble.w	800f1d2 <_vfprintf_r+0x181e>
 800ea78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ea7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ea7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ea7e:	42ac      	cmp	r4, r5
 800ea80:	bfa8      	it	ge
 800ea82:	462c      	movge	r4, r5
 800ea84:	2c00      	cmp	r4, #0
 800ea86:	eb08 0500 	add.w	r5, r8, r0
 800ea8a:	950f      	str	r5, [sp, #60]	; 0x3c
 800ea8c:	dd12      	ble.n	800eab4 <_vfprintf_r+0x1100>
 800ea8e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ea92:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ea96:	f8cb 8000 	str.w	r8, [fp]
 800ea9a:	1c58      	adds	r0, r3, #1
 800ea9c:	1911      	adds	r1, r2, r4
 800ea9e:	2807      	cmp	r0, #7
 800eaa0:	f8cb 4004 	str.w	r4, [fp, #4]
 800eaa4:	f8ca 1008 	str.w	r1, [sl, #8]
 800eaa8:	f8ca 0004 	str.w	r0, [sl, #4]
 800eaac:	f300 84d9 	bgt.w	800f462 <_vfprintf_r+0x1aae>
 800eab0:	f10b 0b08 	add.w	fp, fp, #8
 800eab4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800eab6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800eaba:	1b2c      	subs	r4, r5, r4
 800eabc:	2c00      	cmp	r4, #0
 800eabe:	f340 8165 	ble.w	800ed8c <_vfprintf_r+0x13d8>
 800eac2:	2c10      	cmp	r4, #16
 800eac4:	f340 8361 	ble.w	800f18a <_vfprintf_r+0x17d6>
 800eac8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eacc:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ead0:	4da8      	ldr	r5, [pc, #672]	; (800ed74 <_vfprintf_r+0x13c0>)
 800ead2:	2610      	movs	r6, #16
 800ead4:	1c58      	adds	r0, r3, #1
 800ead6:	f1a4 0711 	sub.w	r7, r4, #17
 800eada:	1991      	adds	r1, r2, r6
 800eadc:	2807      	cmp	r0, #7
 800eade:	e88b 0060 	stmia.w	fp, {r5, r6}
 800eae2:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800eae6:	f8ca 1008 	str.w	r1, [sl, #8]
 800eaea:	f8ca 0004 	str.w	r0, [sl, #4]
 800eaee:	f300 84ac 	bgt.w	800f44a <_vfprintf_r+0x1a96>
 800eaf2:	f10b 0b08 	add.w	fp, fp, #8
 800eaf6:	3c10      	subs	r4, #16
 800eaf8:	2c10      	cmp	r4, #16
 800eafa:	f340 8347 	ble.w	800f18c <_vfprintf_r+0x17d8>
 800eafe:	b1b7      	cbz	r7, 800eb2e <_vfprintf_r+0x117a>
 800eb00:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eb04:	f8da 2008 	ldr.w	r2, [sl, #8]
 800eb08:	f8cb 5000 	str.w	r5, [fp]
 800eb0c:	1c59      	adds	r1, r3, #1
 800eb0e:	3210      	adds	r2, #16
 800eb10:	2907      	cmp	r1, #7
 800eb12:	f8cb 6004 	str.w	r6, [fp, #4]
 800eb16:	f8ca 2008 	str.w	r2, [sl, #8]
 800eb1a:	f8ca 1004 	str.w	r1, [sl, #4]
 800eb1e:	f300 84cf 	bgt.w	800f4c0 <_vfprintf_r+0x1b0c>
 800eb22:	f10b 0b08 	add.w	fp, fp, #8
 800eb26:	3c10      	subs	r4, #16
 800eb28:	2c10      	cmp	r4, #16
 800eb2a:	f340 832f 	ble.w	800f18c <_vfprintf_r+0x17d8>
 800eb2e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800eb30:	e016      	b.n	800eb60 <_vfprintf_r+0x11ac>
 800eb32:	f10b 0008 	add.w	r0, fp, #8
 800eb36:	f8da 2004 	ldr.w	r2, [sl, #4]
 800eb3a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eb3e:	6005      	str	r5, [r0, #0]
 800eb40:	1c53      	adds	r3, r2, #1
 800eb42:	3110      	adds	r1, #16
 800eb44:	3c10      	subs	r4, #16
 800eb46:	2b07      	cmp	r3, #7
 800eb48:	6046      	str	r6, [r0, #4]
 800eb4a:	f8ca 1008 	str.w	r1, [sl, #8]
 800eb4e:	f8ca 3004 	str.w	r3, [sl, #4]
 800eb52:	dc1f      	bgt.n	800eb94 <_vfprintf_r+0x11e0>
 800eb54:	f100 0b08 	add.w	fp, r0, #8
 800eb58:	3c10      	subs	r4, #16
 800eb5a:	2c10      	cmp	r4, #16
 800eb5c:	f340 8316 	ble.w	800f18c <_vfprintf_r+0x17d8>
 800eb60:	f8da 2004 	ldr.w	r2, [sl, #4]
 800eb64:	f8da 0008 	ldr.w	r0, [sl, #8]
 800eb68:	f8cb 5000 	str.w	r5, [fp]
 800eb6c:	1c53      	adds	r3, r2, #1
 800eb6e:	3010      	adds	r0, #16
 800eb70:	2b07      	cmp	r3, #7
 800eb72:	f8cb 6004 	str.w	r6, [fp, #4]
 800eb76:	f8ca 0008 	str.w	r0, [sl, #8]
 800eb7a:	f8ca 3004 	str.w	r3, [sl, #4]
 800eb7e:	ddd8      	ble.n	800eb32 <_vfprintf_r+0x117e>
 800eb80:	4638      	mov	r0, r7
 800eb82:	4649      	mov	r1, r9
 800eb84:	4652      	mov	r2, sl
 800eb86:	f003 fe03 	bl	8012790 <__sprint_r>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	f47f a864 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800eb90:	a84e      	add	r0, sp, #312	; 0x138
 800eb92:	e7d0      	b.n	800eb36 <_vfprintf_r+0x1182>
 800eb94:	4638      	mov	r0, r7
 800eb96:	4649      	mov	r1, r9
 800eb98:	4652      	mov	r2, sl
 800eb9a:	f003 fdf9 	bl	8012790 <__sprint_r>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f47f a85a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800eba4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eba8:	e7d6      	b.n	800eb58 <_vfprintf_r+0x11a4>
 800ebaa:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ebac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebae:	1d0f      	adds	r7, r1, #4
 800ebb0:	681c      	ldr	r4, [r3, #0]
 800ebb2:	9710      	str	r7, [sp, #64]	; 0x40
 800ebb4:	2500      	movs	r5, #0
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f7ff b9ce 	b.w	800df58 <_vfprintf_r+0x5a4>
 800ebbc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ebbe:	1e6c      	subs	r4, r5, #1
 800ebc0:	2c00      	cmp	r4, #0
 800ebc2:	f77f ae9a 	ble.w	800e8fa <_vfprintf_r+0xf46>
 800ebc6:	2c10      	cmp	r4, #16
 800ebc8:	f340 81d8 	ble.w	800ef7c <_vfprintf_r+0x15c8>
 800ebcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ebd0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ebd4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ebd6:	4d67      	ldr	r5, [pc, #412]	; (800ed74 <_vfprintf_r+0x13c0>)
 800ebd8:	2610      	movs	r6, #16
 800ebda:	1c58      	adds	r0, r3, #1
 800ebdc:	3f12      	subs	r7, #18
 800ebde:	198a      	adds	r2, r1, r6
 800ebe0:	2807      	cmp	r0, #7
 800ebe2:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ebe6:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800ebea:	f8ca 2008 	str.w	r2, [sl, #8]
 800ebee:	f8ca 0004 	str.w	r0, [sl, #4]
 800ebf2:	f300 840f 	bgt.w	800f414 <_vfprintf_r+0x1a60>
 800ebf6:	f10b 0b08 	add.w	fp, fp, #8
 800ebfa:	3c10      	subs	r4, #16
 800ebfc:	2c10      	cmp	r4, #16
 800ebfe:	f340 81be 	ble.w	800ef7e <_vfprintf_r+0x15ca>
 800ec02:	b1b7      	cbz	r7, 800ec32 <_vfprintf_r+0x127e>
 800ec04:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ec08:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ec0c:	f8cb 5000 	str.w	r5, [fp]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	3110      	adds	r1, #16
 800ec14:	2a07      	cmp	r2, #7
 800ec16:	f8cb 6004 	str.w	r6, [fp, #4]
 800ec1a:	f8ca 1008 	str.w	r1, [sl, #8]
 800ec1e:	f8ca 2004 	str.w	r2, [sl, #4]
 800ec22:	f300 8406 	bgt.w	800f432 <_vfprintf_r+0x1a7e>
 800ec26:	f10b 0b08 	add.w	fp, fp, #8
 800ec2a:	3c10      	subs	r4, #16
 800ec2c:	2c10      	cmp	r4, #16
 800ec2e:	f340 81a6 	ble.w	800ef7e <_vfprintf_r+0x15ca>
 800ec32:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ec34:	e018      	b.n	800ec68 <_vfprintf_r+0x12b4>
 800ec36:	f10b 0b08 	add.w	fp, fp, #8
 800ec3a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ec3e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ec42:	f8cb 5000 	str.w	r5, [fp]
 800ec46:	1c41      	adds	r1, r0, #1
 800ec48:	3210      	adds	r2, #16
 800ec4a:	3c10      	subs	r4, #16
 800ec4c:	2907      	cmp	r1, #7
 800ec4e:	f8cb 6004 	str.w	r6, [fp, #4]
 800ec52:	f8ca 2008 	str.w	r2, [sl, #8]
 800ec56:	f8ca 1004 	str.w	r1, [sl, #4]
 800ec5a:	dc20      	bgt.n	800ec9e <_vfprintf_r+0x12ea>
 800ec5c:	f10b 0b08 	add.w	fp, fp, #8
 800ec60:	3c10      	subs	r4, #16
 800ec62:	2c10      	cmp	r4, #16
 800ec64:	f340 818b 	ble.w	800ef7e <_vfprintf_r+0x15ca>
 800ec68:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ec6c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ec70:	f8cb 5000 	str.w	r5, [fp]
 800ec74:	1c4b      	adds	r3, r1, #1
 800ec76:	3010      	adds	r0, #16
 800ec78:	2b07      	cmp	r3, #7
 800ec7a:	f8cb 6004 	str.w	r6, [fp, #4]
 800ec7e:	f8ca 0008 	str.w	r0, [sl, #8]
 800ec82:	f8ca 3004 	str.w	r3, [sl, #4]
 800ec86:	ddd6      	ble.n	800ec36 <_vfprintf_r+0x1282>
 800ec88:	4638      	mov	r0, r7
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	4652      	mov	r2, sl
 800ec8e:	f003 fd7f 	bl	8012790 <__sprint_r>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f47e afe0 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ec98:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ec9c:	e7cd      	b.n	800ec3a <_vfprintf_r+0x1286>
 800ec9e:	4638      	mov	r0, r7
 800eca0:	4649      	mov	r1, r9
 800eca2:	4652      	mov	r2, sl
 800eca4:	f003 fd74 	bl	8012790 <__sprint_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	f47e afd5 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ecae:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ecb2:	e7d5      	b.n	800ec60 <_vfprintf_r+0x12ac>
 800ecb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ecb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ecb8:	6825      	ldr	r5, [r4, #0]
 800ecba:	1d10      	adds	r0, r2, #4
 800ecbc:	462c      	mov	r4, r5
 800ecbe:	9010      	str	r0, [sp, #64]	; 0x40
 800ecc0:	2500      	movs	r5, #0
 800ecc2:	f7ff b949 	b.w	800df58 <_vfprintf_r+0x5a4>
 800ecc6:	4d2b      	ldr	r5, [pc, #172]	; (800ed74 <_vfprintf_r+0x13c0>)
 800ecc8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eccc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ecd0:	f8cb 5000 	str.w	r5, [fp]
 800ecd4:	1c43      	adds	r3, r0, #1
 800ecd6:	190a      	adds	r2, r1, r4
 800ecd8:	2b07      	cmp	r3, #7
 800ecda:	f8cb 4004 	str.w	r4, [fp, #4]
 800ecde:	f8ca 2008 	str.w	r2, [sl, #8]
 800ece2:	f8ca 3004 	str.w	r3, [sl, #4]
 800ece6:	f77f ab7f 	ble.w	800e3e8 <_vfprintf_r+0xa34>
 800ecea:	e619      	b.n	800e920 <_vfprintf_r+0xf6c>
 800ecec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ecee:	4649      	mov	r1, r9
 800ecf0:	4652      	mov	r2, sl
 800ecf2:	f003 fd4d 	bl	8012790 <__sprint_r>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f47e afae 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ecfc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ed00:	f7ff bb98 	b.w	800e434 <_vfprintf_r+0xa80>
 800ed04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ed06:	4649      	mov	r1, r9
 800ed08:	4652      	mov	r2, sl
 800ed0a:	f003 fd41 	bl	8012790 <__sprint_r>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	f47e afa2 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ed14:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ed18:	f7ff bba3 	b.w	800e462 <_vfprintf_r+0xaae>
 800ed1c:	2a30      	cmp	r2, #48	; 0x30
 800ed1e:	f43f ae6b 	beq.w	800e9f8 <_vfprintf_r+0x1044>
 800ed22:	9907      	ldr	r1, [sp, #28]
 800ed24:	2730      	movs	r7, #48	; 0x30
 800ed26:	1b8a      	subs	r2, r1, r6
 800ed28:	46b0      	mov	r8, r6
 800ed2a:	f805 7c01 	strb.w	r7, [r5, #-1]
 800ed2e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ed30:	f7ff b822 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800ed34:	f10d 06cf 	add.w	r6, sp, #207	; 0xcf
 800ed38:	4677      	mov	r7, lr
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	220a      	movs	r2, #10
 800ed40:	2300      	movs	r3, #0
 800ed42:	f7fd f809 	bl	800bd58 <__aeabi_uldivmod>
 800ed46:	3230      	adds	r2, #48	; 0x30
 800ed48:	7032      	strb	r2, [r6, #0]
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	220a      	movs	r2, #10
 800ed50:	2300      	movs	r3, #0
 800ed52:	f7fd f801 	bl	800bd58 <__aeabi_uldivmod>
 800ed56:	4604      	mov	r4, r0
 800ed58:	460d      	mov	r5, r1
 800ed5a:	ea54 0005 	orrs.w	r0, r4, r5
 800ed5e:	46b0      	mov	r8, r6
 800ed60:	f106 36ff 	add.w	r6, r6, #4294967295
 800ed64:	d1e9      	bne.n	800ed3a <_vfprintf_r+0x1386>
 800ed66:	9b07      	ldr	r3, [sp, #28]
 800ed68:	ebc8 0403 	rsb	r4, r8, r3
 800ed6c:	46be      	mov	lr, r7
 800ed6e:	940f      	str	r4, [sp, #60]	; 0x3c
 800ed70:	f7ff b802 	b.w	800dd78 <_vfprintf_r+0x3c4>
 800ed74:	080136ac 	.word	0x080136ac
 800ed78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	4652      	mov	r2, sl
 800ed7e:	f003 fd07 	bl	8012790 <__sprint_r>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f47e af68 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ed88:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ed8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ed8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ed90:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800ed92:	42a3      	cmp	r3, r4
 800ed94:	4446      	add	r6, r8
 800ed96:	f2c0 8092 	blt.w	800eebe <_vfprintf_r+0x150a>
 800ed9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ed9c:	07e8      	lsls	r0, r5, #31
 800ed9e:	f100 808e 	bmi.w	800eebe <_vfprintf_r+0x150a>
 800eda2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800eda4:	1ba5      	subs	r5, r4, r6
 800eda6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800eda8:	1ae3      	subs	r3, r4, r3
 800edaa:	42ab      	cmp	r3, r5
 800edac:	bfb8      	it	lt
 800edae:	461d      	movlt	r5, r3
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	dd12      	ble.n	800edda <_vfprintf_r+0x1426>
 800edb4:	f8da 1008 	ldr.w	r1, [sl, #8]
 800edb8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800edbc:	f8cb 6000 	str.w	r6, [fp]
 800edc0:	1948      	adds	r0, r1, r5
 800edc2:	1c51      	adds	r1, r2, #1
 800edc4:	2907      	cmp	r1, #7
 800edc6:	f8cb 5004 	str.w	r5, [fp, #4]
 800edca:	f8ca 0008 	str.w	r0, [sl, #8]
 800edce:	f8ca 1004 	str.w	r1, [sl, #4]
 800edd2:	f300 83ba 	bgt.w	800f54a <_vfprintf_r+0x1b96>
 800edd6:	f10b 0b08 	add.w	fp, fp, #8
 800edda:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800edde:	1b5c      	subs	r4, r3, r5
 800ede0:	2c00      	cmp	r4, #0
 800ede2:	f77f ab03 	ble.w	800e3ec <_vfprintf_r+0xa38>
 800ede6:	2c10      	cmp	r4, #16
 800ede8:	f77f af6d 	ble.w	800ecc6 <_vfprintf_r+0x1312>
 800edec:	f8da 0004 	ldr.w	r0, [sl, #4]
 800edf0:	f8da 2008 	ldr.w	r2, [sl, #8]
 800edf4:	4d7b      	ldr	r5, [pc, #492]	; (800efe4 <_vfprintf_r+0x1630>)
 800edf6:	2610      	movs	r6, #16
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	f1a4 0711 	sub.w	r7, r4, #17
 800edfe:	1991      	adds	r1, r2, r6
 800ee00:	2b07      	cmp	r3, #7
 800ee02:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ee06:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800ee0a:	f8ca 1008 	str.w	r1, [sl, #8]
 800ee0e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee12:	f300 838f 	bgt.w	800f534 <_vfprintf_r+0x1b80>
 800ee16:	f10b 0b08 	add.w	fp, fp, #8
 800ee1a:	3c10      	subs	r4, #16
 800ee1c:	2c10      	cmp	r4, #16
 800ee1e:	f77f af53 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800ee22:	b1b7      	cbz	r7, 800ee52 <_vfprintf_r+0x149e>
 800ee24:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ee28:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ee2c:	f8cb 5000 	str.w	r5, [fp]
 800ee30:	1c41      	adds	r1, r0, #1
 800ee32:	3210      	adds	r2, #16
 800ee34:	2907      	cmp	r1, #7
 800ee36:	f8cb 6004 	str.w	r6, [fp, #4]
 800ee3a:	f8ca 2008 	str.w	r2, [sl, #8]
 800ee3e:	f8ca 1004 	str.w	r1, [sl, #4]
 800ee42:	f300 83db 	bgt.w	800f5fc <_vfprintf_r+0x1c48>
 800ee46:	f10b 0b08 	add.w	fp, fp, #8
 800ee4a:	3c10      	subs	r4, #16
 800ee4c:	2c10      	cmp	r4, #16
 800ee4e:	f77f af3b 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800ee52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ee54:	e018      	b.n	800ee88 <_vfprintf_r+0x14d4>
 800ee56:	f10b 0b08 	add.w	fp, fp, #8
 800ee5a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ee5e:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ee62:	f8cb 5000 	str.w	r5, [fp]
 800ee66:	1c53      	adds	r3, r2, #1
 800ee68:	3110      	adds	r1, #16
 800ee6a:	3c10      	subs	r4, #16
 800ee6c:	2b07      	cmp	r3, #7
 800ee6e:	f8cb 6004 	str.w	r6, [fp, #4]
 800ee72:	f8ca 1008 	str.w	r1, [sl, #8]
 800ee76:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee7a:	dc36      	bgt.n	800eeea <_vfprintf_r+0x1536>
 800ee7c:	f10b 0b08 	add.w	fp, fp, #8
 800ee80:	3c10      	subs	r4, #16
 800ee82:	2c10      	cmp	r4, #16
 800ee84:	f77f af20 	ble.w	800ecc8 <_vfprintf_r+0x1314>
 800ee88:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ee8c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ee90:	f8cb 5000 	str.w	r5, [fp]
 800ee94:	1c58      	adds	r0, r3, #1
 800ee96:	3210      	adds	r2, #16
 800ee98:	2807      	cmp	r0, #7
 800ee9a:	f8cb 6004 	str.w	r6, [fp, #4]
 800ee9e:	f8ca 2008 	str.w	r2, [sl, #8]
 800eea2:	f8ca 0004 	str.w	r0, [sl, #4]
 800eea6:	ddd6      	ble.n	800ee56 <_vfprintf_r+0x14a2>
 800eea8:	4638      	mov	r0, r7
 800eeaa:	4649      	mov	r1, r9
 800eeac:	4652      	mov	r2, sl
 800eeae:	f003 fc6f 	bl	8012790 <__sprint_r>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f47e aed0 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800eeb8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eebc:	e7cd      	b.n	800ee5a <_vfprintf_r+0x14a6>
 800eebe:	f8da 0008 	ldr.w	r0, [sl, #8]
 800eec2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800eec6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800eec8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800eeca:	f8cb 4004 	str.w	r4, [fp, #4]
 800eece:	1821      	adds	r1, r4, r0
 800eed0:	1c50      	adds	r0, r2, #1
 800eed2:	2807      	cmp	r0, #7
 800eed4:	f8cb 5000 	str.w	r5, [fp]
 800eed8:	f8ca 1008 	str.w	r1, [sl, #8]
 800eedc:	f8ca 0004 	str.w	r0, [sl, #4]
 800eee0:	f300 82fa 	bgt.w	800f4d8 <_vfprintf_r+0x1b24>
 800eee4:	f10b 0b08 	add.w	fp, fp, #8
 800eee8:	e75b      	b.n	800eda2 <_vfprintf_r+0x13ee>
 800eeea:	4638      	mov	r0, r7
 800eeec:	4649      	mov	r1, r9
 800eeee:	4652      	mov	r2, sl
 800eef0:	f003 fc4e 	bl	8012790 <__sprint_r>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f47e aeaf 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800eefa:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eefe:	e7bf      	b.n	800ee80 <_vfprintf_r+0x14cc>
 800ef00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef02:	4649      	mov	r1, r9
 800ef04:	4652      	mov	r2, sl
 800ef06:	f003 fc43 	bl	8012790 <__sprint_r>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	f47e aea4 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ef10:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ef14:	e436      	b.n	800e784 <_vfprintf_r+0xdd0>
 800ef16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef18:	4649      	mov	r1, r9
 800ef1a:	4652      	mov	r2, sl
 800ef1c:	f003 fc38 	bl	8012790 <__sprint_r>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	f47e ae99 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ef26:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ef2a:	e442      	b.n	800e7b2 <_vfprintf_r+0xdfe>
 800ef2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ef2e:	07e1      	lsls	r1, r4, #31
 800ef30:	f53f aca0 	bmi.w	800e874 <_vfprintf_r+0xec0>
 800ef34:	1c42      	adds	r2, r0, #1
 800ef36:	1c58      	adds	r0, r3, #1
 800ef38:	2101      	movs	r1, #1
 800ef3a:	2807      	cmp	r0, #7
 800ef3c:	f8cb 8000 	str.w	r8, [fp]
 800ef40:	f8cb 1004 	str.w	r1, [fp, #4]
 800ef44:	f8ca 2008 	str.w	r2, [sl, #8]
 800ef48:	f8ca 0004 	str.w	r0, [sl, #4]
 800ef4c:	f77f acd3 	ble.w	800e8f6 <_vfprintf_r+0xf42>
 800ef50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef52:	4649      	mov	r1, r9
 800ef54:	4652      	mov	r2, sl
 800ef56:	f003 fc1b 	bl	8012790 <__sprint_r>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	f47e ae7c 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ef60:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ef64:	e4c9      	b.n	800e8fa <_vfprintf_r+0xf46>
 800ef66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef68:	4649      	mov	r1, r9
 800ef6a:	4652      	mov	r2, sl
 800ef6c:	f003 fc10 	bl	8012790 <__sprint_r>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	f47e ae71 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800ef76:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ef7a:	e48b      	b.n	800e894 <_vfprintf_r+0xee0>
 800ef7c:	4d19      	ldr	r5, [pc, #100]	; (800efe4 <_vfprintf_r+0x1630>)
 800ef7e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ef82:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ef86:	f8cb 5000 	str.w	r5, [fp]
 800ef8a:	1c59      	adds	r1, r3, #1
 800ef8c:	1910      	adds	r0, r2, r4
 800ef8e:	2907      	cmp	r1, #7
 800ef90:	f8cb 4004 	str.w	r4, [fp, #4]
 800ef94:	f8ca 0008 	str.w	r0, [sl, #8]
 800ef98:	f8ca 1004 	str.w	r1, [sl, #4]
 800ef9c:	f77f acab 	ble.w	800e8f6 <_vfprintf_r+0xf42>
 800efa0:	e7d6      	b.n	800ef50 <_vfprintf_r+0x159c>
 800efa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efa4:	4649      	mov	r1, r9
 800efa6:	4652      	mov	r2, sl
 800efa8:	f003 fbf2 	bl	8012790 <__sprint_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	f47e ae53 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800efb2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800efb6:	e482      	b.n	800e8be <_vfprintf_r+0xf0a>
 800efb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efba:	4649      	mov	r1, r9
 800efbc:	4652      	mov	r2, sl
 800efbe:	f003 fbe7 	bl	8012790 <__sprint_r>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f47e ae48 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800efc8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800efcc:	f7ff b962 	b.w	800e294 <_vfprintf_r+0x8e0>
 800efd0:	222d      	movs	r2, #45	; 0x2d
 800efd2:	4264      	negs	r4, r4
 800efd4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800efd8:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800efdc:	2301      	movs	r3, #1
 800efde:	f7fe beae 	b.w	800dd3e <_vfprintf_r+0x38a>
 800efe2:	bf00      	nop
 800efe4:	080136ac 	.word	0x080136ac
 800efe8:	f8cd c018 	str.w	ip, [sp, #24]
 800efec:	f7fe fa52 	bl	800d494 <__fpclassifyd>
 800eff0:	f8dd c018 	ldr.w	ip, [sp, #24]
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f000 818d 	beq.w	800f314 <_vfprintf_r+0x1960>
 800effa:	f1bc 3fff 	cmp.w	ip, #4294967295
 800effe:	f000 835c 	beq.w	800f6ba <_vfprintf_r+0x1d06>
 800f002:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f004:	2d67      	cmp	r5, #103	; 0x67
 800f006:	f000 8338 	beq.w	800f67a <_vfprintf_r+0x1cc6>
 800f00a:	2d47      	cmp	r5, #71	; 0x47
 800f00c:	f000 8335 	beq.w	800f67a <_vfprintf_r+0x1cc6>
 800f010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f012:	2c00      	cmp	r4, #0
 800f014:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800f018:	9113      	str	r1, [sp, #76]	; 0x4c
 800f01a:	f2c0 8351 	blt.w	800f6c0 <_vfprintf_r+0x1d0c>
 800f01e:	2700      	movs	r7, #0
 800f020:	9712      	str	r7, [sp, #72]	; 0x48
 800f022:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f024:	2d66      	cmp	r5, #102	; 0x66
 800f026:	f000 82f7 	beq.w	800f618 <_vfprintf_r+0x1c64>
 800f02a:	2d46      	cmp	r5, #70	; 0x46
 800f02c:	f000 82f4 	beq.w	800f618 <_vfprintf_r+0x1c64>
 800f030:	2d65      	cmp	r5, #101	; 0x65
 800f032:	f000 834a 	beq.w	800f6ca <_vfprintf_r+0x1d16>
 800f036:	2d45      	cmp	r5, #69	; 0x45
 800f038:	f000 8347 	beq.w	800f6ca <_vfprintf_r+0x1d16>
 800f03c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f040:	a920      	add	r1, sp, #128	; 0x80
 800f042:	910c      	str	r1, [sp, #48]	; 0x30
 800f044:	2502      	movs	r5, #2
 800f046:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f048:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f04a:	9500      	str	r5, [sp, #0]
 800f04c:	af22      	add	r7, sp, #136	; 0x88
 800f04e:	ad21      	add	r5, sp, #132	; 0x84
 800f050:	4623      	mov	r3, r4
 800f052:	9001      	str	r0, [sp, #4]
 800f054:	4632      	mov	r2, r6
 800f056:	9102      	str	r1, [sp, #8]
 800f058:	9503      	str	r5, [sp, #12]
 800f05a:	9704      	str	r7, [sp, #16]
 800f05c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f05e:	f8cd c018 	str.w	ip, [sp, #24]
 800f062:	f000 fdd5 	bl	800fc10 <_dtoa_r>
 800f066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f068:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f06c:	2b67      	cmp	r3, #103	; 0x67
 800f06e:	4680      	mov	r8, r0
 800f070:	d001      	beq.n	800f076 <_vfprintf_r+0x16c2>
 800f072:	2b47      	cmp	r3, #71	; 0x47
 800f074:	d103      	bne.n	800f07e <_vfprintf_r+0x16ca>
 800f076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f078:	07c3      	lsls	r3, r0, #31
 800f07a:	f140 832a 	bpl.w	800f6d2 <_vfprintf_r+0x1d1e>
 800f07e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f082:	2946      	cmp	r1, #70	; 0x46
 800f084:	eb08 0502 	add.w	r5, r8, r2
 800f088:	f000 82de 	beq.w	800f648 <_vfprintf_r+0x1c94>
 800f08c:	4630      	mov	r0, r6
 800f08e:	4621      	mov	r1, r4
 800f090:	2200      	movs	r2, #0
 800f092:	2300      	movs	r3, #0
 800f094:	f8cd c018 	str.w	ip, [sp, #24]
 800f098:	f7fc fdb4 	bl	800bc04 <__aeabi_dcmpeq>
 800f09c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f0a0:	b9e8      	cbnz	r0, 800f0de <_vfprintf_r+0x172a>
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	4295      	cmp	r5, r2
 800f0a6:	f240 83c6 	bls.w	800f836 <_vfprintf_r+0x1e82>
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	2430      	movs	r4, #48	; 0x30
 800f0ae:	f803 4b01 	strb.w	r4, [r3], #1
 800f0b2:	43d1      	mvns	r1, r2
 800f0b4:	1868      	adds	r0, r5, r1
 800f0b6:	42ab      	cmp	r3, r5
 800f0b8:	603b      	str	r3, [r7, #0]
 800f0ba:	f000 0101 	and.w	r1, r0, #1
 800f0be:	d00d      	beq.n	800f0dc <_vfprintf_r+0x1728>
 800f0c0:	b121      	cbz	r1, 800f0cc <_vfprintf_r+0x1718>
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	42ab      	cmp	r3, r5
 800f0c6:	7054      	strb	r4, [r2, #1]
 800f0c8:	603b      	str	r3, [r7, #0]
 800f0ca:	d007      	beq.n	800f0dc <_vfprintf_r+0x1728>
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	f802 4b01 	strb.w	r4, [r2], #1
 800f0d2:	705c      	strb	r4, [r3, #1]
 800f0d4:	1c53      	adds	r3, r2, #1
 800f0d6:	42ab      	cmp	r3, r5
 800f0d8:	603b      	str	r3, [r7, #0]
 800f0da:	d1f7      	bne.n	800f0cc <_vfprintf_r+0x1718>
 800f0dc:	461d      	mov	r5, r3
 800f0de:	ebc8 0705 	rsb	r7, r8, r5
 800f0e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f0e4:	9711      	str	r7, [sp, #68]	; 0x44
 800f0e6:	2d67      	cmp	r5, #103	; 0x67
 800f0e8:	f000 8240 	beq.w	800f56c <_vfprintf_r+0x1bb8>
 800f0ec:	2d47      	cmp	r5, #71	; 0x47
 800f0ee:	f000 823d 	beq.w	800f56c <_vfprintf_r+0x1bb8>
 800f0f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0f4:	2a66      	cmp	r2, #102	; 0x66
 800f0f6:	f040 8242 	bne.w	800f57e <_vfprintf_r+0x1bca>
 800f0fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	f340 835b 	ble.w	800f7ba <_vfprintf_r+0x1e06>
 800f104:	f1bc 0f00 	cmp.w	ip, #0
 800f108:	f040 8340 	bne.w	800f78c <_vfprintf_r+0x1dd8>
 800f10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f10e:	07d4      	lsls	r4, r2, #31
 800f110:	f100 833c 	bmi.w	800f78c <_vfprintf_r+0x1dd8>
 800f114:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 800f118:	940c      	str	r4, [sp, #48]	; 0x30
 800f11a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f11c:	9316      	str	r3, [sp, #88]	; 0x58
 800f11e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f120:	2d00      	cmp	r5, #0
 800f122:	f000 8260 	beq.w	800f5e6 <_vfprintf_r+0x1c32>
 800f126:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f128:	222d      	movs	r2, #45	; 0x2d
 800f12a:	2700      	movs	r7, #0
 800f12c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800f130:	9409      	str	r4, [sp, #36]	; 0x24
 800f132:	9712      	str	r7, [sp, #72]	; 0x48
 800f134:	f7fe be2c 	b.w	800dd90 <_vfprintf_r+0x3dc>
 800f138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f13a:	06db      	lsls	r3, r3, #27
 800f13c:	f140 8111 	bpl.w	800f362 <_vfprintf_r+0x19ae>
 800f140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f142:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f144:	6813      	ldr	r3, [r2, #0]
 800f146:	1d15      	adds	r5, r2, #4
 800f148:	9510      	str	r5, [sp, #64]	; 0x40
 800f14a:	6018      	str	r0, [r3, #0]
 800f14c:	f7fe bc84 	b.w	800da58 <_vfprintf_r+0xa4>
 800f150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f152:	0653      	lsls	r3, r2, #25
 800f154:	f140 8101 	bpl.w	800f35a <_vfprintf_r+0x19a6>
 800f158:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f15a:	1d28      	adds	r0, r5, #4
 800f15c:	882c      	ldrh	r4, [r5, #0]
 800f15e:	9010      	str	r0, [sp, #64]	; 0x40
 800f160:	2500      	movs	r5, #0
 800f162:	f7fe bf27 	b.w	800dfb4 <_vfprintf_r+0x600>
 800f166:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f168:	0649      	lsls	r1, r1, #25
 800f16a:	f140 80f2 	bpl.w	800f352 <_vfprintf_r+0x199e>
 800f16e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f170:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f174:	1d39      	adds	r1, r7, #4
 800f176:	17e5      	asrs	r5, r4, #31
 800f178:	4622      	mov	r2, r4
 800f17a:	462b      	mov	r3, r5
 800f17c:	9110      	str	r1, [sp, #64]	; 0x40
 800f17e:	f7fe bdd8 	b.w	800dd32 <_vfprintf_r+0x37e>
 800f182:	f893 8000 	ldrb.w	r8, [r3]
 800f186:	f7fe bca6 	b.w	800dad6 <_vfprintf_r+0x122>
 800f18a:	4dc2      	ldr	r5, [pc, #776]	; (800f494 <_vfprintf_r+0x1ae0>)
 800f18c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f190:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f194:	f8cb 5000 	str.w	r5, [fp]
 800f198:	1c4b      	adds	r3, r1, #1
 800f19a:	1902      	adds	r2, r0, r4
 800f19c:	2b07      	cmp	r3, #7
 800f19e:	f8cb 4004 	str.w	r4, [fp, #4]
 800f1a2:	f8ca 2008 	str.w	r2, [sl, #8]
 800f1a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800f1aa:	f73f ade5 	bgt.w	800ed78 <_vfprintf_r+0x13c4>
 800f1ae:	f10b 0b08 	add.w	fp, fp, #8
 800f1b2:	e5eb      	b.n	800ed8c <_vfprintf_r+0x13d8>
 800f1b4:	4db7      	ldr	r5, [pc, #732]	; (800f494 <_vfprintf_r+0x1ae0>)
 800f1b6:	f7ff b8ee 	b.w	800e396 <_vfprintf_r+0x9e2>
 800f1ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f1bc:	4649      	mov	r1, r9
 800f1be:	4652      	mov	r2, sl
 800f1c0:	f003 fae6 	bl	8012790 <__sprint_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	f47e ad47 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f1ca:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f1ce:	f7ff ba24 	b.w	800e61a <_vfprintf_r+0xc66>
 800f1d2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f1d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f1da:	1c42      	adds	r2, r0, #1
 800f1dc:	1c4b      	adds	r3, r1, #1
 800f1de:	48ae      	ldr	r0, [pc, #696]	; (800f498 <_vfprintf_r+0x1ae4>)
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	2b07      	cmp	r3, #7
 800f1e4:	f8cb 0000 	str.w	r0, [fp]
 800f1e8:	f8cb 1004 	str.w	r1, [fp, #4]
 800f1ec:	f8ca 2008 	str.w	r2, [sl, #8]
 800f1f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f1f4:	f300 80c2 	bgt.w	800f37c <_vfprintf_r+0x19c8>
 800f1f8:	f10b 0b08 	add.w	fp, fp, #8
 800f1fc:	b92c      	cbnz	r4, 800f20a <_vfprintf_r+0x1856>
 800f1fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f200:	b91d      	cbnz	r5, 800f20a <_vfprintf_r+0x1856>
 800f202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f204:	07d5      	lsls	r5, r2, #31
 800f206:	f57f a8f1 	bpl.w	800e3ec <_vfprintf_r+0xa38>
 800f20a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f20e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f212:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f214:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f216:	f8cb 5004 	str.w	r5, [fp, #4]
 800f21a:	182a      	adds	r2, r5, r0
 800f21c:	1c58      	adds	r0, r3, #1
 800f21e:	2807      	cmp	r0, #7
 800f220:	f8cb 1000 	str.w	r1, [fp]
 800f224:	f8ca 2008 	str.w	r2, [sl, #8]
 800f228:	f8ca 0004 	str.w	r0, [sl, #4]
 800f22c:	f300 822b 	bgt.w	800f686 <_vfprintf_r+0x1cd2>
 800f230:	f10b 0b08 	add.w	fp, fp, #8
 800f234:	4264      	negs	r4, r4
 800f236:	2c00      	cmp	r4, #0
 800f238:	f340 80d6 	ble.w	800f3e8 <_vfprintf_r+0x1a34>
 800f23c:	2c10      	cmp	r4, #16
 800f23e:	f340 8157 	ble.w	800f4f0 <_vfprintf_r+0x1b3c>
 800f242:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f246:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f24a:	4e92      	ldr	r6, [pc, #584]	; (800f494 <_vfprintf_r+0x1ae0>)
 800f24c:	2710      	movs	r7, #16
 800f24e:	1c58      	adds	r0, r3, #1
 800f250:	f1a4 0511 	sub.w	r5, r4, #17
 800f254:	19ca      	adds	r2, r1, r7
 800f256:	2807      	cmp	r0, #7
 800f258:	e88b 00c0 	stmia.w	fp, {r6, r7}
 800f25c:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800f260:	f8ca 2008 	str.w	r2, [sl, #8]
 800f264:	f8ca 0004 	str.w	r0, [sl, #4]
 800f268:	f300 827d 	bgt.w	800f766 <_vfprintf_r+0x1db2>
 800f26c:	f10b 0b08 	add.w	fp, fp, #8
 800f270:	3c10      	subs	r4, #16
 800f272:	2c10      	cmp	r4, #16
 800f274:	f340 813d 	ble.w	800f4f2 <_vfprintf_r+0x1b3e>
 800f278:	b1b5      	cbz	r5, 800f2a8 <_vfprintf_r+0x18f4>
 800f27a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f27e:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f282:	f8cb 6000 	str.w	r6, [fp]
 800f286:	1c5a      	adds	r2, r3, #1
 800f288:	3110      	adds	r1, #16
 800f28a:	2a07      	cmp	r2, #7
 800f28c:	f8cb 7004 	str.w	r7, [fp, #4]
 800f290:	f8ca 1008 	str.w	r1, [sl, #8]
 800f294:	f8ca 2004 	str.w	r2, [sl, #4]
 800f298:	f300 821d 	bgt.w	800f6d6 <_vfprintf_r+0x1d22>
 800f29c:	f10b 0b08 	add.w	fp, fp, #8
 800f2a0:	3c10      	subs	r4, #16
 800f2a2:	2c10      	cmp	r4, #16
 800f2a4:	f340 8125 	ble.w	800f4f2 <_vfprintf_r+0x1b3e>
 800f2a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f2aa:	e018      	b.n	800f2de <_vfprintf_r+0x192a>
 800f2ac:	f10b 0b08 	add.w	fp, fp, #8
 800f2b0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f2b4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f2b8:	f8cb 6000 	str.w	r6, [fp]
 800f2bc:	1c41      	adds	r1, r0, #1
 800f2be:	3210      	adds	r2, #16
 800f2c0:	3c10      	subs	r4, #16
 800f2c2:	2907      	cmp	r1, #7
 800f2c4:	f8cb 7004 	str.w	r7, [fp, #4]
 800f2c8:	f8ca 2008 	str.w	r2, [sl, #8]
 800f2cc:	f8ca 1004 	str.w	r1, [sl, #4]
 800f2d0:	dc60      	bgt.n	800f394 <_vfprintf_r+0x19e0>
 800f2d2:	f10b 0b08 	add.w	fp, fp, #8
 800f2d6:	3c10      	subs	r4, #16
 800f2d8:	2c10      	cmp	r4, #16
 800f2da:	f340 810a 	ble.w	800f4f2 <_vfprintf_r+0x1b3e>
 800f2de:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f2e2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f2e6:	f8cb 6000 	str.w	r6, [fp]
 800f2ea:	1c4b      	adds	r3, r1, #1
 800f2ec:	3010      	adds	r0, #16
 800f2ee:	2b07      	cmp	r3, #7
 800f2f0:	f8cb 7004 	str.w	r7, [fp, #4]
 800f2f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800f2f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800f2fc:	ddd6      	ble.n	800f2ac <_vfprintf_r+0x18f8>
 800f2fe:	4628      	mov	r0, r5
 800f300:	4649      	mov	r1, r9
 800f302:	4652      	mov	r2, sl
 800f304:	f003 fa44 	bl	8012790 <__sprint_r>
 800f308:	2800      	cmp	r0, #0
 800f30a:	f47e aca5 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f30e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f312:	e7cd      	b.n	800f2b0 <_vfprintf_r+0x18fc>
 800f314:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f316:	4a61      	ldr	r2, [pc, #388]	; (800f49c <_vfprintf_r+0x1ae8>)
 800f318:	4f61      	ldr	r7, [pc, #388]	; (800f4a0 <_vfprintf_r+0x1aec>)
 800f31a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f31c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f320:	9012      	str	r0, [sp, #72]	; 0x48
 800f322:	2103      	movs	r1, #3
 800f324:	910c      	str	r1, [sp, #48]	; 0x30
 800f326:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800f32a:	2103      	movs	r1, #3
 800f32c:	2d47      	cmp	r5, #71	; 0x47
 800f32e:	bfcc      	ite	gt
 800f330:	46b8      	movgt	r8, r7
 800f332:	4690      	movle	r8, r2
 800f334:	9409      	str	r4, [sp, #36]	; 0x24
 800f336:	910f      	str	r1, [sp, #60]	; 0x3c
 800f338:	9016      	str	r0, [sp, #88]	; 0x58
 800f33a:	f7fe bd28 	b.w	800dd8e <_vfprintf_r+0x3da>
 800f33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f340:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f344:	9710      	str	r7, [sp, #64]	; 0x40
 800f346:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f34a:	900c      	str	r0, [sp, #48]	; 0x30
 800f34c:	9416      	str	r4, [sp, #88]	; 0x58
 800f34e:	f7fe bd1e 	b.w	800dd8e <_vfprintf_r+0x3da>
 800f352:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f354:	6802      	ldr	r2, [r0, #0]
 800f356:	f7fe bedb 	b.w	800e110 <_vfprintf_r+0x75c>
 800f35a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f35c:	680b      	ldr	r3, [r1, #0]
 800f35e:	f7fe bf45 	b.w	800e1ec <_vfprintf_r+0x838>
 800f362:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f366:	6828      	ldr	r0, [r5, #0]
 800f368:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f36a:	1d29      	adds	r1, r5, #4
 800f36c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f370:	9110      	str	r1, [sp, #64]	; 0x40
 800f372:	bf14      	ite	ne
 800f374:	8004      	strhne	r4, [r0, #0]
 800f376:	6004      	streq	r4, [r0, #0]
 800f378:	f7fe bb6e 	b.w	800da58 <_vfprintf_r+0xa4>
 800f37c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f37e:	4649      	mov	r1, r9
 800f380:	4652      	mov	r2, sl
 800f382:	f003 fa05 	bl	8012790 <__sprint_r>
 800f386:	2800      	cmp	r0, #0
 800f388:	f47e ac66 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f38c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f38e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f392:	e733      	b.n	800f1fc <_vfprintf_r+0x1848>
 800f394:	4628      	mov	r0, r5
 800f396:	4649      	mov	r1, r9
 800f398:	4652      	mov	r2, sl
 800f39a:	f003 f9f9 	bl	8012790 <__sprint_r>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f47e ac5a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f3a4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3a8:	e795      	b.n	800f2d6 <_vfprintf_r+0x1922>
 800f3aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f3ac:	f890 8001 	ldrb.w	r8, [r0, #1]
 800f3b0:	f045 0520 	orr.w	r5, r5, #32
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	9509      	str	r5, [sp, #36]	; 0x24
 800f3b8:	f7fe bb8d 	b.w	800dad6 <_vfprintf_r+0x122>
 800f3bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3be:	4649      	mov	r1, r9
 800f3c0:	4652      	mov	r2, sl
 800f3c2:	f003 f9e5 	bl	8012790 <__sprint_r>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	f47e ac46 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f3cc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3d0:	f7ff b940 	b.w	800e654 <_vfprintf_r+0xca0>
 800f3d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3d6:	4649      	mov	r1, r9
 800f3d8:	4652      	mov	r2, sl
 800f3da:	f003 f9d9 	bl	8012790 <__sprint_r>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	f47e ac3a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f3e4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3e8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f3ec:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f3f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f3f2:	f8cb 8000 	str.w	r8, [fp]
 800f3f6:	e46d      	b.n	800ecd4 <_vfprintf_r+0x1320>
 800f3f8:	f003 f99a 	bl	8012730 <strlen>
 800f3fc:	9412      	str	r4, [sp, #72]	; 0x48
 800f3fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f400:	900f      	str	r0, [sp, #60]	; 0x3c
 800f402:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 800f406:	940c      	str	r4, [sp, #48]	; 0x30
 800f408:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f40c:	9710      	str	r7, [sp, #64]	; 0x40
 800f40e:	9116      	str	r1, [sp, #88]	; 0x58
 800f410:	f7fe bcbd 	b.w	800dd8e <_vfprintf_r+0x3da>
 800f414:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f416:	4649      	mov	r1, r9
 800f418:	4652      	mov	r2, sl
 800f41a:	f003 f9b9 	bl	8012790 <__sprint_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	f47e ac1a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f424:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f428:	f7ff bbe7 	b.w	800ebfa <_vfprintf_r+0x1246>
 800f42c:	4d1d      	ldr	r5, [pc, #116]	; (800f4a4 <_vfprintf_r+0x1af0>)
 800f42e:	f7ff b860 	b.w	800e4f2 <_vfprintf_r+0xb3e>
 800f432:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f434:	4649      	mov	r1, r9
 800f436:	4652      	mov	r2, sl
 800f438:	f003 f9aa 	bl	8012790 <__sprint_r>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	f47e ac0b 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f442:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f446:	f7ff bbf0 	b.w	800ec2a <_vfprintf_r+0x1276>
 800f44a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f44c:	4649      	mov	r1, r9
 800f44e:	4652      	mov	r2, sl
 800f450:	f003 f99e 	bl	8012790 <__sprint_r>
 800f454:	2800      	cmp	r0, #0
 800f456:	f47e abff 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f45a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f45e:	f7ff bb4a 	b.w	800eaf6 <_vfprintf_r+0x1142>
 800f462:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f464:	4649      	mov	r1, r9
 800f466:	4652      	mov	r2, sl
 800f468:	f003 f992 	bl	8012790 <__sprint_r>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	f47e abf3 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f472:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f476:	f7ff bb1d 	b.w	800eab4 <_vfprintf_r+0x1100>
 800f47a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f47c:	4649      	mov	r1, r9
 800f47e:	4652      	mov	r2, sl
 800f480:	f003 f986 	bl	8012790 <__sprint_r>
 800f484:	2800      	cmp	r0, #0
 800f486:	f47e abe7 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f48a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f48e:	f7ff b900 	b.w	800e692 <_vfprintf_r+0xcde>
 800f492:	bf00      	nop
 800f494:	080136ac 	.word	0x080136ac
 800f498:	080136a8 	.word	0x080136a8
 800f49c:	08013670 	.word	0x08013670
 800f4a0:	08013674 	.word	0x08013674
 800f4a4:	08013658 	.word	0x08013658
 800f4a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f4aa:	4649      	mov	r1, r9
 800f4ac:	4652      	mov	r2, sl
 800f4ae:	f003 f96f 	bl	8012790 <__sprint_r>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	f47e abd0 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f4b8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f4bc:	f7ff b901 	b.w	800e6c2 <_vfprintf_r+0xd0e>
 800f4c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	f003 f963 	bl	8012790 <__sprint_r>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	f47e abc4 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f4d0:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f4d4:	f7ff bb27 	b.w	800eb26 <_vfprintf_r+0x1172>
 800f4d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f4da:	4649      	mov	r1, r9
 800f4dc:	4652      	mov	r2, sl
 800f4de:	f003 f957 	bl	8012790 <__sprint_r>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	f47e abb8 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f4e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f4ea:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f4ee:	e458      	b.n	800eda2 <_vfprintf_r+0x13ee>
 800f4f0:	4eb7      	ldr	r6, [pc, #732]	; (800f7d0 <_vfprintf_r+0x1e1c>)
 800f4f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f4f6:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f4fa:	f8cb 6000 	str.w	r6, [fp]
 800f4fe:	1c59      	adds	r1, r3, #1
 800f500:	1910      	adds	r0, r2, r4
 800f502:	2907      	cmp	r1, #7
 800f504:	f8cb 4004 	str.w	r4, [fp, #4]
 800f508:	f8ca 0008 	str.w	r0, [sl, #8]
 800f50c:	f8ca 1004 	str.w	r1, [sl, #4]
 800f510:	f73f af60 	bgt.w	800f3d4 <_vfprintf_r+0x1a20>
 800f514:	f10b 0b08 	add.w	fp, fp, #8
 800f518:	e766      	b.n	800f3e8 <_vfprintf_r+0x1a34>
 800f51a:	2e06      	cmp	r6, #6
 800f51c:	bf34      	ite	cc
 800f51e:	4634      	movcc	r4, r6
 800f520:	2406      	movcs	r4, #6
 800f522:	940f      	str	r4, [sp, #60]	; 0x3c
 800f524:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f528:	940c      	str	r4, [sp, #48]	; 0x30
 800f52a:	9710      	str	r7, [sp, #64]	; 0x40
 800f52c:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800f7d8 <_vfprintf_r+0x1e24>
 800f530:	f7fe be0e 	b.w	800e150 <_vfprintf_r+0x79c>
 800f534:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f536:	4649      	mov	r1, r9
 800f538:	4652      	mov	r2, sl
 800f53a:	f003 f929 	bl	8012790 <__sprint_r>
 800f53e:	2800      	cmp	r0, #0
 800f540:	f47e ab8a 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f544:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f548:	e467      	b.n	800ee1a <_vfprintf_r+0x1466>
 800f54a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f54c:	4649      	mov	r1, r9
 800f54e:	4652      	mov	r2, sl
 800f550:	f003 f91e 	bl	8012790 <__sprint_r>
 800f554:	2800      	cmp	r0, #0
 800f556:	f47e ab7f 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f55a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f55c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f55e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f562:	1ae3      	subs	r3, r4, r3
 800f564:	e439      	b.n	800edda <_vfprintf_r+0x1426>
 800f566:	4d9b      	ldr	r5, [pc, #620]	; (800f7d4 <_vfprintf_r+0x1e20>)
 800f568:	f7fe bfe4 	b.w	800e534 <_vfprintf_r+0xb80>
 800f56c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	1cdf      	adds	r7, r3, #3
 800f572:	db01      	blt.n	800f578 <_vfprintf_r+0x1bc4>
 800f574:	459c      	cmp	ip, r3
 800f576:	da28      	bge.n	800f5ca <_vfprintf_r+0x1c16>
 800f578:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f57a:	1eb3      	subs	r3, r6, #2
 800f57c:	9314      	str	r3, [sp, #80]	; 0x50
 800f57e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f580:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f582:	680f      	ldr	r7, [r1, #0]
 800f584:	ae23      	add	r6, sp, #140	; 0x8c
 800f586:	1e7b      	subs	r3, r7, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	600b      	str	r3, [r1, #0]
 800f58c:	7035      	strb	r5, [r6, #0]
 800f58e:	f2c0 8132 	blt.w	800f7f6 <_vfprintf_r+0x1e42>
 800f592:	222b      	movs	r2, #43	; 0x2b
 800f594:	7072      	strb	r2, [r6, #1]
 800f596:	2b09      	cmp	r3, #9
 800f598:	f300 80a8 	bgt.w	800f6ec <_vfprintf_r+0x1d38>
 800f59c:	3330      	adds	r3, #48	; 0x30
 800f59e:	2030      	movs	r0, #48	; 0x30
 800f5a0:	70b0      	strb	r0, [r6, #2]
 800f5a2:	70f3      	strb	r3, [r6, #3]
 800f5a4:	a924      	add	r1, sp, #144	; 0x90
 800f5a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f5a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5aa:	1b8e      	subs	r6, r1, r6
 800f5ac:	19a0      	adds	r0, r4, r6
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	961b      	str	r6, [sp, #108]	; 0x6c
 800f5b2:	900f      	str	r0, [sp, #60]	; 0x3c
 800f5b4:	f340 8131 	ble.w	800f81a <_vfprintf_r+0x1e66>
 800f5b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f5ba:	1c60      	adds	r0, r4, #1
 800f5bc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	900f      	str	r0, [sp, #60]	; 0x3c
 800f5c4:	930c      	str	r3, [sp, #48]	; 0x30
 800f5c6:	9116      	str	r1, [sp, #88]	; 0x58
 800f5c8:	e5a9      	b.n	800f11e <_vfprintf_r+0x176a>
 800f5ca:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f5cc:	42bb      	cmp	r3, r7
 800f5ce:	db66      	blt.n	800f69e <_vfprintf_r+0x1cea>
 800f5d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5d2:	07c9      	lsls	r1, r1, #31
 800f5d4:	f100 80d2 	bmi.w	800f77c <_vfprintf_r+0x1dc8>
 800f5d8:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
 800f5dc:	2567      	movs	r5, #103	; 0x67
 800f5de:	970c      	str	r7, [sp, #48]	; 0x30
 800f5e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5e2:	9514      	str	r5, [sp, #80]	; 0x50
 800f5e4:	e59a      	b.n	800f11c <_vfprintf_r+0x1768>
 800f5e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f5e8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f5ec:	9409      	str	r4, [sp, #36]	; 0x24
 800f5ee:	f7fe bbce 	b.w	800dd8e <_vfprintf_r+0x3da>
 800f5f2:	232d      	movs	r3, #45	; 0x2d
 800f5f4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800f5f8:	f7fe bc7c 	b.w	800def4 <_vfprintf_r+0x540>
 800f5fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f5fe:	4649      	mov	r1, r9
 800f600:	4652      	mov	r2, sl
 800f602:	f003 f8c5 	bl	8012790 <__sprint_r>
 800f606:	2800      	cmp	r0, #0
 800f608:	f47e ab26 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f60c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f610:	e41b      	b.n	800ee4a <_vfprintf_r+0x1496>
 800f612:	4d6f      	ldr	r5, [pc, #444]	; (800f7d0 <_vfprintf_r+0x1e1c>)
 800f614:	f7ff b912 	b.w	800e83c <_vfprintf_r+0xe88>
 800f618:	ad20      	add	r5, sp, #128	; 0x80
 800f61a:	2103      	movs	r1, #3
 800f61c:	a821      	add	r0, sp, #132	; 0x84
 800f61e:	af22      	add	r7, sp, #136	; 0x88
 800f620:	e88d 1002 	stmia.w	sp, {r1, ip}
 800f624:	9502      	str	r5, [sp, #8]
 800f626:	9003      	str	r0, [sp, #12]
 800f628:	4632      	mov	r2, r6
 800f62a:	4623      	mov	r3, r4
 800f62c:	9704      	str	r7, [sp, #16]
 800f62e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f630:	950c      	str	r5, [sp, #48]	; 0x30
 800f632:	f8cd c018 	str.w	ip, [sp, #24]
 800f636:	f000 faeb 	bl	800fc10 <_dtoa_r>
 800f63a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f63e:	4680      	mov	r8, r0
 800f640:	eb00 050c 	add.w	r5, r0, ip
 800f644:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f648:	f898 3000 	ldrb.w	r3, [r8]
 800f64c:	2b30      	cmp	r3, #48	; 0x30
 800f64e:	f000 80a6 	beq.w	800f79e <_vfprintf_r+0x1dea>
 800f652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f654:	6813      	ldr	r3, [r2, #0]
 800f656:	18ed      	adds	r5, r5, r3
 800f658:	e518      	b.n	800f08c <_vfprintf_r+0x16d8>
 800f65a:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800f65e:	9012      	str	r0, [sp, #72]	; 0x48
 800f660:	940c      	str	r4, [sp, #48]	; 0x30
 800f662:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f666:	9710      	str	r7, [sp, #64]	; 0x40
 800f668:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f66c:	9016      	str	r0, [sp, #88]	; 0x58
 800f66e:	f7fe bb8e 	b.w	800dd8e <_vfprintf_r+0x3da>
 800f672:	4623      	mov	r3, r4
 800f674:	2600      	movs	r6, #0
 800f676:	f7fe ba2f 	b.w	800dad8 <_vfprintf_r+0x124>
 800f67a:	f1bc 0f00 	cmp.w	ip, #0
 800f67e:	bf08      	it	eq
 800f680:	f04f 0c01 	moveq.w	ip, #1
 800f684:	e4c4      	b.n	800f010 <_vfprintf_r+0x165c>
 800f686:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f688:	4649      	mov	r1, r9
 800f68a:	4652      	mov	r2, sl
 800f68c:	f003 f880 	bl	8012790 <__sprint_r>
 800f690:	2800      	cmp	r0, #0
 800f692:	f47e aae1 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f696:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f698:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f69c:	e5ca      	b.n	800f234 <_vfprintf_r+0x1880>
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f6a2:	bfd4      	ite	le
 800f6a4:	f1c3 0202 	rsble	r2, r3, #2
 800f6a8:	2201      	movgt	r2, #1
 800f6aa:	1952      	adds	r2, r2, r5
 800f6ac:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800f6b0:	2067      	movs	r0, #103	; 0x67
 800f6b2:	920f      	str	r2, [sp, #60]	; 0x3c
 800f6b4:	940c      	str	r4, [sp, #48]	; 0x30
 800f6b6:	9014      	str	r0, [sp, #80]	; 0x50
 800f6b8:	e530      	b.n	800f11c <_vfprintf_r+0x1768>
 800f6ba:	f04f 0c06 	mov.w	ip, #6
 800f6be:	e4a7      	b.n	800f010 <_vfprintf_r+0x165c>
 800f6c0:	222d      	movs	r2, #45	; 0x2d
 800f6c2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800f6c6:	9212      	str	r2, [sp, #72]	; 0x48
 800f6c8:	e4ab      	b.n	800f022 <_vfprintf_r+0x166e>
 800f6ca:	f10c 0001 	add.w	r0, ip, #1
 800f6ce:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6d0:	e4b6      	b.n	800f040 <_vfprintf_r+0x168c>
 800f6d2:	683d      	ldr	r5, [r7, #0]
 800f6d4:	e503      	b.n	800f0de <_vfprintf_r+0x172a>
 800f6d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f6d8:	4649      	mov	r1, r9
 800f6da:	4652      	mov	r2, sl
 800f6dc:	f003 f858 	bl	8012790 <__sprint_r>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	f47e aab9 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f6e6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f6ea:	e5d9      	b.n	800f2a0 <_vfprintf_r+0x18ec>
 800f6ec:	f246 6767 	movw	r7, #26215	; 0x6667
 800f6f0:	f10d 059a 	add.w	r5, sp, #154	; 0x9a
 800f6f4:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800f6f8:	fb87 2103 	smull	r2, r1, r7, r3
 800f6fc:	17da      	asrs	r2, r3, #31
 800f6fe:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
 800f702:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f706:	462a      	mov	r2, r5
 800f708:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800f70c:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800f710:	7015      	strb	r5, [r2, #0]
 800f712:	1e55      	subs	r5, r2, #1
 800f714:	2809      	cmp	r0, #9
 800f716:	4603      	mov	r3, r0
 800f718:	dcee      	bgt.n	800f6f8 <_vfprintf_r+0x1d44>
 800f71a:	3330      	adds	r3, #48	; 0x30
 800f71c:	f10d 079b 	add.w	r7, sp, #155	; 0x9b
 800f720:	b2d9      	uxtb	r1, r3
 800f722:	42af      	cmp	r7, r5
 800f724:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f728:	f240 8082 	bls.w	800f830 <_vfprintf_r+0x1e7c>
 800f72c:	1abc      	subs	r4, r7, r2
 800f72e:	07e5      	lsls	r5, r4, #31
 800f730:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
 800f734:	4613      	mov	r3, r2
 800f736:	d50c      	bpl.n	800f752 <_vfprintf_r+0x1d9e>
 800f738:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 800f73c:	4613      	mov	r3, r2
 800f73e:	7001      	strb	r1, [r0, #0]
 800f740:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f744:	e005      	b.n	800f752 <_vfprintf_r+0x1d9e>
 800f746:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f74a:	706c      	strb	r4, [r5, #1]
 800f74c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f750:	1c68      	adds	r0, r5, #1
 800f752:	1c45      	adds	r5, r0, #1
 800f754:	42bb      	cmp	r3, r7
 800f756:	7041      	strb	r1, [r0, #1]
 800f758:	d1f5      	bne.n	800f746 <_vfprintf_r+0x1d92>
 800f75a:	ebc2 020a 	rsb	r2, r2, sl
 800f75e:	f10d 078e 	add.w	r7, sp, #142	; 0x8e
 800f762:	18b9      	adds	r1, r7, r2
 800f764:	e71f      	b.n	800f5a6 <_vfprintf_r+0x1bf2>
 800f766:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f768:	4649      	mov	r1, r9
 800f76a:	4652      	mov	r2, sl
 800f76c:	f003 f810 	bl	8012790 <__sprint_r>
 800f770:	2800      	cmp	r0, #0
 800f772:	f47e aa71 	bne.w	800dc58 <_vfprintf_r+0x2a4>
 800f776:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f77a:	e579      	b.n	800f270 <_vfprintf_r+0x18bc>
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800f782:	2067      	movs	r0, #103	; 0x67
 800f784:	920f      	str	r2, [sp, #60]	; 0x3c
 800f786:	940c      	str	r4, [sp, #48]	; 0x30
 800f788:	9014      	str	r0, [sp, #80]	; 0x50
 800f78a:	e4c7      	b.n	800f11c <_vfprintf_r+0x1768>
 800f78c:	f10c 0e01 	add.w	lr, ip, #1
 800f790:	eb03 000e 	add.w	r0, r3, lr
 800f794:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 800f798:	900f      	str	r0, [sp, #60]	; 0x3c
 800f79a:	910c      	str	r1, [sp, #48]	; 0x30
 800f79c:	e4be      	b.n	800f11c <_vfprintf_r+0x1768>
 800f79e:	4630      	mov	r0, r6
 800f7a0:	4621      	mov	r1, r4
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	f8cd c018 	str.w	ip, [sp, #24]
 800f7aa:	f7fc fa2b 	bl	800bc04 <__aeabi_dcmpeq>
 800f7ae:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f7b2:	b198      	cbz	r0, 800f7dc <_vfprintf_r+0x1e28>
 800f7b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f7b6:	680b      	ldr	r3, [r1, #0]
 800f7b8:	e74d      	b.n	800f656 <_vfprintf_r+0x1ca2>
 800f7ba:	f1bc 0f00 	cmp.w	ip, #0
 800f7be:	d113      	bne.n	800f7e8 <_vfprintf_r+0x1e34>
 800f7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7c2:	07c0      	lsls	r0, r0, #31
 800f7c4:	d410      	bmi.n	800f7e8 <_vfprintf_r+0x1e34>
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	910c      	str	r1, [sp, #48]	; 0x30
 800f7ca:	910f      	str	r1, [sp, #60]	; 0x3c
 800f7cc:	e4a6      	b.n	800f11c <_vfprintf_r+0x1768>
 800f7ce:	bf00      	nop
 800f7d0:	080136ac 	.word	0x080136ac
 800f7d4:	08013658 	.word	0x08013658
 800f7d8:	080136a0 	.word	0x080136a0
 800f7dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f7de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7e0:	f1c0 0301 	rsb	r3, r0, #1
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	e736      	b.n	800f656 <_vfprintf_r+0x1ca2>
 800f7e8:	f10c 0702 	add.w	r7, ip, #2
 800f7ec:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
 800f7f0:	970f      	str	r7, [sp, #60]	; 0x3c
 800f7f2:	950c      	str	r5, [sp, #48]	; 0x30
 800f7f4:	e492      	b.n	800f11c <_vfprintf_r+0x1768>
 800f7f6:	242d      	movs	r4, #45	; 0x2d
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	7074      	strb	r4, [r6, #1]
 800f7fc:	e6cb      	b.n	800f596 <_vfprintf_r+0x1be2>
 800f7fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f800:	f893 8001 	ldrb.w	r8, [r3, #1]
 800f804:	682e      	ldr	r6, [r5, #0]
 800f806:	1d28      	adds	r0, r5, #4
 800f808:	2e00      	cmp	r6, #0
 800f80a:	9010      	str	r0, [sp, #64]	; 0x40
 800f80c:	4623      	mov	r3, r4
 800f80e:	f6be a962 	bge.w	800dad6 <_vfprintf_r+0x122>
 800f812:	f04f 36ff 	mov.w	r6, #4294967295
 800f816:	f7fe b95e 	b.w	800dad6 <_vfprintf_r+0x122>
 800f81a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f81c:	f011 0501 	ands.w	r5, r1, #1
 800f820:	f47f aeca 	bne.w	800f5b8 <_vfprintf_r+0x1c04>
 800f824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f826:	9516      	str	r5, [sp, #88]	; 0x58
 800f828:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 800f82c:	970c      	str	r7, [sp, #48]	; 0x30
 800f82e:	e476      	b.n	800f11e <_vfprintf_r+0x176a>
 800f830:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800f834:	e6b7      	b.n	800f5a6 <_vfprintf_r+0x1bf2>
 800f836:	4615      	mov	r5, r2
 800f838:	e451      	b.n	800f0de <_vfprintf_r+0x172a>
 800f83a:	bf00      	nop

0800f83c <__swsetup_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4b2f      	ldr	r3, [pc, #188]	; (800f8fc <__swsetup_r+0xc0>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4605      	mov	r5, r0
 800f844:	460c      	mov	r4, r1
 800f846:	b113      	cbz	r3, 800f84e <__swsetup_r+0x12>
 800f848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f84a:	2a00      	cmp	r2, #0
 800f84c:	d03d      	beq.n	800f8ca <__swsetup_r+0x8e>
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	f003 0008 	and.w	r0, r3, #8
 800f854:	b202      	sxth	r2, r0
 800f856:	4619      	mov	r1, r3
 800f858:	b16a      	cbz	r2, 800f876 <__swsetup_r+0x3a>
 800f85a:	6922      	ldr	r2, [r4, #16]
 800f85c:	b1ca      	cbz	r2, 800f892 <__swsetup_r+0x56>
 800f85e:	f013 0101 	ands.w	r1, r3, #1
 800f862:	d122      	bne.n	800f8aa <__swsetup_r+0x6e>
 800f864:	f003 0002 	and.w	r0, r3, #2
 800f868:	b203      	sxth	r3, r0
 800f86a:	b903      	cbnz	r3, 800f86e <__swsetup_r+0x32>
 800f86c:	6961      	ldr	r1, [r4, #20]
 800f86e:	60a1      	str	r1, [r4, #8]
 800f870:	b312      	cbz	r2, 800f8b8 <__swsetup_r+0x7c>
 800f872:	2000      	movs	r0, #0
 800f874:	bd38      	pop	{r3, r4, r5, pc}
 800f876:	f003 0010 	and.w	r0, r3, #16
 800f87a:	b202      	sxth	r2, r0
 800f87c:	b312      	cbz	r2, 800f8c4 <__swsetup_r+0x88>
 800f87e:	f001 0104 	and.w	r1, r1, #4
 800f882:	b208      	sxth	r0, r1
 800f884:	bb28      	cbnz	r0, 800f8d2 <__swsetup_r+0x96>
 800f886:	6922      	ldr	r2, [r4, #16]
 800f888:	f043 0308 	orr.w	r3, r3, #8
 800f88c:	81a3      	strh	r3, [r4, #12]
 800f88e:	2a00      	cmp	r2, #0
 800f890:	d1e5      	bne.n	800f85e <__swsetup_r+0x22>
 800f892:	f403 7020 	and.w	r0, r3, #640	; 0x280
 800f896:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800f89a:	d0e0      	beq.n	800f85e <__swsetup_r+0x22>
 800f89c:	4628      	mov	r0, r5
 800f89e:	4621      	mov	r1, r4
 800f8a0:	f001 fd76 	bl	8011390 <__smakebuf_r>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	6922      	ldr	r2, [r4, #16]
 800f8a8:	e7d9      	b.n	800f85e <__swsetup_r+0x22>
 800f8aa:	6960      	ldr	r0, [r4, #20]
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4243      	negs	r3, r0
 800f8b0:	60a1      	str	r1, [r4, #8]
 800f8b2:	61a3      	str	r3, [r4, #24]
 800f8b4:	2a00      	cmp	r2, #0
 800f8b6:	d1dc      	bne.n	800f872 <__swsetup_r+0x36>
 800f8b8:	89a2      	ldrh	r2, [r4, #12]
 800f8ba:	f002 0080 	and.w	r0, r2, #128	; 0x80
 800f8be:	b203      	sxth	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d0d6      	beq.n	800f872 <__swsetup_r+0x36>
 800f8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f001 fbb2 	bl	8011034 <__sinit>
 800f8d0:	e7bd      	b.n	800f84e <__swsetup_r+0x12>
 800f8d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f8d4:	b149      	cbz	r1, 800f8ea <__swsetup_r+0xae>
 800f8d6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800f8da:	4291      	cmp	r1, r2
 800f8dc:	d003      	beq.n	800f8e6 <__swsetup_r+0xaa>
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f001 fc1e 	bl	8011120 <_free_r>
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	6321      	str	r1, [r4, #48]	; 0x30
 800f8ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8ee:	6922      	ldr	r2, [r4, #16]
 800f8f0:	0418      	lsls	r0, r3, #16
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	0c03      	lsrs	r3, r0, #16
 800f8f6:	6061      	str	r1, [r4, #4]
 800f8f8:	6022      	str	r2, [r4, #0]
 800f8fa:	e7c5      	b.n	800f888 <__swsetup_r+0x4c>
 800f8fc:	20000490 	.word	0x20000490

0800f900 <register_fini>:
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <register_fini+0xc>)
 800f902:	b113      	cbz	r3, 800f90a <register_fini+0xa>
 800f904:	4802      	ldr	r0, [pc, #8]	; (800f910 <register_fini+0x10>)
 800f906:	f000 b805 	b.w	800f914 <atexit>
 800f90a:	4770      	bx	lr
 800f90c:	00000000 	.word	0x00000000
 800f910:	0800d811 	.word	0x0800d811

0800f914 <atexit>:
 800f914:	4601      	mov	r1, r0
 800f916:	2000      	movs	r0, #0
 800f918:	4602      	mov	r2, r0
 800f91a:	4603      	mov	r3, r0
 800f91c:	f7fd bf1c 	b.w	800d758 <__register_exitproc>

0800f920 <quorem>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	6903      	ldr	r3, [r0, #16]
 800f926:	690c      	ldr	r4, [r1, #16]
 800f928:	429c      	cmp	r4, r3
 800f92a:	b083      	sub	sp, #12
 800f92c:	4606      	mov	r6, r0
 800f92e:	f300 816b 	bgt.w	800fc08 <quorem+0x2e8>
 800f932:	1ce0      	adds	r0, r4, #3
 800f934:	0082      	lsls	r2, r0, #2
 800f936:	188f      	adds	r7, r1, r2
 800f938:	18b5      	adds	r5, r6, r2
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6868      	ldr	r0, [r5, #4]
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	fbb0 f5f2 	udiv	r5, r0, r2
 800f944:	f101 0314 	add.w	r3, r1, #20
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	3c01      	subs	r4, #1
 800f94c:	3704      	adds	r7, #4
 800f94e:	f106 0814 	add.w	r8, r6, #20
 800f952:	2d00      	cmp	r5, #0
 800f954:	f000 80be 	beq.w	800fad4 <quorem+0x1b4>
 800f958:	694a      	ldr	r2, [r1, #20]
 800f95a:	f8d8 3000 	ldr.w	r3, [r8]
 800f95e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f962:	b290      	uxth	r0, r2
 800f964:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f968:	fb05 f000 	mul.w	r0, r5, r0
 800f96c:	fb05 f20c 	mul.w	r2, r5, ip
 800f970:	eb02 4c10 	add.w	ip, r2, r0, lsr #16
 800f974:	fa1f fe8c 	uxth.w	lr, ip
 800f978:	b29a      	uxth	r2, r3
 800f97a:	b280      	uxth	r0, r0
 800f97c:	1a12      	subs	r2, r2, r0
 800f97e:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800f982:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800f986:	b292      	uxth	r2, r2
 800f988:	ebc9 0007 	rsb	r0, r9, r7
 800f98c:	f106 0318 	add.w	r3, r6, #24
 800f990:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800f994:	f101 0218 	add.w	r2, r1, #24
 800f998:	4297      	cmp	r7, r2
 800f99a:	f843 9c04 	str.w	r9, [r3, #-4]
 800f99e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800f9a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f9a6:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800f9aa:	d370      	bcc.n	800fa8e <quorem+0x16e>
 800f9ac:	b328      	cbz	r0, 800f9fa <quorem+0xda>
 800f9ae:	6810      	ldr	r0, [r2, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	b282      	uxth	r2, r0
 800f9b4:	0c00      	lsrs	r0, r0, #16
 800f9b6:	fb05 cc02 	mla	ip, r5, r2, ip
 800f9ba:	fb05 f000 	mul.w	r0, r5, r0
 800f9be:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 800f9c2:	fa1e f283 	uxtah	r2, lr, r3
 800f9c6:	fa1f fc8c 	uxth.w	ip, ip
 800f9ca:	fa1f fe80 	uxth.w	lr, r0
 800f9ce:	ebcc 0202 	rsb	r2, ip, r2
 800f9d2:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800f9d6:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800f9da:	fa1f fc82 	uxth.w	ip, r2
 800f9de:	f106 031c 	add.w	r3, r6, #28
 800f9e2:	f101 021c 	add.w	r2, r1, #28
 800f9e6:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 800f9ea:	4297      	cmp	r7, r2
 800f9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f9f0:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800f9f4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800f9f8:	d349      	bcc.n	800fa8e <quorem+0x16e>
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	f8d3 9000 	ldr.w	r9, [r3]
 800fa00:	f850 bb04 	ldr.w	fp, [r0], #4
 800fa04:	fa1f fa8b 	uxth.w	sl, fp
 800fa08:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800fa0c:	fb05 cc0a 	mla	ip, r5, sl, ip
 800fa10:	fb05 fa0b 	mul.w	sl, r5, fp
 800fa14:	eb0a 4b1c 	add.w	fp, sl, ip, lsr #16
 800fa18:	fa1f fa8b 	uxth.w	sl, fp
 800fa1c:	fa1e fe89 	uxtah	lr, lr, r9
 800fa20:	fa1f fc8c 	uxth.w	ip, ip
 800fa24:	ebcc 0e0e 	rsb	lr, ip, lr
 800fa28:	ebca 4c19 	rsb	ip, sl, r9, lsr #16
 800fa2c:	eb0c 4a2e 	add.w	sl, ip, lr, asr #16
 800fa30:	4699      	mov	r9, r3
 800fa32:	fa1f fe8e 	uxth.w	lr, lr
 800fa36:	ea4e 4c0a 	orr.w	ip, lr, sl, lsl #16
 800fa3a:	f849 cb04 	str.w	ip, [r9], #4
 800fa3e:	6852      	ldr	r2, [r2, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	fa1f fe82 	uxth.w	lr, r2
 800fa46:	fb05 fe0e 	mul.w	lr, r5, lr
 800fa4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa4e:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 800fa52:	fb05 f20c 	mul.w	r2, r5, ip
 800fa56:	eb02 4c1b 	add.w	ip, r2, fp, lsr #16
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	fa1f fe8c 	uxth.w	lr, ip
 800fa60:	eb02 422a 	add.w	r2, r2, sl, asr #16
 800fa64:	fa1f fb8b 	uxth.w	fp, fp
 800fa68:	ebcb 0202 	rsb	r2, fp, r2
 800fa6c:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800fa70:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800fa74:	b292      	uxth	r2, r2
 800fa76:	464b      	mov	r3, r9
 800fa78:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800fa7c:	1d02      	adds	r2, r0, #4
 800fa7e:	4297      	cmp	r7, r2
 800fa80:	f843 9b04 	str.w	r9, [r3], #4
 800fa84:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800fa88:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800fa8c:	d2b5      	bcs.n	800f9fa <quorem+0xda>
 800fa8e:	1d20      	adds	r0, r4, #4
 800fa90:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800fa94:	685a      	ldr	r2, [r3, #4]
 800fa96:	b9ea      	cbnz	r2, 800fad4 <quorem+0x1b4>
 800fa98:	1d18      	adds	r0, r3, #4
 800fa9a:	4598      	cmp	r8, r3
 800fa9c:	d219      	bcs.n	800fad2 <quorem+0x1b2>
 800fa9e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800faa2:	b9b2      	cbnz	r2, 800fad2 <quorem+0x1b2>
 800faa4:	3b04      	subs	r3, #4
 800faa6:	ebc8 0003 	rsb	r0, r8, r3
 800faaa:	1cc2      	adds	r2, r0, #3
 800faac:	0750      	lsls	r0, r2, #29
 800faae:	d50d      	bpl.n	800facc <quorem+0x1ac>
 800fab0:	3c01      	subs	r4, #1
 800fab2:	4598      	cmp	r8, r3
 800fab4:	d20d      	bcs.n	800fad2 <quorem+0x1b2>
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	3b04      	subs	r3, #4
 800faba:	b13a      	cbz	r2, 800facc <quorem+0x1ac>
 800fabc:	e009      	b.n	800fad2 <quorem+0x1b2>
 800fabe:	6818      	ldr	r0, [r3, #0]
 800fac0:	3b04      	subs	r3, #4
 800fac2:	b930      	cbnz	r0, 800fad2 <quorem+0x1b2>
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	3c01      	subs	r4, #1
 800fac8:	3b04      	subs	r3, #4
 800faca:	b912      	cbnz	r2, 800fad2 <quorem+0x1b2>
 800facc:	3c01      	subs	r4, #1
 800face:	4598      	cmp	r8, r3
 800fad0:	d3f5      	bcc.n	800fabe <quorem+0x19e>
 800fad2:	6134      	str	r4, [r6, #16]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f002 fc3b 	bl	8012350 <__mcmp>
 800fada:	2800      	cmp	r0, #0
 800fadc:	f2c0 8083 	blt.w	800fbe6 <quorem+0x2c6>
 800fae0:	9a01      	ldr	r2, [sp, #4]
 800fae2:	f8d8 3000 	ldr.w	r3, [r8]
 800fae6:	f852 0b04 	ldr.w	r0, [r2], #4
 800faea:	fa1f f983 	uxth.w	r9, r3
 800faee:	b281      	uxth	r1, r0
 800faf0:	0c00      	lsrs	r0, r0, #16
 800faf2:	ebc1 0109 	rsb	r1, r1, r9
 800faf6:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800fafa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fafe:	eb03 4021 	add.w	r0, r3, r1, asr #16
 800fb02:	4643      	mov	r3, r8
 800fb04:	b289      	uxth	r1, r1
 800fb06:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb0a:	ebc9 0c07 	rsb	ip, r9, r7
 800fb0e:	3501      	adds	r5, #1
 800fb10:	1400      	asrs	r0, r0, #16
 800fb12:	4297      	cmp	r7, r2
 800fb14:	f843 1b04 	str.w	r1, [r3], #4
 800fb18:	f3cc 0180 	ubfx	r1, ip, #2, #1
 800fb1c:	d34b      	bcc.n	800fbb6 <quorem+0x296>
 800fb1e:	b1b9      	cbz	r1, 800fb50 <quorem+0x230>
 800fb20:	f852 eb04 	ldr.w	lr, [r2], #4
 800fb24:	6819      	ldr	r1, [r3, #0]
 800fb26:	fa1f f98e 	uxth.w	r9, lr
 800fb2a:	fa1f fa81 	uxth.w	sl, r1
 800fb2e:	ebc9 090a 	rsb	r9, r9, sl
 800fb32:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 800fb36:	4448      	add	r0, r9
 800fb38:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 800fb3c:	eb01 4120 	add.w	r1, r1, r0, asr #16
 800fb40:	b280      	uxth	r0, r0
 800fb42:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800fb46:	f843 0b04 	str.w	r0, [r3], #4
 800fb4a:	1408      	asrs	r0, r1, #16
 800fb4c:	4297      	cmp	r7, r2
 800fb4e:	d332      	bcc.n	800fbb6 <quorem+0x296>
 800fb50:	4682      	mov	sl, r0
 800fb52:	4611      	mov	r1, r2
 800fb54:	f8d3 e000 	ldr.w	lr, [r3]
 800fb58:	f851 0b04 	ldr.w	r0, [r1], #4
 800fb5c:	fa1f fb8e 	uxth.w	fp, lr
 800fb60:	fa1f f980 	uxth.w	r9, r0
 800fb64:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800fb68:	ebc9 0b0b 	rsb	fp, r9, fp
 800fb6c:	eb0b 000a 	add.w	r0, fp, sl
 800fb70:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 800fb74:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 800fb78:	469e      	mov	lr, r3
 800fb7a:	b280      	uxth	r0, r0
 800fb7c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800fb80:	f84e 0b04 	str.w	r0, [lr], #4
 800fb84:	6850      	ldr	r0, [r2, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	b282      	uxth	r2, r0
 800fb8a:	fa1f fc83 	uxth.w	ip, r3
 800fb8e:	0c00      	lsrs	r0, r0, #16
 800fb90:	ebc2 020c 	rsb	r2, r2, ip
 800fb94:	eb02 4229 	add.w	r2, r2, r9, asr #16
 800fb98:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800fb9c:	eb03 4022 	add.w	r0, r3, r2, asr #16
 800fba0:	b292      	uxth	r2, r2
 800fba2:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 800fba6:	4673      	mov	r3, lr
 800fba8:	1d0a      	adds	r2, r1, #4
 800fbaa:	4297      	cmp	r7, r2
 800fbac:	f843 ab04 	str.w	sl, [r3], #4
 800fbb0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800fbb4:	d2cd      	bcs.n	800fb52 <quorem+0x232>
 800fbb6:	1d21      	adds	r1, r4, #4
 800fbb8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 800fbbc:	6858      	ldr	r0, [r3, #4]
 800fbbe:	b990      	cbnz	r0, 800fbe6 <quorem+0x2c6>
 800fbc0:	1d1a      	adds	r2, r3, #4
 800fbc2:	4598      	cmp	r8, r3
 800fbc4:	d20e      	bcs.n	800fbe4 <quorem+0x2c4>
 800fbc6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800fbca:	b959      	cbnz	r1, 800fbe4 <quorem+0x2c4>
 800fbcc:	3b04      	subs	r3, #4
 800fbce:	ebc8 0003 	rsb	r0, r8, r3
 800fbd2:	1cc2      	adds	r2, r0, #3
 800fbd4:	0752      	lsls	r2, r2, #29
 800fbd6:	d513      	bpl.n	800fc00 <quorem+0x2e0>
 800fbd8:	3c01      	subs	r4, #1
 800fbda:	4598      	cmp	r8, r3
 800fbdc:	d202      	bcs.n	800fbe4 <quorem+0x2c4>
 800fbde:	6818      	ldr	r0, [r3, #0]
 800fbe0:	3b04      	subs	r3, #4
 800fbe2:	b168      	cbz	r0, 800fc00 <quorem+0x2e0>
 800fbe4:	6134      	str	r4, [r6, #16]
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	b003      	add	sp, #12
 800fbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	3b04      	subs	r3, #4
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	d1f6      	bne.n	800fbe4 <quorem+0x2c4>
 800fbf6:	6819      	ldr	r1, [r3, #0]
 800fbf8:	3c01      	subs	r4, #1
 800fbfa:	3b04      	subs	r3, #4
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	d1f1      	bne.n	800fbe4 <quorem+0x2c4>
 800fc00:	3c01      	subs	r4, #1
 800fc02:	4598      	cmp	r8, r3
 800fc04:	d3f3      	bcc.n	800fbee <quorem+0x2ce>
 800fc06:	e7ed      	b.n	800fbe4 <quorem+0x2c4>
 800fc08:	2000      	movs	r0, #0
 800fc0a:	e7ed      	b.n	800fbe8 <quorem+0x2c8>
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <_dtoa_r>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800fc16:	b09f      	sub	sp, #124	; 0x7c
 800fc18:	4681      	mov	r9, r0
 800fc1a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800fc1c:	4692      	mov	sl, r2
 800fc1e:	469b      	mov	fp, r3
 800fc20:	b151      	cbz	r1, 800fc38 <_dtoa_r+0x28>
 800fc22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fc24:	2201      	movs	r2, #1
 800fc26:	fa02 f203 	lsl.w	r2, r2, r3
 800fc2a:	604b      	str	r3, [r1, #4]
 800fc2c:	608a      	str	r2, [r1, #8]
 800fc2e:	f002 f83d 	bl	8011cac <_Bfree>
 800fc32:	2000      	movs	r0, #0
 800fc34:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800fc38:	f1bb 0800 	subs.w	r8, fp, #0
 800fc3c:	db39      	blt.n	800fcb2 <_dtoa_r+0xa2>
 800fc3e:	2100      	movs	r1, #0
 800fc40:	6021      	str	r1, [r4, #0]
 800fc42:	2400      	movs	r4, #0
 800fc44:	4622      	mov	r2, r4
 800fc46:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 800fc4a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800fc4e:	ea08 0004 	and.w	r0, r8, r4
 800fc52:	4290      	cmp	r0, r2
 800fc54:	d016      	beq.n	800fc84 <_dtoa_r+0x74>
 800fc56:	2200      	movs	r2, #0
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4650      	mov	r0, sl
 800fc5c:	4659      	mov	r1, fp
 800fc5e:	f7fb ffd1 	bl	800bc04 <__aeabi_dcmpeq>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d02b      	beq.n	800fcbe <_dtoa_r+0xae>
 800fc66:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fc68:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	6028      	str	r0, [r5, #0]
 800fc6e:	2c00      	cmp	r4, #0
 800fc70:	f000 80cf 	beq.w	800fe12 <_dtoa_r+0x202>
 800fc74:	49a2      	ldr	r1, [pc, #648]	; (800ff00 <_dtoa_r+0x2f0>)
 800fc76:	1e4b      	subs	r3, r1, #1
 800fc78:	6021      	str	r1, [r4, #0]
 800fc7a:	9305      	str	r3, [sp, #20]
 800fc7c:	9805      	ldr	r0, [sp, #20]
 800fc7e:	b01f      	add	sp, #124	; 0x7c
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc84:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800fc86:	f242 720f 	movw	r2, #9999	; 0x270f
 800fc8a:	6022      	str	r2, [r4, #0]
 800fc8c:	f1ba 0f00 	cmp.w	sl, #0
 800fc90:	f000 80a6 	beq.w	800fde0 <_dtoa_r+0x1d0>
 800fc94:	4d9b      	ldr	r5, [pc, #620]	; (800ff04 <_dtoa_r+0x2f4>)
 800fc96:	9505      	str	r5, [sp, #20]
 800fc98:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	d0ee      	beq.n	800fc7c <_dtoa_r+0x6c>
 800fc9e:	9d05      	ldr	r5, [sp, #20]
 800fca0:	78eb      	ldrb	r3, [r5, #3]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 820b 	beq.w	80100be <_dtoa_r+0x4ae>
 800fca8:	4628      	mov	r0, r5
 800fcaa:	3008      	adds	r0, #8
 800fcac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fcae:	6020      	str	r0, [r4, #0]
 800fcb0:	e7e4      	b.n	800fc7c <_dtoa_r+0x6c>
 800fcb2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	46c3      	mov	fp, r8
 800fcbc:	e7c1      	b.n	800fc42 <_dtoa_r+0x32>
 800fcbe:	ae1d      	add	r6, sp, #116	; 0x74
 800fcc0:	af1c      	add	r7, sp, #112	; 0x70
 800fcc2:	4652      	mov	r2, sl
 800fcc4:	9600      	str	r6, [sp, #0]
 800fcc6:	9701      	str	r7, [sp, #4]
 800fcc8:	4648      	mov	r0, r9
 800fcca:	465b      	mov	r3, fp
 800fccc:	f002 fc74 	bl	80125b8 <__d2b>
 800fcd0:	f3c8 520a 	ubfx	r2, r8, #20, #11
 800fcd4:	900c      	str	r0, [sp, #48]	; 0x30
 800fcd6:	2a00      	cmp	r2, #0
 800fcd8:	f040 808c 	bne.w	800fdf4 <_dtoa_r+0x1e4>
 800fcdc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fcde:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fce0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800fce4:	187e      	adds	r6, r7, r1
 800fce6:	429e      	cmp	r6, r3
 800fce8:	f2c0 8334 	blt.w	8010354 <_dtoa_r+0x744>
 800fcec:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 800fcf0:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 800fcf4:	1ba9      	subs	r1, r5, r6
 800fcf6:	f206 4212 	addw	r2, r6, #1042	; 0x412
 800fcfa:	fa08 f301 	lsl.w	r3, r8, r1
 800fcfe:	fa2a f002 	lsr.w	r0, sl, r2
 800fd02:	4318      	orrs	r0, r3
 800fd04:	f7fb fca0 	bl	800b648 <__aeabi_ui2d>
 800fd08:	2401      	movs	r4, #1
 800fd0a:	3e01      	subs	r6, #1
 800fd0c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fd10:	940d      	str	r4, [sp, #52]	; 0x34
 800fd12:	2300      	movs	r3, #0
 800fd14:	2200      	movs	r2, #0
 800fd16:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800fd1a:	f7fb fb57 	bl	800b3cc <__aeabi_dsub>
 800fd1e:	a372      	add	r3, pc, #456	; (adr r3, 800fee8 <_dtoa_r+0x2d8>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	f7fb fd06 	bl	800b734 <__aeabi_dmul>
 800fd28:	a371      	add	r3, pc, #452	; (adr r3, 800fef0 <_dtoa_r+0x2e0>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7fb fb4f 	bl	800b3d0 <__adddf3>
 800fd32:	4604      	mov	r4, r0
 800fd34:	4630      	mov	r0, r6
 800fd36:	460d      	mov	r5, r1
 800fd38:	f7fb fc96 	bl	800b668 <__aeabi_i2d>
 800fd3c:	a36e      	add	r3, pc, #440	; (adr r3, 800fef8 <_dtoa_r+0x2e8>)
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	f7fb fcf7 	bl	800b734 <__aeabi_dmul>
 800fd46:	4602      	mov	r2, r0
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	f7fb fb3f 	bl	800b3d0 <__adddf3>
 800fd52:	4604      	mov	r4, r0
 800fd54:	460d      	mov	r5, r1
 800fd56:	f7fb ff87 	bl	800bc68 <__aeabi_d2iz>
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	9009      	str	r0, [sp, #36]	; 0x24
 800fd5e:	2200      	movs	r2, #0
 800fd60:	4620      	mov	r0, r4
 800fd62:	2300      	movs	r3, #0
 800fd64:	f7fb ff58 	bl	800bc18 <__aeabi_dcmplt>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f040 82c6 	bne.w	80102fa <_dtoa_r+0x6ea>
 800fd6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd70:	2816      	cmp	r0, #22
 800fd72:	f200 82bf 	bhi.w	80102f4 <_dtoa_r+0x6e4>
 800fd76:	4c64      	ldr	r4, [pc, #400]	; (800ff08 <_dtoa_r+0x2f8>)
 800fd78:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 800fd7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fd80:	4652      	mov	r2, sl
 800fd82:	465b      	mov	r3, fp
 800fd84:	f7fb ff66 	bl	800bc54 <__aeabi_dcmpgt>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	f000 82eb 	beq.w	8010364 <_dtoa_r+0x754>
 800fd8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd90:	2000      	movs	r0, #0
 800fd92:	1e4b      	subs	r3, r1, #1
 800fd94:	9309      	str	r3, [sp, #36]	; 0x24
 800fd96:	9012      	str	r0, [sp, #72]	; 0x48
 800fd98:	1bbe      	subs	r6, r7, r6
 800fd9a:	3e01      	subs	r6, #1
 800fd9c:	f100 82c4 	bmi.w	8010328 <_dtoa_r+0x718>
 800fda0:	2400      	movs	r4, #0
 800fda2:	960a      	str	r6, [sp, #40]	; 0x28
 800fda4:	940e      	str	r4, [sp, #56]	; 0x38
 800fda6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fda8:	2900      	cmp	r1, #0
 800fdaa:	f2c0 82b4 	blt.w	8010316 <_dtoa_r+0x706>
 800fdae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fdb0:	9111      	str	r1, [sp, #68]	; 0x44
 800fdb2:	186b      	adds	r3, r5, r1
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	930a      	str	r3, [sp, #40]	; 0x28
 800fdb8:	9110      	str	r1, [sp, #64]	; 0x40
 800fdba:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fdbc:	2809      	cmp	r0, #9
 800fdbe:	d82b      	bhi.n	800fe18 <_dtoa_r+0x208>
 800fdc0:	2805      	cmp	r0, #5
 800fdc2:	f341 804c 	ble.w	8010e5e <_dtoa_r+0x124e>
 800fdc6:	1f02      	subs	r2, r0, #4
 800fdc8:	9228      	str	r2, [sp, #160]	; 0xa0
 800fdca:	2500      	movs	r5, #0
 800fdcc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800fdce:	1ea3      	subs	r3, r4, #2
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d823      	bhi.n	800fe1c <_dtoa_r+0x20c>
 800fdd4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fdd8:	052f0543 	.word	0x052f0543
 800fddc:	05400349 	.word	0x05400349
 800fde0:	4848      	ldr	r0, [pc, #288]	; (800ff04 <_dtoa_r+0x2f4>)
 800fde2:	494a      	ldr	r1, [pc, #296]	; (800ff0c <_dtoa_r+0x2fc>)
 800fde4:	f3c8 0813 	ubfx	r8, r8, #0, #20
 800fde8:	f1b8 0f00 	cmp.w	r8, #0
 800fdec:	bf18      	it	ne
 800fdee:	4601      	movne	r1, r0
 800fdf0:	9105      	str	r1, [sp, #20]
 800fdf2:	e751      	b.n	800fc98 <_dtoa_r+0x88>
 800fdf4:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 800fdf8:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 800fdfc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fe00:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fe04:	2200      	movs	r2, #0
 800fe06:	4650      	mov	r0, sl
 800fe08:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 800fe0c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fe0e:	920d      	str	r2, [sp, #52]	; 0x34
 800fe10:	e77f      	b.n	800fd12 <_dtoa_r+0x102>
 800fe12:	4d3f      	ldr	r5, [pc, #252]	; (800ff10 <_dtoa_r+0x300>)
 800fe14:	9505      	str	r5, [sp, #20]
 800fe16:	e731      	b.n	800fc7c <_dtoa_r+0x6c>
 800fe18:	2500      	movs	r5, #0
 800fe1a:	9528      	str	r5, [sp, #160]	; 0xa0
 800fe1c:	2400      	movs	r4, #0
 800fe1e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800fe22:	4648      	mov	r0, r9
 800fe24:	4621      	mov	r1, r4
 800fe26:	f001 ff1b 	bl	8011c60 <_Balloc>
 800fe2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2e:	9005      	str	r0, [sp, #20]
 800fe30:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800fe34:	2001      	movs	r0, #1
 800fe36:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe38:	9313      	str	r3, [sp, #76]	; 0x4c
 800fe3a:	9429      	str	r4, [sp, #164]	; 0xa4
 800fe3c:	900f      	str	r0, [sp, #60]	; 0x3c
 800fe3e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fe40:	2900      	cmp	r1, #0
 800fe42:	f2c0 813f 	blt.w	80100c4 <_dtoa_r+0x4b4>
 800fe46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe48:	2a0e      	cmp	r2, #14
 800fe4a:	f300 813b 	bgt.w	80100c4 <_dtoa_r+0x4b4>
 800fe4e:	4d2e      	ldr	r5, [pc, #184]	; (800ff08 <_dtoa_r+0x2f8>)
 800fe50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fe52:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800fe56:	ed90 7b00 	vldr	d7, [r0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe60:	f2c0 8500 	blt.w	8010864 <_dtoa_r+0xc54>
 800fe64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe68:	4650      	mov	r0, sl
 800fe6a:	4659      	mov	r1, fp
 800fe6c:	f7fb fd8c 	bl	800b988 <__aeabi_ddiv>
 800fe70:	f7fb fefa 	bl	800bc68 <__aeabi_d2iz>
 800fe74:	4606      	mov	r6, r0
 800fe76:	f7fb fbf7 	bl	800b668 <__aeabi_i2d>
 800fe7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe7e:	f7fb fc59 	bl	800b734 <__aeabi_dmul>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	4650      	mov	r0, sl
 800fe88:	4659      	mov	r1, fp
 800fe8a:	f7fb fa9f 	bl	800b3cc <__aeabi_dsub>
 800fe8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fe94:	f106 0230 	add.w	r2, r6, #48	; 0x30
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	f808 2b01 	strb.w	r2, [r8], #1
 800fea2:	f000 8091 	beq.w	800ffc8 <_dtoa_r+0x3b8>
 800fea6:	2300      	movs	r3, #0
 800fea8:	2200      	movs	r2, #0
 800feaa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800feae:	f7fb fc41 	bl	800b734 <__aeabi_dmul>
 800feb2:	2200      	movs	r2, #0
 800feb4:	2300      	movs	r3, #0
 800feb6:	4604      	mov	r4, r0
 800feb8:	460d      	mov	r5, r1
 800feba:	f7fb fea3 	bl	800bc04 <__aeabi_dcmpeq>
 800febe:	2800      	cmp	r0, #0
 800fec0:	f040 80c0 	bne.w	8010044 <_dtoa_r+0x434>
 800fec4:	9f05      	ldr	r7, [sp, #20]
 800fec6:	9e05      	ldr	r6, [sp, #20]
 800fec8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800feca:	3702      	adds	r7, #2
 800fecc:	eb06 0b00 	add.w	fp, r6, r0
 800fed0:	ebc7 010b 	rsb	r1, r7, fp
 800fed4:	07c9      	lsls	r1, r1, #31
 800fed6:	f100 80c7 	bmi.w	8010068 <_dtoa_r+0x458>
 800feda:	f8cd b020 	str.w	fp, [sp, #32]
 800fede:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800fee2:	e04b      	b.n	800ff7c <_dtoa_r+0x36c>
 800fee4:	f3af 8000 	nop.w
 800fee8:	636f4361 	.word	0x636f4361
 800feec:	3fd287a7 	.word	0x3fd287a7
 800fef0:	8b60c8b3 	.word	0x8b60c8b3
 800fef4:	3fc68a28 	.word	0x3fc68a28
 800fef8:	509f79fb 	.word	0x509f79fb
 800fefc:	3fd34413 	.word	0x3fd34413
 800ff00:	080136a9 	.word	0x080136a9
 800ff04:	080136c8 	.word	0x080136c8
 800ff08:	080136e8 	.word	0x080136e8
 800ff0c:	080136bc 	.word	0x080136bc
 800ff10:	080136a8 	.word	0x080136a8
 800ff14:	f7fb fc0e 	bl	800b734 <__aeabi_dmul>
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	460d      	mov	r5, r1
 800ff20:	f7fb fe70 	bl	800bc04 <__aeabi_dcmpeq>
 800ff24:	4652      	mov	r2, sl
 800ff26:	465b      	mov	r3, fp
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	f040 808b 	bne.w	8010044 <_dtoa_r+0x434>
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7fb fd29 	bl	800b988 <__aeabi_ddiv>
 800ff36:	f7fb fe97 	bl	800bc68 <__aeabi_d2iz>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	f7fb fb94 	bl	800b668 <__aeabi_i2d>
 800ff40:	4652      	mov	r2, sl
 800ff42:	465b      	mov	r3, fp
 800ff44:	f7fb fbf6 	bl	800b734 <__aeabi_dmul>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	4629      	mov	r1, r5
 800ff50:	f7fb fa3c 	bl	800b3cc <__aeabi_dsub>
 800ff54:	3630      	adds	r6, #48	; 0x30
 800ff56:	2300      	movs	r3, #0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ff5e:	f807 6c01 	strb.w	r6, [r7, #-1]
 800ff62:	f7fb fbe7 	bl	800b734 <__aeabi_dmul>
 800ff66:	2200      	movs	r2, #0
 800ff68:	2300      	movs	r3, #0
 800ff6a:	46b8      	mov	r8, r7
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	460d      	mov	r5, r1
 800ff70:	f107 0701 	add.w	r7, r7, #1
 800ff74:	f7fb fe46 	bl	800bc04 <__aeabi_dcmpeq>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	d163      	bne.n	8010044 <_dtoa_r+0x434>
 800ff7c:	4652      	mov	r2, sl
 800ff7e:	465b      	mov	r3, fp
 800ff80:	4620      	mov	r0, r4
 800ff82:	4629      	mov	r1, r5
 800ff84:	f7fb fd00 	bl	800b988 <__aeabi_ddiv>
 800ff88:	f7fb fe6e 	bl	800bc68 <__aeabi_d2iz>
 800ff8c:	4606      	mov	r6, r0
 800ff8e:	f7fb fb6b 	bl	800b668 <__aeabi_i2d>
 800ff92:	4652      	mov	r2, sl
 800ff94:	465b      	mov	r3, fp
 800ff96:	f7fb fbcd 	bl	800b734 <__aeabi_dmul>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7fb fa13 	bl	800b3cc <__aeabi_dsub>
 800ffa6:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	4567      	cmp	r7, ip
 800ffb4:	f807 8c01 	strb.w	r8, [r7, #-1]
 800ffb8:	4604      	mov	r4, r0
 800ffba:	46b8      	mov	r8, r7
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ffc2:	f107 0701 	add.w	r7, r7, #1
 800ffc6:	d1a5      	bne.n	800ff14 <_dtoa_r+0x304>
 800ffc8:	4622      	mov	r2, r4
 800ffca:	462b      	mov	r3, r5
 800ffcc:	4620      	mov	r0, r4
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f7fb f9fe 	bl	800b3d0 <__adddf3>
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	460d      	mov	r5, r1
 800ffd8:	4622      	mov	r2, r4
 800ffda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffde:	462b      	mov	r3, r5
 800ffe0:	f7fb fe1a 	bl	800bc18 <__aeabi_dcmplt>
 800ffe4:	b940      	cbnz	r0, 800fff8 <_dtoa_r+0x3e8>
 800ffe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffea:	4622      	mov	r2, r4
 800ffec:	462b      	mov	r3, r5
 800ffee:	f7fb fe09 	bl	800bc04 <__aeabi_dcmpeq>
 800fff2:	b338      	cbz	r0, 8010044 <_dtoa_r+0x434>
 800fff4:	07f4      	lsls	r4, r6, #31
 800fff6:	d525      	bpl.n	8010044 <_dtoa_r+0x434>
 800fff8:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 800fffc:	9a05      	ldr	r2, [sp, #20]
 800fffe:	43d3      	mvns	r3, r2
 8010000:	eb08 0003 	add.w	r0, r8, r3
 8010004:	07c0      	lsls	r0, r0, #31
 8010006:	f100 8504 	bmi.w	8010a12 <_dtoa_r+0xe02>
 801000a:	4614      	mov	r4, r2
 801000c:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8010010:	f108 31ff 	add.w	r1, r8, #4294967295
 8010014:	d112      	bne.n	801003c <_dtoa_r+0x42c>
 8010016:	428c      	cmp	r4, r1
 8010018:	f000 853e 	beq.w	8010a98 <_dtoa_r+0xe88>
 801001c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8010020:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8010024:	4688      	mov	r8, r1
 8010026:	f101 31ff 	add.w	r1, r1, #4294967295
 801002a:	d107      	bne.n	801003c <_dtoa_r+0x42c>
 801002c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8010030:	4688      	mov	r8, r1
 8010032:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8010036:	f108 31ff 	add.w	r1, r8, #4294967295
 801003a:	d0ec      	beq.n	8010016 <_dtoa_r+0x406>
 801003c:	f10b 0501 	add.w	r5, fp, #1
 8010040:	b2ea      	uxtb	r2, r5
 8010042:	700a      	strb	r2, [r1, #0]
 8010044:	4648      	mov	r0, r9
 8010046:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010048:	f001 fe30 	bl	8011cac <_Bfree>
 801004c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801004e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8010050:	1c6b      	adds	r3, r5, #1
 8010052:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8010054:	2200      	movs	r2, #0
 8010056:	f888 2000 	strb.w	r2, [r8]
 801005a:	602b      	str	r3, [r5, #0]
 801005c:	2c00      	cmp	r4, #0
 801005e:	f43f ae0d 	beq.w	800fc7c <_dtoa_r+0x6c>
 8010062:	f8c4 8000 	str.w	r8, [r4]
 8010066:	e609      	b.n	800fc7c <_dtoa_r+0x6c>
 8010068:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801006c:	4620      	mov	r0, r4
 801006e:	4629      	mov	r1, r5
 8010070:	f7fb fc8a 	bl	800b988 <__aeabi_ddiv>
 8010074:	f7fb fdf8 	bl	800bc68 <__aeabi_d2iz>
 8010078:	4606      	mov	r6, r0
 801007a:	f7fb faf5 	bl	800b668 <__aeabi_i2d>
 801007e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010082:	f7fb fb57 	bl	800b734 <__aeabi_dmul>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4620      	mov	r0, r4
 801008c:	4629      	mov	r1, r5
 801008e:	f7fb f99d 	bl	800b3cc <__aeabi_dsub>
 8010092:	3630      	adds	r6, #48	; 0x30
 8010094:	2300      	movs	r3, #0
 8010096:	2200      	movs	r2, #0
 8010098:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801009c:	f807 6c01 	strb.w	r6, [r7, #-1]
 80100a0:	f7fb fb48 	bl	800b734 <__aeabi_dmul>
 80100a4:	46b8      	mov	r8, r7
 80100a6:	9f05      	ldr	r7, [sp, #20]
 80100a8:	2200      	movs	r2, #0
 80100aa:	2300      	movs	r3, #0
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	3703      	adds	r7, #3
 80100b2:	f7fb fda7 	bl	800bc04 <__aeabi_dcmpeq>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f af0f 	beq.w	800feda <_dtoa_r+0x2ca>
 80100bc:	e7c2      	b.n	8010044 <_dtoa_r+0x434>
 80100be:	9a05      	ldr	r2, [sp, #20]
 80100c0:	1cd0      	adds	r0, r2, #3
 80100c2:	e5f3      	b.n	800fcac <_dtoa_r+0x9c>
 80100c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80100c6:	2f00      	cmp	r7, #0
 80100c8:	f000 8133 	beq.w	8010332 <_dtoa_r+0x722>
 80100cc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80100ce:	2c01      	cmp	r4, #1
 80100d0:	f340 83f8 	ble.w	80108c4 <_dtoa_r+0xcb4>
 80100d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80100d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80100d8:	1e41      	subs	r1, r0, #1
 80100da:	428a      	cmp	r2, r1
 80100dc:	f2c0 84e7 	blt.w	8010aae <_dtoa_r+0xe9e>
 80100e0:	1a55      	subs	r5, r2, r1
 80100e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f2c0 8637 	blt.w	8010d58 <_dtoa_r+0x1148>
 80100ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80100ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80100ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100f0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80100f4:	19da      	adds	r2, r3, r7
 80100f6:	eb0e 0807 	add.w	r8, lr, r7
 80100fa:	4648      	mov	r0, r9
 80100fc:	2101      	movs	r1, #1
 80100fe:	920e      	str	r2, [sp, #56]	; 0x38
 8010100:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010104:	f001 fea4 	bl	8011e50 <__i2b>
 8010108:	900d      	str	r0, [sp, #52]	; 0x34
 801010a:	b17c      	cbz	r4, 801012c <_dtoa_r+0x51c>
 801010c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801010e:	2800      	cmp	r0, #0
 8010110:	dd0c      	ble.n	801012c <_dtoa_r+0x51c>
 8010112:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8010116:	4607      	mov	r7, r0
 8010118:	42a7      	cmp	r7, r4
 801011a:	bfa8      	it	ge
 801011c:	4627      	movge	r7, r4
 801011e:	ebc7 0e0c 	rsb	lr, r7, ip
 8010122:	1bc1      	subs	r1, r0, r7
 8010124:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8010128:	1be4      	subs	r4, r4, r7
 801012a:	910a      	str	r1, [sp, #40]	; 0x28
 801012c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd1a      	ble.n	8010168 <_dtoa_r+0x558>
 8010132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010134:	2a00      	cmp	r2, #0
 8010136:	f000 84a7 	beq.w	8010a88 <_dtoa_r+0xe78>
 801013a:	2d00      	cmp	r5, #0
 801013c:	dd10      	ble.n	8010160 <_dtoa_r+0x550>
 801013e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010140:	462a      	mov	r2, r5
 8010142:	4648      	mov	r0, r9
 8010144:	f001 fff6 	bl	8012134 <__pow5mult>
 8010148:	900d      	str	r0, [sp, #52]	; 0x34
 801014a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801014c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801014e:	4648      	mov	r0, r9
 8010150:	f001 fe88 	bl	8011e64 <__multiply>
 8010154:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010156:	4606      	mov	r6, r0
 8010158:	4648      	mov	r0, r9
 801015a:	f001 fda7 	bl	8011cac <_Bfree>
 801015e:	960c      	str	r6, [sp, #48]	; 0x30
 8010160:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010162:	1b42      	subs	r2, r0, r5
 8010164:	f040 83a8 	bne.w	80108b8 <_dtoa_r+0xca8>
 8010168:	2101      	movs	r1, #1
 801016a:	4648      	mov	r0, r9
 801016c:	f001 fe70 	bl	8011e50 <__i2b>
 8010170:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010172:	2d00      	cmp	r5, #0
 8010174:	4607      	mov	r7, r0
 8010176:	dd05      	ble.n	8010184 <_dtoa_r+0x574>
 8010178:	4639      	mov	r1, r7
 801017a:	4648      	mov	r0, r9
 801017c:	462a      	mov	r2, r5
 801017e:	f001 ffd9 	bl	8012134 <__pow5mult>
 8010182:	4607      	mov	r7, r0
 8010184:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010186:	2901      	cmp	r1, #1
 8010188:	f340 8156 	ble.w	8010438 <_dtoa_r+0x828>
 801018c:	2500      	movs	r5, #0
 801018e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010190:	2800      	cmp	r0, #0
 8010192:	f040 8416 	bne.w	80109c2 <_dtoa_r+0xdb2>
 8010196:	2101      	movs	r1, #1
 8010198:	980a      	ldr	r0, [sp, #40]	; 0x28
 801019a:	1809      	adds	r1, r1, r0
 801019c:	f011 031f 	ands.w	r3, r1, #31
 80101a0:	f000 80cc 	beq.w	801033c <_dtoa_r+0x72c>
 80101a4:	f1c3 0220 	rsb	r2, r3, #32
 80101a8:	2a04      	cmp	r2, #4
 80101aa:	f340 865b 	ble.w	8010e64 <_dtoa_r+0x1254>
 80101ae:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80101b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101b4:	f1c3 001c 	rsb	r0, r3, #28
 80101b8:	eb0e 0800 	add.w	r8, lr, r0
 80101bc:	1811      	adds	r1, r2, r0
 80101be:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80101c2:	1824      	adds	r4, r4, r0
 80101c4:	910a      	str	r1, [sp, #40]	; 0x28
 80101c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	dd05      	ble.n	80101d8 <_dtoa_r+0x5c8>
 80101cc:	4648      	mov	r0, r9
 80101ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101d2:	f001 fff9 	bl	80121c8 <__lshift>
 80101d6:	900c      	str	r0, [sp, #48]	; 0x30
 80101d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101da:	2a00      	cmp	r2, #0
 80101dc:	dd04      	ble.n	80101e8 <_dtoa_r+0x5d8>
 80101de:	4639      	mov	r1, r7
 80101e0:	4648      	mov	r0, r9
 80101e2:	f001 fff1 	bl	80121c8 <__lshift>
 80101e6:	4607      	mov	r7, r0
 80101e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f040 83ce 	bne.w	801098c <_dtoa_r+0xd7c>
 80101f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80101f2:	2800      	cmp	r0, #0
 80101f4:	f340 83ef 	ble.w	80109d6 <_dtoa_r+0xdc6>
 80101f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80101fa:	2900      	cmp	r1, #0
 80101fc:	f040 80b4 	bne.w	8010368 <_dtoa_r+0x758>
 8010200:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010204:	07e2      	lsls	r2, r4, #31
 8010206:	f140 839f 	bpl.w	8010948 <_dtoa_r+0xd38>
 801020a:	46a2      	mov	sl, r4
 801020c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801020e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010212:	e010      	b.n	8010236 <_dtoa_r+0x626>
 8010214:	f001 fd54 	bl	8011cc0 <__multadd>
 8010218:	4639      	mov	r1, r7
 801021a:	4606      	mov	r6, r0
 801021c:	f7ff fb80 	bl	800f920 <quorem>
 8010220:	3030      	adds	r0, #48	; 0x30
 8010222:	f808 0004 	strb.w	r0, [r8, r4]
 8010226:	4631      	mov	r1, r6
 8010228:	4648      	mov	r0, r9
 801022a:	220a      	movs	r2, #10
 801022c:	2300      	movs	r3, #0
 801022e:	f001 fd47 	bl	8011cc0 <__multadd>
 8010232:	1c65      	adds	r5, r4, #1
 8010234:	4606      	mov	r6, r0
 8010236:	4639      	mov	r1, r7
 8010238:	4630      	mov	r0, r6
 801023a:	f7ff fb71 	bl	800f920 <quorem>
 801023e:	1c6c      	adds	r4, r5, #1
 8010240:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8010244:	220a      	movs	r2, #10
 8010246:	2300      	movs	r3, #0
 8010248:	45a2      	cmp	sl, r4
 801024a:	4631      	mov	r1, r6
 801024c:	4648      	mov	r0, r9
 801024e:	f808 b005 	strb.w	fp, [r8, r5]
 8010252:	dcdf      	bgt.n	8010214 <_dtoa_r+0x604>
 8010254:	960c      	str	r6, [sp, #48]	; 0x30
 8010256:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801025a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801025c:	2500      	movs	r5, #0
 801025e:	2a01      	cmp	r2, #1
 8010260:	bfac      	ite	ge
 8010262:	4490      	addge	r8, r2
 8010264:	f108 0801 	addlt.w	r8, r8, #1
 8010268:	2201      	movs	r2, #1
 801026a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801026c:	4648      	mov	r0, r9
 801026e:	f001 ffab 	bl	80121c8 <__lshift>
 8010272:	4639      	mov	r1, r7
 8010274:	900c      	str	r0, [sp, #48]	; 0x30
 8010276:	f002 f86b 	bl	8012350 <__mcmp>
 801027a:	2800      	cmp	r0, #0
 801027c:	f340 8449 	ble.w	8010b12 <_dtoa_r+0xf02>
 8010280:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010284:	9905      	ldr	r1, [sp, #20]
 8010286:	43c8      	mvns	r0, r1
 8010288:	eb08 0300 	add.w	r3, r8, r0
 801028c:	07db      	lsls	r3, r3, #31
 801028e:	d507      	bpl.n	80102a0 <_dtoa_r+0x690>
 8010290:	2a39      	cmp	r2, #57	; 0x39
 8010292:	f108 34ff 	add.w	r4, r8, #4294967295
 8010296:	d118      	bne.n	80102ca <_dtoa_r+0x6ba>
 8010298:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801029c:	9905      	ldr	r1, [sp, #20]
 801029e:	46a0      	mov	r8, r4
 80102a0:	2a39      	cmp	r2, #57	; 0x39
 80102a2:	f108 34ff 	add.w	r4, r8, #4294967295
 80102a6:	d110      	bne.n	80102ca <_dtoa_r+0x6ba>
 80102a8:	42a1      	cmp	r1, r4
 80102aa:	f000 8368 	beq.w	801097e <_dtoa_r+0xd6e>
 80102ae:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80102b2:	2a39      	cmp	r2, #57	; 0x39
 80102b4:	46a0      	mov	r8, r4
 80102b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80102ba:	d106      	bne.n	80102ca <_dtoa_r+0x6ba>
 80102bc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80102c0:	46a0      	mov	r8, r4
 80102c2:	2a39      	cmp	r2, #57	; 0x39
 80102c4:	f108 34ff 	add.w	r4, r8, #4294967295
 80102c8:	d0ee      	beq.n	80102a8 <_dtoa_r+0x698>
 80102ca:	3201      	adds	r2, #1
 80102cc:	7022      	strb	r2, [r4, #0]
 80102ce:	4648      	mov	r0, r9
 80102d0:	4639      	mov	r1, r7
 80102d2:	f001 fceb 	bl	8011cac <_Bfree>
 80102d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102d8:	2a00      	cmp	r2, #0
 80102da:	f43f aeb3 	beq.w	8010044 <_dtoa_r+0x434>
 80102de:	2d00      	cmp	r5, #0
 80102e0:	f000 82e4 	beq.w	80108ac <_dtoa_r+0xc9c>
 80102e4:	4295      	cmp	r5, r2
 80102e6:	f000 82e1 	beq.w	80108ac <_dtoa_r+0xc9c>
 80102ea:	4648      	mov	r0, r9
 80102ec:	4629      	mov	r1, r5
 80102ee:	f001 fcdd 	bl	8011cac <_Bfree>
 80102f2:	e2db      	b.n	80108ac <_dtoa_r+0xc9c>
 80102f4:	2201      	movs	r2, #1
 80102f6:	9212      	str	r2, [sp, #72]	; 0x48
 80102f8:	e54e      	b.n	800fd98 <_dtoa_r+0x188>
 80102fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102fc:	f7fb f9b4 	bl	800b668 <__aeabi_i2d>
 8010300:	4622      	mov	r2, r4
 8010302:	462b      	mov	r3, r5
 8010304:	f7fb fc7e 	bl	800bc04 <__aeabi_dcmpeq>
 8010308:	2800      	cmp	r0, #0
 801030a:	f47f ad30 	bne.w	800fd6e <_dtoa_r+0x15e>
 801030e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010310:	1e4b      	subs	r3, r1, #1
 8010312:	9309      	str	r3, [sp, #36]	; 0x24
 8010314:	e52b      	b.n	800fd6e <_dtoa_r+0x15e>
 8010316:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801031a:	2400      	movs	r4, #0
 801031c:	1ae8      	subs	r0, r5, r3
 801031e:	425a      	negs	r2, r3
 8010320:	900e      	str	r0, [sp, #56]	; 0x38
 8010322:	9210      	str	r2, [sp, #64]	; 0x40
 8010324:	9411      	str	r4, [sp, #68]	; 0x44
 8010326:	e548      	b.n	800fdba <_dtoa_r+0x1aa>
 8010328:	4276      	negs	r6, r6
 801032a:	2200      	movs	r2, #0
 801032c:	960e      	str	r6, [sp, #56]	; 0x38
 801032e:	920a      	str	r2, [sp, #40]	; 0x28
 8010330:	e539      	b.n	800fda6 <_dtoa_r+0x196>
 8010332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010334:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010336:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010338:	930d      	str	r3, [sp, #52]	; 0x34
 801033a:	e6e6      	b.n	801010a <_dtoa_r+0x4fa>
 801033c:	201c      	movs	r0, #28
 801033e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010340:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8010344:	180b      	adds	r3, r1, r0
 8010346:	eb08 0c00 	add.w	ip, r8, r0
 801034a:	930e      	str	r3, [sp, #56]	; 0x38
 801034c:	1824      	adds	r4, r4, r0
 801034e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8010352:	e738      	b.n	80101c6 <_dtoa_r+0x5b6>
 8010354:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8010358:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 801035c:	1b84      	subs	r4, r0, r6
 801035e:	fa0a f004 	lsl.w	r0, sl, r4
 8010362:	e4cf      	b.n	800fd04 <_dtoa_r+0xf4>
 8010364:	9012      	str	r0, [sp, #72]	; 0x48
 8010366:	e517      	b.n	800fd98 <_dtoa_r+0x188>
 8010368:	2c00      	cmp	r4, #0
 801036a:	dd05      	ble.n	8010378 <_dtoa_r+0x768>
 801036c:	4648      	mov	r0, r9
 801036e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010370:	4622      	mov	r2, r4
 8010372:	f001 ff29 	bl	80121c8 <__lshift>
 8010376:	900d      	str	r0, [sp, #52]	; 0x34
 8010378:	2d00      	cmp	r5, #0
 801037a:	f040 8402 	bne.w	8010b82 <_dtoa_r+0xf72>
 801037e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010380:	9d05      	ldr	r5, [sp, #20]
 8010382:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010384:	9a05      	ldr	r2, [sp, #20]
 8010386:	186b      	adds	r3, r5, r1
 8010388:	f00a 0001 	and.w	r0, sl, #1
 801038c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801038e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010392:	930a      	str	r3, [sp, #40]	; 0x28
 8010394:	1c54      	adds	r4, r2, #1
 8010396:	900b      	str	r0, [sp, #44]	; 0x2c
 8010398:	4639      	mov	r1, r7
 801039a:	4650      	mov	r0, sl
 801039c:	f7ff fac0 	bl	800f920 <quorem>
 80103a0:	4629      	mov	r1, r5
 80103a2:	4680      	mov	r8, r0
 80103a4:	4650      	mov	r0, sl
 80103a6:	f001 ffd3 	bl	8012350 <__mcmp>
 80103aa:	4639      	mov	r1, r7
 80103ac:	4632      	mov	r2, r6
 80103ae:	4683      	mov	fp, r0
 80103b0:	4648      	mov	r0, r9
 80103b2:	f001 fffb 	bl	80123ac <__mdiff>
 80103b6:	68c3      	ldr	r3, [r0, #12]
 80103b8:	1e61      	subs	r1, r4, #1
 80103ba:	4602      	mov	r2, r0
 80103bc:	9108      	str	r1, [sp, #32]
 80103be:	f108 0c30 	add.w	ip, r8, #48	; 0x30
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 8287 	beq.w	80108d6 <_dtoa_r+0xcc6>
 80103c8:	4648      	mov	r0, r9
 80103ca:	4611      	mov	r1, r2
 80103cc:	f8cd c00c 	str.w	ip, [sp, #12]
 80103d0:	f001 fc6c 	bl	8011cac <_Bfree>
 80103d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80103d8:	2001      	movs	r0, #1
 80103da:	f1bb 0f00 	cmp.w	fp, #0
 80103de:	f2c0 8378 	blt.w	8010ad2 <_dtoa_r+0xec2>
 80103e2:	d105      	bne.n	80103f0 <_dtoa_r+0x7e0>
 80103e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80103e6:	b91a      	cbnz	r2, 80103f0 <_dtoa_r+0x7e0>
 80103e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103ea:	2900      	cmp	r1, #0
 80103ec:	f000 8371 	beq.w	8010ad2 <_dtoa_r+0xec2>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	f300 83de 	bgt.w	8010bb2 <_dtoa_r+0xfa2>
 80103f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80103f8:	f804 cc01 	strb.w	ip, [r4, #-1]
 80103fc:	4284      	cmp	r4, r0
 80103fe:	46a0      	mov	r8, r4
 8010400:	f000 83e6 	beq.w	8010bd0 <_dtoa_r+0xfc0>
 8010404:	4651      	mov	r1, sl
 8010406:	220a      	movs	r2, #10
 8010408:	2300      	movs	r3, #0
 801040a:	4648      	mov	r0, r9
 801040c:	f001 fc58 	bl	8011cc0 <__multadd>
 8010410:	42b5      	cmp	r5, r6
 8010412:	4682      	mov	sl, r0
 8010414:	f000 828e 	beq.w	8010934 <_dtoa_r+0xd24>
 8010418:	4629      	mov	r1, r5
 801041a:	220a      	movs	r2, #10
 801041c:	2300      	movs	r3, #0
 801041e:	4648      	mov	r0, r9
 8010420:	f001 fc4e 	bl	8011cc0 <__multadd>
 8010424:	4631      	mov	r1, r6
 8010426:	4605      	mov	r5, r0
 8010428:	220a      	movs	r2, #10
 801042a:	4648      	mov	r0, r9
 801042c:	2300      	movs	r3, #0
 801042e:	f001 fc47 	bl	8011cc0 <__multadd>
 8010432:	3401      	adds	r4, #1
 8010434:	4606      	mov	r6, r0
 8010436:	e7af      	b.n	8010398 <_dtoa_r+0x788>
 8010438:	f1ba 0f00 	cmp.w	sl, #0
 801043c:	f47f aea6 	bne.w	801018c <_dtoa_r+0x57c>
 8010440:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8010444:	465b      	mov	r3, fp
 8010446:	2a00      	cmp	r2, #0
 8010448:	f040 8494 	bne.w	8010d74 <_dtoa_r+0x1164>
 801044c:	2500      	movs	r5, #0
 801044e:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 8010452:	401d      	ands	r5, r3
 8010454:	2d00      	cmp	r5, #0
 8010456:	f43f ae9a 	beq.w	801018e <_dtoa_r+0x57e>
 801045a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801045c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801045e:	1c41      	adds	r1, r0, #1
 8010460:	1c5a      	adds	r2, r3, #1
 8010462:	910e      	str	r1, [sp, #56]	; 0x38
 8010464:	920a      	str	r2, [sp, #40]	; 0x28
 8010466:	2501      	movs	r5, #1
 8010468:	e691      	b.n	801018e <_dtoa_r+0x57e>
 801046a:	2101      	movs	r1, #1
 801046c:	910f      	str	r1, [sp, #60]	; 0x3c
 801046e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010470:	2b00      	cmp	r3, #0
 8010472:	f340 8329 	ble.w	8010ac8 <_dtoa_r+0xeb8>
 8010476:	461c      	mov	r4, r3
 8010478:	9313      	str	r3, [sp, #76]	; 0x4c
 801047a:	930b      	str	r3, [sp, #44]	; 0x2c
 801047c:	2100      	movs	r1, #0
 801047e:	2c17      	cmp	r4, #23
 8010480:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8010484:	d90a      	bls.n	801049c <_dtoa_r+0x88c>
 8010486:	2201      	movs	r2, #1
 8010488:	2304      	movs	r3, #4
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	f103 0014 	add.w	r0, r3, #20
 8010490:	4611      	mov	r1, r2
 8010492:	3201      	adds	r2, #1
 8010494:	42a0      	cmp	r0, r4
 8010496:	d9f8      	bls.n	801048a <_dtoa_r+0x87a>
 8010498:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 801049c:	4648      	mov	r0, r9
 801049e:	f001 fbdf 	bl	8011c60 <_Balloc>
 80104a2:	2c0e      	cmp	r4, #14
 80104a4:	9005      	str	r0, [sp, #20]
 80104a6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80104aa:	f63f acc8 	bhi.w	800fe3e <_dtoa_r+0x22e>
 80104ae:	2d00      	cmp	r5, #0
 80104b0:	f43f acc5 	beq.w	800fe3e <_dtoa_r+0x22e>
 80104b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80104b6:	2f00      	cmp	r7, #0
 80104b8:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80104bc:	f340 833d 	ble.w	8010b3a <_dtoa_r+0xf2a>
 80104c0:	4899      	ldr	r0, [pc, #612]	; (8010728 <_dtoa_r+0xb18>)
 80104c2:	f007 060f 	and.w	r6, r7, #15
 80104c6:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 80104ca:	113e      	asrs	r6, r7, #4
 80104cc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80104d0:	06f1      	lsls	r1, r6, #27
 80104d2:	f140 82f5 	bpl.w	8010ac0 <_dtoa_r+0xeb0>
 80104d6:	4f95      	ldr	r7, [pc, #596]	; (801072c <_dtoa_r+0xb1c>)
 80104d8:	4650      	mov	r0, sl
 80104da:	4659      	mov	r1, fp
 80104dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80104e0:	f7fb fa52 	bl	800b988 <__aeabi_ddiv>
 80104e4:	f006 060f 	and.w	r6, r6, #15
 80104e8:	4682      	mov	sl, r0
 80104ea:	468b      	mov	fp, r1
 80104ec:	2703      	movs	r7, #3
 80104ee:	b186      	cbz	r6, 8010512 <_dtoa_r+0x902>
 80104f0:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801072c <_dtoa_r+0xb1c>
 80104f4:	4620      	mov	r0, r4
 80104f6:	4629      	mov	r1, r5
 80104f8:	07f2      	lsls	r2, r6, #31
 80104fa:	d504      	bpl.n	8010506 <_dtoa_r+0x8f6>
 80104fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010500:	f7fb f918 	bl	800b734 <__aeabi_dmul>
 8010504:	3701      	adds	r7, #1
 8010506:	1076      	asrs	r6, r6, #1
 8010508:	f108 0808 	add.w	r8, r8, #8
 801050c:	d1f4      	bne.n	80104f8 <_dtoa_r+0x8e8>
 801050e:	4604      	mov	r4, r0
 8010510:	460d      	mov	r5, r1
 8010512:	4650      	mov	r0, sl
 8010514:	4659      	mov	r1, fp
 8010516:	4622      	mov	r2, r4
 8010518:	462b      	mov	r3, r5
 801051a:	f7fb fa35 	bl	800b988 <__aeabi_ddiv>
 801051e:	4682      	mov	sl, r0
 8010520:	468b      	mov	fp, r1
 8010522:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010524:	b153      	cbz	r3, 801053c <_dtoa_r+0x92c>
 8010526:	2300      	movs	r3, #0
 8010528:	4650      	mov	r0, sl
 801052a:	4659      	mov	r1, fp
 801052c:	2200      	movs	r2, #0
 801052e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8010532:	f7fb fb71 	bl	800bc18 <__aeabi_dcmplt>
 8010536:	2800      	cmp	r0, #0
 8010538:	f040 8424 	bne.w	8010d84 <_dtoa_r+0x1174>
 801053c:	4638      	mov	r0, r7
 801053e:	f7fb f893 	bl	800b668 <__aeabi_i2d>
 8010542:	4652      	mov	r2, sl
 8010544:	465b      	mov	r3, fp
 8010546:	f7fb f8f5 	bl	800b734 <__aeabi_dmul>
 801054a:	2300      	movs	r3, #0
 801054c:	2200      	movs	r2, #0
 801054e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010552:	f7fa ff3d 	bl	800b3d0 <__adddf3>
 8010556:	4604      	mov	r4, r0
 8010558:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801055a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801055e:	2800      	cmp	r0, #0
 8010560:	f000 8275 	beq.w	8010a4e <_dtoa_r+0xe3e>
 8010564:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010566:	961b      	str	r6, [sp, #108]	; 0x6c
 8010568:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801056a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801056c:	2900      	cmp	r1, #0
 801056e:	f000 8338 	beq.w	8010be2 <_dtoa_r+0xfd2>
 8010572:	4a6d      	ldr	r2, [pc, #436]	; (8010728 <_dtoa_r+0xb18>)
 8010574:	2100      	movs	r1, #0
 8010576:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 801057a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801057e:	2000      	movs	r0, #0
 8010580:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8010584:	f7fb fa00 	bl	800b988 <__aeabi_ddiv>
 8010588:	462b      	mov	r3, r5
 801058a:	4622      	mov	r2, r4
 801058c:	f7fa ff1e 	bl	800b3cc <__aeabi_dsub>
 8010590:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8010594:	4659      	mov	r1, fp
 8010596:	4650      	mov	r0, sl
 8010598:	f7fb fb66 	bl	800bc68 <__aeabi_d2iz>
 801059c:	4605      	mov	r5, r0
 801059e:	f7fb f863 	bl	800b668 <__aeabi_i2d>
 80105a2:	4602      	mov	r2, r0
 80105a4:	460b      	mov	r3, r1
 80105a6:	4650      	mov	r0, sl
 80105a8:	4659      	mov	r1, fp
 80105aa:	f7fa ff0f 	bl	800b3cc <__aeabi_dsub>
 80105ae:	3530      	adds	r5, #48	; 0x30
 80105b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80105b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80105b8:	fa5f fb85 	uxtb.w	fp, r5
 80105bc:	f808 bb01 	strb.w	fp, [r8], #1
 80105c0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80105c4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80105c8:	f7fb fb44 	bl	800bc54 <__aeabi_dcmpgt>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	f040 841d 	bne.w	8010e0c <_dtoa_r+0x11fc>
 80105d2:	2100      	movs	r1, #0
 80105d4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80105d8:	2000      	movs	r0, #0
 80105da:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80105de:	f7fa fef5 	bl	800b3cc <__aeabi_dsub>
 80105e2:	4602      	mov	r2, r0
 80105e4:	460b      	mov	r3, r1
 80105e6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80105ea:	f7fb fb33 	bl	800bc54 <__aeabi_dcmpgt>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f040 8431 	bne.w	8010e56 <_dtoa_r+0x1246>
 80105f4:	2e01      	cmp	r6, #1
 80105f6:	f340 829c 	ble.w	8010b32 <_dtoa_r+0xf22>
 80105fa:	9905      	ldr	r1, [sp, #20]
 80105fc:	ea6f 0708 	mvn.w	r7, r8
 8010600:	198e      	adds	r6, r1, r6
 8010602:	19bc      	adds	r4, r7, r6
 8010604:	2300      	movs	r3, #0
 8010606:	f004 0501 	and.w	r5, r4, #1
 801060a:	2200      	movs	r2, #0
 801060c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010610:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010614:	961a      	str	r6, [sp, #104]	; 0x68
 8010616:	9518      	str	r5, [sp, #96]	; 0x60
 8010618:	f7fb f88c 	bl	800b734 <__aeabi_dmul>
 801061c:	2300      	movs	r3, #0
 801061e:	2200      	movs	r2, #0
 8010620:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010624:	4604      	mov	r4, r0
 8010626:	460d      	mov	r5, r1
 8010628:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801062c:	f7fb f882 	bl	800b734 <__aeabi_dmul>
 8010630:	460f      	mov	r7, r1
 8010632:	4606      	mov	r6, r0
 8010634:	f7fb fb18 	bl	800bc68 <__aeabi_d2iz>
 8010638:	4683      	mov	fp, r0
 801063a:	f7fb f815 	bl	800b668 <__aeabi_i2d>
 801063e:	4602      	mov	r2, r0
 8010640:	460b      	mov	r3, r1
 8010642:	4630      	mov	r0, r6
 8010644:	4639      	mov	r1, r7
 8010646:	f7fa fec1 	bl	800b3cc <__aeabi_dsub>
 801064a:	46c2      	mov	sl, r8
 801064c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8010650:	fa5f fb82 	uxtb.w	fp, r2
 8010654:	f80a bb01 	strb.w	fp, [sl], #1
 8010658:	4622      	mov	r2, r4
 801065a:	462b      	mov	r3, r5
 801065c:	4606      	mov	r6, r0
 801065e:	460f      	mov	r7, r1
 8010660:	46d0      	mov	r8, sl
 8010662:	f7fb fad9 	bl	800bc18 <__aeabi_dcmplt>
 8010666:	2800      	cmp	r0, #0
 8010668:	f040 80e2 	bne.w	8010830 <_dtoa_r+0xc20>
 801066c:	2100      	movs	r1, #0
 801066e:	4632      	mov	r2, r6
 8010670:	463b      	mov	r3, r7
 8010672:	2000      	movs	r0, #0
 8010674:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8010678:	f7fa fea8 	bl	800b3cc <__aeabi_dsub>
 801067c:	4622      	mov	r2, r4
 801067e:	462b      	mov	r3, r5
 8010680:	f7fb faca 	bl	800bc18 <__aeabi_dcmplt>
 8010684:	2800      	cmp	r0, #0
 8010686:	f040 83c7 	bne.w	8010e18 <_dtoa_r+0x1208>
 801068a:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 801068e:	45f2      	cmp	sl, lr
 8010690:	f000 824f 	beq.w	8010b32 <_dtoa_r+0xf22>
 8010694:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010696:	2800      	cmp	r0, #0
 8010698:	d041      	beq.n	801071e <_dtoa_r+0xb0e>
 801069a:	2300      	movs	r3, #0
 801069c:	2200      	movs	r2, #0
 801069e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80106a2:	4620      	mov	r0, r4
 80106a4:	4629      	mov	r1, r5
 80106a6:	f7fb f845 	bl	800b734 <__aeabi_dmul>
 80106aa:	2300      	movs	r3, #0
 80106ac:	2200      	movs	r2, #0
 80106ae:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80106b2:	4604      	mov	r4, r0
 80106b4:	460d      	mov	r5, r1
 80106b6:	4630      	mov	r0, r6
 80106b8:	4639      	mov	r1, r7
 80106ba:	f7fb f83b 	bl	800b734 <__aeabi_dmul>
 80106be:	460f      	mov	r7, r1
 80106c0:	4606      	mov	r6, r0
 80106c2:	f7fb fad1 	bl	800bc68 <__aeabi_d2iz>
 80106c6:	4680      	mov	r8, r0
 80106c8:	f7fa ffce 	bl	800b668 <__aeabi_i2d>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4630      	mov	r0, r6
 80106d2:	4639      	mov	r1, r7
 80106d4:	f7fa fe7a 	bl	800b3cc <__aeabi_dsub>
 80106d8:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80106dc:	fa5f fb83 	uxtb.w	fp, r3
 80106e0:	f80a bb01 	strb.w	fp, [sl], #1
 80106e4:	4622      	mov	r2, r4
 80106e6:	462b      	mov	r3, r5
 80106e8:	4606      	mov	r6, r0
 80106ea:	460f      	mov	r7, r1
 80106ec:	46d0      	mov	r8, sl
 80106ee:	f7fb fa93 	bl	800bc18 <__aeabi_dcmplt>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f040 809c 	bne.w	8010830 <_dtoa_r+0xc20>
 80106f8:	2100      	movs	r1, #0
 80106fa:	4632      	mov	r2, r6
 80106fc:	463b      	mov	r3, r7
 80106fe:	2000      	movs	r0, #0
 8010700:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8010704:	f7fa fe62 	bl	800b3cc <__aeabi_dsub>
 8010708:	4622      	mov	r2, r4
 801070a:	462b      	mov	r3, r5
 801070c:	f7fb fa84 	bl	800bc18 <__aeabi_dcmplt>
 8010710:	2800      	cmp	r0, #0
 8010712:	f040 8381 	bne.w	8010e18 <_dtoa_r+0x1208>
 8010716:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010718:	458a      	cmp	sl, r1
 801071a:	f000 820a 	beq.w	8010b32 <_dtoa_r+0xf22>
 801071e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8010722:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010726:	e050      	b.n	80107ca <_dtoa_r+0xbba>
 8010728:	080136e8 	.word	0x080136e8
 801072c:	080137b0 	.word	0x080137b0
 8010730:	2100      	movs	r1, #0
 8010732:	2000      	movs	r0, #0
 8010734:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8010738:	f7fa fe48 	bl	800b3cc <__aeabi_dsub>
 801073c:	4622      	mov	r2, r4
 801073e:	462b      	mov	r3, r5
 8010740:	f7fb fa6a 	bl	800bc18 <__aeabi_dcmplt>
 8010744:	2300      	movs	r3, #0
 8010746:	2200      	movs	r2, #0
 8010748:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801074c:	2800      	cmp	r0, #0
 801074e:	f040 8361 	bne.w	8010e14 <_dtoa_r+0x1204>
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	f7fa ffed 	bl	800b734 <__aeabi_dmul>
 801075a:	2300      	movs	r3, #0
 801075c:	2200      	movs	r2, #0
 801075e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	4630      	mov	r0, r6
 8010768:	4639      	mov	r1, r7
 801076a:	f7fa ffe3 	bl	800b734 <__aeabi_dmul>
 801076e:	460f      	mov	r7, r1
 8010770:	4606      	mov	r6, r0
 8010772:	f7fb fa79 	bl	800bc68 <__aeabi_d2iz>
 8010776:	4680      	mov	r8, r0
 8010778:	f7fa ff76 	bl	800b668 <__aeabi_i2d>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	4630      	mov	r0, r6
 8010782:	4639      	mov	r1, r7
 8010784:	f7fa fe22 	bl	800b3cc <__aeabi_dsub>
 8010788:	f108 0330 	add.w	r3, r8, #48	; 0x30
 801078c:	fa5f fb83 	uxtb.w	fp, r3
 8010790:	f80a bb01 	strb.w	fp, [sl], #1
 8010794:	4622      	mov	r2, r4
 8010796:	462b      	mov	r3, r5
 8010798:	4606      	mov	r6, r0
 801079a:	460f      	mov	r7, r1
 801079c:	f7fb fa3c 	bl	800bc18 <__aeabi_dcmplt>
 80107a0:	46d0      	mov	r8, sl
 80107a2:	4632      	mov	r2, r6
 80107a4:	463b      	mov	r3, r7
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d140      	bne.n	801082c <_dtoa_r+0xc1c>
 80107aa:	2100      	movs	r1, #0
 80107ac:	2000      	movs	r0, #0
 80107ae:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80107b2:	f7fa fe0b 	bl	800b3cc <__aeabi_dsub>
 80107b6:	4622      	mov	r2, r4
 80107b8:	462b      	mov	r3, r5
 80107ba:	f7fb fa2d 	bl	800bc18 <__aeabi_dcmplt>
 80107be:	2800      	cmp	r0, #0
 80107c0:	f040 8328 	bne.w	8010e14 <_dtoa_r+0x1204>
 80107c4:	45ca      	cmp	sl, r9
 80107c6:	f000 81b2 	beq.w	8010b2e <_dtoa_r+0xf1e>
 80107ca:	2300      	movs	r3, #0
 80107cc:	4620      	mov	r0, r4
 80107ce:	4629      	mov	r1, r5
 80107d0:	2200      	movs	r2, #0
 80107d2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80107d6:	f7fa ffad 	bl	800b734 <__aeabi_dmul>
 80107da:	2300      	movs	r3, #0
 80107dc:	2200      	movs	r2, #0
 80107de:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80107e2:	4604      	mov	r4, r0
 80107e4:	460d      	mov	r5, r1
 80107e6:	4630      	mov	r0, r6
 80107e8:	4639      	mov	r1, r7
 80107ea:	f7fa ffa3 	bl	800b734 <__aeabi_dmul>
 80107ee:	460f      	mov	r7, r1
 80107f0:	4606      	mov	r6, r0
 80107f2:	f7fb fa39 	bl	800bc68 <__aeabi_d2iz>
 80107f6:	4683      	mov	fp, r0
 80107f8:	f7fa ff36 	bl	800b668 <__aeabi_i2d>
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	4630      	mov	r0, r6
 8010802:	4639      	mov	r1, r7
 8010804:	f7fa fde2 	bl	800b3cc <__aeabi_dsub>
 8010808:	46d0      	mov	r8, sl
 801080a:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 801080e:	fa5f fb82 	uxtb.w	fp, r2
 8010812:	f808 bb01 	strb.w	fp, [r8], #1
 8010816:	4622      	mov	r2, r4
 8010818:	462b      	mov	r3, r5
 801081a:	4606      	mov	r6, r0
 801081c:	460f      	mov	r7, r1
 801081e:	f7fb f9fb 	bl	800bc18 <__aeabi_dcmplt>
 8010822:	46c2      	mov	sl, r8
 8010824:	4632      	mov	r2, r6
 8010826:	463b      	mov	r3, r7
 8010828:	2800      	cmp	r0, #0
 801082a:	d081      	beq.n	8010730 <_dtoa_r+0xb20>
 801082c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010830:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010832:	9109      	str	r1, [sp, #36]	; 0x24
 8010834:	e406      	b.n	8010044 <_dtoa_r+0x434>
 8010836:	2000      	movs	r0, #0
 8010838:	900f      	str	r0, [sp, #60]	; 0x3c
 801083a:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 801083e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010840:	eb0e 0200 	add.w	r2, lr, r0
 8010844:	1c54      	adds	r4, r2, #1
 8010846:	2c00      	cmp	r4, #0
 8010848:	9213      	str	r2, [sp, #76]	; 0x4c
 801084a:	940b      	str	r4, [sp, #44]	; 0x2c
 801084c:	f73f ae16 	bgt.w	801047c <_dtoa_r+0x86c>
 8010850:	2100      	movs	r1, #0
 8010852:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8010856:	e621      	b.n	801049c <_dtoa_r+0x88c>
 8010858:	2101      	movs	r1, #1
 801085a:	910f      	str	r1, [sp, #60]	; 0x3c
 801085c:	e7ed      	b.n	801083a <_dtoa_r+0xc2a>
 801085e:	2200      	movs	r2, #0
 8010860:	920f      	str	r2, [sp, #60]	; 0x3c
 8010862:	e604      	b.n	801046e <_dtoa_r+0x85e>
 8010864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010866:	2900      	cmp	r1, #0
 8010868:	f73f aafc 	bgt.w	800fe64 <_dtoa_r+0x254>
 801086c:	f040 82ee 	bne.w	8010e4c <_dtoa_r+0x123c>
 8010870:	2300      	movs	r3, #0
 8010872:	2200      	movs	r2, #0
 8010874:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8010878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801087c:	f7fa ff5a 	bl	800b734 <__aeabi_dmul>
 8010880:	4652      	mov	r2, sl
 8010882:	465b      	mov	r3, fp
 8010884:	f7fb f9dc 	bl	800bc40 <__aeabi_dcmpge>
 8010888:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801088a:	970d      	str	r7, [sp, #52]	; 0x34
 801088c:	2800      	cmp	r0, #0
 801088e:	f000 80b7 	beq.w	8010a00 <_dtoa_r+0xdf0>
 8010892:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010894:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010898:	43c1      	mvns	r1, r0
 801089a:	9109      	str	r1, [sp, #36]	; 0x24
 801089c:	4648      	mov	r0, r9
 801089e:	4639      	mov	r1, r7
 80108a0:	f001 fa04 	bl	8011cac <_Bfree>
 80108a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f43f abcc 	beq.w	8010044 <_dtoa_r+0x434>
 80108ac:	4648      	mov	r0, r9
 80108ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80108b0:	f001 f9fc 	bl	8011cac <_Bfree>
 80108b4:	f7ff bbc6 	b.w	8010044 <_dtoa_r+0x434>
 80108b8:	4648      	mov	r0, r9
 80108ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80108bc:	f001 fc3a 	bl	8012134 <__pow5mult>
 80108c0:	900c      	str	r0, [sp, #48]	; 0x30
 80108c2:	e451      	b.n	8010168 <_dtoa_r+0x558>
 80108c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	f000 824d 	beq.w	8010d66 <_dtoa_r+0x1156>
 80108cc:	f201 4733 	addw	r7, r1, #1075	; 0x433
 80108d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80108d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80108d4:	e40b      	b.n	80100ee <_dtoa_r+0x4de>
 80108d6:	4611      	mov	r1, r2
 80108d8:	4650      	mov	r0, sl
 80108da:	f8cd c00c 	str.w	ip, [sp, #12]
 80108de:	9204      	str	r2, [sp, #16]
 80108e0:	f001 fd36 	bl	8012350 <__mcmp>
 80108e4:	9a04      	ldr	r2, [sp, #16]
 80108e6:	4603      	mov	r3, r0
 80108e8:	4611      	mov	r1, r2
 80108ea:	4648      	mov	r0, r9
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	f001 f9dd 	bl	8011cac <_Bfree>
 80108f2:	9804      	ldr	r0, [sp, #16]
 80108f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f47f ad6e 	bne.w	80103da <_dtoa_r+0x7ca>
 80108fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010900:	2900      	cmp	r1, #0
 8010902:	f47f ad6a 	bne.w	80103da <_dtoa_r+0x7ca>
 8010906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010908:	2b00      	cmp	r3, #0
 801090a:	f47f ad66 	bne.w	80103da <_dtoa_r+0x7ca>
 801090e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8010912:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010916:	46da      	mov	sl, fp
 8010918:	46e3      	mov	fp, ip
 801091a:	f000 80f2 	beq.w	8010b02 <_dtoa_r+0xef2>
 801091e:	f1ba 0f00 	cmp.w	sl, #0
 8010922:	dd01      	ble.n	8010928 <_dtoa_r+0xd18>
 8010924:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8010928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801092c:	960d      	str	r6, [sp, #52]	; 0x34
 801092e:	f808 bb01 	strb.w	fp, [r8], #1
 8010932:	e4cc      	b.n	80102ce <_dtoa_r+0x6be>
 8010934:	4629      	mov	r1, r5
 8010936:	4648      	mov	r0, r9
 8010938:	220a      	movs	r2, #10
 801093a:	2300      	movs	r3, #0
 801093c:	f001 f9c0 	bl	8011cc0 <__multadd>
 8010940:	3401      	adds	r4, #1
 8010942:	4605      	mov	r5, r0
 8010944:	4606      	mov	r6, r0
 8010946:	e527      	b.n	8010398 <_dtoa_r+0x788>
 8010948:	980c      	ldr	r0, [sp, #48]	; 0x30
 801094a:	4639      	mov	r1, r7
 801094c:	f7fe ffe8 	bl	800f920 <quorem>
 8010950:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8010954:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010956:	9b05      	ldr	r3, [sp, #20]
 8010958:	2501      	movs	r5, #1
 801095a:	42a8      	cmp	r0, r5
 801095c:	f883 b000 	strb.w	fp, [r3]
 8010960:	f77f ac79 	ble.w	8010256 <_dtoa_r+0x646>
 8010964:	4648      	mov	r0, r9
 8010966:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801096a:	220a      	movs	r2, #10
 801096c:	f001 f9a8 	bl	8011cc0 <__multadd>
 8010970:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010974:	900c      	str	r0, [sp, #48]	; 0x30
 8010976:	4606      	mov	r6, r0
 8010978:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801097c:	e45b      	b.n	8010236 <_dtoa_r+0x626>
 801097e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010980:	9c05      	ldr	r4, [sp, #20]
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	2131      	movs	r1, #49	; 0x31
 8010986:	9309      	str	r3, [sp, #36]	; 0x24
 8010988:	7021      	strb	r1, [r4, #0]
 801098a:	e4a0      	b.n	80102ce <_dtoa_r+0x6be>
 801098c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801098e:	4639      	mov	r1, r7
 8010990:	f001 fcde 	bl	8012350 <__mcmp>
 8010994:	2800      	cmp	r0, #0
 8010996:	f6bf ac2b 	bge.w	80101f0 <_dtoa_r+0x5e0>
 801099a:	220a      	movs	r2, #10
 801099c:	4648      	mov	r0, r9
 801099e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109a0:	2300      	movs	r3, #0
 80109a2:	f001 f98d 	bl	8011cc0 <__multadd>
 80109a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80109aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80109ac:	900c      	str	r0, [sp, #48]	; 0x30
 80109ae:	f10c 3eff 	add.w	lr, ip, #4294967295
 80109b2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80109b6:	2a00      	cmp	r2, #0
 80109b8:	f040 823d 	bne.w	8010e36 <_dtoa_r+0x1226>
 80109bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80109be:	910b      	str	r1, [sp, #44]	; 0x2c
 80109c0:	e416      	b.n	80101f0 <_dtoa_r+0x5e0>
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80109c8:	6910      	ldr	r0, [r2, #16]
 80109ca:	f001 f9f5 	bl	8011db8 <__hi0bits>
 80109ce:	f1c0 0120 	rsb	r1, r0, #32
 80109d2:	f7ff bbe1 	b.w	8010198 <_dtoa_r+0x588>
 80109d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80109d8:	2a02      	cmp	r2, #2
 80109da:	f77f ac0d 	ble.w	80101f8 <_dtoa_r+0x5e8>
 80109de:	2800      	cmp	r0, #0
 80109e0:	f47f af57 	bne.w	8010892 <_dtoa_r+0xc82>
 80109e4:	4639      	mov	r1, r7
 80109e6:	2205      	movs	r2, #5
 80109e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109ea:	4648      	mov	r0, r9
 80109ec:	f001 f968 	bl	8011cc0 <__multadd>
 80109f0:	4607      	mov	r7, r0
 80109f2:	4639      	mov	r1, r7
 80109f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109f6:	f001 fcab 	bl	8012350 <__mcmp>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	f77f af49 	ble.w	8010892 <_dtoa_r+0xc82>
 8010a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a02:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010a06:	2531      	movs	r5, #49	; 0x31
 8010a08:	1c53      	adds	r3, r2, #1
 8010a0a:	f808 5b01 	strb.w	r5, [r8], #1
 8010a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a10:	e744      	b.n	801089c <_dtoa_r+0xc8c>
 8010a12:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8010a16:	f108 31ff 	add.w	r1, r8, #4294967295
 8010a1a:	f47f ab0f 	bne.w	801003c <_dtoa_r+0x42c>
 8010a1e:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8010a22:	9c05      	ldr	r4, [sp, #20]
 8010a24:	4688      	mov	r8, r1
 8010a26:	f7ff baf1 	b.w	801000c <_dtoa_r+0x3fc>
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	f7fa fe1c 	bl	800b668 <__aeabi_i2d>
 8010a30:	4602      	mov	r2, r0
 8010a32:	460b      	mov	r3, r1
 8010a34:	4650      	mov	r0, sl
 8010a36:	4659      	mov	r1, fp
 8010a38:	f7fa fe7c 	bl	800b734 <__aeabi_dmul>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010a44:	f7fa fcc4 	bl	800b3d0 <__adddf3>
 8010a48:	4604      	mov	r4, r0
 8010a4a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8010a4e:	2300      	movs	r3, #0
 8010a50:	2200      	movs	r2, #0
 8010a52:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8010a56:	4650      	mov	r0, sl
 8010a58:	4659      	mov	r1, fp
 8010a5a:	f7fa fcb7 	bl	800b3cc <__aeabi_dsub>
 8010a5e:	4622      	mov	r2, r4
 8010a60:	462b      	mov	r3, r5
 8010a62:	4682      	mov	sl, r0
 8010a64:	468b      	mov	fp, r1
 8010a66:	f7fb f8f5 	bl	800bc54 <__aeabi_dcmpgt>
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f040 80b5 	bne.w	8010bdc <_dtoa_r+0xfcc>
 8010a72:	4622      	mov	r2, r4
 8010a74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010a78:	4650      	mov	r0, sl
 8010a7a:	4659      	mov	r1, fp
 8010a7c:	f7fb f8cc 	bl	800bc18 <__aeabi_dcmplt>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d056      	beq.n	8010b32 <_dtoa_r+0xf22>
 8010a84:	970d      	str	r7, [sp, #52]	; 0x34
 8010a86:	e704      	b.n	8010892 <_dtoa_r+0xc82>
 8010a88:	4648      	mov	r0, r9
 8010a8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a8e:	f001 fb51 	bl	8012134 <__pow5mult>
 8010a92:	900c      	str	r0, [sp, #48]	; 0x30
 8010a94:	f7ff bb68 	b.w	8010168 <_dtoa_r+0x558>
 8010a98:	9c05      	ldr	r4, [sp, #20]
 8010a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a9c:	2130      	movs	r1, #48	; 0x30
 8010a9e:	7021      	strb	r1, [r4, #0]
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	1c58      	adds	r0, r3, #1
 8010aa4:	2231      	movs	r2, #49	; 0x31
 8010aa6:	9009      	str	r0, [sp, #36]	; 0x24
 8010aa8:	700a      	strb	r2, [r1, #0]
 8010aaa:	f7ff bacb 	b.w	8010044 <_dtoa_r+0x434>
 8010aae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ab2:	9110      	str	r1, [sp, #64]	; 0x40
 8010ab4:	1bcd      	subs	r5, r1, r7
 8010ab6:	195c      	adds	r4, r3, r5
 8010ab8:	9411      	str	r4, [sp, #68]	; 0x44
 8010aba:	2500      	movs	r5, #0
 8010abc:	f7ff bb11 	b.w	80100e2 <_dtoa_r+0x4d2>
 8010ac0:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8010ac4:	2702      	movs	r7, #2
 8010ac6:	e512      	b.n	80104ee <_dtoa_r+0x8de>
 8010ac8:	2401      	movs	r4, #1
 8010aca:	9413      	str	r4, [sp, #76]	; 0x4c
 8010acc:	940b      	str	r4, [sp, #44]	; 0x2c
 8010ace:	9429      	str	r4, [sp, #164]	; 0xa4
 8010ad0:	e6be      	b.n	8010850 <_dtoa_r+0xc40>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	46e3      	mov	fp, ip
 8010ad6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010ada:	4664      	mov	r4, ip
 8010adc:	f77f af24 	ble.w	8010928 <_dtoa_r+0xd18>
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ae4:	4648      	mov	r0, r9
 8010ae6:	f001 fb6f 	bl	80121c8 <__lshift>
 8010aea:	4639      	mov	r1, r7
 8010aec:	900c      	str	r0, [sp, #48]	; 0x30
 8010aee:	f001 fc2f 	bl	8012350 <__mcmp>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	f340 8198 	ble.w	8010e28 <_dtoa_r+0x1218>
 8010af8:	2c39      	cmp	r4, #57	; 0x39
 8010afa:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8010afe:	f47f af13 	bne.w	8010928 <_dtoa_r+0xd18>
 8010b02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b06:	960d      	str	r6, [sp, #52]	; 0x34
 8010b08:	2239      	movs	r2, #57	; 0x39
 8010b0a:	f808 2b01 	strb.w	r2, [r8], #1
 8010b0e:	f7ff bbb9 	b.w	8010284 <_dtoa_r+0x674>
 8010b12:	d103      	bne.n	8010b1c <_dtoa_r+0xf0c>
 8010b14:	f01b 0f01 	tst.w	fp, #1
 8010b18:	f47f abb2 	bne.w	8010280 <_dtoa_r+0x670>
 8010b1c:	4643      	mov	r3, r8
 8010b1e:	4698      	mov	r8, r3
 8010b20:	3b01      	subs	r3, #1
 8010b22:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010b26:	2a30      	cmp	r2, #48	; 0x30
 8010b28:	d0f9      	beq.n	8010b1e <_dtoa_r+0xf0e>
 8010b2a:	f7ff bbd0 	b.w	80102ce <_dtoa_r+0x6be>
 8010b2e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010b32:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8010b36:	f7ff b982 	b.w	800fe3e <_dtoa_r+0x22e>
 8010b3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b3c:	426c      	negs	r4, r5
 8010b3e:	2c00      	cmp	r4, #0
 8010b40:	f000 811b 	beq.w	8010d7a <_dtoa_r+0x116a>
 8010b44:	4bb6      	ldr	r3, [pc, #728]	; (8010e20 <_dtoa_r+0x1210>)
 8010b46:	f004 010f 	and.w	r1, r4, #15
 8010b4a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8010b4e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010b52:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8010b56:	f7fa fded 	bl	800b734 <__aeabi_dmul>
 8010b5a:	1124      	asrs	r4, r4, #4
 8010b5c:	4682      	mov	sl, r0
 8010b5e:	468b      	mov	fp, r1
 8010b60:	f000 8176 	beq.w	8010e50 <_dtoa_r+0x1240>
 8010b64:	4daf      	ldr	r5, [pc, #700]	; (8010e24 <_dtoa_r+0x1214>)
 8010b66:	2702      	movs	r7, #2
 8010b68:	07e3      	lsls	r3, r4, #31
 8010b6a:	d504      	bpl.n	8010b76 <_dtoa_r+0xf66>
 8010b6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b70:	f7fa fde0 	bl	800b734 <__aeabi_dmul>
 8010b74:	3701      	adds	r7, #1
 8010b76:	3508      	adds	r5, #8
 8010b78:	1064      	asrs	r4, r4, #1
 8010b7a:	d1f5      	bne.n	8010b68 <_dtoa_r+0xf58>
 8010b7c:	4682      	mov	sl, r0
 8010b7e:	468b      	mov	fp, r1
 8010b80:	e4cf      	b.n	8010522 <_dtoa_r+0x912>
 8010b82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b84:	4648      	mov	r0, r9
 8010b86:	6849      	ldr	r1, [r1, #4]
 8010b88:	f001 f86a 	bl	8011c60 <_Balloc>
 8010b8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010b8e:	692b      	ldr	r3, [r5, #16]
 8010b90:	4604      	mov	r4, r0
 8010b92:	4629      	mov	r1, r5
 8010b94:	1c98      	adds	r0, r3, #2
 8010b96:	0082      	lsls	r2, r0, #2
 8010b98:	310c      	adds	r1, #12
 8010b9a:	f104 000c 	add.w	r0, r4, #12
 8010b9e:	f000 ffb9 	bl	8011b14 <memcpy>
 8010ba2:	4648      	mov	r0, r9
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f001 fb0e 	bl	80121c8 <__lshift>
 8010bac:	4606      	mov	r6, r0
 8010bae:	f7ff bbe7 	b.w	8010380 <_dtoa_r+0x770>
 8010bb2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8010bb6:	46e3      	mov	fp, ip
 8010bb8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010bbc:	d0a1      	beq.n	8010b02 <_dtoa_r+0xef2>
 8010bbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010bc2:	960d      	str	r6, [sp, #52]	; 0x34
 8010bc4:	f10c 0e01 	add.w	lr, ip, #1
 8010bc8:	f808 eb01 	strb.w	lr, [r8], #1
 8010bcc:	f7ff bb7f 	b.w	80102ce <_dtoa_r+0x6be>
 8010bd0:	46e3      	mov	fp, ip
 8010bd2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010bd6:	960d      	str	r6, [sp, #52]	; 0x34
 8010bd8:	f7ff bb46 	b.w	8010268 <_dtoa_r+0x658>
 8010bdc:	2700      	movs	r7, #0
 8010bde:	970d      	str	r7, [sp, #52]	; 0x34
 8010be0:	e70e      	b.n	8010a00 <_dtoa_r+0xdf0>
 8010be2:	4b8f      	ldr	r3, [pc, #572]	; (8010e20 <_dtoa_r+0x1210>)
 8010be4:	f106 38ff 	add.w	r8, r6, #4294967295
 8010be8:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
 8010bec:	4622      	mov	r2, r4
 8010bee:	462b      	mov	r3, r5
 8010bf0:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010bf4:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010bf8:	f7fa fd9c 	bl	800b734 <__aeabi_dmul>
 8010bfc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8010c00:	4659      	mov	r1, fp
 8010c02:	4650      	mov	r0, sl
 8010c04:	f7fb f830 	bl	800bc68 <__aeabi_d2iz>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	f7fa fd2d 	bl	800b668 <__aeabi_i2d>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	4650      	mov	r0, sl
 8010c14:	4659      	mov	r1, fp
 8010c16:	f7fa fbd9 	bl	800b3cc <__aeabi_dsub>
 8010c1a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010c1e:	3430      	adds	r4, #48	; 0x30
 8010c20:	2e01      	cmp	r6, #1
 8010c22:	4682      	mov	sl, r0
 8010c24:	468b      	mov	fp, r1
 8010c26:	f808 4b01 	strb.w	r4, [r8], #1
 8010c2a:	f000 8081 	beq.w	8010d30 <_dtoa_r+0x1120>
 8010c2e:	9f05      	ldr	r7, [sp, #20]
 8010c30:	2300      	movs	r3, #0
 8010c32:	1e7d      	subs	r5, r7, #1
 8010c34:	eb05 0a06 	add.w	sl, r5, r6
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010c3e:	f8cd a00c 	str.w	sl, [sp, #12]
 8010c42:	f7fa fd77 	bl	800b734 <__aeabi_dmul>
 8010c46:	43fe      	mvns	r6, r7
 8010c48:	eb06 040a 	add.w	r4, r6, sl
 8010c4c:	460f      	mov	r7, r1
 8010c4e:	4606      	mov	r6, r0
 8010c50:	f7fb f80a 	bl	800bc68 <__aeabi_d2iz>
 8010c54:	f004 0501 	and.w	r5, r4, #1
 8010c58:	4604      	mov	r4, r0
 8010c5a:	f7fa fd05 	bl	800b668 <__aeabi_i2d>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4630      	mov	r0, r6
 8010c64:	4639      	mov	r1, r7
 8010c66:	f7fa fbb1 	bl	800b3cc <__aeabi_dsub>
 8010c6a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010c6e:	3430      	adds	r4, #48	; 0x30
 8010c70:	f88c 4001 	strb.w	r4, [ip, #1]
 8010c74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010c78:	45e0      	cmp	r8, ip
 8010c7a:	4682      	mov	sl, r0
 8010c7c:	468b      	mov	fp, r1
 8010c7e:	4647      	mov	r7, r8
 8010c80:	d054      	beq.n	8010d2c <_dtoa_r+0x111c>
 8010c82:	b1f5      	cbz	r5, 8010cc2 <_dtoa_r+0x10b2>
 8010c84:	2300      	movs	r3, #0
 8010c86:	2200      	movs	r2, #0
 8010c88:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010c8c:	f8cd c00c 	str.w	ip, [sp, #12]
 8010c90:	f7fa fd50 	bl	800b734 <__aeabi_dmul>
 8010c94:	468b      	mov	fp, r1
 8010c96:	4682      	mov	sl, r0
 8010c98:	f7fa ffe6 	bl	800bc68 <__aeabi_d2iz>
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	f7fa fce3 	bl	800b668 <__aeabi_i2d>
 8010ca2:	4647      	mov	r7, r8
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4650      	mov	r0, sl
 8010caa:	4659      	mov	r1, fp
 8010cac:	3530      	adds	r5, #48	; 0x30
 8010cae:	f7fa fb8d 	bl	800b3cc <__aeabi_dsub>
 8010cb2:	f807 5f01 	strb.w	r5, [r7, #1]!
 8010cb6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010cba:	4567      	cmp	r7, ip
 8010cbc:	4682      	mov	sl, r0
 8010cbe:	468b      	mov	fp, r1
 8010cc0:	d034      	beq.n	8010d2c <_dtoa_r+0x111c>
 8010cc2:	4650      	mov	r0, sl
 8010cc4:	4659      	mov	r1, fp
 8010cc6:	4666      	mov	r6, ip
 8010cc8:	2300      	movs	r3, #0
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010cd0:	f7fa fd30 	bl	800b734 <__aeabi_dmul>
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	f7fa ffc6 	bl	800bc68 <__aeabi_d2iz>
 8010cdc:	4682      	mov	sl, r0
 8010cde:	f7fa fcc3 	bl	800b668 <__aeabi_i2d>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	4629      	mov	r1, r5
 8010cea:	f7fa fb6f 	bl	800b3cc <__aeabi_dsub>
 8010cee:	f10a 0430 	add.w	r4, sl, #48	; 0x30
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010cfa:	f807 4f01 	strb.w	r4, [r7, #1]!
 8010cfe:	f7fa fd19 	bl	800b734 <__aeabi_dmul>
 8010d02:	460d      	mov	r5, r1
 8010d04:	4604      	mov	r4, r0
 8010d06:	f7fa ffaf 	bl	800bc68 <__aeabi_d2iz>
 8010d0a:	4683      	mov	fp, r0
 8010d0c:	f7fa fcac 	bl	800b668 <__aeabi_i2d>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4620      	mov	r0, r4
 8010d16:	4629      	mov	r1, r5
 8010d18:	f7fa fb58 	bl	800b3cc <__aeabi_dsub>
 8010d1c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8010d20:	f807 2f01 	strb.w	r2, [r7, #1]!
 8010d24:	42b7      	cmp	r7, r6
 8010d26:	d1cf      	bne.n	8010cc8 <_dtoa_r+0x10b8>
 8010d28:	4682      	mov	sl, r0
 8010d2a:	468b      	mov	fp, r1
 8010d2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010d2e:	4488      	add	r8, r1
 8010d30:	2300      	movs	r3, #0
 8010d32:	2200      	movs	r2, #0
 8010d34:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8010d38:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010d3c:	f7fa fb48 	bl	800b3d0 <__adddf3>
 8010d40:	4652      	mov	r2, sl
 8010d42:	465b      	mov	r3, fp
 8010d44:	f7fa ff68 	bl	800bc18 <__aeabi_dcmplt>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d048      	beq.n	8010dde <_dtoa_r+0x11ce>
 8010d4c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010d4e:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 8010d52:	9409      	str	r4, [sp, #36]	; 0x24
 8010d54:	f7ff b952 	b.w	800fffc <_dtoa_r+0x3ec>
 8010d58:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8010d5c:	2700      	movs	r7, #0
 8010d5e:	ebc0 040c 	rsb	r4, r0, ip
 8010d62:	f7ff b9c4 	b.w	80100ee <_dtoa_r+0x4de>
 8010d66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010d68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010d6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010d6c:	f1c1 0736 	rsb	r7, r1, #54	; 0x36
 8010d70:	f7ff b9bd 	b.w	80100ee <_dtoa_r+0x4de>
 8010d74:	4655      	mov	r5, sl
 8010d76:	f7ff ba0a 	b.w	801018e <_dtoa_r+0x57e>
 8010d7a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8010d7e:	2702      	movs	r7, #2
 8010d80:	f7ff bbcf 	b.w	8010522 <_dtoa_r+0x912>
 8010d84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010d86:	2d00      	cmp	r5, #0
 8010d88:	f43f ae4f 	beq.w	8010a2a <_dtoa_r+0xe1a>
 8010d8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d8e:	2a00      	cmp	r2, #0
 8010d90:	f77f aecf 	ble.w	8010b32 <_dtoa_r+0xf22>
 8010d94:	2300      	movs	r3, #0
 8010d96:	2200      	movs	r2, #0
 8010d98:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010d9c:	4650      	mov	r0, sl
 8010d9e:	4659      	mov	r1, fp
 8010da0:	f7fa fcc8 	bl	800b734 <__aeabi_dmul>
 8010da4:	4682      	mov	sl, r0
 8010da6:	1c78      	adds	r0, r7, #1
 8010da8:	468b      	mov	fp, r1
 8010daa:	f7fa fc5d 	bl	800b668 <__aeabi_i2d>
 8010dae:	4602      	mov	r2, r0
 8010db0:	460b      	mov	r3, r1
 8010db2:	4650      	mov	r0, sl
 8010db4:	4659      	mov	r1, fp
 8010db6:	f7fa fcbd 	bl	800b734 <__aeabi_dmul>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010dc2:	f7fa fb05 	bl	800b3d0 <__adddf3>
 8010dc6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8010dca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010dcc:	f10c 3eff 	add.w	lr, ip, #4294967295
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8010dd6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8010dda:	f7ff bbc6 	b.w	801056a <_dtoa_r+0x95a>
 8010dde:	2100      	movs	r1, #0
 8010de0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010de4:	2000      	movs	r0, #0
 8010de6:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8010dea:	f7fa faef 	bl	800b3cc <__aeabi_dsub>
 8010dee:	4652      	mov	r2, sl
 8010df0:	465b      	mov	r3, fp
 8010df2:	f7fa ff2f 	bl	800bc54 <__aeabi_dcmpgt>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f43f ae9b 	beq.w	8010b32 <_dtoa_r+0xf22>
 8010dfc:	4643      	mov	r3, r8
 8010dfe:	4698      	mov	r8, r3
 8010e00:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e04:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8010e08:	2830      	cmp	r0, #48	; 0x30
 8010e0a:	d0f8      	beq.n	8010dfe <_dtoa_r+0x11ee>
 8010e0c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010e0e:	9409      	str	r4, [sp, #36]	; 0x24
 8010e10:	f7ff b918 	b.w	8010044 <_dtoa_r+0x434>
 8010e14:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010e18:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010e1a:	9009      	str	r0, [sp, #36]	; 0x24
 8010e1c:	f7ff b8ee 	b.w	800fffc <_dtoa_r+0x3ec>
 8010e20:	080136e8 	.word	0x080136e8
 8010e24:	080137b0 	.word	0x080137b0
 8010e28:	f47f ad7e 	bne.w	8010928 <_dtoa_r+0xd18>
 8010e2c:	f01b 0f01 	tst.w	fp, #1
 8010e30:	f43f ad7a 	beq.w	8010928 <_dtoa_r+0xd18>
 8010e34:	e660      	b.n	8010af8 <_dtoa_r+0xee8>
 8010e36:	2300      	movs	r3, #0
 8010e38:	4648      	mov	r0, r9
 8010e3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010e3c:	220a      	movs	r2, #10
 8010e3e:	f000 ff3f 	bl	8011cc0 <__multadd>
 8010e42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e44:	900d      	str	r0, [sp, #52]	; 0x34
 8010e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e48:	f7ff b9d2 	b.w	80101f0 <_dtoa_r+0x5e0>
 8010e4c:	2700      	movs	r7, #0
 8010e4e:	e619      	b.n	8010a84 <_dtoa_r+0xe74>
 8010e50:	2702      	movs	r7, #2
 8010e52:	f7ff bb66 	b.w	8010522 <_dtoa_r+0x912>
 8010e56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010e58:	9209      	str	r2, [sp, #36]	; 0x24
 8010e5a:	f7ff b8cf 	b.w	800fffc <_dtoa_r+0x3ec>
 8010e5e:	2501      	movs	r5, #1
 8010e60:	f7fe bfb4 	b.w	800fdcc <_dtoa_r+0x1bc>
 8010e64:	f43f a9af 	beq.w	80101c6 <_dtoa_r+0x5b6>
 8010e68:	f1c3 003c 	rsb	r0, r3, #60	; 0x3c
 8010e6c:	f7ff ba67 	b.w	801033e <_dtoa_r+0x72e>

08010e70 <_fflush_r>:
 8010e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e74:	460d      	mov	r5, r1
 8010e76:	4680      	mov	r8, r0
 8010e78:	b110      	cbz	r0, 8010e80 <_fflush_r+0x10>
 8010e7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d062      	beq.n	8010f46 <_fflush_r+0xd6>
 8010e80:	89a8      	ldrh	r0, [r5, #12]
 8010e82:	b1e0      	cbz	r0, 8010ebe <_fflush_r+0x4e>
 8010e84:	f000 0208 	and.w	r2, r0, #8
 8010e88:	b211      	sxth	r1, r2
 8010e8a:	b1d9      	cbz	r1, 8010ec4 <_fflush_r+0x54>
 8010e8c:	692e      	ldr	r6, [r5, #16]
 8010e8e:	b1b6      	cbz	r6, 8010ebe <_fflush_r+0x4e>
 8010e90:	0783      	lsls	r3, r0, #30
 8010e92:	682c      	ldr	r4, [r5, #0]
 8010e94:	bf08      	it	eq
 8010e96:	696b      	ldreq	r3, [r5, #20]
 8010e98:	602e      	str	r6, [r5, #0]
 8010e9a:	bf18      	it	ne
 8010e9c:	2300      	movne	r3, #0
 8010e9e:	1ba4      	subs	r4, r4, r6
 8010ea0:	60ab      	str	r3, [r5, #8]
 8010ea2:	e00a      	b.n	8010eba <_fflush_r+0x4a>
 8010ea4:	4632      	mov	r2, r6
 8010ea6:	4623      	mov	r3, r4
 8010ea8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8010eaa:	69e9      	ldr	r1, [r5, #28]
 8010eac:	4640      	mov	r0, r8
 8010eae:	47b8      	blx	r7
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	ebc0 0404 	rsb	r4, r0, r4
 8010eb6:	4406      	add	r6, r0
 8010eb8:	dd52      	ble.n	8010f60 <_fflush_r+0xf0>
 8010eba:	2c00      	cmp	r4, #0
 8010ebc:	dcf2      	bgt.n	8010ea4 <_fflush_r+0x34>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec4:	686a      	ldr	r2, [r5, #4]
 8010ec6:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
 8010eca:	2a00      	cmp	r2, #0
 8010ecc:	81a9      	strh	r1, [r5, #12]
 8010ece:	dd4f      	ble.n	8010f70 <_fflush_r+0x100>
 8010ed0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010ed2:	2c00      	cmp	r4, #0
 8010ed4:	d0f3      	beq.n	8010ebe <_fflush_r+0x4e>
 8010ed6:	f400 5680 	and.w	r6, r0, #4096	; 0x1000
 8010eda:	b232      	sxth	r2, r6
 8010edc:	2000      	movs	r0, #0
 8010ede:	f8d8 6000 	ldr.w	r6, [r8]
 8010ee2:	f8c8 0000 	str.w	r0, [r8]
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	d030      	beq.n	8010f4c <_fflush_r+0xdc>
 8010eea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010eec:	f001 0004 	and.w	r0, r1, #4
 8010ef0:	b201      	sxth	r1, r0
 8010ef2:	b129      	cbz	r1, 8010f00 <_fflush_r+0x90>
 8010ef4:	6868      	ldr	r0, [r5, #4]
 8010ef6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ef8:	1a12      	subs	r2, r2, r0
 8010efa:	b10b      	cbz	r3, 8010f00 <_fflush_r+0x90>
 8010efc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8010efe:	1a52      	subs	r2, r2, r1
 8010f00:	2300      	movs	r3, #0
 8010f02:	4640      	mov	r0, r8
 8010f04:	69e9      	ldr	r1, [r5, #28]
 8010f06:	47a0      	blx	r4
 8010f08:	1c42      	adds	r2, r0, #1
 8010f0a:	d035      	beq.n	8010f78 <_fflush_r+0x108>
 8010f0c:	89ab      	ldrh	r3, [r5, #12]
 8010f0e:	692a      	ldr	r2, [r5, #16]
 8010f10:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8010f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f18:	81ab      	strh	r3, [r5, #12]
 8010f1a:	b209      	sxth	r1, r1
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e885 000c 	stmia.w	r5, {r2, r3}
 8010f22:	2900      	cmp	r1, #0
 8010f24:	d144      	bne.n	8010fb0 <_fflush_r+0x140>
 8010f26:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8010f28:	f8c8 6000 	str.w	r6, [r8]
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	d0c6      	beq.n	8010ebe <_fflush_r+0x4e>
 8010f30:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8010f34:	4281      	cmp	r1, r0
 8010f36:	d002      	beq.n	8010f3e <_fflush_r+0xce>
 8010f38:	4640      	mov	r0, r8
 8010f3a:	f000 f8f1 	bl	8011120 <_free_r>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	6328      	str	r0, [r5, #48]	; 0x30
 8010f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f46:	f000 f875 	bl	8011034 <__sinit>
 8010f4a:	e799      	b.n	8010e80 <_fflush_r+0x10>
 8010f4c:	69e9      	ldr	r1, [r5, #28]
 8010f4e:	2301      	movs	r3, #1
 8010f50:	4640      	mov	r0, r8
 8010f52:	47a0      	blx	r4
 8010f54:	1c41      	adds	r1, r0, #1
 8010f56:	4602      	mov	r2, r0
 8010f58:	d02c      	beq.n	8010fb4 <_fflush_r+0x144>
 8010f5a:	89a9      	ldrh	r1, [r5, #12]
 8010f5c:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010f5e:	e7c5      	b.n	8010eec <_fflush_r+0x7c>
 8010f60:	89aa      	ldrh	r2, [r5, #12]
 8010f62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f66:	81ab      	strh	r3, [r5, #12]
 8010f68:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	dcac      	bgt.n	8010ed0 <_fflush_r+0x60>
 8010f76:	e7a2      	b.n	8010ebe <_fflush_r+0x4e>
 8010f78:	f8d8 3000 	ldr.w	r3, [r8]
 8010f7c:	b163      	cbz	r3, 8010f98 <_fflush_r+0x128>
 8010f7e:	2b1d      	cmp	r3, #29
 8010f80:	d001      	beq.n	8010f86 <_fflush_r+0x116>
 8010f82:	2b16      	cmp	r3, #22
 8010f84:	d121      	bne.n	8010fca <_fflush_r+0x15a>
 8010f86:	89a8      	ldrh	r0, [r5, #12]
 8010f88:	692b      	ldr	r3, [r5, #16]
 8010f8a:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
 8010f8e:	2100      	movs	r1, #0
 8010f90:	81aa      	strh	r2, [r5, #12]
 8010f92:	6069      	str	r1, [r5, #4]
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	e7c6      	b.n	8010f26 <_fflush_r+0xb6>
 8010f98:	89aa      	ldrh	r2, [r5, #12]
 8010f9a:	6929      	ldr	r1, [r5, #16]
 8010f9c:	606b      	str	r3, [r5, #4]
 8010f9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8010fa2:	b21b      	sxth	r3, r3
 8010fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010fa8:	81aa      	strh	r2, [r5, #12]
 8010faa:	6029      	str	r1, [r5, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d0ba      	beq.n	8010f26 <_fflush_r+0xb6>
 8010fb0:	6528      	str	r0, [r5, #80]	; 0x50
 8010fb2:	e7b8      	b.n	8010f26 <_fflush_r+0xb6>
 8010fb4:	f8d8 1000 	ldr.w	r1, [r8]
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	d0ce      	beq.n	8010f5a <_fflush_r+0xea>
 8010fbc:	291d      	cmp	r1, #29
 8010fbe:	d001      	beq.n	8010fc4 <_fflush_r+0x154>
 8010fc0:	2916      	cmp	r1, #22
 8010fc2:	d1cd      	bne.n	8010f60 <_fflush_r+0xf0>
 8010fc4:	f8c8 6000 	str.w	r6, [r8]
 8010fc8:	e779      	b.n	8010ebe <_fflush_r+0x4e>
 8010fca:	89aa      	ldrh	r2, [r5, #12]
 8010fcc:	f042 0140 	orr.w	r1, r2, #64	; 0x40
 8010fd0:	81a9      	strh	r1, [r5, #12]
 8010fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd6:	bf00      	nop

08010fd8 <_cleanup_r>:
 8010fd8:	f642 1191 	movw	r1, #10641	; 0x2991
 8010fdc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010fe0:	f000 b968 	b.w	80112b4 <_fwalk>

08010fe4 <std.isra.0>:
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	4604      	mov	r4, r0
 8010fea:	8181      	strh	r1, [r0, #12]
 8010fec:	81c2      	strh	r2, [r0, #14]
 8010fee:	6003      	str	r3, [r0, #0]
 8010ff0:	6043      	str	r3, [r0, #4]
 8010ff2:	6083      	str	r3, [r0, #8]
 8010ff4:	6643      	str	r3, [r0, #100]	; 0x64
 8010ff6:	6103      	str	r3, [r0, #16]
 8010ff8:	6143      	str	r3, [r0, #20]
 8010ffa:	6183      	str	r3, [r0, #24]
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	2208      	movs	r2, #8
 8011000:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 8011004:	f7fc fc2c 	bl	800d860 <memset>
 8011008:	f242 609d 	movw	r0, #9885	; 0x269d
 801100c:	f242 61c1 	movw	r1, #9921	; 0x26c1
 8011010:	f242 7205 	movw	r2, #9989	; 0x2705
 8011014:	f242 7329 	movw	r3, #10025	; 0x2729
 8011018:	f6c0 0001 	movt	r0, #2049	; 0x801
 801101c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8011020:	f6c0 0201 	movt	r2, #2049	; 0x801
 8011024:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011028:	61e4      	str	r4, [r4, #28]
 801102a:	6220      	str	r0, [r4, #32]
 801102c:	6261      	str	r1, [r4, #36]	; 0x24
 801102e:	62a2      	str	r2, [r4, #40]	; 0x28
 8011030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011032:	bd10      	pop	{r4, pc}

08011034 <__sinit>:
 8011034:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011036:	b570      	push	{r4, r5, r6, lr}
 8011038:	4604      	mov	r4, r0
 801103a:	b103      	cbz	r3, 801103e <__sinit+0xa>
 801103c:	bd70      	pop	{r4, r5, r6, pc}
 801103e:	4a0f      	ldr	r2, [pc, #60]	; (801107c <__sinit+0x48>)
 8011040:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 8011044:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011046:	2501      	movs	r5, #1
 8011048:	461a      	mov	r2, r3
 801104a:	f504 763b 	add.w	r6, r4, #748	; 0x2ec
 801104e:	2303      	movs	r3, #3
 8011050:	2104      	movs	r1, #4
 8011052:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8011056:	6840      	ldr	r0, [r0, #4]
 8011058:	63a5      	str	r5, [r4, #56]	; 0x38
 801105a:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 801105e:	f7ff ffc1 	bl	8010fe4 <std.isra.0>
 8011062:	68a0      	ldr	r0, [r4, #8]
 8011064:	2109      	movs	r1, #9
 8011066:	462a      	mov	r2, r5
 8011068:	f7ff ffbc 	bl	8010fe4 <std.isra.0>
 801106c:	68e0      	ldr	r0, [r4, #12]
 801106e:	2112      	movs	r1, #18
 8011070:	2202      	movs	r2, #2
 8011072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011076:	f7ff bfb5 	b.w	8010fe4 <std.isra.0>
 801107a:	bf00      	nop
 801107c:	08010fd9 	.word	0x08010fd9

08011080 <__sfp_lock_acquire>:
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop

08011084 <__sfp_lock_release>:
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop

08011088 <_malloc_trim_r>:
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108a:	4d22      	ldr	r5, [pc, #136]	; (8011114 <_malloc_trim_r+0x8c>)
 801108c:	460f      	mov	r7, r1
 801108e:	4604      	mov	r4, r0
 8011090:	f000 fde2 	bl	8011c58 <__malloc_lock>
 8011094:	68ab      	ldr	r3, [r5, #8]
 8011096:	685e      	ldr	r6, [r3, #4]
 8011098:	f026 0603 	bic.w	r6, r6, #3
 801109c:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 80110a0:	1bc1      	subs	r1, r0, r7
 80110a2:	0b0a      	lsrs	r2, r1, #12
 80110a4:	1e57      	subs	r7, r2, #1
 80110a6:	033f      	lsls	r7, r7, #12
 80110a8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80110ac:	db07      	blt.n	80110be <_malloc_trim_r+0x36>
 80110ae:	2100      	movs	r1, #0
 80110b0:	4620      	mov	r0, r4
 80110b2:	f001 fae1 	bl	8012678 <_sbrk_r>
 80110b6:	68ab      	ldr	r3, [r5, #8]
 80110b8:	1999      	adds	r1, r3, r6
 80110ba:	4288      	cmp	r0, r1
 80110bc:	d004      	beq.n	80110c8 <_malloc_trim_r+0x40>
 80110be:	4620      	mov	r0, r4
 80110c0:	f000 fdcc 	bl	8011c5c <__malloc_unlock>
 80110c4:	2000      	movs	r0, #0
 80110c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c8:	4279      	negs	r1, r7
 80110ca:	4620      	mov	r0, r4
 80110cc:	f001 fad4 	bl	8012678 <_sbrk_r>
 80110d0:	3001      	adds	r0, #1
 80110d2:	d00d      	beq.n	80110f0 <_malloc_trim_r+0x68>
 80110d4:	4b10      	ldr	r3, [pc, #64]	; (8011118 <_malloc_trim_r+0x90>)
 80110d6:	68a8      	ldr	r0, [r5, #8]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	1bf6      	subs	r6, r6, r7
 80110dc:	f046 0601 	orr.w	r6, r6, #1
 80110e0:	1bd7      	subs	r7, r2, r7
 80110e2:	6046      	str	r6, [r0, #4]
 80110e4:	4620      	mov	r0, r4
 80110e6:	601f      	str	r7, [r3, #0]
 80110e8:	f000 fdb8 	bl	8011c5c <__malloc_unlock>
 80110ec:	2001      	movs	r0, #1
 80110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f0:	2100      	movs	r1, #0
 80110f2:	4620      	mov	r0, r4
 80110f4:	f001 fac0 	bl	8012678 <_sbrk_r>
 80110f8:	68ab      	ldr	r3, [r5, #8]
 80110fa:	1ac2      	subs	r2, r0, r3
 80110fc:	2a0f      	cmp	r2, #15
 80110fe:	ddde      	ble.n	80110be <_malloc_trim_r+0x36>
 8011100:	4906      	ldr	r1, [pc, #24]	; (801111c <_malloc_trim_r+0x94>)
 8011102:	6809      	ldr	r1, [r1, #0]
 8011104:	1a40      	subs	r0, r0, r1
 8011106:	4904      	ldr	r1, [pc, #16]	; (8011118 <_malloc_trim_r+0x90>)
 8011108:	f042 0201 	orr.w	r2, r2, #1
 801110c:	6008      	str	r0, [r1, #0]
 801110e:	605a      	str	r2, [r3, #4]
 8011110:	e7d5      	b.n	80110be <_malloc_trim_r+0x36>
 8011112:	bf00      	nop
 8011114:	200004f0 	.word	0x200004f0
 8011118:	200009f0 	.word	0x200009f0
 801111c:	200008fc 	.word	0x200008fc

08011120 <_free_r>:
 8011120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011124:	460d      	mov	r5, r1
 8011126:	4606      	mov	r6, r0
 8011128:	2900      	cmp	r1, #0
 801112a:	d055      	beq.n	80111d8 <_free_r+0xb8>
 801112c:	f000 fd94 	bl	8011c58 <__malloc_lock>
 8011130:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8011134:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80112a4 <_free_r+0x184>
 8011138:	f1a5 0408 	sub.w	r4, r5, #8
 801113c:	f021 0301 	bic.w	r3, r1, #1
 8011140:	18e2      	adds	r2, r4, r3
 8011142:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8011146:	6857      	ldr	r7, [r2, #4]
 8011148:	4290      	cmp	r0, r2
 801114a:	f027 0703 	bic.w	r7, r7, #3
 801114e:	d065      	beq.n	801121c <_free_r+0xfc>
 8011150:	f011 0101 	ands.w	r1, r1, #1
 8011154:	6057      	str	r7, [r2, #4]
 8011156:	d032      	beq.n	80111be <_free_r+0x9e>
 8011158:	2100      	movs	r1, #0
 801115a:	19d0      	adds	r0, r2, r7
 801115c:	6840      	ldr	r0, [r0, #4]
 801115e:	07c0      	lsls	r0, r0, #31
 8011160:	d406      	bmi.n	8011170 <_free_r+0x50>
 8011162:	19db      	adds	r3, r3, r7
 8011164:	6890      	ldr	r0, [r2, #8]
 8011166:	2900      	cmp	r1, #0
 8011168:	d04a      	beq.n	8011200 <_free_r+0xe0>
 801116a:	68d2      	ldr	r2, [r2, #12]
 801116c:	60c2      	str	r2, [r0, #12]
 801116e:	6090      	str	r0, [r2, #8]
 8011170:	f043 0001 	orr.w	r0, r3, #1
 8011174:	6060      	str	r0, [r4, #4]
 8011176:	50e3      	str	r3, [r4, r3]
 8011178:	b9e1      	cbnz	r1, 80111b4 <_free_r+0x94>
 801117a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801117e:	d32d      	bcc.n	80111dc <_free_r+0xbc>
 8011180:	0a5a      	lsrs	r2, r3, #9
 8011182:	2a04      	cmp	r2, #4
 8011184:	d866      	bhi.n	8011254 <_free_r+0x134>
 8011186:	0998      	lsrs	r0, r3, #6
 8011188:	3038      	adds	r0, #56	; 0x38
 801118a:	0042      	lsls	r2, r0, #1
 801118c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8011190:	4944      	ldr	r1, [pc, #272]	; (80112a4 <_free_r+0x184>)
 8011192:	f8de 2008 	ldr.w	r2, [lr, #8]
 8011196:	4572      	cmp	r2, lr
 8011198:	d062      	beq.n	8011260 <_free_r+0x140>
 801119a:	6850      	ldr	r0, [r2, #4]
 801119c:	f020 0103 	bic.w	r1, r0, #3
 80111a0:	428b      	cmp	r3, r1
 80111a2:	d202      	bcs.n	80111aa <_free_r+0x8a>
 80111a4:	6892      	ldr	r2, [r2, #8]
 80111a6:	4596      	cmp	lr, r2
 80111a8:	d1f7      	bne.n	801119a <_free_r+0x7a>
 80111aa:	68d0      	ldr	r0, [r2, #12]
 80111ac:	60e0      	str	r0, [r4, #12]
 80111ae:	60a2      	str	r2, [r4, #8]
 80111b0:	60d4      	str	r4, [r2, #12]
 80111b2:	6084      	str	r4, [r0, #8]
 80111b4:	4630      	mov	r0, r6
 80111b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111ba:	f000 bd4f 	b.w	8011c5c <__malloc_unlock>
 80111be:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80111c2:	1b64      	subs	r4, r4, r5
 80111c4:	f10c 0808 	add.w	r8, ip, #8
 80111c8:	68a0      	ldr	r0, [r4, #8]
 80111ca:	4540      	cmp	r0, r8
 80111cc:	442b      	add	r3, r5
 80111ce:	d03f      	beq.n	8011250 <_free_r+0x130>
 80111d0:	68e5      	ldr	r5, [r4, #12]
 80111d2:	60c5      	str	r5, [r0, #12]
 80111d4:	60a8      	str	r0, [r5, #8]
 80111d6:	e7c0      	b.n	801115a <_free_r+0x3a>
 80111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111dc:	08dd      	lsrs	r5, r3, #3
 80111de:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 80111e2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80111e6:	6891      	ldr	r1, [r2, #8]
 80111e8:	60e2      	str	r2, [r4, #12]
 80111ea:	10ab      	asrs	r3, r5, #2
 80111ec:	2501      	movs	r5, #1
 80111ee:	fa05 f303 	lsl.w	r3, r5, r3
 80111f2:	4318      	orrs	r0, r3
 80111f4:	60a1      	str	r1, [r4, #8]
 80111f6:	f8cc 0004 	str.w	r0, [ip, #4]
 80111fa:	6094      	str	r4, [r2, #8]
 80111fc:	60cc      	str	r4, [r1, #12]
 80111fe:	e7d9      	b.n	80111b4 <_free_r+0x94>
 8011200:	4d29      	ldr	r5, [pc, #164]	; (80112a8 <_free_r+0x188>)
 8011202:	42a8      	cmp	r0, r5
 8011204:	d1b1      	bne.n	801116a <_free_r+0x4a>
 8011206:	f043 0201 	orr.w	r2, r3, #1
 801120a:	f8cc 4014 	str.w	r4, [ip, #20]
 801120e:	f8cc 4010 	str.w	r4, [ip, #16]
 8011212:	60e0      	str	r0, [r4, #12]
 8011214:	60a0      	str	r0, [r4, #8]
 8011216:	6062      	str	r2, [r4, #4]
 8011218:	50e3      	str	r3, [r4, r3]
 801121a:	e7cb      	b.n	80111b4 <_free_r+0x94>
 801121c:	18ff      	adds	r7, r7, r3
 801121e:	07cb      	lsls	r3, r1, #31
 8011220:	d407      	bmi.n	8011232 <_free_r+0x112>
 8011222:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8011226:	1a64      	subs	r4, r4, r1
 8011228:	187f      	adds	r7, r7, r1
 801122a:	68e3      	ldr	r3, [r4, #12]
 801122c:	68a0      	ldr	r0, [r4, #8]
 801122e:	60c3      	str	r3, [r0, #12]
 8011230:	6098      	str	r0, [r3, #8]
 8011232:	4a1e      	ldr	r2, [pc, #120]	; (80112ac <_free_r+0x18c>)
 8011234:	f8cc 4008 	str.w	r4, [ip, #8]
 8011238:	6811      	ldr	r1, [r2, #0]
 801123a:	f047 0301 	orr.w	r3, r7, #1
 801123e:	428f      	cmp	r7, r1
 8011240:	6063      	str	r3, [r4, #4]
 8011242:	d3b7      	bcc.n	80111b4 <_free_r+0x94>
 8011244:	4a1a      	ldr	r2, [pc, #104]	; (80112b0 <_free_r+0x190>)
 8011246:	4630      	mov	r0, r6
 8011248:	6811      	ldr	r1, [r2, #0]
 801124a:	f7ff ff1d 	bl	8011088 <_malloc_trim_r>
 801124e:	e7b1      	b.n	80111b4 <_free_r+0x94>
 8011250:	2101      	movs	r1, #1
 8011252:	e782      	b.n	801115a <_free_r+0x3a>
 8011254:	2a14      	cmp	r2, #20
 8011256:	d80c      	bhi.n	8011272 <_free_r+0x152>
 8011258:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 801125c:	0042      	lsls	r2, r0, #1
 801125e:	e795      	b.n	801118c <_free_r+0x6c>
 8011260:	684b      	ldr	r3, [r1, #4]
 8011262:	1080      	asrs	r0, r0, #2
 8011264:	2501      	movs	r5, #1
 8011266:	fa05 f000 	lsl.w	r0, r5, r0
 801126a:	4303      	orrs	r3, r0
 801126c:	604b      	str	r3, [r1, #4]
 801126e:	4610      	mov	r0, r2
 8011270:	e79c      	b.n	80111ac <_free_r+0x8c>
 8011272:	2a54      	cmp	r2, #84	; 0x54
 8011274:	d803      	bhi.n	801127e <_free_r+0x15e>
 8011276:	0b18      	lsrs	r0, r3, #12
 8011278:	306e      	adds	r0, #110	; 0x6e
 801127a:	0042      	lsls	r2, r0, #1
 801127c:	e786      	b.n	801118c <_free_r+0x6c>
 801127e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011282:	d803      	bhi.n	801128c <_free_r+0x16c>
 8011284:	0bd8      	lsrs	r0, r3, #15
 8011286:	3077      	adds	r0, #119	; 0x77
 8011288:	0042      	lsls	r2, r0, #1
 801128a:	e77f      	b.n	801118c <_free_r+0x6c>
 801128c:	f240 5154 	movw	r1, #1364	; 0x554
 8011290:	428a      	cmp	r2, r1
 8011292:	d803      	bhi.n	801129c <_free_r+0x17c>
 8011294:	0c98      	lsrs	r0, r3, #18
 8011296:	307c      	adds	r0, #124	; 0x7c
 8011298:	0042      	lsls	r2, r0, #1
 801129a:	e777      	b.n	801118c <_free_r+0x6c>
 801129c:	22fc      	movs	r2, #252	; 0xfc
 801129e:	207e      	movs	r0, #126	; 0x7e
 80112a0:	e774      	b.n	801118c <_free_r+0x6c>
 80112a2:	bf00      	nop
 80112a4:	200004f0 	.word	0x200004f0
 80112a8:	200004f8 	.word	0x200004f8
 80112ac:	200008f8 	.word	0x200008f8
 80112b0:	200009ec 	.word	0x200009ec

080112b4 <_fwalk>:
 80112b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112b8:	4680      	mov	r8, r0
 80112ba:	4689      	mov	r9, r1
 80112bc:	f7ff fee0 	bl	8011080 <__sfp_lock_acquire>
 80112c0:	f518 7838 	adds.w	r8, r8, #736	; 0x2e0
 80112c4:	d04f      	beq.n	8011366 <_fwalk+0xb2>
 80112c6:	f04f 0a00 	mov.w	sl, #0
 80112ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80112ce:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112d2:	3d01      	subs	r5, #1
 80112d4:	d43d      	bmi.n	8011352 <_fwalk+0x9e>
 80112d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112da:	f005 0601 	and.w	r6, r5, #1
 80112de:	b13b      	cbz	r3, 80112f0 <_fwalk+0x3c>
 80112e0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d003      	beq.n	80112f0 <_fwalk+0x3c>
 80112e8:	4620      	mov	r0, r4
 80112ea:	47c8      	blx	r9
 80112ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80112f0:	3468      	adds	r4, #104	; 0x68
 80112f2:	1e6f      	subs	r7, r5, #1
 80112f4:	b36d      	cbz	r5, 8011352 <_fwalk+0x9e>
 80112f6:	b176      	cbz	r6, 8011316 <_fwalk+0x62>
 80112f8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80112fc:	b139      	cbz	r1, 801130e <_fwalk+0x5a>
 80112fe:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8011302:	1c53      	adds	r3, r2, #1
 8011304:	d003      	beq.n	801130e <_fwalk+0x5a>
 8011306:	4620      	mov	r0, r4
 8011308:	47c8      	blx	r9
 801130a:	ea4a 0a00 	orr.w	sl, sl, r0
 801130e:	3f01      	subs	r7, #1
 8011310:	3468      	adds	r4, #104	; 0x68
 8011312:	1c7b      	adds	r3, r7, #1
 8011314:	d01d      	beq.n	8011352 <_fwalk+0x9e>
 8011316:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801131a:	f104 0568 	add.w	r5, r4, #104	; 0x68
 801131e:	b13e      	cbz	r6, 8011330 <_fwalk+0x7c>
 8011320:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8011324:	3301      	adds	r3, #1
 8011326:	4620      	mov	r0, r4
 8011328:	d002      	beq.n	8011330 <_fwalk+0x7c>
 801132a:	47c8      	blx	r9
 801132c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011330:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8011334:	1e7e      	subs	r6, r7, #1
 8011336:	b13c      	cbz	r4, 8011348 <_fwalk+0x94>
 8011338:	f9b5 700e 	ldrsh.w	r7, [r5, #14]
 801133c:	1c7b      	adds	r3, r7, #1
 801133e:	4628      	mov	r0, r5
 8011340:	d002      	beq.n	8011348 <_fwalk+0x94>
 8011342:	47c8      	blx	r9
 8011344:	ea4a 0a00 	orr.w	sl, sl, r0
 8011348:	f105 0468 	add.w	r4, r5, #104	; 0x68
 801134c:	1e77      	subs	r7, r6, #1
 801134e:	2e00      	cmp	r6, #0
 8011350:	d1e1      	bne.n	8011316 <_fwalk+0x62>
 8011352:	f8d8 8000 	ldr.w	r8, [r8]
 8011356:	f1b8 0f00 	cmp.w	r8, #0
 801135a:	d1b6      	bne.n	80112ca <_fwalk+0x16>
 801135c:	f7ff fe92 	bl	8011084 <__sfp_lock_release>
 8011360:	4650      	mov	r0, sl
 8011362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011366:	46c2      	mov	sl, r8
 8011368:	e7f8      	b.n	801135c <_fwalk+0xa8>
 801136a:	bf00      	nop

0801136c <__locale_charset>:
 801136c:	f240 40cc 	movw	r0, #1228	; 0x4cc
 8011370:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <__locale_mb_cur_max>:
 8011378:	f240 43ec 	movw	r3, #1260	; 0x4ec
 801137c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011380:	6818      	ldr	r0, [r3, #0]
 8011382:	4770      	bx	lr

08011384 <_localeconv_r>:
 8011384:	f240 4094 	movw	r0, #1172	; 0x494
 8011388:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop

08011390 <__smakebuf_r>:
 8011390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011392:	898b      	ldrh	r3, [r1, #12]
 8011394:	f003 0202 	and.w	r2, r3, #2
 8011398:	460c      	mov	r4, r1
 801139a:	b211      	sxth	r1, r2
 801139c:	b091      	sub	sp, #68	; 0x44
 801139e:	4605      	mov	r5, r0
 80113a0:	2900      	cmp	r1, #0
 80113a2:	d138      	bne.n	8011416 <__smakebuf_r+0x86>
 80113a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113a8:	2900      	cmp	r1, #0
 80113aa:	db16      	blt.n	80113da <__smakebuf_r+0x4a>
 80113ac:	aa01      	add	r2, sp, #4
 80113ae:	f001 fbcf 	bl	8012b50 <_fstat_r>
 80113b2:	2800      	cmp	r0, #0
 80113b4:	db10      	blt.n	80113d8 <__smakebuf_r+0x48>
 80113b6:	9b02      	ldr	r3, [sp, #8]
 80113b8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
 80113bc:	f5b0 5600 	subs.w	r6, r0, #8192	; 0x2000
 80113c0:	4277      	negs	r7, r6
 80113c2:	4177      	adcs	r7, r6
 80113c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80113c8:	d02c      	beq.n	8011424 <__smakebuf_r+0x94>
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 80113d0:	81a0      	strh	r0, [r4, #12]
 80113d2:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80113d6:	e00c      	b.n	80113f2 <__smakebuf_r+0x62>
 80113d8:	89a3      	ldrh	r3, [r4, #12]
 80113da:	f003 0680 	and.w	r6, r3, #128	; 0x80
 80113de:	b237      	sxth	r7, r6
 80113e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80113e4:	2f00      	cmp	r7, #0
 80113e6:	bf0c      	ite	eq
 80113e8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80113ec:	2640      	movne	r6, #64	; 0x40
 80113ee:	81a2      	strh	r2, [r4, #12]
 80113f0:	2700      	movs	r7, #0
 80113f2:	4631      	mov	r1, r6
 80113f4:	4628      	mov	r0, r5
 80113f6:	f000 f83f 	bl	8011478 <_malloc_r>
 80113fa:	89a1      	ldrh	r1, [r4, #12]
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d028      	beq.n	8011452 <__smakebuf_r+0xc2>
 8011400:	4a1b      	ldr	r2, [pc, #108]	; (8011470 <__smakebuf_r+0xe0>)
 8011402:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8011406:	63ea      	str	r2, [r5, #60]	; 0x3c
 8011408:	81a3      	strh	r3, [r4, #12]
 801140a:	6020      	str	r0, [r4, #0]
 801140c:	6120      	str	r0, [r4, #16]
 801140e:	6166      	str	r6, [r4, #20]
 8011410:	b99f      	cbnz	r7, 801143a <__smakebuf_r+0xaa>
 8011412:	b011      	add	sp, #68	; 0x44
 8011414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801141a:	2001      	movs	r0, #1
 801141c:	6022      	str	r2, [r4, #0]
 801141e:	6122      	str	r2, [r4, #16]
 8011420:	6160      	str	r0, [r4, #20]
 8011422:	e7f6      	b.n	8011412 <__smakebuf_r+0x82>
 8011424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011426:	4a13      	ldr	r2, [pc, #76]	; (8011474 <__smakebuf_r+0xe4>)
 8011428:	4291      	cmp	r1, r2
 801142a:	d1ce      	bne.n	80113ca <__smakebuf_r+0x3a>
 801142c:	89a1      	ldrh	r1, [r4, #12]
 801142e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8011432:	4331      	orrs	r1, r6
 8011434:	81a1      	strh	r1, [r4, #12]
 8011436:	64e6      	str	r6, [r4, #76]	; 0x4c
 8011438:	e7db      	b.n	80113f2 <__smakebuf_r+0x62>
 801143a:	4628      	mov	r0, r5
 801143c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011440:	f001 fd24 	bl	8012e8c <_isatty_r>
 8011444:	2800      	cmp	r0, #0
 8011446:	d0e4      	beq.n	8011412 <__smakebuf_r+0x82>
 8011448:	89a0      	ldrh	r0, [r4, #12]
 801144a:	f040 0101 	orr.w	r1, r0, #1
 801144e:	81a1      	strh	r1, [r4, #12]
 8011450:	e7df      	b.n	8011412 <__smakebuf_r+0x82>
 8011452:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8011456:	b21a      	sxth	r2, r3
 8011458:	2a00      	cmp	r2, #0
 801145a:	d1da      	bne.n	8011412 <__smakebuf_r+0x82>
 801145c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8011460:	f041 0102 	orr.w	r1, r1, #2
 8011464:	2301      	movs	r3, #1
 8011466:	81a1      	strh	r1, [r4, #12]
 8011468:	6020      	str	r0, [r4, #0]
 801146a:	6120      	str	r0, [r4, #16]
 801146c:	6163      	str	r3, [r4, #20]
 801146e:	e7d0      	b.n	8011412 <__smakebuf_r+0x82>
 8011470:	08010fd9 	.word	0x08010fd9
 8011474:	08012705 	.word	0x08012705

08011478 <_malloc_r>:
 8011478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147c:	f101 050b 	add.w	r5, r1, #11
 8011480:	2d16      	cmp	r5, #22
 8011482:	b083      	sub	sp, #12
 8011484:	4606      	mov	r6, r0
 8011486:	d927      	bls.n	80114d8 <_malloc_r+0x60>
 8011488:	f035 0507 	bics.w	r5, r5, #7
 801148c:	d427      	bmi.n	80114de <_malloc_r+0x66>
 801148e:	42a9      	cmp	r1, r5
 8011490:	d825      	bhi.n	80114de <_malloc_r+0x66>
 8011492:	4630      	mov	r0, r6
 8011494:	f000 fbe0 	bl	8011c58 <__malloc_lock>
 8011498:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 801149c:	d223      	bcs.n	80114e6 <_malloc_r+0x6e>
 801149e:	4fba      	ldr	r7, [pc, #744]	; (8011788 <_malloc_r+0x310>)
 80114a0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80114a4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80114a8:	68d4      	ldr	r4, [r2, #12]
 80114aa:	4294      	cmp	r4, r2
 80114ac:	f000 81de 	beq.w	801186c <_malloc_r+0x3f4>
 80114b0:	6863      	ldr	r3, [r4, #4]
 80114b2:	68e2      	ldr	r2, [r4, #12]
 80114b4:	68a1      	ldr	r1, [r4, #8]
 80114b6:	f023 0003 	bic.w	r0, r3, #3
 80114ba:	1823      	adds	r3, r4, r0
 80114bc:	60ca      	str	r2, [r1, #12]
 80114be:	6858      	ldr	r0, [r3, #4]
 80114c0:	6091      	str	r1, [r2, #8]
 80114c2:	f040 0201 	orr.w	r2, r0, #1
 80114c6:	605a      	str	r2, [r3, #4]
 80114c8:	4630      	mov	r0, r6
 80114ca:	f000 fbc7 	bl	8011c5c <__malloc_unlock>
 80114ce:	3408      	adds	r4, #8
 80114d0:	4620      	mov	r0, r4
 80114d2:	b003      	add	sp, #12
 80114d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d8:	2510      	movs	r5, #16
 80114da:	42a9      	cmp	r1, r5
 80114dc:	d9d9      	bls.n	8011492 <_malloc_r+0x1a>
 80114de:	240c      	movs	r4, #12
 80114e0:	6034      	str	r4, [r6, #0]
 80114e2:	2400      	movs	r4, #0
 80114e4:	e7f4      	b.n	80114d0 <_malloc_r+0x58>
 80114e6:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80114ea:	f000 808b 	beq.w	8011604 <_malloc_r+0x18c>
 80114ee:	f1bc 0f04 	cmp.w	ip, #4
 80114f2:	f200 8155 	bhi.w	80117a0 <_malloc_r+0x328>
 80114f6:	ea4f 1795 	mov.w	r7, r5, lsr #6
 80114fa:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 80114fe:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8011502:	4fa1      	ldr	r7, [pc, #644]	; (8011788 <_malloc_r+0x310>)
 8011504:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8011508:	68cc      	ldr	r4, [r1, #12]
 801150a:	42a1      	cmp	r1, r4
 801150c:	d105      	bne.n	801151a <_malloc_r+0xa2>
 801150e:	e00c      	b.n	801152a <_malloc_r+0xb2>
 8011510:	2a00      	cmp	r2, #0
 8011512:	da7c      	bge.n	801160e <_malloc_r+0x196>
 8011514:	68e4      	ldr	r4, [r4, #12]
 8011516:	42a1      	cmp	r1, r4
 8011518:	d007      	beq.n	801152a <_malloc_r+0xb2>
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	f023 0003 	bic.w	r0, r3, #3
 8011520:	1b42      	subs	r2, r0, r5
 8011522:	2a0f      	cmp	r2, #15
 8011524:	ddf4      	ble.n	8011510 <_malloc_r+0x98>
 8011526:	f10e 3eff 	add.w	lr, lr, #4294967295
 801152a:	f10e 0c01 	add.w	ip, lr, #1
 801152e:	4b96      	ldr	r3, [pc, #600]	; (8011788 <_malloc_r+0x310>)
 8011530:	693c      	ldr	r4, [r7, #16]
 8011532:	f103 0e08 	add.w	lr, r3, #8
 8011536:	4574      	cmp	r4, lr
 8011538:	f000 8175 	beq.w	8011826 <_malloc_r+0x3ae>
 801153c:	6861      	ldr	r1, [r4, #4]
 801153e:	f021 0103 	bic.w	r1, r1, #3
 8011542:	1b4a      	subs	r2, r1, r5
 8011544:	2a0f      	cmp	r2, #15
 8011546:	f300 815b 	bgt.w	8011800 <_malloc_r+0x388>
 801154a:	2a00      	cmp	r2, #0
 801154c:	f8c3 e014 	str.w	lr, [r3, #20]
 8011550:	f8c3 e010 	str.w	lr, [r3, #16]
 8011554:	da69      	bge.n	801162a <_malloc_r+0x1b2>
 8011556:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801155a:	f080 812f 	bcs.w	80117bc <_malloc_r+0x344>
 801155e:	08ca      	lsrs	r2, r1, #3
 8011560:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8011564:	f04f 0901 	mov.w	r9, #1
 8011568:	1092      	asrs	r2, r2, #2
 801156a:	fa09 f902 	lsl.w	r9, r9, r2
 801156e:	685a      	ldr	r2, [r3, #4]
 8011570:	6888      	ldr	r0, [r1, #8]
 8011572:	60e1      	str	r1, [r4, #12]
 8011574:	ea49 0902 	orr.w	r9, r9, r2
 8011578:	60a0      	str	r0, [r4, #8]
 801157a:	f8c3 9004 	str.w	r9, [r3, #4]
 801157e:	608c      	str	r4, [r1, #8]
 8011580:	60c4      	str	r4, [r0, #12]
 8011582:	2001      	movs	r0, #1
 8011584:	ea4f 04ac 	mov.w	r4, ip, asr #2
 8011588:	fa00 f004 	lsl.w	r0, r0, r4
 801158c:	4548      	cmp	r0, r9
 801158e:	d856      	bhi.n	801163e <_malloc_r+0x1c6>
 8011590:	ea19 0f00 	tst.w	r9, r0
 8011594:	d107      	bne.n	80115a6 <_malloc_r+0x12e>
 8011596:	f02c 0c03 	bic.w	ip, ip, #3
 801159a:	0040      	lsls	r0, r0, #1
 801159c:	ea19 0f00 	tst.w	r9, r0
 80115a0:	f10c 0c04 	add.w	ip, ip, #4
 80115a4:	d0f9      	beq.n	801159a <_malloc_r+0x122>
 80115a6:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 80115aa:	464c      	mov	r4, r9
 80115ac:	46e0      	mov	r8, ip
 80115ae:	68e3      	ldr	r3, [r4, #12]
 80115b0:	429c      	cmp	r4, r3
 80115b2:	d107      	bne.n	80115c4 <_malloc_r+0x14c>
 80115b4:	e13a      	b.n	801182c <_malloc_r+0x3b4>
 80115b6:	2a00      	cmp	r2, #0
 80115b8:	f280 8162 	bge.w	8011880 <_malloc_r+0x408>
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	429c      	cmp	r4, r3
 80115c0:	f000 8134 	beq.w	801182c <_malloc_r+0x3b4>
 80115c4:	6859      	ldr	r1, [r3, #4]
 80115c6:	f021 0103 	bic.w	r1, r1, #3
 80115ca:	1b4a      	subs	r2, r1, r5
 80115cc:	2a0f      	cmp	r2, #15
 80115ce:	ddf2      	ble.n	80115b6 <_malloc_r+0x13e>
 80115d0:	461c      	mov	r4, r3
 80115d2:	1959      	adds	r1, r3, r5
 80115d4:	68d8      	ldr	r0, [r3, #12]
 80115d6:	f854 cf08 	ldr.w	ip, [r4, #8]!
 80115da:	508a      	str	r2, [r1, r2]
 80115dc:	f045 0501 	orr.w	r5, r5, #1
 80115e0:	f042 0201 	orr.w	r2, r2, #1
 80115e4:	f8cc 000c 	str.w	r0, [ip, #12]
 80115e8:	f8c0 c008 	str.w	ip, [r0, #8]
 80115ec:	605d      	str	r5, [r3, #4]
 80115ee:	6179      	str	r1, [r7, #20]
 80115f0:	6139      	str	r1, [r7, #16]
 80115f2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80115f6:	f8c1 e008 	str.w	lr, [r1, #8]
 80115fa:	604a      	str	r2, [r1, #4]
 80115fc:	4630      	mov	r0, r6
 80115fe:	f000 fb2d 	bl	8011c5c <__malloc_unlock>
 8011602:	e765      	b.n	80114d0 <_malloc_r+0x58>
 8011604:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8011608:	ea4f 014e 	mov.w	r1, lr, lsl #1
 801160c:	e779      	b.n	8011502 <_malloc_r+0x8a>
 801160e:	1822      	adds	r2, r4, r0
 8011610:	68e3      	ldr	r3, [r4, #12]
 8011612:	6850      	ldr	r0, [r2, #4]
 8011614:	68a1      	ldr	r1, [r4, #8]
 8011616:	f040 0001 	orr.w	r0, r0, #1
 801161a:	6050      	str	r0, [r2, #4]
 801161c:	60cb      	str	r3, [r1, #12]
 801161e:	6099      	str	r1, [r3, #8]
 8011620:	4630      	mov	r0, r6
 8011622:	f000 fb1b 	bl	8011c5c <__malloc_unlock>
 8011626:	3408      	adds	r4, #8
 8011628:	e752      	b.n	80114d0 <_malloc_r+0x58>
 801162a:	1861      	adds	r1, r4, r1
 801162c:	4630      	mov	r0, r6
 801162e:	684b      	ldr	r3, [r1, #4]
 8011630:	f043 0201 	orr.w	r2, r3, #1
 8011634:	604a      	str	r2, [r1, #4]
 8011636:	f000 fb11 	bl	8011c5c <__malloc_unlock>
 801163a:	3408      	adds	r4, #8
 801163c:	e748      	b.n	80114d0 <_malloc_r+0x58>
 801163e:	68bc      	ldr	r4, [r7, #8]
 8011640:	6860      	ldr	r0, [r4, #4]
 8011642:	f020 0903 	bic.w	r9, r0, #3
 8011646:	45a9      	cmp	r9, r5
 8011648:	d304      	bcc.n	8011654 <_malloc_r+0x1dc>
 801164a:	ebc5 0309 	rsb	r3, r5, r9
 801164e:	2b0f      	cmp	r3, #15
 8011650:	f300 808d 	bgt.w	801176e <_malloc_r+0x2f6>
 8011654:	4a4d      	ldr	r2, [pc, #308]	; (801178c <_malloc_r+0x314>)
 8011656:	4b4e      	ldr	r3, [pc, #312]	; (8011790 <_malloc_r+0x318>)
 8011658:	6811      	ldr	r1, [r2, #0]
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	3101      	adds	r1, #1
 801165e:	eb04 0b09 	add.w	fp, r4, r9
 8011662:	eb05 0300 	add.w	r3, r5, r0
 8011666:	f000 815a 	beq.w	801191e <_malloc_r+0x4a6>
 801166a:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 801166e:	300f      	adds	r0, #15
 8011670:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 8011674:	f021 0c0f 	bic.w	ip, r1, #15
 8011678:	4661      	mov	r1, ip
 801167a:	4630      	mov	r0, r6
 801167c:	e88d 1004 	stmia.w	sp, {r2, ip}
 8011680:	f000 fffa 	bl	8012678 <_sbrk_r>
 8011684:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011688:	4680      	mov	r8, r0
 801168a:	e89d 1004 	ldmia.w	sp, {r2, ip}
 801168e:	f000 8152 	beq.w	8011936 <_malloc_r+0x4be>
 8011692:	4583      	cmp	fp, r0
 8011694:	f200 810f 	bhi.w	80118b6 <_malloc_r+0x43e>
 8011698:	f8df a100 	ldr.w	sl, [pc, #256]	; 801179c <_malloc_r+0x324>
 801169c:	f8da 3000 	ldr.w	r3, [sl]
 80116a0:	45c3      	cmp	fp, r8
 80116a2:	4463      	add	r3, ip
 80116a4:	f8ca 3000 	str.w	r3, [sl]
 80116a8:	f000 814a 	beq.w	8011940 <_malloc_r+0x4c8>
 80116ac:	6812      	ldr	r2, [r2, #0]
 80116ae:	3201      	adds	r2, #1
 80116b0:	f000 8157 	beq.w	8011962 <_malloc_r+0x4ea>
 80116b4:	ebcb 0b08 	rsb	fp, fp, r8
 80116b8:	445b      	add	r3, fp
 80116ba:	f8ca 3000 	str.w	r3, [sl]
 80116be:	f018 0107 	ands.w	r1, r8, #7
 80116c2:	f000 810b 	beq.w	80118dc <_malloc_r+0x464>
 80116c6:	f1c1 0008 	rsb	r0, r1, #8
 80116ca:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 80116ce:	4480      	add	r8, r0
 80116d0:	f103 0208 	add.w	r2, r3, #8
 80116d4:	eb08 010c 	add.w	r1, r8, ip
 80116d8:	0508      	lsls	r0, r1, #20
 80116da:	0d03      	lsrs	r3, r0, #20
 80116dc:	ebc3 0b02 	rsb	fp, r3, r2
 80116e0:	4630      	mov	r0, r6
 80116e2:	4659      	mov	r1, fp
 80116e4:	f000 ffc8 	bl	8012678 <_sbrk_r>
 80116e8:	1c43      	adds	r3, r0, #1
 80116ea:	f000 8146 	beq.w	801197a <_malloc_r+0x502>
 80116ee:	ebc8 0200 	rsb	r2, r8, r0
 80116f2:	eb0b 0102 	add.w	r1, fp, r2
 80116f6:	f041 0001 	orr.w	r0, r1, #1
 80116fa:	f8da 3000 	ldr.w	r3, [sl]
 80116fe:	f8c7 8008 	str.w	r8, [r7, #8]
 8011702:	445b      	add	r3, fp
 8011704:	42bc      	cmp	r4, r7
 8011706:	f8ca 3000 	str.w	r3, [sl]
 801170a:	f8c8 0004 	str.w	r0, [r8, #4]
 801170e:	d015      	beq.n	801173c <_malloc_r+0x2c4>
 8011710:	f1b9 0f0f 	cmp.w	r9, #15
 8011714:	f240 80f2 	bls.w	80118fc <_malloc_r+0x484>
 8011718:	6861      	ldr	r1, [r4, #4]
 801171a:	f1a9 020c 	sub.w	r2, r9, #12
 801171e:	f022 0207 	bic.w	r2, r2, #7
 8011722:	18a0      	adds	r0, r4, r2
 8011724:	f001 0c01 	and.w	ip, r1, #1
 8011728:	ea42 0e0c 	orr.w	lr, r2, ip
 801172c:	2105      	movs	r1, #5
 801172e:	2a0f      	cmp	r2, #15
 8011730:	f8c4 e004 	str.w	lr, [r4, #4]
 8011734:	6041      	str	r1, [r0, #4]
 8011736:	6081      	str	r1, [r0, #8]
 8011738:	f200 8117 	bhi.w	801196a <_malloc_r+0x4f2>
 801173c:	4a15      	ldr	r2, [pc, #84]	; (8011794 <_malloc_r+0x31c>)
 801173e:	68bc      	ldr	r4, [r7, #8]
 8011740:	6810      	ldr	r0, [r2, #0]
 8011742:	4283      	cmp	r3, r0
 8011744:	bf88      	it	hi
 8011746:	6013      	strhi	r3, [r2, #0]
 8011748:	4a13      	ldr	r2, [pc, #76]	; (8011798 <_malloc_r+0x320>)
 801174a:	6811      	ldr	r1, [r2, #0]
 801174c:	428b      	cmp	r3, r1
 801174e:	bf88      	it	hi
 8011750:	6013      	strhi	r3, [r2, #0]
 8011752:	6863      	ldr	r3, [r4, #4]
 8011754:	f023 0003 	bic.w	r0, r3, #3
 8011758:	42a8      	cmp	r0, r5
 801175a:	ebc5 0300 	rsb	r3, r5, r0
 801175e:	d301      	bcc.n	8011764 <_malloc_r+0x2ec>
 8011760:	2b0f      	cmp	r3, #15
 8011762:	dc04      	bgt.n	801176e <_malloc_r+0x2f6>
 8011764:	4630      	mov	r0, r6
 8011766:	f000 fa79 	bl	8011c5c <__malloc_unlock>
 801176a:	2400      	movs	r4, #0
 801176c:	e6b0      	b.n	80114d0 <_malloc_r+0x58>
 801176e:	1962      	adds	r2, r4, r5
 8011770:	f043 0101 	orr.w	r1, r3, #1
 8011774:	f045 0501 	orr.w	r5, r5, #1
 8011778:	6065      	str	r5, [r4, #4]
 801177a:	4630      	mov	r0, r6
 801177c:	6051      	str	r1, [r2, #4]
 801177e:	60ba      	str	r2, [r7, #8]
 8011780:	f000 fa6c 	bl	8011c5c <__malloc_unlock>
 8011784:	3408      	adds	r4, #8
 8011786:	e6a3      	b.n	80114d0 <_malloc_r+0x58>
 8011788:	200004f0 	.word	0x200004f0
 801178c:	200008fc 	.word	0x200008fc
 8011790:	200009ec 	.word	0x200009ec
 8011794:	200009e8 	.word	0x200009e8
 8011798:	200009e4 	.word	0x200009e4
 801179c:	200009f0 	.word	0x200009f0
 80117a0:	f1bc 0f14 	cmp.w	ip, #20
 80117a4:	d97b      	bls.n	801189e <_malloc_r+0x426>
 80117a6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80117aa:	f200 808d 	bhi.w	80118c8 <_malloc_r+0x450>
 80117ae:	ea4f 3415 	mov.w	r4, r5, lsr #12
 80117b2:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 80117b6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80117ba:	e6a2      	b.n	8011502 <_malloc_r+0x8a>
 80117bc:	0a48      	lsrs	r0, r1, #9
 80117be:	2804      	cmp	r0, #4
 80117c0:	d972      	bls.n	80118a8 <_malloc_r+0x430>
 80117c2:	2814      	cmp	r0, #20
 80117c4:	f200 80ae 	bhi.w	8011924 <_malloc_r+0x4ac>
 80117c8:	f100 095b 	add.w	r9, r0, #91	; 0x5b
 80117cc:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80117d0:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 80117d4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80119c8 <_malloc_r+0x550>
 80117d8:	6883      	ldr	r3, [r0, #8]
 80117da:	4283      	cmp	r3, r0
 80117dc:	f000 8081 	beq.w	80118e2 <_malloc_r+0x46a>
 80117e0:	685a      	ldr	r2, [r3, #4]
 80117e2:	f022 0203 	bic.w	r2, r2, #3
 80117e6:	4291      	cmp	r1, r2
 80117e8:	d202      	bcs.n	80117f0 <_malloc_r+0x378>
 80117ea:	689b      	ldr	r3, [r3, #8]
 80117ec:	4298      	cmp	r0, r3
 80117ee:	d1f7      	bne.n	80117e0 <_malloc_r+0x368>
 80117f0:	68da      	ldr	r2, [r3, #12]
 80117f2:	f8d7 9004 	ldr.w	r9, [r7, #4]
 80117f6:	60e2      	str	r2, [r4, #12]
 80117f8:	60a3      	str	r3, [r4, #8]
 80117fa:	60dc      	str	r4, [r3, #12]
 80117fc:	6094      	str	r4, [r2, #8]
 80117fe:	e6c0      	b.n	8011582 <_malloc_r+0x10a>
 8011800:	1961      	adds	r1, r4, r5
 8011802:	f042 0001 	orr.w	r0, r2, #1
 8011806:	f045 0501 	orr.w	r5, r5, #1
 801180a:	6065      	str	r5, [r4, #4]
 801180c:	6159      	str	r1, [r3, #20]
 801180e:	6119      	str	r1, [r3, #16]
 8011810:	6048      	str	r0, [r1, #4]
 8011812:	f8c1 e00c 	str.w	lr, [r1, #12]
 8011816:	f8c1 e008 	str.w	lr, [r1, #8]
 801181a:	508a      	str	r2, [r1, r2]
 801181c:	4630      	mov	r0, r6
 801181e:	f000 fa1d 	bl	8011c5c <__malloc_unlock>
 8011822:	3408      	adds	r4, #8
 8011824:	e654      	b.n	80114d0 <_malloc_r+0x58>
 8011826:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801182a:	e6aa      	b.n	8011582 <_malloc_r+0x10a>
 801182c:	f108 0801 	add.w	r8, r8, #1
 8011830:	3408      	adds	r4, #8
 8011832:	f018 0f03 	tst.w	r8, #3
 8011836:	f47f aeba 	bne.w	80115ae <_malloc_r+0x136>
 801183a:	4649      	mov	r1, r9
 801183c:	f01c 0f03 	tst.w	ip, #3
 8011840:	f1a1 0408 	sub.w	r4, r1, #8
 8011844:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011848:	f000 80b0 	beq.w	80119ac <_malloc_r+0x534>
 801184c:	6809      	ldr	r1, [r1, #0]
 801184e:	42a1      	cmp	r1, r4
 8011850:	d0f4      	beq.n	801183c <_malloc_r+0x3c4>
 8011852:	687c      	ldr	r4, [r7, #4]
 8011854:	0040      	lsls	r0, r0, #1
 8011856:	42a0      	cmp	r0, r4
 8011858:	f63f aef1 	bhi.w	801163e <_malloc_r+0x1c6>
 801185c:	2800      	cmp	r0, #0
 801185e:	f43f aeee 	beq.w	801163e <_malloc_r+0x1c6>
 8011862:	4204      	tst	r4, r0
 8011864:	f000 80a7 	beq.w	80119b6 <_malloc_r+0x53e>
 8011868:	46c4      	mov	ip, r8
 801186a:	e69c      	b.n	80115a6 <_malloc_r+0x12e>
 801186c:	f104 0308 	add.w	r3, r4, #8
 8011870:	6964      	ldr	r4, [r4, #20]
 8011872:	42a3      	cmp	r3, r4
 8011874:	bf08      	it	eq
 8011876:	f10c 0c02 	addeq.w	ip, ip, #2
 801187a:	f43f ae58 	beq.w	801152e <_malloc_r+0xb6>
 801187e:	e617      	b.n	80114b0 <_malloc_r+0x38>
 8011880:	1859      	adds	r1, r3, r1
 8011882:	461c      	mov	r4, r3
 8011884:	6848      	ldr	r0, [r1, #4]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	f854 2f08 	ldr.w	r2, [r4, #8]!
 801188c:	f040 0001 	orr.w	r0, r0, #1
 8011890:	6048      	str	r0, [r1, #4]
 8011892:	60d3      	str	r3, [r2, #12]
 8011894:	609a      	str	r2, [r3, #8]
 8011896:	4630      	mov	r0, r6
 8011898:	f000 f9e0 	bl	8011c5c <__malloc_unlock>
 801189c:	e618      	b.n	80114d0 <_malloc_r+0x58>
 801189e:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 80118a2:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80118a6:	e62c      	b.n	8011502 <_malloc_r+0x8a>
 80118a8:	ea4f 1891 	mov.w	r8, r1, lsr #6
 80118ac:	f108 0938 	add.w	r9, r8, #56	; 0x38
 80118b0:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80118b4:	e78c      	b.n	80117d0 <_malloc_r+0x358>
 80118b6:	42bc      	cmp	r4, r7
 80118b8:	f43f aeee 	beq.w	8011698 <_malloc_r+0x220>
 80118bc:	4c42      	ldr	r4, [pc, #264]	; (80119c8 <_malloc_r+0x550>)
 80118be:	68a4      	ldr	r4, [r4, #8]
 80118c0:	6862      	ldr	r2, [r4, #4]
 80118c2:	f022 0003 	bic.w	r0, r2, #3
 80118c6:	e747      	b.n	8011758 <_malloc_r+0x2e0>
 80118c8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80118cc:	d81c      	bhi.n	8011908 <_malloc_r+0x490>
 80118ce:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 80118d2:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 80118d6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80118da:	e612      	b.n	8011502 <_malloc_r+0x8a>
 80118dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80118e0:	e6f8      	b.n	80116d4 <_malloc_r+0x25c>
 80118e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80118e6:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80118ea:	2101      	movs	r1, #1
 80118ec:	fa01 f202 	lsl.w	r2, r1, r2
 80118f0:	ea42 0900 	orr.w	r9, r2, r0
 80118f4:	f8c8 9004 	str.w	r9, [r8, #4]
 80118f8:	461a      	mov	r2, r3
 80118fa:	e77c      	b.n	80117f6 <_malloc_r+0x37e>
 80118fc:	2201      	movs	r2, #1
 80118fe:	f8c8 2004 	str.w	r2, [r8, #4]
 8011902:	4644      	mov	r4, r8
 8011904:	2000      	movs	r0, #0
 8011906:	e727      	b.n	8011758 <_malloc_r+0x2e0>
 8011908:	f240 5354 	movw	r3, #1364	; 0x554
 801190c:	459c      	cmp	ip, r3
 801190e:	d824      	bhi.n	801195a <_malloc_r+0x4e2>
 8011910:	ea4f 4095 	mov.w	r0, r5, lsr #18
 8011914:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 8011918:	ea4f 014e 	mov.w	r1, lr, lsl #1
 801191c:	e5f1      	b.n	8011502 <_malloc_r+0x8a>
 801191e:	f103 0c10 	add.w	ip, r3, #16
 8011922:	e6a9      	b.n	8011678 <_malloc_r+0x200>
 8011924:	2854      	cmp	r0, #84	; 0x54
 8011926:	d82c      	bhi.n	8011982 <_malloc_r+0x50a>
 8011928:	ea4f 3211 	mov.w	r2, r1, lsr #12
 801192c:	f102 096e 	add.w	r9, r2, #110	; 0x6e
 8011930:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8011934:	e74c      	b.n	80117d0 <_malloc_r+0x358>
 8011936:	68bc      	ldr	r4, [r7, #8]
 8011938:	6861      	ldr	r1, [r4, #4]
 801193a:	f021 0003 	bic.w	r0, r1, #3
 801193e:	e70b      	b.n	8011758 <_malloc_r+0x2e0>
 8011940:	ea4f 500b 	mov.w	r0, fp, lsl #20
 8011944:	0d01      	lsrs	r1, r0, #20
 8011946:	2900      	cmp	r1, #0
 8011948:	f47f aeb0 	bne.w	80116ac <_malloc_r+0x234>
 801194c:	68b8      	ldr	r0, [r7, #8]
 801194e:	eb0c 0109 	add.w	r1, ip, r9
 8011952:	f041 0401 	orr.w	r4, r1, #1
 8011956:	6044      	str	r4, [r0, #4]
 8011958:	e6f0      	b.n	801173c <_malloc_r+0x2c4>
 801195a:	21fc      	movs	r1, #252	; 0xfc
 801195c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8011960:	e5cf      	b.n	8011502 <_malloc_r+0x8a>
 8011962:	481a      	ldr	r0, [pc, #104]	; (80119cc <_malloc_r+0x554>)
 8011964:	f8c0 8000 	str.w	r8, [r0]
 8011968:	e6a9      	b.n	80116be <_malloc_r+0x246>
 801196a:	f104 0108 	add.w	r1, r4, #8
 801196e:	4c18      	ldr	r4, [pc, #96]	; (80119d0 <_malloc_r+0x558>)
 8011970:	4630      	mov	r0, r6
 8011972:	f7ff fbd5 	bl	8011120 <_free_r>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	e6e0      	b.n	801173c <_malloc_r+0x2c4>
 801197a:	2001      	movs	r0, #1
 801197c:	f04f 0b00 	mov.w	fp, #0
 8011980:	e6bb      	b.n	80116fa <_malloc_r+0x282>
 8011982:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8011986:	d806      	bhi.n	8011996 <_malloc_r+0x51e>
 8011988:	ea4f 33d1 	mov.w	r3, r1, lsr #15
 801198c:	f103 0977 	add.w	r9, r3, #119	; 0x77
 8011990:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8011994:	e71c      	b.n	80117d0 <_malloc_r+0x358>
 8011996:	f240 5354 	movw	r3, #1364	; 0x554
 801199a:	4298      	cmp	r0, r3
 801199c:	d80f      	bhi.n	80119be <_malloc_r+0x546>
 801199e:	ea4f 4091 	mov.w	r0, r1, lsr #18
 80119a2:	f100 097c 	add.w	r9, r0, #124	; 0x7c
 80119a6:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80119aa:	e711      	b.n	80117d0 <_malloc_r+0x358>
 80119ac:	687c      	ldr	r4, [r7, #4]
 80119ae:	ea24 0400 	bic.w	r4, r4, r0
 80119b2:	607c      	str	r4, [r7, #4]
 80119b4:	e74e      	b.n	8011854 <_malloc_r+0x3dc>
 80119b6:	0040      	lsls	r0, r0, #1
 80119b8:	f108 0804 	add.w	r8, r8, #4
 80119bc:	e751      	b.n	8011862 <_malloc_r+0x3ea>
 80119be:	22fc      	movs	r2, #252	; 0xfc
 80119c0:	f04f 097e 	mov.w	r9, #126	; 0x7e
 80119c4:	e704      	b.n	80117d0 <_malloc_r+0x358>
 80119c6:	bf00      	nop
 80119c8:	200004f0 	.word	0x200004f0
 80119cc:	200008fc 	.word	0x200008fc
 80119d0:	200009f0 	.word	0x200009f0

080119d4 <memchr>:
 80119d4:	0783      	lsls	r3, r0, #30
 80119d6:	b4f0      	push	{r4, r5, r6, r7}
 80119d8:	b2c9      	uxtb	r1, r1
 80119da:	f000 8096 	beq.w	8011b0a <memchr+0x136>
 80119de:	1e53      	subs	r3, r2, #1
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	f000 8094 	beq.w	8011b0e <memchr+0x13a>
 80119e6:	7802      	ldrb	r2, [r0, #0]
 80119e8:	428a      	cmp	r2, r1
 80119ea:	d00b      	beq.n	8011a04 <memchr+0x30>
 80119ec:	1c42      	adds	r2, r0, #1
 80119ee:	07d8      	lsls	r0, r3, #31
 80119f0:	d51a      	bpl.n	8011a28 <memchr+0x54>
 80119f2:	f012 0f03 	tst.w	r2, #3
 80119f6:	4610      	mov	r0, r2
 80119f8:	d01c      	beq.n	8011a34 <memchr+0x60>
 80119fa:	7814      	ldrb	r4, [r2, #0]
 80119fc:	3b01      	subs	r3, #1
 80119fe:	3201      	adds	r2, #1
 8011a00:	428c      	cmp	r4, r1
 8011a02:	d111      	bne.n	8011a28 <memchr+0x54>
 8011a04:	bcf0      	pop	{r4, r5, r6, r7}
 8011a06:	4770      	bx	lr
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d07c      	beq.n	8011b06 <memchr+0x132>
 8011a0c:	7812      	ldrb	r2, [r2, #0]
 8011a0e:	3b01      	subs	r3, #1
 8011a10:	428a      	cmp	r2, r1
 8011a12:	d0f7      	beq.n	8011a04 <memchr+0x30>
 8011a14:	f014 0f03 	tst.w	r4, #3
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f104 0201 	add.w	r2, r4, #1
 8011a1e:	d009      	beq.n	8011a34 <memchr+0x60>
 8011a20:	7824      	ldrb	r4, [r4, #0]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	428c      	cmp	r4, r1
 8011a26:	d0ed      	beq.n	8011a04 <memchr+0x30>
 8011a28:	f012 0f03 	tst.w	r2, #3
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	f102 0401 	add.w	r4, r2, #1
 8011a32:	d1e9      	bne.n	8011a08 <memchr+0x34>
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d93f      	bls.n	8011ab8 <memchr+0xe4>
 8011a38:	6804      	ldr	r4, [r0, #0]
 8011a3a:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 8011a3e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8011a42:	ea85 0704 	eor.w	r7, r5, r4
 8011a46:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 8011a4a:	ea22 0207 	bic.w	r2, r2, r7
 8011a4e:	1f1e      	subs	r6, r3, #4
 8011a50:	1d04      	adds	r4, r0, #4
 8011a52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011a56:	f3c6 0780 	ubfx	r7, r6, #2, #1
 8011a5a:	d12d      	bne.n	8011ab8 <memchr+0xe4>
 8011a5c:	2e03      	cmp	r6, #3
 8011a5e:	4633      	mov	r3, r6
 8011a60:	d929      	bls.n	8011ab6 <memchr+0xe2>
 8011a62:	b167      	cbz	r7, 8011a7e <memchr+0xaa>
 8011a64:	4620      	mov	r0, r4
 8011a66:	3404      	adds	r4, #4
 8011a68:	6806      	ldr	r6, [r0, #0]
 8011a6a:	ea85 0206 	eor.w	r2, r5, r6
 8011a6e:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 8011a72:	ea26 0202 	bic.w	r2, r6, r2
 8011a76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011a7a:	d019      	beq.n	8011ab0 <memchr+0xdc>
 8011a7c:	e01c      	b.n	8011ab8 <memchr+0xe4>
 8011a7e:	1d26      	adds	r6, r4, #4
 8011a80:	4620      	mov	r0, r4
 8011a82:	6824      	ldr	r4, [r4, #0]
 8011a84:	ea85 0204 	eor.w	r2, r5, r4
 8011a88:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8011a8c:	ea24 0202 	bic.w	r2, r4, r2
 8011a90:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011a94:	d110      	bne.n	8011ab8 <memchr+0xe4>
 8011a96:	6834      	ldr	r4, [r6, #0]
 8011a98:	ea85 0204 	eor.w	r2, r5, r4
 8011a9c:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8011aa0:	ea24 0202 	bic.w	r2, r4, r2
 8011aa4:	3b04      	subs	r3, #4
 8011aa6:	1d34      	adds	r4, r6, #4
 8011aa8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011aac:	4630      	mov	r0, r6
 8011aae:	d103      	bne.n	8011ab8 <memchr+0xe4>
 8011ab0:	3b04      	subs	r3, #4
 8011ab2:	2b03      	cmp	r3, #3
 8011ab4:	d8e3      	bhi.n	8011a7e <memchr+0xaa>
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	1e5d      	subs	r5, r3, #1
 8011aba:	b323      	cbz	r3, 8011b06 <memchr+0x132>
 8011abc:	7803      	ldrb	r3, [r0, #0]
 8011abe:	428b      	cmp	r3, r1
 8011ac0:	d0a0      	beq.n	8011a04 <memchr+0x30>
 8011ac2:	1c43      	adds	r3, r0, #1
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	07e8      	lsls	r0, r5, #31
 8011ac8:	d514      	bpl.n	8011af4 <memchr+0x120>
 8011aca:	4618      	mov	r0, r3
 8011acc:	2201      	movs	r2, #1
 8011ace:	7804      	ldrb	r4, [r0, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	428c      	cmp	r4, r1
 8011ad4:	d096      	beq.n	8011a04 <memchr+0x30>
 8011ad6:	4295      	cmp	r5, r2
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f103 0401 	add.w	r4, r3, #1
 8011ade:	f102 0202 	add.w	r2, r2, #2
 8011ae2:	d00e      	beq.n	8011b02 <memchr+0x12e>
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	428b      	cmp	r3, r1
 8011ae8:	d08c      	beq.n	8011a04 <memchr+0x30>
 8011aea:	1c63      	adds	r3, r4, #1
 8011aec:	4620      	mov	r0, r4
 8011aee:	7824      	ldrb	r4, [r4, #0]
 8011af0:	428c      	cmp	r4, r1
 8011af2:	d087      	beq.n	8011a04 <memchr+0x30>
 8011af4:	4295      	cmp	r5, r2
 8011af6:	4618      	mov	r0, r3
 8011af8:	f103 0401 	add.w	r4, r3, #1
 8011afc:	f102 0202 	add.w	r2, r2, #2
 8011b00:	d1f0      	bne.n	8011ae4 <memchr+0x110>
 8011b02:	2000      	movs	r0, #0
 8011b04:	e77e      	b.n	8011a04 <memchr+0x30>
 8011b06:	4618      	mov	r0, r3
 8011b08:	e77c      	b.n	8011a04 <memchr+0x30>
 8011b0a:	4613      	mov	r3, r2
 8011b0c:	e792      	b.n	8011a34 <memchr+0x60>
 8011b0e:	4610      	mov	r0, r2
 8011b10:	e778      	b.n	8011a04 <memchr+0x30>
 8011b12:	bf00      	nop

08011b14 <memcpy>:
 8011b14:	2a0f      	cmp	r2, #15
 8011b16:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8011b1a:	f240 8095 	bls.w	8011c48 <memcpy+0x134>
 8011b1e:	ea41 0300 	orr.w	r3, r1, r0
 8011b22:	079b      	lsls	r3, r3, #30
 8011b24:	f040 8092 	bne.w	8011c4c <memcpy+0x138>
 8011b28:	680c      	ldr	r4, [r1, #0]
 8011b2a:	6004      	str	r4, [r0, #0]
 8011b2c:	684d      	ldr	r5, [r1, #4]
 8011b2e:	6045      	str	r5, [r0, #4]
 8011b30:	688e      	ldr	r6, [r1, #8]
 8011b32:	f1a2 0310 	sub.w	r3, r2, #16
 8011b36:	6086      	str	r6, [r0, #8]
 8011b38:	68cc      	ldr	r4, [r1, #12]
 8011b3a:	461d      	mov	r5, r3
 8011b3c:	2d0f      	cmp	r5, #15
 8011b3e:	60c4      	str	r4, [r0, #12]
 8011b40:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8011b44:	f101 0410 	add.w	r4, r1, #16
 8011b48:	f100 0310 	add.w	r3, r0, #16
 8011b4c:	d922      	bls.n	8011b94 <memcpy+0x80>
 8011b4e:	b166      	cbz	r6, 8011b6a <memcpy+0x56>
 8011b50:	6826      	ldr	r6, [r4, #0]
 8011b52:	601e      	str	r6, [r3, #0]
 8011b54:	6866      	ldr	r6, [r4, #4]
 8011b56:	605e      	str	r6, [r3, #4]
 8011b58:	68a6      	ldr	r6, [r4, #8]
 8011b5a:	609e      	str	r6, [r3, #8]
 8011b5c:	68e6      	ldr	r6, [r4, #12]
 8011b5e:	3d10      	subs	r5, #16
 8011b60:	60de      	str	r6, [r3, #12]
 8011b62:	3410      	adds	r4, #16
 8011b64:	3310      	adds	r3, #16
 8011b66:	2d0f      	cmp	r5, #15
 8011b68:	d914      	bls.n	8011b94 <memcpy+0x80>
 8011b6a:	6826      	ldr	r6, [r4, #0]
 8011b6c:	601e      	str	r6, [r3, #0]
 8011b6e:	6866      	ldr	r6, [r4, #4]
 8011b70:	605e      	str	r6, [r3, #4]
 8011b72:	68a6      	ldr	r6, [r4, #8]
 8011b74:	609e      	str	r6, [r3, #8]
 8011b76:	68e6      	ldr	r6, [r4, #12]
 8011b78:	60de      	str	r6, [r3, #12]
 8011b7a:	6926      	ldr	r6, [r4, #16]
 8011b7c:	611e      	str	r6, [r3, #16]
 8011b7e:	6966      	ldr	r6, [r4, #20]
 8011b80:	615e      	str	r6, [r3, #20]
 8011b82:	69a6      	ldr	r6, [r4, #24]
 8011b84:	619e      	str	r6, [r3, #24]
 8011b86:	69e6      	ldr	r6, [r4, #28]
 8011b88:	3d20      	subs	r5, #32
 8011b8a:	61de      	str	r6, [r3, #28]
 8011b8c:	3420      	adds	r4, #32
 8011b8e:	3320      	adds	r3, #32
 8011b90:	2d0f      	cmp	r5, #15
 8011b92:	d8ea      	bhi.n	8011b6a <memcpy+0x56>
 8011b94:	f1a2 0310 	sub.w	r3, r2, #16
 8011b98:	f023 040f 	bic.w	r4, r3, #15
 8011b9c:	f002 030f 	and.w	r3, r2, #15
 8011ba0:	3410      	adds	r4, #16
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	eb00 0804 	add.w	r8, r0, r4
 8011ba8:	4421      	add	r1, r4
 8011baa:	d951      	bls.n	8011c50 <memcpy+0x13c>
 8011bac:	f1a3 0904 	sub.w	r9, r3, #4
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8011bb6:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 8011bba:	f853 6b04 	ldr.w	r6, [r3], #4
 8011bbe:	ebc1 050c 	rsb	r5, r1, ip
 8011bc2:	4644      	mov	r4, r8
 8011bc4:	f10c 0c04 	add.w	ip, ip, #4
 8011bc8:	4563      	cmp	r3, ip
 8011bca:	f844 6b04 	str.w	r6, [r4], #4
 8011bce:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8011bd2:	d012      	beq.n	8011bfa <memcpy+0xe6>
 8011bd4:	b12d      	cbz	r5, 8011be2 <memcpy+0xce>
 8011bd6:	f853 5b04 	ldr.w	r5, [r3], #4
 8011bda:	4563      	cmp	r3, ip
 8011bdc:	f844 5b04 	str.w	r5, [r4], #4
 8011be0:	d00b      	beq.n	8011bfa <memcpy+0xe6>
 8011be2:	461e      	mov	r6, r3
 8011be4:	4625      	mov	r5, r4
 8011be6:	f856 7b04 	ldr.w	r7, [r6], #4
 8011bea:	f845 7b04 	str.w	r7, [r5], #4
 8011bee:	685f      	ldr	r7, [r3, #4]
 8011bf0:	1d33      	adds	r3, r6, #4
 8011bf2:	6067      	str	r7, [r4, #4]
 8011bf4:	1d2c      	adds	r4, r5, #4
 8011bf6:	4563      	cmp	r3, ip
 8011bf8:	d1f3      	bne.n	8011be2 <memcpy+0xce>
 8011bfa:	f109 0301 	add.w	r3, r9, #1
 8011bfe:	009c      	lsls	r4, r3, #2
 8011c00:	1909      	adds	r1, r1, r4
 8011c02:	f002 0203 	and.w	r2, r2, #3
 8011c06:	4444      	add	r4, r8
 8011c08:	b1da      	cbz	r2, 8011c42 <memcpy+0x12e>
 8011c0a:	4623      	mov	r3, r4
 8011c0c:	780d      	ldrb	r5, [r1, #0]
 8011c0e:	f803 5b01 	strb.w	r5, [r3], #1
 8011c12:	18a2      	adds	r2, r4, r2
 8011c14:	43e4      	mvns	r4, r4
 8011c16:	1914      	adds	r4, r2, r4
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	f004 0401 	and.w	r4, r4, #1
 8011c1e:	d010      	beq.n	8011c42 <memcpy+0x12e>
 8011c20:	b12c      	cbz	r4, 8011c2e <memcpy+0x11a>
 8011c22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011c26:	f803 4b01 	strb.w	r4, [r3], #1
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d009      	beq.n	8011c42 <memcpy+0x12e>
 8011c2e:	784d      	ldrb	r5, [r1, #1]
 8011c30:	461c      	mov	r4, r3
 8011c32:	f804 5b01 	strb.w	r5, [r4], #1
 8011c36:	788d      	ldrb	r5, [r1, #2]
 8011c38:	705d      	strb	r5, [r3, #1]
 8011c3a:	1c63      	adds	r3, r4, #1
 8011c3c:	3102      	adds	r1, #2
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d1f5      	bne.n	8011c2e <memcpy+0x11a>
 8011c42:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8011c46:	4770      	bx	lr
 8011c48:	4604      	mov	r4, r0
 8011c4a:	e7dd      	b.n	8011c08 <memcpy+0xf4>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	e7dc      	b.n	8011c0a <memcpy+0xf6>
 8011c50:	4644      	mov	r4, r8
 8011c52:	461a      	mov	r2, r3
 8011c54:	e7d8      	b.n	8011c08 <memcpy+0xf4>
 8011c56:	bf00      	nop

08011c58 <__malloc_lock>:
 8011c58:	4770      	bx	lr
 8011c5a:	bf00      	nop

08011c5c <__malloc_unlock>:
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop

08011c60 <_Balloc>:
 8011c60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011c62:	b570      	push	{r4, r5, r6, lr}
 8011c64:	4605      	mov	r5, r0
 8011c66:	460c      	mov	r4, r1
 8011c68:	b14b      	cbz	r3, 8011c7e <_Balloc+0x1e>
 8011c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c6e:	b180      	cbz	r0, 8011c92 <_Balloc+0x32>
 8011c70:	6801      	ldr	r1, [r0, #0]
 8011c72:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8011c76:	2300      	movs	r3, #0
 8011c78:	6103      	str	r3, [r0, #16]
 8011c7a:	60c3      	str	r3, [r0, #12]
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	2104      	movs	r1, #4
 8011c80:	2221      	movs	r2, #33	; 0x21
 8011c82:	f000 fdf9 	bl	8012878 <_calloc_r>
 8011c86:	4603      	mov	r3, r0
 8011c88:	64e8      	str	r0, [r5, #76]	; 0x4c
 8011c8a:	2800      	cmp	r0, #0
 8011c8c:	d1ed      	bne.n	8011c6a <_Balloc+0xa>
 8011c8e:	2000      	movs	r0, #0
 8011c90:	bd70      	pop	{r4, r5, r6, pc}
 8011c92:	2101      	movs	r1, #1
 8011c94:	fa01 f604 	lsl.w	r6, r1, r4
 8011c98:	1d72      	adds	r2, r6, #5
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	0092      	lsls	r2, r2, #2
 8011c9e:	f000 fdeb 	bl	8012878 <_calloc_r>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d0f3      	beq.n	8011c8e <_Balloc+0x2e>
 8011ca6:	6044      	str	r4, [r0, #4]
 8011ca8:	6086      	str	r6, [r0, #8]
 8011caa:	e7e4      	b.n	8011c76 <_Balloc+0x16>

08011cac <_Bfree>:
 8011cac:	b131      	cbz	r1, 8011cbc <_Bfree+0x10>
 8011cae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011cb0:	684a      	ldr	r2, [r1, #4]
 8011cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011cb6:	6008      	str	r0, [r1, #0]
 8011cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop

08011cc0 <__multadd>:
 8011cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	460e      	mov	r6, r1
 8011cc6:	6949      	ldr	r1, [r1, #20]
 8011cc8:	6937      	ldr	r7, [r6, #16]
 8011cca:	b28c      	uxth	r4, r1
 8011ccc:	0c0d      	lsrs	r5, r1, #16
 8011cce:	fb02 3304 	mla	r3, r2, r4, r3
 8011cd2:	fb02 f105 	mul.w	r1, r2, r5
 8011cd6:	eb01 4513 	add.w	r5, r1, r3, lsr #16
 8011cda:	f106 0418 	add.w	r4, r6, #24
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 8011ce4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ce8:	2301      	movs	r3, #1
 8011cea:	1e79      	subs	r1, r7, #1
 8011cec:	0c2d      	lsrs	r5, r5, #16
 8011cee:	429f      	cmp	r7, r3
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	f001 0001 	and.w	r0, r1, #1
 8011cf6:	dd39      	ble.n	8011d6c <__multadd+0xac>
 8011cf8:	b198      	cbz	r0, 8011d22 <__multadd+0x62>
 8011cfa:	6824      	ldr	r4, [r4, #0]
 8011cfc:	b2a3      	uxth	r3, r4
 8011cfe:	0c21      	lsrs	r1, r4, #16
 8011d00:	fb02 5503 	mla	r5, r2, r3, r5
 8011d04:	fb02 f101 	mul.w	r1, r2, r1
 8011d08:	b2ab      	uxth	r3, r5
 8011d0a:	eb01 4015 	add.w	r0, r1, r5, lsr #16
 8011d0e:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 8011d12:	f106 041c 	add.w	r4, r6, #28
 8011d16:	2302      	movs	r3, #2
 8011d18:	0c05      	lsrs	r5, r0, #16
 8011d1a:	429f      	cmp	r7, r3
 8011d1c:	f844 1c04 	str.w	r1, [r4, #-4]
 8011d20:	dd24      	ble.n	8011d6c <__multadd+0xac>
 8011d22:	6820      	ldr	r0, [r4, #0]
 8011d24:	b281      	uxth	r1, r0
 8011d26:	0c00      	lsrs	r0, r0, #16
 8011d28:	fb02 5101 	mla	r1, r2, r1, r5
 8011d2c:	fb02 f000 	mul.w	r0, r2, r0
 8011d30:	4625      	mov	r5, r4
 8011d32:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 8011d36:	b289      	uxth	r1, r1
 8011d38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011d3c:	f845 1b04 	str.w	r1, [r5], #4
 8011d40:	6864      	ldr	r4, [r4, #4]
 8011d42:	fa1f fc84 	uxth.w	ip, r4
 8011d46:	0c21      	lsrs	r1, r4, #16
 8011d48:	fb02 fc0c 	mul.w	ip, r2, ip
 8011d4c:	eb0c 4010 	add.w	r0, ip, r0, lsr #16
 8011d50:	fb02 f101 	mul.w	r1, r2, r1
 8011d54:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8011d58:	462c      	mov	r4, r5
 8011d5a:	3302      	adds	r3, #2
 8011d5c:	b285      	uxth	r5, r0
 8011d5e:	eb05 4001 	add.w	r0, r5, r1, lsl #16
 8011d62:	0c0d      	lsrs	r5, r1, #16
 8011d64:	429f      	cmp	r7, r3
 8011d66:	f844 0b04 	str.w	r0, [r4], #4
 8011d6a:	dcda      	bgt.n	8011d22 <__multadd+0x62>
 8011d6c:	b13d      	cbz	r5, 8011d7e <__multadd+0xbe>
 8011d6e:	68b2      	ldr	r2, [r6, #8]
 8011d70:	4297      	cmp	r7, r2
 8011d72:	da07      	bge.n	8011d84 <__multadd+0xc4>
 8011d74:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011d78:	3701      	adds	r7, #1
 8011d7a:	6155      	str	r5, [r2, #20]
 8011d7c:	6137      	str	r7, [r6, #16]
 8011d7e:	4630      	mov	r0, r6
 8011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d84:	6873      	ldr	r3, [r6, #4]
 8011d86:	4640      	mov	r0, r8
 8011d88:	1c59      	adds	r1, r3, #1
 8011d8a:	f7ff ff69 	bl	8011c60 <_Balloc>
 8011d8e:	6931      	ldr	r1, [r6, #16]
 8011d90:	1c8a      	adds	r2, r1, #2
 8011d92:	4604      	mov	r4, r0
 8011d94:	f106 010c 	add.w	r1, r6, #12
 8011d98:	f100 000c 	add.w	r0, r0, #12
 8011d9c:	0092      	lsls	r2, r2, #2
 8011d9e:	f7ff feb9 	bl	8011b14 <memcpy>
 8011da2:	6870      	ldr	r0, [r6, #4]
 8011da4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8011da8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8011dac:	6031      	str	r1, [r6, #0]
 8011dae:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011db2:	4626      	mov	r6, r4
 8011db4:	e7de      	b.n	8011d74 <__multadd+0xb4>
 8011db6:	bf00      	nop

08011db8 <__hi0bits>:
 8011db8:	0c02      	lsrs	r2, r0, #16
 8011dba:	4603      	mov	r3, r0
 8011dbc:	d116      	bne.n	8011dec <__hi0bits+0x34>
 8011dbe:	0403      	lsls	r3, r0, #16
 8011dc0:	2010      	movs	r0, #16
 8011dc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011dc6:	d101      	bne.n	8011dcc <__hi0bits+0x14>
 8011dc8:	3008      	adds	r0, #8
 8011dca:	021b      	lsls	r3, r3, #8
 8011dcc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011dd0:	d101      	bne.n	8011dd6 <__hi0bits+0x1e>
 8011dd2:	3004      	adds	r0, #4
 8011dd4:	011b      	lsls	r3, r3, #4
 8011dd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011dda:	d101      	bne.n	8011de0 <__hi0bits+0x28>
 8011ddc:	3002      	adds	r0, #2
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	db02      	blt.n	8011dea <__hi0bits+0x32>
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	d403      	bmi.n	8011df0 <__hi0bits+0x38>
 8011de8:	2020      	movs	r0, #32
 8011dea:	4770      	bx	lr
 8011dec:	2000      	movs	r0, #0
 8011dee:	e7e8      	b.n	8011dc2 <__hi0bits+0xa>
 8011df0:	3001      	adds	r0, #1
 8011df2:	4770      	bx	lr

08011df4 <__lo0bits>:
 8011df4:	6803      	ldr	r3, [r0, #0]
 8011df6:	4602      	mov	r2, r0
 8011df8:	f013 0007 	ands.w	r0, r3, #7
 8011dfc:	d007      	beq.n	8011e0e <__lo0bits+0x1a>
 8011dfe:	07d9      	lsls	r1, r3, #31
 8011e00:	d41f      	bmi.n	8011e42 <__lo0bits+0x4e>
 8011e02:	0798      	lsls	r0, r3, #30
 8011e04:	d41f      	bmi.n	8011e46 <__lo0bits+0x52>
 8011e06:	0898      	lsrs	r0, r3, #2
 8011e08:	6010      	str	r0, [r2, #0]
 8011e0a:	2002      	movs	r0, #2
 8011e0c:	4770      	bx	lr
 8011e0e:	b299      	uxth	r1, r3
 8011e10:	b909      	cbnz	r1, 8011e16 <__lo0bits+0x22>
 8011e12:	0c1b      	lsrs	r3, r3, #16
 8011e14:	2010      	movs	r0, #16
 8011e16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011e1a:	d101      	bne.n	8011e20 <__lo0bits+0x2c>
 8011e1c:	3008      	adds	r0, #8
 8011e1e:	0a1b      	lsrs	r3, r3, #8
 8011e20:	0719      	lsls	r1, r3, #28
 8011e22:	d101      	bne.n	8011e28 <__lo0bits+0x34>
 8011e24:	3004      	adds	r0, #4
 8011e26:	091b      	lsrs	r3, r3, #4
 8011e28:	0799      	lsls	r1, r3, #30
 8011e2a:	d101      	bne.n	8011e30 <__lo0bits+0x3c>
 8011e2c:	3002      	adds	r0, #2
 8011e2e:	089b      	lsrs	r3, r3, #2
 8011e30:	07d9      	lsls	r1, r3, #31
 8011e32:	d404      	bmi.n	8011e3e <__lo0bits+0x4a>
 8011e34:	085b      	lsrs	r3, r3, #1
 8011e36:	d101      	bne.n	8011e3c <__lo0bits+0x48>
 8011e38:	2020      	movs	r0, #32
 8011e3a:	4770      	bx	lr
 8011e3c:	3001      	adds	r0, #1
 8011e3e:	6013      	str	r3, [r2, #0]
 8011e40:	4770      	bx	lr
 8011e42:	2000      	movs	r0, #0
 8011e44:	4770      	bx	lr
 8011e46:	0859      	lsrs	r1, r3, #1
 8011e48:	6011      	str	r1, [r2, #0]
 8011e4a:	2001      	movs	r0, #1
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop

08011e50 <__i2b>:
 8011e50:	b510      	push	{r4, lr}
 8011e52:	460c      	mov	r4, r1
 8011e54:	2101      	movs	r1, #1
 8011e56:	f7ff ff03 	bl	8011c60 <_Balloc>
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	6144      	str	r4, [r0, #20]
 8011e5e:	6102      	str	r2, [r0, #16]
 8011e60:	bd10      	pop	{r4, pc}
 8011e62:	bf00      	nop

08011e64 <__multiply>:
 8011e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e68:	690c      	ldr	r4, [r1, #16]
 8011e6a:	6917      	ldr	r7, [r2, #16]
 8011e6c:	42bc      	cmp	r4, r7
 8011e6e:	b085      	sub	sp, #20
 8011e70:	460e      	mov	r6, r1
 8011e72:	4690      	mov	r8, r2
 8011e74:	da04      	bge.n	8011e80 <__multiply+0x1c>
 8011e76:	4622      	mov	r2, r4
 8011e78:	4646      	mov	r6, r8
 8011e7a:	463c      	mov	r4, r7
 8011e7c:	4688      	mov	r8, r1
 8011e7e:	4617      	mov	r7, r2
 8011e80:	68b3      	ldr	r3, [r6, #8]
 8011e82:	6871      	ldr	r1, [r6, #4]
 8011e84:	19e2      	adds	r2, r4, r7
 8011e86:	429a      	cmp	r2, r3
 8011e88:	bfc8      	it	gt
 8011e8a:	3101      	addgt	r1, #1
 8011e8c:	9201      	str	r2, [sp, #4]
 8011e8e:	f7ff fee7 	bl	8011c60 <_Balloc>
 8011e92:	9901      	ldr	r1, [sp, #4]
 8011e94:	9003      	str	r0, [sp, #12]
 8011e96:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011e9a:	3314      	adds	r3, #20
 8011e9c:	3014      	adds	r0, #20
 8011e9e:	4298      	cmp	r0, r3
 8011ea0:	9302      	str	r3, [sp, #8]
 8011ea2:	d21a      	bcs.n	8011eda <__multiply+0x76>
 8011ea4:	9902      	ldr	r1, [sp, #8]
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	43c2      	mvns	r2, r0
 8011eaa:	188a      	adds	r2, r1, r2
 8011eac:	9902      	ldr	r1, [sp, #8]
 8011eae:	3318      	adds	r3, #24
 8011eb0:	2500      	movs	r5, #0
 8011eb2:	4299      	cmp	r1, r3
 8011eb4:	6005      	str	r5, [r0, #0]
 8011eb6:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8011eba:	d90e      	bls.n	8011eda <__multiply+0x76>
 8011ebc:	b128      	cbz	r0, 8011eca <__multiply+0x66>
 8011ebe:	601d      	str	r5, [r3, #0]
 8011ec0:	9b03      	ldr	r3, [sp, #12]
 8011ec2:	9a02      	ldr	r2, [sp, #8]
 8011ec4:	331c      	adds	r3, #28
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d907      	bls.n	8011eda <__multiply+0x76>
 8011eca:	9802      	ldr	r0, [sp, #8]
 8011ecc:	4619      	mov	r1, r3
 8011ece:	f841 5b04 	str.w	r5, [r1], #4
 8011ed2:	605d      	str	r5, [r3, #4]
 8011ed4:	1d0b      	adds	r3, r1, #4
 8011ed6:	4298      	cmp	r0, r3
 8011ed8:	d8f8      	bhi.n	8011ecc <__multiply+0x68>
 8011eda:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8011ede:	3314      	adds	r3, #20
 8011ee0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011ee4:	f108 0714 	add.w	r7, r8, #20
 8011ee8:	3414      	adds	r4, #20
 8011eea:	429f      	cmp	r7, r3
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	f106 0c14 	add.w	ip, r6, #20
 8011ef2:	f080 80f8 	bcs.w	80120e6 <__multiply+0x282>
 8011ef6:	9803      	ldr	r0, [sp, #12]
 8011ef8:	3018      	adds	r0, #24
 8011efa:	f857 3b04 	ldr.w	r3, [r7], #4
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	2a00      	cmp	r2, #0
 8011f02:	d06e      	beq.n	8011fe2 <__multiply+0x17e>
 8011f04:	4661      	mov	r1, ip
 8011f06:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8011f0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f0e:	b2ab      	uxth	r3, r5
 8011f10:	fa1f f886 	uxth.w	r8, r6
 8011f14:	0c2d      	lsrs	r5, r5, #16
 8011f16:	0c36      	lsrs	r6, r6, #16
 8011f18:	fb02 3308 	mla	r3, r2, r8, r3
 8011f1c:	fb02 5606 	mla	r6, r2, r6, r5
 8011f20:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8011f24:	ea6f 050c 	mvn.w	r5, ip
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011f2e:	1965      	adds	r5, r4, r5
 8011f30:	0c36      	lsrs	r6, r6, #16
 8011f32:	428c      	cmp	r4, r1
 8011f34:	f840 3c04 	str.w	r3, [r0, #-4]
 8011f38:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	d94d      	bls.n	8011fdc <__multiply+0x178>
 8011f40:	b1cd      	cbz	r5, 8011f76 <__multiply+0x112>
 8011f42:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8011f46:	6803      	ldr	r3, [r0, #0]
 8011f48:	fa1f f985 	uxth.w	r9, r5
 8011f4c:	fa1f f883 	uxth.w	r8, r3
 8011f50:	0c2d      	lsrs	r5, r5, #16
 8011f52:	0c1b      	lsrs	r3, r3, #16
 8011f54:	fb02 8809 	mla	r8, r2, r9, r8
 8011f58:	4446      	add	r6, r8
 8011f5a:	fb02 3505 	mla	r5, r2, r5, r3
 8011f5e:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8011f62:	4603      	mov	r3, r0
 8011f64:	b2b6      	uxth	r6, r6
 8011f66:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8011f6a:	3104      	adds	r1, #4
 8011f6c:	f843 6b04 	str.w	r6, [r3], #4
 8011f70:	0c2e      	lsrs	r6, r5, #16
 8011f72:	428c      	cmp	r4, r1
 8011f74:	d932      	bls.n	8011fdc <__multiply+0x178>
 8011f76:	460d      	mov	r5, r1
 8011f78:	f8d3 e000 	ldr.w	lr, [r3]
 8011f7c:	f855 9b04 	ldr.w	r9, [r5], #4
 8011f80:	fa1f fa8e 	uxth.w	sl, lr
 8011f84:	fa1f fb89 	uxth.w	fp, r9
 8011f88:	fb02 aa0b 	mla	sl, r2, fp, sl
 8011f8c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8011f90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8011f94:	4456      	add	r6, sl
 8011f96:	fb02 8e09 	mla	lr, r2, r9, r8
 8011f9a:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 8011f9e:	4698      	mov	r8, r3
 8011fa0:	b2b6      	uxth	r6, r6
 8011fa2:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8011fa6:	f848 6b04 	str.w	r6, [r8], #4
 8011faa:	684e      	ldr	r6, [r1, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	fa1f fa86 	uxth.w	sl, r6
 8011fb2:	b299      	uxth	r1, r3
 8011fb4:	0c36      	lsrs	r6, r6, #16
 8011fb6:	0c1b      	lsrs	r3, r3, #16
 8011fb8:	fb02 110a 	mla	r1, r2, sl, r1
 8011fbc:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 8011fc0:	fb02 3606 	mla	r6, r2, r6, r3
 8011fc4:	eb06 4611 	add.w	r6, r6, r1, lsr #16
 8011fc8:	b289      	uxth	r1, r1
 8011fca:	4643      	mov	r3, r8
 8011fcc:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 8011fd0:	1d29      	adds	r1, r5, #4
 8011fd2:	0c36      	lsrs	r6, r6, #16
 8011fd4:	428c      	cmp	r4, r1
 8011fd6:	f843 8b04 	str.w	r8, [r3], #4
 8011fda:	d8cc      	bhi.n	8011f76 <__multiply+0x112>
 8011fdc:	601e      	str	r6, [r3, #0]
 8011fde:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8011fe2:	0c1a      	lsrs	r2, r3, #16
 8011fe4:	d07a      	beq.n	80120dc <__multiply+0x278>
 8011fe6:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8011fea:	f8bc 5000 	ldrh.w	r5, [ip]
 8011fee:	0c31      	lsrs	r1, r6, #16
 8011ff0:	fb02 1505 	mla	r5, r2, r5, r1
 8011ff4:	b2b3      	uxth	r3, r6
 8011ff6:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 8011ffa:	46e1      	mov	r9, ip
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	f840 6c04 	str.w	r6, [r0, #-4]
 8012002:	f859 1b04 	ldr.w	r1, [r9], #4
 8012006:	f853 6b04 	ldr.w	r6, [r3], #4
 801200a:	0c09      	lsrs	r1, r1, #16
 801200c:	fa1f fa86 	uxth.w	sl, r6
 8012010:	fb02 a101 	mla	r1, r2, r1, sl
 8012014:	ea6f 0e0c 	mvn.w	lr, ip
 8012018:	eb04 080e 	add.w	r8, r4, lr
 801201c:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8012020:	454c      	cmp	r4, r9
 8012022:	f3c8 0a80 	ubfx	sl, r8, #2, #1
 8012026:	4605      	mov	r5, r0
 8012028:	ea4f 4811 	mov.w	r8, r1, lsr #16
 801202c:	d955      	bls.n	80120da <__multiply+0x276>
 801202e:	f1ba 0f00 	cmp.w	sl, #0
 8012032:	d01b      	beq.n	801206c <__multiply+0x208>
 8012034:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8012038:	0c36      	lsrs	r6, r6, #16
 801203a:	fb02 6505 	mla	r5, r2, r5, r6
 801203e:	eb05 0e08 	add.w	lr, r5, r8
 8012042:	b289      	uxth	r1, r1
 8012044:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 8012048:	f843 6c04 	str.w	r6, [r3, #-4]
 801204c:	f859 1b04 	ldr.w	r1, [r9], #4
 8012050:	461d      	mov	r5, r3
 8012052:	f853 6b04 	ldr.w	r6, [r3], #4
 8012056:	0c09      	lsrs	r1, r1, #16
 8012058:	fa1f fa86 	uxth.w	sl, r6
 801205c:	fb02 a101 	mla	r1, r2, r1, sl
 8012060:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 8012064:	454c      	cmp	r4, r9
 8012066:	ea4f 4811 	mov.w	r8, r1, lsr #16
 801206a:	d936      	bls.n	80120da <__multiply+0x276>
 801206c:	f8b9 b000 	ldrh.w	fp, [r9]
 8012070:	0c35      	lsrs	r5, r6, #16
 8012072:	fb02 5a0b 	mla	sl, r2, fp, r5
 8012076:	44c2      	add	sl, r8
 8012078:	b289      	uxth	r1, r1
 801207a:	461d      	mov	r5, r3
 801207c:	464e      	mov	r6, r9
 801207e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012082:	f843 1c04 	str.w	r1, [r3, #-4]
 8012086:	f856 eb04 	ldr.w	lr, [r6], #4
 801208a:	f855 1b04 	ldr.w	r1, [r5], #4
 801208e:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8012092:	fa1f fb81 	uxth.w	fp, r1
 8012096:	ea4f 491e 	mov.w	r9, lr, lsr #16
 801209a:	0c09      	lsrs	r1, r1, #16
 801209c:	fb02 be09 	mla	lr, r2, r9, fp
 80120a0:	fa1f f888 	uxth.w	r8, r8
 80120a4:	eb0e 491a 	add.w	r9, lr, sl, lsr #16
 80120a8:	fb02 1e08 	mla	lr, r2, r8, r1
 80120ac:	eb0e 4819 	add.w	r8, lr, r9, lsr #16
 80120b0:	fa1f f189 	uxth.w	r1, r9
 80120b4:	46b1      	mov	r9, r6
 80120b6:	ea41 4608 	orr.w	r6, r1, r8, lsl #16
 80120ba:	f845 6c04 	str.w	r6, [r5, #-4]
 80120be:	f859 1b04 	ldr.w	r1, [r9], #4
 80120c2:	685e      	ldr	r6, [r3, #4]
 80120c4:	0c09      	lsrs	r1, r1, #16
 80120c6:	b2b3      	uxth	r3, r6
 80120c8:	fb02 3301 	mla	r3, r2, r1, r3
 80120cc:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 80120d0:	1d2b      	adds	r3, r5, #4
 80120d2:	454c      	cmp	r4, r9
 80120d4:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80120d8:	d8c8      	bhi.n	801206c <__multiply+0x208>
 80120da:	6029      	str	r1, [r5, #0]
 80120dc:	9a00      	ldr	r2, [sp, #0]
 80120de:	3004      	adds	r0, #4
 80120e0:	42ba      	cmp	r2, r7
 80120e2:	f63f af0a 	bhi.w	8011efa <__multiply+0x96>
 80120e6:	9901      	ldr	r1, [sp, #4]
 80120e8:	2900      	cmp	r1, #0
 80120ea:	dd1a      	ble.n	8012122 <__multiply+0x2be>
 80120ec:	9b02      	ldr	r3, [sp, #8]
 80120ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80120f2:	3b04      	subs	r3, #4
 80120f4:	b9a8      	cbnz	r0, 8012122 <__multiply+0x2be>
 80120f6:	9901      	ldr	r1, [sp, #4]
 80120f8:	1e4a      	subs	r2, r1, #1
 80120fa:	07d0      	lsls	r0, r2, #31
 80120fc:	d517      	bpl.n	801212e <__multiply+0x2ca>
 80120fe:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8012102:	9201      	str	r2, [sp, #4]
 8012104:	b968      	cbnz	r0, 8012122 <__multiply+0x2be>
 8012106:	9a01      	ldr	r2, [sp, #4]
 8012108:	e008      	b.n	801211c <__multiply+0x2b8>
 801210a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801210e:	3b04      	subs	r3, #4
 8012110:	b931      	cbnz	r1, 8012120 <__multiply+0x2bc>
 8012112:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012116:	3a01      	subs	r2, #1
 8012118:	3b04      	subs	r3, #4
 801211a:	b908      	cbnz	r0, 8012120 <__multiply+0x2bc>
 801211c:	3a01      	subs	r2, #1
 801211e:	d1f4      	bne.n	801210a <__multiply+0x2a6>
 8012120:	9201      	str	r2, [sp, #4]
 8012122:	9901      	ldr	r1, [sp, #4]
 8012124:	9803      	ldr	r0, [sp, #12]
 8012126:	6101      	str	r1, [r0, #16]
 8012128:	b005      	add	sp, #20
 801212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212e:	460a      	mov	r2, r1
 8012130:	e7f4      	b.n	801211c <__multiply+0x2b8>
 8012132:	bf00      	nop

08012134 <__pow5mult>:
 8012134:	f012 0303 	ands.w	r3, r2, #3
 8012138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213c:	4614      	mov	r4, r2
 801213e:	4680      	mov	r8, r0
 8012140:	460f      	mov	r7, r1
 8012142:	d12b      	bne.n	801219c <__pow5mult+0x68>
 8012144:	10a4      	asrs	r4, r4, #2
 8012146:	d01b      	beq.n	8012180 <__pow5mult+0x4c>
 8012148:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 801214c:	b92e      	cbnz	r6, 801215a <__pow5mult+0x26>
 801214e:	e02e      	b.n	80121ae <__pow5mult+0x7a>
 8012150:	1064      	asrs	r4, r4, #1
 8012152:	d015      	beq.n	8012180 <__pow5mult+0x4c>
 8012154:	6835      	ldr	r5, [r6, #0]
 8012156:	b1b5      	cbz	r5, 8012186 <__pow5mult+0x52>
 8012158:	462e      	mov	r6, r5
 801215a:	07e3      	lsls	r3, r4, #31
 801215c:	d5f8      	bpl.n	8012150 <__pow5mult+0x1c>
 801215e:	4639      	mov	r1, r7
 8012160:	4632      	mov	r2, r6
 8012162:	4640      	mov	r0, r8
 8012164:	f7ff fe7e 	bl	8011e64 <__multiply>
 8012168:	b1b7      	cbz	r7, 8012198 <__pow5mult+0x64>
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8012170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012174:	1064      	asrs	r4, r4, #1
 8012176:	6039      	str	r1, [r7, #0]
 8012178:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 801217c:	4607      	mov	r7, r0
 801217e:	d1e9      	bne.n	8012154 <__pow5mult+0x20>
 8012180:	4638      	mov	r0, r7
 8012182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012186:	4631      	mov	r1, r6
 8012188:	4632      	mov	r2, r6
 801218a:	4640      	mov	r0, r8
 801218c:	f7ff fe6a 	bl	8011e64 <__multiply>
 8012190:	6030      	str	r0, [r6, #0]
 8012192:	6005      	str	r5, [r0, #0]
 8012194:	4606      	mov	r6, r0
 8012196:	e7e0      	b.n	801215a <__pow5mult+0x26>
 8012198:	4607      	mov	r7, r0
 801219a:	e7d9      	b.n	8012150 <__pow5mult+0x1c>
 801219c:	1e5d      	subs	r5, r3, #1
 801219e:	4a09      	ldr	r2, [pc, #36]	; (80121c4 <__pow5mult+0x90>)
 80121a0:	2300      	movs	r3, #0
 80121a2:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80121a6:	f7ff fd8b 	bl	8011cc0 <__multadd>
 80121aa:	4607      	mov	r7, r0
 80121ac:	e7ca      	b.n	8012144 <__pow5mult+0x10>
 80121ae:	4640      	mov	r0, r8
 80121b0:	f240 2171 	movw	r1, #625	; 0x271
 80121b4:	f7ff fe4c 	bl	8011e50 <__i2b>
 80121b8:	4606      	mov	r6, r0
 80121ba:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 80121be:	2000      	movs	r0, #0
 80121c0:	6030      	str	r0, [r6, #0]
 80121c2:	e7ca      	b.n	801215a <__pow5mult+0x26>
 80121c4:	080136d8 	.word	0x080136d8

080121c8 <__lshift>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	4617      	mov	r7, r2
 80121ce:	690a      	ldr	r2, [r1, #16]
 80121d0:	688b      	ldr	r3, [r1, #8]
 80121d2:	117e      	asrs	r6, r7, #5
 80121d4:	b083      	sub	sp, #12
 80121d6:	18b4      	adds	r4, r6, r2
 80121d8:	9401      	str	r4, [sp, #4]
 80121da:	3401      	adds	r4, #1
 80121dc:	429c      	cmp	r4, r3
 80121de:	460d      	mov	r5, r1
 80121e0:	4680      	mov	r8, r0
 80121e2:	6849      	ldr	r1, [r1, #4]
 80121e4:	dd03      	ble.n	80121ee <__lshift+0x26>
 80121e6:	005b      	lsls	r3, r3, #1
 80121e8:	3101      	adds	r1, #1
 80121ea:	429c      	cmp	r4, r3
 80121ec:	dcfb      	bgt.n	80121e6 <__lshift+0x1e>
 80121ee:	4640      	mov	r0, r8
 80121f0:	f7ff fd36 	bl	8011c60 <_Balloc>
 80121f4:	2e00      	cmp	r6, #0
 80121f6:	f100 0114 	add.w	r1, r0, #20
 80121fa:	dd1f      	ble.n	801223c <__lshift+0x74>
 80121fc:	2301      	movs	r3, #1
 80121fe:	1e72      	subs	r2, r6, #1
 8012200:	f04f 0c00 	mov.w	ip, #0
 8012204:	42b3      	cmp	r3, r6
 8012206:	f8c1 c000 	str.w	ip, [r1]
 801220a:	ea02 0103 	and.w	r1, r2, r3
 801220e:	f100 0218 	add.w	r2, r0, #24
 8012212:	d010      	beq.n	8012236 <__lshift+0x6e>
 8012214:	b131      	cbz	r1, 8012224 <__lshift+0x5c>
 8012216:	2302      	movs	r3, #2
 8012218:	42b3      	cmp	r3, r6
 801221a:	f8c2 c000 	str.w	ip, [r2]
 801221e:	f100 021c 	add.w	r2, r0, #28
 8012222:	d008      	beq.n	8012236 <__lshift+0x6e>
 8012224:	4611      	mov	r1, r2
 8012226:	3302      	adds	r3, #2
 8012228:	f841 cb04 	str.w	ip, [r1], #4
 801222c:	f8c2 c004 	str.w	ip, [r2, #4]
 8012230:	1d0a      	adds	r2, r1, #4
 8012232:	42b3      	cmp	r3, r6
 8012234:	d1f6      	bne.n	8012224 <__lshift+0x5c>
 8012236:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801223a:	3114      	adds	r1, #20
 801223c:	692e      	ldr	r6, [r5, #16]
 801223e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8012242:	3614      	adds	r6, #20
 8012244:	f017 071f 	ands.w	r7, r7, #31
 8012248:	f105 0e14 	add.w	lr, r5, #20
 801224c:	9700      	str	r7, [sp, #0]
 801224e:	d05b      	beq.n	8012308 <__lshift+0x140>
 8012250:	f8de 2000 	ldr.w	r2, [lr]
 8012254:	fa02 f207 	lsl.w	r2, r2, r7
 8012258:	f105 0318 	add.w	r3, r5, #24
 801225c:	f841 2b04 	str.w	r2, [r1], #4
 8012260:	ea6f 090e 	mvn.w	r9, lr
 8012264:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8012268:	eb06 0a09 	add.w	sl, r6, r9
 801226c:	f1c7 0e20 	rsb	lr, r7, #32
 8012270:	429e      	cmp	r6, r3
 8012272:	f3ca 0a80 	ubfx	sl, sl, #2, #1
 8012276:	fa22 f90e 	lsr.w	r9, r2, lr
 801227a:	d931      	bls.n	80122e0 <__lshift+0x118>
 801227c:	f1ba 0f00 	cmp.w	sl, #0
 8012280:	d00f      	beq.n	80122a2 <__lshift+0xda>
 8012282:	681f      	ldr	r7, [r3, #0]
 8012284:	9b00      	ldr	r3, [sp, #0]
 8012286:	fa07 f703 	lsl.w	r7, r7, r3
 801228a:	ea49 0207 	orr.w	r2, r9, r7
 801228e:	f105 031c 	add.w	r3, r5, #28
 8012292:	f841 2b04 	str.w	r2, [r1], #4
 8012296:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801229a:	429e      	cmp	r6, r3
 801229c:	fa27 f90e 	lsr.w	r9, r7, lr
 80122a0:	d91e      	bls.n	80122e0 <__lshift+0x118>
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	f8dd b000 	ldr.w	fp, [sp]
 80122a8:	460f      	mov	r7, r1
 80122aa:	fa02 fc0b 	lsl.w	ip, r2, fp
 80122ae:	ea49 090c 	orr.w	r9, r9, ip
 80122b2:	f847 9b04 	str.w	r9, [r7], #4
 80122b6:	461a      	mov	r2, r3
 80122b8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80122bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80122c0:	fa0a fc0b 	lsl.w	ip, sl, fp
 80122c4:	fa23 fb0e 	lsr.w	fp, r3, lr
 80122c8:	ea4b 0a0c 	orr.w	sl, fp, ip
 80122cc:	4613      	mov	r3, r2
 80122ce:	f8c1 a004 	str.w	sl, [r1, #4]
 80122d2:	f853 9b04 	ldr.w	r9, [r3], #4
 80122d6:	1d39      	adds	r1, r7, #4
 80122d8:	429e      	cmp	r6, r3
 80122da:	fa29 f90e 	lsr.w	r9, r9, lr
 80122de:	d8e0      	bhi.n	80122a2 <__lshift+0xda>
 80122e0:	f8c1 9000 	str.w	r9, [r1]
 80122e4:	f1b9 0f00 	cmp.w	r9, #0
 80122e8:	d001      	beq.n	80122ee <__lshift+0x126>
 80122ea:	9c01      	ldr	r4, [sp, #4]
 80122ec:	3402      	adds	r4, #2
 80122ee:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80122f2:	686a      	ldr	r2, [r5, #4]
 80122f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122f8:	3c01      	subs	r4, #1
 80122fa:	6104      	str	r4, [r0, #16]
 80122fc:	6029      	str	r1, [r5, #0]
 80122fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012302:	b003      	add	sp, #12
 8012304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012308:	ea6f 030e 	mvn.w	r3, lr
 801230c:	f8de 7000 	ldr.w	r7, [lr]
 8012310:	f105 0218 	add.w	r2, r5, #24
 8012314:	18f3      	adds	r3, r6, r3
 8012316:	4296      	cmp	r6, r2
 8012318:	f841 7b04 	str.w	r7, [r1], #4
 801231c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8012320:	d9e5      	bls.n	80122ee <__lshift+0x126>
 8012322:	b133      	cbz	r3, 8012332 <__lshift+0x16a>
 8012324:	6813      	ldr	r3, [r2, #0]
 8012326:	f105 021c 	add.w	r2, r5, #28
 801232a:	4296      	cmp	r6, r2
 801232c:	f841 3b04 	str.w	r3, [r1], #4
 8012330:	d9dd      	bls.n	80122ee <__lshift+0x126>
 8012332:	4694      	mov	ip, r2
 8012334:	460f      	mov	r7, r1
 8012336:	f85c 3b04 	ldr.w	r3, [ip], #4
 801233a:	f847 3b04 	str.w	r3, [r7], #4
 801233e:	6853      	ldr	r3, [r2, #4]
 8012340:	f10c 0204 	add.w	r2, ip, #4
 8012344:	604b      	str	r3, [r1, #4]
 8012346:	1d39      	adds	r1, r7, #4
 8012348:	4296      	cmp	r6, r2
 801234a:	d8f2      	bhi.n	8012332 <__lshift+0x16a>
 801234c:	e7cf      	b.n	80122ee <__lshift+0x126>
 801234e:	bf00      	nop

08012350 <__mcmp>:
 8012350:	b4f0      	push	{r4, r5, r6, r7}
 8012352:	690b      	ldr	r3, [r1, #16]
 8012354:	4605      	mov	r5, r0
 8012356:	6900      	ldr	r0, [r0, #16]
 8012358:	1ac0      	subs	r0, r0, r3
 801235a:	d124      	bne.n	80123a6 <__mcmp+0x56>
 801235c:	1d1a      	adds	r2, r3, #4
 801235e:	0094      	lsls	r4, r2, #2
 8012360:	192b      	adds	r3, r5, r4
 8012362:	1d1e      	adds	r6, r3, #4
 8012364:	1909      	adds	r1, r1, r4
 8012366:	3514      	adds	r5, #20
 8012368:	f856 4c04 	ldr.w	r4, [r6, #-4]
 801236c:	680a      	ldr	r2, [r1, #0]
 801236e:	43ef      	mvns	r7, r5
 8012370:	19be      	adds	r6, r7, r6
 8012372:	4294      	cmp	r4, r2
 8012374:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8012378:	d110      	bne.n	801239c <__mcmp+0x4c>
 801237a:	429d      	cmp	r5, r3
 801237c:	d213      	bcs.n	80123a6 <__mcmp+0x56>
 801237e:	b13e      	cbz	r6, 8012390 <__mcmp+0x40>
 8012380:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8012384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012388:	4294      	cmp	r4, r2
 801238a:	d107      	bne.n	801239c <__mcmp+0x4c>
 801238c:	429d      	cmp	r5, r3
 801238e:	d20a      	bcs.n	80123a6 <__mcmp+0x56>
 8012390:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8012394:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012398:	4294      	cmp	r4, r2
 801239a:	d0f1      	beq.n	8012380 <__mcmp+0x30>
 801239c:	42a2      	cmp	r2, r4
 801239e:	bf94      	ite	ls
 80123a0:	2001      	movls	r0, #1
 80123a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80123a6:	bcf0      	pop	{r4, r5, r6, r7}
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop

080123ac <__mdiff>:
 80123ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b0:	460f      	mov	r7, r1
 80123b2:	4605      	mov	r5, r0
 80123b4:	4611      	mov	r1, r2
 80123b6:	4638      	mov	r0, r7
 80123b8:	4693      	mov	fp, r2
 80123ba:	f7ff ffc9 	bl	8012350 <__mcmp>
 80123be:	1e04      	subs	r4, r0, #0
 80123c0:	f000 80f1 	beq.w	80125a6 <__mdiff+0x1fa>
 80123c4:	f2c0 80ea 	blt.w	801259c <__mdiff+0x1f0>
 80123c8:	2400      	movs	r4, #0
 80123ca:	4628      	mov	r0, r5
 80123cc:	6879      	ldr	r1, [r7, #4]
 80123ce:	f7ff fc47 	bl	8011c60 <_Balloc>
 80123d2:	f8db 6014 	ldr.w	r6, [fp, #20]
 80123d6:	697a      	ldr	r2, [r7, #20]
 80123d8:	f8db 5010 	ldr.w	r5, [fp, #16]
 80123dc:	60c4      	str	r4, [r0, #12]
 80123de:	fa1f fc82 	uxth.w	ip, r2
 80123e2:	ea4f 4a16 	mov.w	sl, r6, lsr #16
 80123e6:	b2b4      	uxth	r4, r6
 80123e8:	ebc4 060c 	rsb	r6, r4, ip
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80123f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80123f6:	f10b 0114 	add.w	r1, fp, #20
 80123fa:	eb02 4a26 	add.w	sl, r2, r6, asr #16
 80123fe:	f105 0814 	add.w	r8, r5, #20
 8012402:	43c9      	mvns	r1, r1
 8012404:	b2b4      	uxth	r4, r6
 8012406:	f10b 0618 	add.w	r6, fp, #24
 801240a:	eb08 0201 	add.w	r2, r8, r1
 801240e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012412:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 8012416:	f100 0518 	add.w	r5, r0, #24
 801241a:	45b0      	cmp	r8, r6
 801241c:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8012420:	6144      	str	r4, [r0, #20]
 8012422:	f109 0914 	add.w	r9, r9, #20
 8012426:	f107 0c18 	add.w	ip, r7, #24
 801242a:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 801242e:	462a      	mov	r2, r5
 8012430:	d952      	bls.n	80124d8 <__mdiff+0x12c>
 8012432:	b1d9      	cbz	r1, 801246c <__mdiff+0xc0>
 8012434:	f8dc 2000 	ldr.w	r2, [ip]
 8012438:	6836      	ldr	r6, [r6, #0]
 801243a:	fa1a fe82 	uxtah	lr, sl, r2
 801243e:	0c31      	lsrs	r1, r6, #16
 8012440:	b2b4      	uxth	r4, r6
 8012442:	ebc4 060e 	rsb	r6, r4, lr
 8012446:	ebc1 4c12 	rsb	ip, r1, r2, lsr #16
 801244a:	eb0c 4a26 	add.w	sl, ip, r6, asr #16
 801244e:	b2b2      	uxth	r2, r6
 8012450:	ea42 440a 	orr.w	r4, r2, sl, lsl #16
 8012454:	f10b 061c 	add.w	r6, fp, #28
 8012458:	602c      	str	r4, [r5, #0]
 801245a:	45b0      	cmp	r8, r6
 801245c:	f100 051c 	add.w	r5, r0, #28
 8012460:	f107 0c1c 	add.w	ip, r7, #28
 8012464:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8012468:	462a      	mov	r2, r5
 801246a:	d935      	bls.n	80124d8 <__mdiff+0x12c>
 801246c:	4662      	mov	r2, ip
 801246e:	4637      	mov	r7, r6
 8012470:	f852 1b04 	ldr.w	r1, [r2], #4
 8012474:	f857 4b04 	ldr.w	r4, [r7], #4
 8012478:	fa1a fe81 	uxtah	lr, sl, r1
 801247c:	fa1f fb84 	uxth.w	fp, r4
 8012480:	0c24      	lsrs	r4, r4, #16
 8012482:	ebcb 0a0e 	rsb	sl, fp, lr
 8012486:	ebc4 4111 	rsb	r1, r4, r1, lsr #16
 801248a:	eb01 442a 	add.w	r4, r1, sl, asr #16
 801248e:	fa1f fe8a 	uxth.w	lr, sl
 8012492:	4629      	mov	r1, r5
 8012494:	ea4e 4b04 	orr.w	fp, lr, r4, lsl #16
 8012498:	f841 bb04 	str.w	fp, [r1], #4
 801249c:	f8dc c004 	ldr.w	ip, [ip, #4]
 80124a0:	6876      	ldr	r6, [r6, #4]
 80124a2:	fa1f fa8c 	uxth.w	sl, ip
 80124a6:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 80124aa:	fa1f fb86 	uxth.w	fp, r6
 80124ae:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80124b2:	ebcb 0404 	rsb	r4, fp, r4
 80124b6:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 80124ba:	eb0e 4a24 	add.w	sl, lr, r4, asr #16
 80124be:	b2a6      	uxth	r6, r4
 80124c0:	ea46 440a 	orr.w	r4, r6, sl, lsl #16
 80124c4:	1d3e      	adds	r6, r7, #4
 80124c6:	606c      	str	r4, [r5, #4]
 80124c8:	1d0d      	adds	r5, r1, #4
 80124ca:	45b0      	cmp	r8, r6
 80124cc:	f102 0c04 	add.w	ip, r2, #4
 80124d0:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 80124d4:	462a      	mov	r2, r5
 80124d6:	d8c9      	bhi.n	801246c <__mdiff+0xc0>
 80124d8:	45e1      	cmp	r9, ip
 80124da:	d955      	bls.n	8012588 <__mdiff+0x1dc>
 80124dc:	4662      	mov	r2, ip
 80124de:	ea6f 040c 	mvn.w	r4, ip
 80124e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80124e6:	fa1a fe81 	uxtah	lr, sl, r1
 80124ea:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80124ee:	eb08 482e 	add.w	r8, r8, lr, asr #16
 80124f2:	fa1f fa8e 	uxth.w	sl, lr
 80124f6:	4629      	mov	r1, r5
 80124f8:	eb09 0604 	add.w	r6, r9, r4
 80124fc:	4591      	cmp	r9, r2
 80124fe:	ea4a 4408 	orr.w	r4, sl, r8, lsl #16
 8012502:	f841 4b04 	str.w	r4, [r1], #4
 8012506:	f3c6 0680 	ubfx	r6, r6, #2, #1
 801250a:	ea4f 4828 	mov.w	r8, r8, asr #16
 801250e:	d933      	bls.n	8012578 <__mdiff+0x1cc>
 8012510:	b186      	cbz	r6, 8012534 <__mdiff+0x188>
 8012512:	f852 4b04 	ldr.w	r4, [r2], #4
 8012516:	fa18 fe84 	uxtah	lr, r8, r4
 801251a:	0c26      	lsrs	r6, r4, #16
 801251c:	eb06 462e 	add.w	r6, r6, lr, asr #16
 8012520:	fa1f f88e 	uxth.w	r8, lr
 8012524:	ea48 4406 	orr.w	r4, r8, r6, lsl #16
 8012528:	4591      	cmp	r9, r2
 801252a:	f841 4b04 	str.w	r4, [r1], #4
 801252e:	ea4f 4826 	mov.w	r8, r6, asr #16
 8012532:	d921      	bls.n	8012578 <__mdiff+0x1cc>
 8012534:	4617      	mov	r7, r2
 8012536:	460e      	mov	r6, r1
 8012538:	f857 4b04 	ldr.w	r4, [r7], #4
 801253c:	fa18 fe84 	uxtah	lr, r8, r4
 8012540:	0c24      	lsrs	r4, r4, #16
 8012542:	eb04 442e 	add.w	r4, r4, lr, asr #16
 8012546:	fa1f f88e 	uxth.w	r8, lr
 801254a:	ea48 4e04 	orr.w	lr, r8, r4, lsl #16
 801254e:	f846 eb04 	str.w	lr, [r6], #4
 8012552:	6852      	ldr	r2, [r2, #4]
 8012554:	fa1f f882 	uxth.w	r8, r2
 8012558:	eb08 4424 	add.w	r4, r8, r4, asr #16
 801255c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8012560:	eb02 4e24 	add.w	lr, r2, r4, asr #16
 8012564:	b2a4      	uxth	r4, r4
 8012566:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801256a:	1d3a      	adds	r2, r7, #4
 801256c:	604c      	str	r4, [r1, #4]
 801256e:	1d31      	adds	r1, r6, #4
 8012570:	4591      	cmp	r9, r2
 8012572:	ea4f 482e 	mov.w	r8, lr, asr #16
 8012576:	d8dd      	bhi.n	8012534 <__mdiff+0x188>
 8012578:	ea6f 010c 	mvn.w	r1, ip
 801257c:	eb01 0209 	add.w	r2, r1, r9
 8012580:	f022 0103 	bic.w	r1, r2, #3
 8012584:	1d0a      	adds	r2, r1, #4
 8012586:	18aa      	adds	r2, r5, r2
 8012588:	3a04      	subs	r2, #4
 801258a:	b924      	cbnz	r4, 8012596 <__mdiff+0x1ea>
 801258c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012590:	3b01      	subs	r3, #1
 8012592:	2900      	cmp	r1, #0
 8012594:	d0fa      	beq.n	801258c <__mdiff+0x1e0>
 8012596:	6103      	str	r3, [r0, #16]
 8012598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259c:	463b      	mov	r3, r7
 801259e:	2401      	movs	r4, #1
 80125a0:	465f      	mov	r7, fp
 80125a2:	469b      	mov	fp, r3
 80125a4:	e711      	b.n	80123ca <__mdiff+0x1e>
 80125a6:	4628      	mov	r0, r5
 80125a8:	4621      	mov	r1, r4
 80125aa:	f7ff fb59 	bl	8011c60 <_Balloc>
 80125ae:	2201      	movs	r2, #1
 80125b0:	6102      	str	r2, [r0, #16]
 80125b2:	6144      	str	r4, [r0, #20]
 80125b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125b8 <__d2b>:
 80125b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125bc:	b083      	sub	sp, #12
 80125be:	2101      	movs	r1, #1
 80125c0:	461d      	mov	r5, r3
 80125c2:	4614      	mov	r4, r2
 80125c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80125c6:	f7ff fb4b 	bl	8011c60 <_Balloc>
 80125ca:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80125ce:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 80125d2:	4680      	mov	r8, r0
 80125d4:	46a9      	mov	r9, r5
 80125d6:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 80125da:	b10e      	cbz	r6, 80125e0 <__d2b+0x28>
 80125dc:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80125e0:	9001      	str	r0, [sp, #4]
 80125e2:	2c00      	cmp	r4, #0
 80125e4:	d024      	beq.n	8012630 <__d2b+0x78>
 80125e6:	aa02      	add	r2, sp, #8
 80125e8:	4668      	mov	r0, sp
 80125ea:	f842 4d08 	str.w	r4, [r2, #-8]!
 80125ee:	f7ff fc01 	bl	8011df4 <__lo0bits>
 80125f2:	9b01      	ldr	r3, [sp, #4]
 80125f4:	2800      	cmp	r0, #0
 80125f6:	d131      	bne.n	801265c <__d2b+0xa4>
 80125f8:	9c00      	ldr	r4, [sp, #0]
 80125fa:	f8c8 4014 	str.w	r4, [r8, #20]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	bf0c      	ite	eq
 8012602:	2401      	moveq	r4, #1
 8012604:	2402      	movne	r4, #2
 8012606:	f8c8 3018 	str.w	r3, [r8, #24]
 801260a:	f8c8 4010 	str.w	r4, [r8, #16]
 801260e:	b9de      	cbnz	r6, 8012648 <__d2b+0x90>
 8012610:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8012614:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8012618:	6910      	ldr	r0, [r2, #16]
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	f7ff fbcc 	bl	8011db8 <__hi0bits>
 8012620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012622:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8012626:	6008      	str	r0, [r1, #0]
 8012628:	4640      	mov	r0, r8
 801262a:	b003      	add	sp, #12
 801262c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012630:	a801      	add	r0, sp, #4
 8012632:	f7ff fbdf 	bl	8011df4 <__lo0bits>
 8012636:	9901      	ldr	r1, [sp, #4]
 8012638:	2401      	movs	r4, #1
 801263a:	f8c8 1014 	str.w	r1, [r8, #20]
 801263e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012642:	3020      	adds	r0, #32
 8012644:	2e00      	cmp	r6, #0
 8012646:	d0e3      	beq.n	8012610 <__d2b+0x58>
 8012648:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 801264c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801264e:	eb09 0200 	add.w	r2, r9, r0
 8012652:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012656:	603a      	str	r2, [r7, #0]
 8012658:	6018      	str	r0, [r3, #0]
 801265a:	e7e5      	b.n	8012628 <__d2b+0x70>
 801265c:	f1c0 0120 	rsb	r1, r0, #32
 8012660:	9a00      	ldr	r2, [sp, #0]
 8012662:	fa03 f401 	lsl.w	r4, r3, r1
 8012666:	ea44 0102 	orr.w	r1, r4, r2
 801266a:	fa23 f300 	lsr.w	r3, r3, r0
 801266e:	f8c8 1014 	str.w	r1, [r8, #20]
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	e7c3      	b.n	80125fe <__d2b+0x46>
 8012676:	bf00      	nop

08012678 <_sbrk_r>:
 8012678:	b538      	push	{r3, r4, r5, lr}
 801267a:	4c07      	ldr	r4, [pc, #28]	; (8012698 <_sbrk_r+0x20>)
 801267c:	2300      	movs	r3, #0
 801267e:	4605      	mov	r5, r0
 8012680:	4608      	mov	r0, r1
 8012682:	6023      	str	r3, [r4, #0]
 8012684:	f7f0 fa98 	bl	8002bb8 <_sbrk>
 8012688:	1c43      	adds	r3, r0, #1
 801268a:	d000      	beq.n	801268e <_sbrk_r+0x16>
 801268c:	bd38      	pop	{r3, r4, r5, pc}
 801268e:	6821      	ldr	r1, [r4, #0]
 8012690:	2900      	cmp	r1, #0
 8012692:	d0fb      	beq.n	801268c <_sbrk_r+0x14>
 8012694:	6029      	str	r1, [r5, #0]
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	20000a18 	.word	0x20000a18

0801269c <__sread>:
 801269c:	b510      	push	{r4, lr}
 801269e:	460c      	mov	r4, r1
 80126a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a4:	f000 fce4 	bl	8013070 <_read_r>
 80126a8:	2800      	cmp	r0, #0
 80126aa:	db03      	blt.n	80126b4 <__sread+0x18>
 80126ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80126ae:	1813      	adds	r3, r2, r0
 80126b0:	6523      	str	r3, [r4, #80]	; 0x50
 80126b2:	bd10      	pop	{r4, pc}
 80126b4:	89a3      	ldrh	r3, [r4, #12]
 80126b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80126ba:	81a1      	strh	r1, [r4, #12]
 80126bc:	bd10      	pop	{r4, pc}
 80126be:	bf00      	nop

080126c0 <__swrite>:
 80126c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c4:	460c      	mov	r4, r1
 80126c6:	8989      	ldrh	r1, [r1, #12]
 80126c8:	f401 7c80 	and.w	ip, r1, #256	; 0x100
 80126cc:	fa0f fc8c 	sxth.w	ip, ip
 80126d0:	4607      	mov	r7, r0
 80126d2:	4616      	mov	r6, r2
 80126d4:	461d      	mov	r5, r3
 80126d6:	f1bc 0f00 	cmp.w	ip, #0
 80126da:	d006      	beq.n	80126ea <__swrite+0x2a>
 80126dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126e0:	2200      	movs	r2, #0
 80126e2:	2302      	movs	r3, #2
 80126e4:	f000 fbe4 	bl	8012eb0 <_lseek_r>
 80126e8:	89a1      	ldrh	r1, [r4, #12]
 80126ea:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 80126ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126f2:	81a0      	strh	r0, [r4, #12]
 80126f4:	4632      	mov	r2, r6
 80126f6:	4638      	mov	r0, r7
 80126f8:	462b      	mov	r3, r5
 80126fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126fe:	f000 b8a7 	b.w	8012850 <_write_r>
 8012702:	bf00      	nop

08012704 <__sseek>:
 8012704:	b510      	push	{r4, lr}
 8012706:	460c      	mov	r4, r1
 8012708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801270c:	f000 fbd0 	bl	8012eb0 <_lseek_r>
 8012710:	1c42      	adds	r2, r0, #1
 8012712:	89a3      	ldrh	r3, [r4, #12]
 8012714:	d004      	beq.n	8012720 <__sseek+0x1c>
 8012716:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 801271a:	6520      	str	r0, [r4, #80]	; 0x50
 801271c:	81a1      	strh	r1, [r4, #12]
 801271e:	bd10      	pop	{r4, pc}
 8012720:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012724:	81a2      	strh	r2, [r4, #12]
 8012726:	bd10      	pop	{r4, pc}

08012728 <__sclose>:
 8012728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801272c:	f000 b8d4 	b.w	80128d8 <_close_r>

08012730 <strlen>:
 8012730:	f020 0103 	bic.w	r1, r0, #3
 8012734:	f010 0003 	ands.w	r0, r0, #3
 8012738:	f1c0 0000 	rsb	r0, r0, #0
 801273c:	f851 3b04 	ldr.w	r3, [r1], #4
 8012740:	f100 0c04 	add.w	ip, r0, #4
 8012744:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012748:	f06f 0200 	mvn.w	r2, #0
 801274c:	bf1c      	itt	ne
 801274e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8012752:	4313      	orrne	r3, r2
 8012754:	f04f 0c01 	mov.w	ip, #1
 8012758:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 801275c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8012760:	eba3 020c 	sub.w	r2, r3, ip
 8012764:	ea22 0203 	bic.w	r2, r2, r3
 8012768:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 801276c:	bf04      	itt	eq
 801276e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8012772:	3004      	addeq	r0, #4
 8012774:	d0f4      	beq.n	8012760 <strlen+0x30>
 8012776:	f013 0fff 	tst.w	r3, #255	; 0xff
 801277a:	bf1f      	itttt	ne
 801277c:	3001      	addne	r0, #1
 801277e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8012782:	3001      	addne	r0, #1
 8012784:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8012788:	bf18      	it	ne
 801278a:	3001      	addne	r0, #1
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop

08012790 <__sprint_r>:
 8012790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	6893      	ldr	r3, [r2, #8]
 8012796:	4692      	mov	sl, r2
 8012798:	4680      	mov	r8, r0
 801279a:	460f      	mov	r7, r1
 801279c:	2b00      	cmp	r3, #0
 801279e:	d050      	beq.n	8012842 <__sprint_r+0xb2>
 80127a0:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 80127a2:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 80127a6:	d050      	beq.n	801284a <__sprint_r+0xba>
 80127a8:	6812      	ldr	r2, [r2, #0]
 80127aa:	f102 0b08 	add.w	fp, r2, #8
 80127ae:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80127b2:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 80127b6:	ea5f 0990 	movs.w	r9, r0, lsr #2
 80127ba:	d038      	beq.n	801282e <__sprint_r+0x9e>
 80127bc:	f109 33ff 	add.w	r3, r9, #4294967295
 80127c0:	4640      	mov	r0, r8
 80127c2:	6821      	ldr	r1, [r4, #0]
 80127c4:	463a      	mov	r2, r7
 80127c6:	f003 0601 	and.w	r6, r3, #1
 80127ca:	f000 f8e9 	bl	80129a0 <_fputwc_r>
 80127ce:	3001      	adds	r0, #1
 80127d0:	d022      	beq.n	8012818 <__sprint_r+0x88>
 80127d2:	2501      	movs	r5, #1
 80127d4:	45a9      	cmp	r9, r5
 80127d6:	d028      	beq.n	801282a <__sprint_r+0x9a>
 80127d8:	b196      	cbz	r6, 8012800 <__sprint_r+0x70>
 80127da:	4640      	mov	r0, r8
 80127dc:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80127e0:	463a      	mov	r2, r7
 80127e2:	f000 f8dd 	bl	80129a0 <_fputwc_r>
 80127e6:	3001      	adds	r0, #1
 80127e8:	d016      	beq.n	8012818 <__sprint_r+0x88>
 80127ea:	2502      	movs	r5, #2
 80127ec:	45a9      	cmp	r9, r5
 80127ee:	d107      	bne.n	8012800 <__sprint_r+0x70>
 80127f0:	e01b      	b.n	801282a <__sprint_r+0x9a>
 80127f2:	6871      	ldr	r1, [r6, #4]
 80127f4:	f000 f8d4 	bl	80129a0 <_fputwc_r>
 80127f8:	3001      	adds	r0, #1
 80127fa:	d00d      	beq.n	8012818 <__sprint_r+0x88>
 80127fc:	45a9      	cmp	r9, r5
 80127fe:	d014      	beq.n	801282a <__sprint_r+0x9a>
 8012800:	6861      	ldr	r1, [r4, #4]
 8012802:	463a      	mov	r2, r7
 8012804:	4640      	mov	r0, r8
 8012806:	f000 f8cb 	bl	80129a0 <_fputwc_r>
 801280a:	1d26      	adds	r6, r4, #4
 801280c:	3502      	adds	r5, #2
 801280e:	3408      	adds	r4, #8
 8012810:	3001      	adds	r0, #1
 8012812:	463a      	mov	r2, r7
 8012814:	4640      	mov	r0, r8
 8012816:	d1ec      	bne.n	80127f2 <__sprint_r+0x62>
 8012818:	f04f 30ff 	mov.w	r0, #4294967295
 801281c:	2100      	movs	r1, #0
 801281e:	f8ca 1008 	str.w	r1, [sl, #8]
 8012822:	f8ca 1004 	str.w	r1, [sl, #4]
 8012826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801282e:	eba3 0389 	sub.w	r3, r3, r9, lsl #2
 8012832:	f8ca 3008 	str.w	r3, [sl, #8]
 8012836:	f10b 0b08 	add.w	fp, fp, #8
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1b7      	bne.n	80127ae <__sprint_r+0x1e>
 801283e:	4618      	mov	r0, r3
 8012840:	e7ec      	b.n	801281c <__sprint_r+0x8c>
 8012842:	6053      	str	r3, [r2, #4]
 8012844:	4618      	mov	r0, r3
 8012846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801284a:	f000 f995 	bl	8012b78 <__sfvwrite_r>
 801284e:	e7e5      	b.n	801281c <__sprint_r+0x8c>

08012850 <_write_r>:
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	4c08      	ldr	r4, [pc, #32]	; (8012874 <_write_r+0x24>)
 8012854:	4605      	mov	r5, r0
 8012856:	4608      	mov	r0, r1
 8012858:	4611      	mov	r1, r2
 801285a:	461a      	mov	r2, r3
 801285c:	2300      	movs	r3, #0
 801285e:	6023      	str	r3, [r4, #0]
 8012860:	f7f0 fa84 	bl	8002d6c <_write>
 8012864:	1c43      	adds	r3, r0, #1
 8012866:	d000      	beq.n	801286a <_write_r+0x1a>
 8012868:	bd38      	pop	{r3, r4, r5, pc}
 801286a:	6821      	ldr	r1, [r4, #0]
 801286c:	2900      	cmp	r1, #0
 801286e:	d0fb      	beq.n	8012868 <_write_r+0x18>
 8012870:	6029      	str	r1, [r5, #0]
 8012872:	bd38      	pop	{r3, r4, r5, pc}
 8012874:	20000a18 	.word	0x20000a18

08012878 <_calloc_r>:
 8012878:	b510      	push	{r4, lr}
 801287a:	fb01 f102 	mul.w	r1, r1, r2
 801287e:	f7fe fdfb 	bl	8011478 <_malloc_r>
 8012882:	4604      	mov	r4, r0
 8012884:	b168      	cbz	r0, 80128a2 <_calloc_r+0x2a>
 8012886:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801288a:	f022 0103 	bic.w	r1, r2, #3
 801288e:	1f0a      	subs	r2, r1, #4
 8012890:	2a24      	cmp	r2, #36	; 0x24
 8012892:	d818      	bhi.n	80128c6 <_calloc_r+0x4e>
 8012894:	2a13      	cmp	r2, #19
 8012896:	d806      	bhi.n	80128a6 <_calloc_r+0x2e>
 8012898:	4603      	mov	r3, r0
 801289a:	2000      	movs	r0, #0
 801289c:	6018      	str	r0, [r3, #0]
 801289e:	6058      	str	r0, [r3, #4]
 80128a0:	6098      	str	r0, [r3, #8]
 80128a2:	4620      	mov	r0, r4
 80128a4:	bd10      	pop	{r4, pc}
 80128a6:	2300      	movs	r3, #0
 80128a8:	2a1b      	cmp	r2, #27
 80128aa:	6003      	str	r3, [r0, #0]
 80128ac:	6043      	str	r3, [r0, #4]
 80128ae:	d90f      	bls.n	80128d0 <_calloc_r+0x58>
 80128b0:	2a24      	cmp	r2, #36	; 0x24
 80128b2:	6083      	str	r3, [r0, #8]
 80128b4:	60c3      	str	r3, [r0, #12]
 80128b6:	bf05      	ittet	eq
 80128b8:	6103      	streq	r3, [r0, #16]
 80128ba:	6143      	streq	r3, [r0, #20]
 80128bc:	f100 0310 	addne.w	r3, r0, #16
 80128c0:	f100 0318 	addeq.w	r3, r0, #24
 80128c4:	e7e9      	b.n	801289a <_calloc_r+0x22>
 80128c6:	2100      	movs	r1, #0
 80128c8:	f7fa ffca 	bl	800d860 <memset>
 80128cc:	4620      	mov	r0, r4
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	f100 0308 	add.w	r3, r0, #8
 80128d4:	e7e1      	b.n	801289a <_calloc_r+0x22>
 80128d6:	bf00      	nop

080128d8 <_close_r>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4c07      	ldr	r4, [pc, #28]	; (80128f8 <_close_r+0x20>)
 80128dc:	2300      	movs	r3, #0
 80128de:	4605      	mov	r5, r0
 80128e0:	4608      	mov	r0, r1
 80128e2:	6023      	str	r3, [r4, #0]
 80128e4:	f7f0 f8ca 	bl	8002a7c <_close>
 80128e8:	1c43      	adds	r3, r0, #1
 80128ea:	d000      	beq.n	80128ee <_close_r+0x16>
 80128ec:	bd38      	pop	{r3, r4, r5, pc}
 80128ee:	6821      	ldr	r1, [r4, #0]
 80128f0:	2900      	cmp	r1, #0
 80128f2:	d0fb      	beq.n	80128ec <_close_r+0x14>
 80128f4:	6029      	str	r1, [r5, #0]
 80128f6:	bd38      	pop	{r3, r4, r5, pc}
 80128f8:	20000a18 	.word	0x20000a18

080128fc <_fclose_r>:
 80128fc:	b570      	push	{r4, r5, r6, lr}
 80128fe:	460c      	mov	r4, r1
 8012900:	4605      	mov	r5, r0
 8012902:	2900      	cmp	r1, #0
 8012904:	d034      	beq.n	8012970 <_fclose_r+0x74>
 8012906:	f7fe fbbb 	bl	8011080 <__sfp_lock_acquire>
 801290a:	b115      	cbz	r5, 8012912 <_fclose_r+0x16>
 801290c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801290e:	2b00      	cmp	r3, #0
 8012910:	d031      	beq.n	8012976 <_fclose_r+0x7a>
 8012912:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012916:	b33e      	cbz	r6, 8012968 <_fclose_r+0x6c>
 8012918:	4628      	mov	r0, r5
 801291a:	4621      	mov	r1, r4
 801291c:	f7fe faa8 	bl	8010e70 <_fflush_r>
 8012920:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012922:	4606      	mov	r6, r0
 8012924:	b13a      	cbz	r2, 8012936 <_fclose_r+0x3a>
 8012926:	4628      	mov	r0, r5
 8012928:	69e1      	ldr	r1, [r4, #28]
 801292a:	4790      	blx	r2
 801292c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8012930:	bf28      	it	cs
 8012932:	f04f 36ff 	movcs.w	r6, #4294967295
 8012936:	89a0      	ldrh	r0, [r4, #12]
 8012938:	f000 0180 	and.w	r1, r0, #128	; 0x80
 801293c:	b20b      	sxth	r3, r1
 801293e:	bb13      	cbnz	r3, 8012986 <_fclose_r+0x8a>
 8012940:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012942:	b141      	cbz	r1, 8012956 <_fclose_r+0x5a>
 8012944:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012948:	4291      	cmp	r1, r2
 801294a:	d002      	beq.n	8012952 <_fclose_r+0x56>
 801294c:	4628      	mov	r0, r5
 801294e:	f7fe fbe7 	bl	8011120 <_free_r>
 8012952:	2000      	movs	r0, #0
 8012954:	6320      	str	r0, [r4, #48]	; 0x30
 8012956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012958:	b121      	cbz	r1, 8012964 <_fclose_r+0x68>
 801295a:	4628      	mov	r0, r5
 801295c:	f7fe fbe0 	bl	8011120 <_free_r>
 8012960:	2100      	movs	r1, #0
 8012962:	6461      	str	r1, [r4, #68]	; 0x44
 8012964:	2300      	movs	r3, #0
 8012966:	81a3      	strh	r3, [r4, #12]
 8012968:	f7fe fb8c 	bl	8011084 <__sfp_lock_release>
 801296c:	4630      	mov	r0, r6
 801296e:	bd70      	pop	{r4, r5, r6, pc}
 8012970:	460e      	mov	r6, r1
 8012972:	4630      	mov	r0, r6
 8012974:	bd70      	pop	{r4, r5, r6, pc}
 8012976:	4628      	mov	r0, r5
 8012978:	f7fe fb5c 	bl	8011034 <__sinit>
 801297c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012980:	2e00      	cmp	r6, #0
 8012982:	d1c9      	bne.n	8012918 <_fclose_r+0x1c>
 8012984:	e7f0      	b.n	8012968 <_fclose_r+0x6c>
 8012986:	4628      	mov	r0, r5
 8012988:	6921      	ldr	r1, [r4, #16]
 801298a:	f7fe fbc9 	bl	8011120 <_free_r>
 801298e:	e7d7      	b.n	8012940 <_fclose_r+0x44>

08012990 <fclose>:
 8012990:	f240 4390 	movw	r3, #1168	; 0x490
 8012994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012998:	4601      	mov	r1, r0
 801299a:	6818      	ldr	r0, [r3, #0]
 801299c:	f7ff bfae 	b.w	80128fc <_fclose_r>

080129a0 <_fputwc_r>:
 80129a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129a4:	8993      	ldrh	r3, [r2, #12]
 80129a6:	4614      	mov	r4, r2
 80129a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80129ac:	4680      	mov	r8, r0
 80129ae:	b210      	sxth	r0, r2
 80129b0:	b082      	sub	sp, #8
 80129b2:	460f      	mov	r7, r1
 80129b4:	b930      	cbnz	r0, 80129c4 <_fputwc_r+0x24>
 80129b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80129b8:	f443 5600 	orr.w	r6, r3, #8192	; 0x2000
 80129bc:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 80129c0:	81a6      	strh	r6, [r4, #12]
 80129c2:	6663      	str	r3, [r4, #100]	; 0x64
 80129c4:	f7fe fcd8 	bl	8011378 <__locale_mb_cur_max>
 80129c8:	2801      	cmp	r0, #1
 80129ca:	d079      	beq.n	8012ac0 <_fputwc_r+0x120>
 80129cc:	ae01      	add	r6, sp, #4
 80129ce:	4640      	mov	r0, r8
 80129d0:	4631      	mov	r1, r6
 80129d2:	463a      	mov	r2, r7
 80129d4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80129d8:	f000 fdaa 	bl	8013530 <_wcrtomb_r>
 80129dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80129e0:	4681      	mov	r9, r0
 80129e2:	d053      	beq.n	8012a8c <_fputwc_r+0xec>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d03d      	beq.n	8012a64 <_fputwc_r+0xc4>
 80129e8:	68a1      	ldr	r1, [r4, #8]
 80129ea:	1e4b      	subs	r3, r1, #1
 80129ec:	f109 32ff 	add.w	r2, r9, #4294967295
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	60a3      	str	r3, [r4, #8]
 80129f4:	f002 0a01 	and.w	sl, r2, #1
 80129f8:	f2c0 8085 	blt.w	8012b06 <_fputwc_r+0x166>
 80129fc:	6825      	ldr	r5, [r4, #0]
 80129fe:	7830      	ldrb	r0, [r6, #0]
 8012a00:	7028      	strb	r0, [r5, #0]
 8012a02:	6821      	ldr	r1, [r4, #0]
 8012a04:	1c4a      	adds	r2, r1, #1
 8012a06:	6022      	str	r2, [r4, #0]
 8012a08:	2501      	movs	r5, #1
 8012a0a:	454d      	cmp	r5, r9
 8012a0c:	d22a      	bcs.n	8012a64 <_fputwc_r+0xc4>
 8012a0e:	f1ba 0f00 	cmp.w	sl, #0
 8012a12:	d00d      	beq.n	8012a30 <_fputwc_r+0x90>
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	1e58      	subs	r0, r3, #1
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	60a0      	str	r0, [r4, #8]
 8012a1c:	db24      	blt.n	8012a68 <_fputwc_r+0xc8>
 8012a1e:	6821      	ldr	r1, [r4, #0]
 8012a20:	5d72      	ldrb	r2, [r6, r5]
 8012a22:	700a      	strb	r2, [r1, #0]
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	1958      	adds	r0, r3, r5
 8012a28:	6020      	str	r0, [r4, #0]
 8012a2a:	3501      	adds	r5, #1
 8012a2c:	454d      	cmp	r5, r9
 8012a2e:	d219      	bcs.n	8012a64 <_fputwc_r+0xc4>
 8012a30:	68a1      	ldr	r1, [r4, #8]
 8012a32:	1e4b      	subs	r3, r1, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	60a3      	str	r3, [r4, #8]
 8012a38:	db30      	blt.n	8012a9c <_fputwc_r+0xfc>
 8012a3a:	6820      	ldr	r0, [r4, #0]
 8012a3c:	5d72      	ldrb	r2, [r6, r5]
 8012a3e:	7002      	strb	r2, [r0, #0]
 8012a40:	6821      	ldr	r1, [r4, #0]
 8012a42:	1c4b      	adds	r3, r1, #1
 8012a44:	6023      	str	r3, [r4, #0]
 8012a46:	68a1      	ldr	r1, [r4, #8]
 8012a48:	1e48      	subs	r0, r1, #1
 8012a4a:	3501      	adds	r5, #1
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	60a0      	str	r0, [r4, #8]
 8012a50:	db0a      	blt.n	8012a68 <_fputwc_r+0xc8>
 8012a52:	6820      	ldr	r0, [r4, #0]
 8012a54:	5d72      	ldrb	r2, [r6, r5]
 8012a56:	7002      	strb	r2, [r0, #0]
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	3501      	adds	r5, #1
 8012a5c:	1c59      	adds	r1, r3, #1
 8012a5e:	454d      	cmp	r5, r9
 8012a60:	6021      	str	r1, [r4, #0]
 8012a62:	d3e5      	bcc.n	8012a30 <_fputwc_r+0x90>
 8012a64:	4638      	mov	r0, r7
 8012a66:	e016      	b.n	8012a96 <_fputwc_r+0xf6>
 8012a68:	69a1      	ldr	r1, [r4, #24]
 8012a6a:	4288      	cmp	r0, r1
 8012a6c:	db31      	blt.n	8012ad2 <_fputwc_r+0x132>
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	5d72      	ldrb	r2, [r6, r5]
 8012a72:	701a      	strb	r2, [r3, #0]
 8012a74:	6820      	ldr	r0, [r4, #0]
 8012a76:	7801      	ldrb	r1, [r0, #0]
 8012a78:	290a      	cmp	r1, #10
 8012a7a:	d055      	beq.n	8012b28 <_fputwc_r+0x188>
 8012a7c:	1c42      	adds	r2, r0, #1
 8012a7e:	2000      	movs	r0, #0
 8012a80:	6022      	str	r2, [r4, #0]
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d0d1      	beq.n	8012a2a <_fputwc_r+0x8a>
 8012a86:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8a:	e004      	b.n	8012a96 <_fputwc_r+0xf6>
 8012a8c:	89a2      	ldrh	r2, [r4, #12]
 8012a8e:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 8012a92:	81a0      	strh	r0, [r4, #12]
 8012a94:	4648      	mov	r0, r9
 8012a96:	b002      	add	sp, #8
 8012a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a9c:	69a0      	ldr	r0, [r4, #24]
 8012a9e:	4283      	cmp	r3, r0
 8012aa0:	db24      	blt.n	8012aec <_fputwc_r+0x14c>
 8012aa2:	6821      	ldr	r1, [r4, #0]
 8012aa4:	5d72      	ldrb	r2, [r6, r5]
 8012aa6:	700a      	strb	r2, [r1, #0]
 8012aa8:	6823      	ldr	r3, [r4, #0]
 8012aaa:	7819      	ldrb	r1, [r3, #0]
 8012aac:	290a      	cmp	r1, #10
 8012aae:	d03d      	beq.n	8012b2c <_fputwc_r+0x18c>
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	6023      	str	r3, [r4, #0]
 8012ab6:	2a00      	cmp	r2, #0
 8012ab8:	d0c5      	beq.n	8012a46 <_fputwc_r+0xa6>
 8012aba:	f04f 30ff 	mov.w	r0, #4294967295
 8012abe:	e7ea      	b.n	8012a96 <_fputwc_r+0xf6>
 8012ac0:	2f00      	cmp	r7, #0
 8012ac2:	d083      	beq.n	80129cc <_fputwc_r+0x2c>
 8012ac4:	2fff      	cmp	r7, #255	; 0xff
 8012ac6:	d881      	bhi.n	80129cc <_fputwc_r+0x2c>
 8012ac8:	ae02      	add	r6, sp, #8
 8012aca:	4681      	mov	r9, r0
 8012acc:	f806 7d04 	strb.w	r7, [r6, #-4]!
 8012ad0:	e78a      	b.n	80129e8 <_fputwc_r+0x48>
 8012ad2:	5d71      	ldrb	r1, [r6, r5]
 8012ad4:	4640      	mov	r0, r8
 8012ad6:	4622      	mov	r2, r4
 8012ad8:	f000 fccc 	bl	8013474 <__swbuf_r>
 8012adc:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 8012ae0:	424b      	negs	r3, r1
 8012ae2:	eb53 0001 	adcs.w	r0, r3, r1
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d09f      	beq.n	8012a2a <_fputwc_r+0x8a>
 8012aea:	e7cc      	b.n	8012a86 <_fputwc_r+0xe6>
 8012aec:	5d71      	ldrb	r1, [r6, r5]
 8012aee:	4640      	mov	r0, r8
 8012af0:	4622      	mov	r2, r4
 8012af2:	f000 fcbf 	bl	8013474 <__swbuf_r>
 8012af6:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 8012afa:	4248      	negs	r0, r1
 8012afc:	eb50 0201 	adcs.w	r2, r0, r1
 8012b00:	2a00      	cmp	r2, #0
 8012b02:	d0a0      	beq.n	8012a46 <_fputwc_r+0xa6>
 8012b04:	e7d9      	b.n	8012aba <_fputwc_r+0x11a>
 8012b06:	69a0      	ldr	r0, [r4, #24]
 8012b08:	4283      	cmp	r3, r0
 8012b0a:	db11      	blt.n	8012b30 <_fputwc_r+0x190>
 8012b0c:	7831      	ldrb	r1, [r6, #0]
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	7019      	strb	r1, [r3, #0]
 8012b12:	6822      	ldr	r2, [r4, #0]
 8012b14:	7811      	ldrb	r1, [r2, #0]
 8012b16:	290a      	cmp	r1, #10
 8012b18:	d018      	beq.n	8012b4c <_fputwc_r+0x1ac>
 8012b1a:	1c51      	adds	r1, r2, #1
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	6021      	str	r1, [r4, #0]
 8012b20:	2a00      	cmp	r2, #0
 8012b22:	f43f af71 	beq.w	8012a08 <_fputwc_r+0x68>
 8012b26:	e7ae      	b.n	8012a86 <_fputwc_r+0xe6>
 8012b28:	4640      	mov	r0, r8
 8012b2a:	e7d4      	b.n	8012ad6 <_fputwc_r+0x136>
 8012b2c:	4640      	mov	r0, r8
 8012b2e:	e7df      	b.n	8012af0 <_fputwc_r+0x150>
 8012b30:	7831      	ldrb	r1, [r6, #0]
 8012b32:	4640      	mov	r0, r8
 8012b34:	4622      	mov	r2, r4
 8012b36:	f000 fc9d 	bl	8013474 <__swbuf_r>
 8012b3a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 8012b3e:	4258      	negs	r0, r3
 8012b40:	eb50 0203 	adcs.w	r2, r0, r3
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	f43f af5f 	beq.w	8012a08 <_fputwc_r+0x68>
 8012b4a:	e79c      	b.n	8012a86 <_fputwc_r+0xe6>
 8012b4c:	4640      	mov	r0, r8
 8012b4e:	e7f1      	b.n	8012b34 <_fputwc_r+0x194>

08012b50 <_fstat_r>:
 8012b50:	b538      	push	{r3, r4, r5, lr}
 8012b52:	4c08      	ldr	r4, [pc, #32]	; (8012b74 <_fstat_r+0x24>)
 8012b54:	2300      	movs	r3, #0
 8012b56:	4605      	mov	r5, r0
 8012b58:	4608      	mov	r0, r1
 8012b5a:	4611      	mov	r1, r2
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	f7ef ffbf 	bl	8002ae0 <_fstat>
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	d000      	beq.n	8012b68 <_fstat_r+0x18>
 8012b66:	bd38      	pop	{r3, r4, r5, pc}
 8012b68:	6821      	ldr	r1, [r4, #0]
 8012b6a:	2900      	cmp	r1, #0
 8012b6c:	d0fb      	beq.n	8012b66 <_fstat_r+0x16>
 8012b6e:	6029      	str	r1, [r5, #0]
 8012b70:	bd38      	pop	{r3, r4, r5, pc}
 8012b72:	bf00      	nop
 8012b74:	20000a18 	.word	0x20000a18

08012b78 <__sfvwrite_r>:
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	6893      	ldr	r3, [r2, #8]
 8012b7e:	b085      	sub	sp, #20
 8012b80:	4690      	mov	r8, r2
 8012b82:	4681      	mov	r9, r0
 8012b84:	460c      	mov	r4, r1
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d02a      	beq.n	8012be0 <__sfvwrite_r+0x68>
 8012b8a:	898b      	ldrh	r3, [r1, #12]
 8012b8c:	f003 0208 	and.w	r2, r3, #8
 8012b90:	b210      	sxth	r0, r2
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d028      	beq.n	8012be8 <__sfvwrite_r+0x70>
 8012b96:	6909      	ldr	r1, [r1, #16]
 8012b98:	2900      	cmp	r1, #0
 8012b9a:	d025      	beq.n	8012be8 <__sfvwrite_r+0x70>
 8012b9c:	f003 0502 	and.w	r5, r3, #2
 8012ba0:	b22e      	sxth	r6, r5
 8012ba2:	f8d8 5000 	ldr.w	r5, [r8]
 8012ba6:	2e00      	cmp	r6, #0
 8012ba8:	d033      	beq.n	8012c12 <__sfvwrite_r+0x9a>
 8012baa:	f04f 0a00 	mov.w	sl, #0
 8012bae:	4657      	mov	r7, sl
 8012bb0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8012bb4:	bf34      	ite	cc
 8012bb6:	463b      	movcc	r3, r7
 8012bb8:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8012bbc:	4652      	mov	r2, sl
 8012bbe:	4648      	mov	r0, r9
 8012bc0:	2f00      	cmp	r7, #0
 8012bc2:	d021      	beq.n	8012c08 <__sfvwrite_r+0x90>
 8012bc4:	69e1      	ldr	r1, [r4, #28]
 8012bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012bc8:	47b0      	blx	r6
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	dd6a      	ble.n	8012ca4 <__sfvwrite_r+0x12c>
 8012bce:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012bd2:	1a13      	subs	r3, r2, r0
 8012bd4:	4482      	add	sl, r0
 8012bd6:	1a3f      	subs	r7, r7, r0
 8012bd8:	f8c8 3008 	str.w	r3, [r8, #8]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d1e7      	bne.n	8012bb0 <__sfvwrite_r+0x38>
 8012be0:	2000      	movs	r0, #0
 8012be2:	b005      	add	sp, #20
 8012be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be8:	4648      	mov	r0, r9
 8012bea:	4621      	mov	r1, r4
 8012bec:	f7fc fe26 	bl	800f83c <__swsetup_r>
 8012bf0:	89a3      	ldrh	r3, [r4, #12]
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d0d2      	beq.n	8012b9c <__sfvwrite_r+0x24>
 8012bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bfa:	2309      	movs	r3, #9
 8012bfc:	81a2      	strh	r2, [r4, #12]
 8012bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8012c02:	f8c9 3000 	str.w	r3, [r9]
 8012c06:	e7ec      	b.n	8012be2 <__sfvwrite_r+0x6a>
 8012c08:	f8d5 a000 	ldr.w	sl, [r5]
 8012c0c:	686f      	ldr	r7, [r5, #4]
 8012c0e:	3508      	adds	r5, #8
 8012c10:	e7ce      	b.n	8012bb0 <__sfvwrite_r+0x38>
 8012c12:	f013 0a01 	ands.w	sl, r3, #1
 8012c16:	d14c      	bne.n	8012cb2 <__sfvwrite_r+0x13a>
 8012c18:	4656      	mov	r6, sl
 8012c1a:	2e00      	cmp	r6, #0
 8012c1c:	d030      	beq.n	8012c80 <__sfvwrite_r+0x108>
 8012c1e:	f403 7700 	and.w	r7, r3, #512	; 0x200
 8012c22:	b238      	sxth	r0, r7
 8012c24:	4619      	mov	r1, r3
 8012c26:	68a7      	ldr	r7, [r4, #8]
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d07f      	beq.n	8012d2c <__sfvwrite_r+0x1b4>
 8012c2c:	42be      	cmp	r6, r7
 8012c2e:	46be      	mov	lr, r7
 8012c30:	f0c0 80ac 	bcc.w	8012d8c <__sfvwrite_r+0x214>
 8012c34:	f401 6090 	and.w	r0, r1, #1152	; 0x480
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	f040 80c8 	bne.w	8012dce <__sfvwrite_r+0x256>
 8012c3e:	6820      	ldr	r0, [r4, #0]
 8012c40:	9703      	str	r7, [sp, #12]
 8012c42:	46b3      	mov	fp, r6
 8012c44:	4637      	mov	r7, r6
 8012c46:	4651      	mov	r1, sl
 8012c48:	4672      	mov	r2, lr
 8012c4a:	f8cd e004 	str.w	lr, [sp, #4]
 8012c4e:	f000 f943 	bl	8012ed8 <memmove>
 8012c52:	68a0      	ldr	r0, [r4, #8]
 8012c54:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012c58:	6822      	ldr	r2, [r4, #0]
 8012c5a:	9903      	ldr	r1, [sp, #12]
 8012c5c:	1a43      	subs	r3, r0, r1
 8012c5e:	eb02 000c 	add.w	r0, r2, ip
 8012c62:	60a3      	str	r3, [r4, #8]
 8012c64:	6020      	str	r0, [r4, #0]
 8012c66:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012c6a:	1bd7      	subs	r7, r2, r7
 8012c6c:	44da      	add	sl, fp
 8012c6e:	ebcb 0606 	rsb	r6, fp, r6
 8012c72:	f8c8 7008 	str.w	r7, [r8, #8]
 8012c76:	2f00      	cmp	r7, #0
 8012c78:	d0b2      	beq.n	8012be0 <__sfvwrite_r+0x68>
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	2e00      	cmp	r6, #0
 8012c7e:	d1ce      	bne.n	8012c1e <__sfvwrite_r+0xa6>
 8012c80:	f8d5 a000 	ldr.w	sl, [r5]
 8012c84:	686e      	ldr	r6, [r5, #4]
 8012c86:	3508      	adds	r5, #8
 8012c88:	e7c7      	b.n	8012c1a <__sfvwrite_r+0xa2>
 8012c8a:	f000 fa05 	bl	8013098 <_realloc_r>
 8012c8e:	4601      	mov	r1, r0
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f040 80c7 	bne.w	8012e24 <__sfvwrite_r+0x2ac>
 8012c96:	4648      	mov	r0, r9
 8012c98:	6921      	ldr	r1, [r4, #16]
 8012c9a:	f7fe fa41 	bl	8011120 <_free_r>
 8012c9e:	210c      	movs	r1, #12
 8012ca0:	f8c9 1000 	str.w	r1, [r9]
 8012ca4:	89a0      	ldrh	r0, [r4, #12]
 8012ca6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8012caa:	81a1      	strh	r1, [r4, #12]
 8012cac:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb0:	e797      	b.n	8012be2 <__sfvwrite_r+0x6a>
 8012cb2:	46b2      	mov	sl, r6
 8012cb4:	46b4      	mov	ip, r6
 8012cb6:	46b3      	mov	fp, r6
 8012cb8:	4637      	mov	r7, r6
 8012cba:	2f00      	cmp	r7, #0
 8012cbc:	d02f      	beq.n	8012d1e <__sfvwrite_r+0x1a6>
 8012cbe:	f1bc 0f00 	cmp.w	ip, #0
 8012cc2:	d076      	beq.n	8012db2 <__sfvwrite_r+0x23a>
 8012cc4:	6820      	ldr	r0, [r4, #0]
 8012cc6:	6922      	ldr	r2, [r4, #16]
 8012cc8:	68a1      	ldr	r1, [r4, #8]
 8012cca:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8012cce:	45ba      	cmp	sl, r7
 8012cd0:	bf34      	ite	cc
 8012cd2:	4653      	movcc	r3, sl
 8012cd4:	463b      	movcs	r3, r7
 8012cd6:	4290      	cmp	r0, r2
 8012cd8:	d904      	bls.n	8012ce4 <__sfvwrite_r+0x16c>
 8012cda:	eb01 060e 	add.w	r6, r1, lr
 8012cde:	42b3      	cmp	r3, r6
 8012ce0:	f300 80ad 	bgt.w	8012e3e <__sfvwrite_r+0x2c6>
 8012ce4:	4573      	cmp	r3, lr
 8012ce6:	db35      	blt.n	8012d54 <__sfvwrite_r+0x1dc>
 8012ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012cea:	69e1      	ldr	r1, [r4, #28]
 8012cec:	f8cd c004 	str.w	ip, [sp, #4]
 8012cf0:	4648      	mov	r0, r9
 8012cf2:	465a      	mov	r2, fp
 8012cf4:	4673      	mov	r3, lr
 8012cf6:	47b0      	blx	r6
 8012cf8:	1e06      	subs	r6, r0, #0
 8012cfa:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012cfe:	ddd1      	ble.n	8012ca4 <__sfvwrite_r+0x12c>
 8012d00:	ebba 0a06 	subs.w	sl, sl, r6
 8012d04:	d03a      	beq.n	8012d7c <__sfvwrite_r+0x204>
 8012d06:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012d0a:	1b8a      	subs	r2, r1, r6
 8012d0c:	44b3      	add	fp, r6
 8012d0e:	1bbf      	subs	r7, r7, r6
 8012d10:	f8c8 2008 	str.w	r2, [r8, #8]
 8012d14:	2a00      	cmp	r2, #0
 8012d16:	f43f af63 	beq.w	8012be0 <__sfvwrite_r+0x68>
 8012d1a:	2f00      	cmp	r7, #0
 8012d1c:	d1cf      	bne.n	8012cbe <__sfvwrite_r+0x146>
 8012d1e:	f8d5 b000 	ldr.w	fp, [r5]
 8012d22:	686f      	ldr	r7, [r5, #4]
 8012d24:	f04f 0c00 	mov.w	ip, #0
 8012d28:	3508      	adds	r5, #8
 8012d2a:	e7c6      	b.n	8012cba <__sfvwrite_r+0x142>
 8012d2c:	6820      	ldr	r0, [r4, #0]
 8012d2e:	6923      	ldr	r3, [r4, #16]
 8012d30:	4298      	cmp	r0, r3
 8012d32:	d903      	bls.n	8012d3c <__sfvwrite_r+0x1c4>
 8012d34:	42be      	cmp	r6, r7
 8012d36:	46bb      	mov	fp, r7
 8012d38:	f200 8094 	bhi.w	8012e64 <__sfvwrite_r+0x2ec>
 8012d3c:	6963      	ldr	r3, [r4, #20]
 8012d3e:	429e      	cmp	r6, r3
 8012d40:	d32a      	bcc.n	8012d98 <__sfvwrite_r+0x220>
 8012d42:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012d44:	69e1      	ldr	r1, [r4, #28]
 8012d46:	4648      	mov	r0, r9
 8012d48:	4652      	mov	r2, sl
 8012d4a:	47b8      	blx	r7
 8012d4c:	1e07      	subs	r7, r0, #0
 8012d4e:	dda9      	ble.n	8012ca4 <__sfvwrite_r+0x12c>
 8012d50:	46bb      	mov	fp, r7
 8012d52:	e788      	b.n	8012c66 <__sfvwrite_r+0xee>
 8012d54:	461a      	mov	r2, r3
 8012d56:	4659      	mov	r1, fp
 8012d58:	9302      	str	r3, [sp, #8]
 8012d5a:	f8cd c004 	str.w	ip, [sp, #4]
 8012d5e:	f000 f8bb 	bl	8012ed8 <memmove>
 8012d62:	9b02      	ldr	r3, [sp, #8]
 8012d64:	6826      	ldr	r6, [r4, #0]
 8012d66:	68a0      	ldr	r0, [r4, #8]
 8012d68:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012d6c:	18f2      	adds	r2, r6, r3
 8012d6e:	461e      	mov	r6, r3
 8012d70:	1ac1      	subs	r1, r0, r3
 8012d72:	ebba 0a06 	subs.w	sl, sl, r6
 8012d76:	60a1      	str	r1, [r4, #8]
 8012d78:	6022      	str	r2, [r4, #0]
 8012d7a:	d1c4      	bne.n	8012d06 <__sfvwrite_r+0x18e>
 8012d7c:	4648      	mov	r0, r9
 8012d7e:	4621      	mov	r1, r4
 8012d80:	f7fe f876 	bl	8010e70 <_fflush_r>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	d18d      	bne.n	8012ca4 <__sfvwrite_r+0x12c>
 8012d88:	46d4      	mov	ip, sl
 8012d8a:	e7bc      	b.n	8012d06 <__sfvwrite_r+0x18e>
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	9603      	str	r6, [sp, #12]
 8012d90:	46b3      	mov	fp, r6
 8012d92:	4637      	mov	r7, r6
 8012d94:	46b6      	mov	lr, r6
 8012d96:	e756      	b.n	8012c46 <__sfvwrite_r+0xce>
 8012d98:	4651      	mov	r1, sl
 8012d9a:	4632      	mov	r2, r6
 8012d9c:	f000 f89c 	bl	8012ed8 <memmove>
 8012da0:	6827      	ldr	r7, [r4, #0]
 8012da2:	68a2      	ldr	r2, [r4, #8]
 8012da4:	19b9      	adds	r1, r7, r6
 8012da6:	1b90      	subs	r0, r2, r6
 8012da8:	4637      	mov	r7, r6
 8012daa:	60a0      	str	r0, [r4, #8]
 8012dac:	6021      	str	r1, [r4, #0]
 8012dae:	46b3      	mov	fp, r6
 8012db0:	e759      	b.n	8012c66 <__sfvwrite_r+0xee>
 8012db2:	4658      	mov	r0, fp
 8012db4:	210a      	movs	r1, #10
 8012db6:	463a      	mov	r2, r7
 8012db8:	f7fe fe0c 	bl	80119d4 <memchr>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d060      	beq.n	8012e82 <__sfvwrite_r+0x30a>
 8012dc0:	f100 0a01 	add.w	sl, r0, #1
 8012dc4:	ebcb 0a0a 	rsb	sl, fp, sl
 8012dc8:	f04f 0c01 	mov.w	ip, #1
 8012dcc:	e77a      	b.n	8012cc4 <__sfvwrite_r+0x14c>
 8012dce:	6822      	ldr	r2, [r4, #0]
 8012dd0:	6967      	ldr	r7, [r4, #20]
 8012dd2:	6921      	ldr	r1, [r4, #16]
 8012dd4:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8012dd8:	ebc1 0b02 	rsb	fp, r1, r2
 8012ddc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8012de0:	f10b 0001 	add.w	r0, fp, #1
 8012de4:	1057      	asrs	r7, r2, #1
 8012de6:	1980      	adds	r0, r0, r6
 8012de8:	4287      	cmp	r7, r0
 8012dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012dee:	463a      	mov	r2, r7
 8012df0:	b21b      	sxth	r3, r3
 8012df2:	bf3c      	itt	cc
 8012df4:	4607      	movcc	r7, r0
 8012df6:	463a      	movcc	r2, r7
 8012df8:	4648      	mov	r0, r9
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	f43f af45 	beq.w	8012c8a <__sfvwrite_r+0x112>
 8012e00:	4611      	mov	r1, r2
 8012e02:	f7fe fb39 	bl	8011478 <_malloc_r>
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f43f af49 	beq.w	8012c9e <__sfvwrite_r+0x126>
 8012e0c:	6921      	ldr	r1, [r4, #16]
 8012e0e:	9002      	str	r0, [sp, #8]
 8012e10:	465a      	mov	r2, fp
 8012e12:	f7fe fe7f 	bl	8011b14 <memcpy>
 8012e16:	89a2      	ldrh	r2, [r4, #12]
 8012e18:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 8012e1c:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8012e20:	81a1      	strh	r1, [r4, #12]
 8012e22:	9902      	ldr	r1, [sp, #8]
 8012e24:	ebcb 0307 	rsb	r3, fp, r7
 8012e28:	eb01 000b 	add.w	r0, r1, fp
 8012e2c:	6167      	str	r7, [r4, #20]
 8012e2e:	6121      	str	r1, [r4, #16]
 8012e30:	6020      	str	r0, [r4, #0]
 8012e32:	9603      	str	r6, [sp, #12]
 8012e34:	60a3      	str	r3, [r4, #8]
 8012e36:	46b3      	mov	fp, r6
 8012e38:	4637      	mov	r7, r6
 8012e3a:	46b6      	mov	lr, r6
 8012e3c:	e703      	b.n	8012c46 <__sfvwrite_r+0xce>
 8012e3e:	4659      	mov	r1, fp
 8012e40:	4632      	mov	r2, r6
 8012e42:	f8cd c004 	str.w	ip, [sp, #4]
 8012e46:	f000 f847 	bl	8012ed8 <memmove>
 8012e4a:	6820      	ldr	r0, [r4, #0]
 8012e4c:	1983      	adds	r3, r0, r6
 8012e4e:	6023      	str	r3, [r4, #0]
 8012e50:	4648      	mov	r0, r9
 8012e52:	4621      	mov	r1, r4
 8012e54:	f7fe f80c 	bl	8010e70 <_fflush_r>
 8012e58:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f43f af4f 	beq.w	8012d00 <__sfvwrite_r+0x188>
 8012e62:	e71f      	b.n	8012ca4 <__sfvwrite_r+0x12c>
 8012e64:	4651      	mov	r1, sl
 8012e66:	463a      	mov	r2, r7
 8012e68:	f000 f836 	bl	8012ed8 <memmove>
 8012e6c:	6823      	ldr	r3, [r4, #0]
 8012e6e:	19da      	adds	r2, r3, r7
 8012e70:	6022      	str	r2, [r4, #0]
 8012e72:	4648      	mov	r0, r9
 8012e74:	4621      	mov	r1, r4
 8012e76:	f7fd fffb 	bl	8010e70 <_fflush_r>
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	f43f aef3 	beq.w	8012c66 <__sfvwrite_r+0xee>
 8012e80:	e710      	b.n	8012ca4 <__sfvwrite_r+0x12c>
 8012e82:	f107 0a01 	add.w	sl, r7, #1
 8012e86:	f04f 0c01 	mov.w	ip, #1
 8012e8a:	e71b      	b.n	8012cc4 <__sfvwrite_r+0x14c>

08012e8c <_isatty_r>:
 8012e8c:	b538      	push	{r3, r4, r5, lr}
 8012e8e:	4c07      	ldr	r4, [pc, #28]	; (8012eac <_isatty_r+0x20>)
 8012e90:	2300      	movs	r3, #0
 8012e92:	4605      	mov	r5, r0
 8012e94:	4608      	mov	r0, r1
 8012e96:	6023      	str	r3, [r4, #0]
 8012e98:	f7ef fe3c 	bl	8002b14 <_isatty>
 8012e9c:	1c43      	adds	r3, r0, #1
 8012e9e:	d000      	beq.n	8012ea2 <_isatty_r+0x16>
 8012ea0:	bd38      	pop	{r3, r4, r5, pc}
 8012ea2:	6821      	ldr	r1, [r4, #0]
 8012ea4:	2900      	cmp	r1, #0
 8012ea6:	d0fb      	beq.n	8012ea0 <_isatty_r+0x14>
 8012ea8:	6029      	str	r1, [r5, #0]
 8012eaa:	bd38      	pop	{r3, r4, r5, pc}
 8012eac:	20000a18 	.word	0x20000a18

08012eb0 <_lseek_r>:
 8012eb0:	b538      	push	{r3, r4, r5, lr}
 8012eb2:	4c08      	ldr	r4, [pc, #32]	; (8012ed4 <_lseek_r+0x24>)
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	4608      	mov	r0, r1
 8012eb8:	4611      	mov	r1, r2
 8012eba:	461a      	mov	r2, r3
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	6023      	str	r3, [r4, #0]
 8012ec0:	f7ef fe6c 	bl	8002b9c <_lseek>
 8012ec4:	1c43      	adds	r3, r0, #1
 8012ec6:	d000      	beq.n	8012eca <_lseek_r+0x1a>
 8012ec8:	bd38      	pop	{r3, r4, r5, pc}
 8012eca:	6821      	ldr	r1, [r4, #0]
 8012ecc:	2900      	cmp	r1, #0
 8012ece:	d0fb      	beq.n	8012ec8 <_lseek_r+0x18>
 8012ed0:	6029      	str	r1, [r5, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	20000a18 	.word	0x20000a18

08012ed8 <memmove>:
 8012ed8:	4288      	cmp	r0, r1
 8012eda:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8012ede:	d926      	bls.n	8012f2e <memmove+0x56>
 8012ee0:	188c      	adds	r4, r1, r2
 8012ee2:	42a0      	cmp	r0, r4
 8012ee4:	d223      	bcs.n	8012f2e <memmove+0x56>
 8012ee6:	1883      	adds	r3, r0, r2
 8012ee8:	1e55      	subs	r5, r2, #1
 8012eea:	b1ea      	cbz	r2, 8012f28 <memmove+0x50>
 8012eec:	4622      	mov	r2, r4
 8012eee:	f005 0401 	and.w	r4, r5, #1
 8012ef2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012ef6:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8012efa:	1e69      	subs	r1, r5, #1
 8012efc:	b1a5      	cbz	r5, 8012f28 <memmove+0x50>
 8012efe:	b13c      	cbz	r4, 8012f10 <memmove+0x38>
 8012f00:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012f04:	3901      	subs	r1, #1
 8012f06:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012f0a:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012f0e:	d00b      	beq.n	8012f28 <memmove+0x50>
 8012f10:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012f14:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012f18:	3902      	subs	r1, #2
 8012f1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012f1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012f22:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012f26:	d1f3      	bne.n	8012f10 <memmove+0x38>
 8012f28:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8012f2c:	4770      	bx	lr
 8012f2e:	2a0f      	cmp	r2, #15
 8012f30:	f240 8096 	bls.w	8013060 <memmove+0x188>
 8012f34:	ea41 0300 	orr.w	r3, r1, r0
 8012f38:	079b      	lsls	r3, r3, #30
 8012f3a:	f040 8093 	bne.w	8013064 <memmove+0x18c>
 8012f3e:	680c      	ldr	r4, [r1, #0]
 8012f40:	6004      	str	r4, [r0, #0]
 8012f42:	684d      	ldr	r5, [r1, #4]
 8012f44:	6045      	str	r5, [r0, #4]
 8012f46:	688e      	ldr	r6, [r1, #8]
 8012f48:	f1a2 0310 	sub.w	r3, r2, #16
 8012f4c:	6086      	str	r6, [r0, #8]
 8012f4e:	68cc      	ldr	r4, [r1, #12]
 8012f50:	461d      	mov	r5, r3
 8012f52:	2d0f      	cmp	r5, #15
 8012f54:	60c4      	str	r4, [r0, #12]
 8012f56:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8012f5a:	f101 0410 	add.w	r4, r1, #16
 8012f5e:	f100 0310 	add.w	r3, r0, #16
 8012f62:	d922      	bls.n	8012faa <memmove+0xd2>
 8012f64:	b166      	cbz	r6, 8012f80 <memmove+0xa8>
 8012f66:	6826      	ldr	r6, [r4, #0]
 8012f68:	601e      	str	r6, [r3, #0]
 8012f6a:	6866      	ldr	r6, [r4, #4]
 8012f6c:	605e      	str	r6, [r3, #4]
 8012f6e:	68a6      	ldr	r6, [r4, #8]
 8012f70:	609e      	str	r6, [r3, #8]
 8012f72:	68e6      	ldr	r6, [r4, #12]
 8012f74:	3d10      	subs	r5, #16
 8012f76:	60de      	str	r6, [r3, #12]
 8012f78:	3410      	adds	r4, #16
 8012f7a:	3310      	adds	r3, #16
 8012f7c:	2d0f      	cmp	r5, #15
 8012f7e:	d914      	bls.n	8012faa <memmove+0xd2>
 8012f80:	6826      	ldr	r6, [r4, #0]
 8012f82:	601e      	str	r6, [r3, #0]
 8012f84:	6866      	ldr	r6, [r4, #4]
 8012f86:	605e      	str	r6, [r3, #4]
 8012f88:	68a6      	ldr	r6, [r4, #8]
 8012f8a:	609e      	str	r6, [r3, #8]
 8012f8c:	68e6      	ldr	r6, [r4, #12]
 8012f8e:	60de      	str	r6, [r3, #12]
 8012f90:	6926      	ldr	r6, [r4, #16]
 8012f92:	611e      	str	r6, [r3, #16]
 8012f94:	6966      	ldr	r6, [r4, #20]
 8012f96:	615e      	str	r6, [r3, #20]
 8012f98:	69a6      	ldr	r6, [r4, #24]
 8012f9a:	619e      	str	r6, [r3, #24]
 8012f9c:	69e6      	ldr	r6, [r4, #28]
 8012f9e:	3d20      	subs	r5, #32
 8012fa0:	61de      	str	r6, [r3, #28]
 8012fa2:	3420      	adds	r4, #32
 8012fa4:	3320      	adds	r3, #32
 8012fa6:	2d0f      	cmp	r5, #15
 8012fa8:	d8ea      	bhi.n	8012f80 <memmove+0xa8>
 8012faa:	f1a2 0310 	sub.w	r3, r2, #16
 8012fae:	f023 040f 	bic.w	r4, r3, #15
 8012fb2:	f002 030f 	and.w	r3, r2, #15
 8012fb6:	3410      	adds	r4, #16
 8012fb8:	2b03      	cmp	r3, #3
 8012fba:	eb00 0804 	add.w	r8, r0, r4
 8012fbe:	4421      	add	r1, r4
 8012fc0:	d952      	bls.n	8013068 <memmove+0x190>
 8012fc2:	f1a3 0904 	sub.w	r9, r3, #4
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8012fcc:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 8012fd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8012fd4:	ebc1 050c 	rsb	r5, r1, ip
 8012fd8:	4644      	mov	r4, r8
 8012fda:	f10c 0c04 	add.w	ip, ip, #4
 8012fde:	4563      	cmp	r3, ip
 8012fe0:	f844 6b04 	str.w	r6, [r4], #4
 8012fe4:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8012fe8:	d012      	beq.n	8013010 <memmove+0x138>
 8012fea:	b12d      	cbz	r5, 8012ff8 <memmove+0x120>
 8012fec:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ff0:	4563      	cmp	r3, ip
 8012ff2:	f844 5b04 	str.w	r5, [r4], #4
 8012ff6:	d00b      	beq.n	8013010 <memmove+0x138>
 8012ff8:	461e      	mov	r6, r3
 8012ffa:	4625      	mov	r5, r4
 8012ffc:	f856 7b04 	ldr.w	r7, [r6], #4
 8013000:	f845 7b04 	str.w	r7, [r5], #4
 8013004:	685f      	ldr	r7, [r3, #4]
 8013006:	1d33      	adds	r3, r6, #4
 8013008:	6067      	str	r7, [r4, #4]
 801300a:	1d2c      	adds	r4, r5, #4
 801300c:	4563      	cmp	r3, ip
 801300e:	d1f3      	bne.n	8012ff8 <memmove+0x120>
 8013010:	f109 0301 	add.w	r3, r9, #1
 8013014:	009c      	lsls	r4, r3, #2
 8013016:	1909      	adds	r1, r1, r4
 8013018:	f002 0203 	and.w	r2, r2, #3
 801301c:	4444      	add	r4, r8
 801301e:	2a00      	cmp	r2, #0
 8013020:	d082      	beq.n	8012f28 <memmove+0x50>
 8013022:	4623      	mov	r3, r4
 8013024:	780d      	ldrb	r5, [r1, #0]
 8013026:	f803 5b01 	strb.w	r5, [r3], #1
 801302a:	18a2      	adds	r2, r4, r2
 801302c:	43e4      	mvns	r4, r4
 801302e:	1914      	adds	r4, r2, r4
 8013030:	4293      	cmp	r3, r2
 8013032:	f004 0401 	and.w	r4, r4, #1
 8013036:	f43f af77 	beq.w	8012f28 <memmove+0x50>
 801303a:	b134      	cbz	r4, 801304a <memmove+0x172>
 801303c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013040:	f803 4b01 	strb.w	r4, [r3], #1
 8013044:	4293      	cmp	r3, r2
 8013046:	f43f af6f 	beq.w	8012f28 <memmove+0x50>
 801304a:	784d      	ldrb	r5, [r1, #1]
 801304c:	461c      	mov	r4, r3
 801304e:	f804 5b01 	strb.w	r5, [r4], #1
 8013052:	788d      	ldrb	r5, [r1, #2]
 8013054:	705d      	strb	r5, [r3, #1]
 8013056:	1c63      	adds	r3, r4, #1
 8013058:	3102      	adds	r1, #2
 801305a:	4293      	cmp	r3, r2
 801305c:	d1f5      	bne.n	801304a <memmove+0x172>
 801305e:	e763      	b.n	8012f28 <memmove+0x50>
 8013060:	4604      	mov	r4, r0
 8013062:	e7dc      	b.n	801301e <memmove+0x146>
 8013064:	4604      	mov	r4, r0
 8013066:	e7dc      	b.n	8013022 <memmove+0x14a>
 8013068:	4644      	mov	r4, r8
 801306a:	461a      	mov	r2, r3
 801306c:	e7d7      	b.n	801301e <memmove+0x146>
 801306e:	bf00      	nop

08013070 <_read_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4c08      	ldr	r4, [pc, #32]	; (8013094 <_read_r+0x24>)
 8013074:	4605      	mov	r5, r0
 8013076:	4608      	mov	r0, r1
 8013078:	4611      	mov	r1, r2
 801307a:	461a      	mov	r2, r3
 801307c:	2300      	movs	r3, #0
 801307e:	6023      	str	r3, [r4, #0]
 8013080:	f7ef fde8 	bl	8002c54 <_read>
 8013084:	1c43      	adds	r3, r0, #1
 8013086:	d000      	beq.n	801308a <_read_r+0x1a>
 8013088:	bd38      	pop	{r3, r4, r5, pc}
 801308a:	6821      	ldr	r1, [r4, #0]
 801308c:	2900      	cmp	r1, #0
 801308e:	d0fb      	beq.n	8013088 <_read_r+0x18>
 8013090:	6029      	str	r1, [r5, #0]
 8013092:	bd38      	pop	{r3, r4, r5, pc}
 8013094:	20000a18 	.word	0x20000a18

08013098 <_realloc_r>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	460c      	mov	r4, r1
 801309e:	b083      	sub	sp, #12
 80130a0:	4681      	mov	r9, r0
 80130a2:	4617      	mov	r7, r2
 80130a4:	2900      	cmp	r1, #0
 80130a6:	f000 80c5 	beq.w	8013234 <_realloc_r+0x19c>
 80130aa:	f7fe fdd5 	bl	8011c58 <__malloc_lock>
 80130ae:	f107 050b 	add.w	r5, r7, #11
 80130b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80130b6:	2d16      	cmp	r5, #22
 80130b8:	f1a4 0a08 	sub.w	sl, r4, #8
 80130bc:	f023 0603 	bic.w	r6, r3, #3
 80130c0:	d84f      	bhi.n	8013162 <_realloc_r+0xca>
 80130c2:	2110      	movs	r1, #16
 80130c4:	460d      	mov	r5, r1
 80130c6:	42af      	cmp	r7, r5
 80130c8:	d850      	bhi.n	801316c <_realloc_r+0xd4>
 80130ca:	428e      	cmp	r6, r1
 80130cc:	da53      	bge.n	8013176 <_realloc_r+0xde>
 80130ce:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8013470 <_realloc_r+0x3d8>
 80130d2:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80130d6:	eb0a 0206 	add.w	r2, sl, r6
 80130da:	4290      	cmp	r0, r2
 80130dc:	f000 80b0 	beq.w	8013240 <_realloc_r+0x1a8>
 80130e0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80130e4:	f02e 0801 	bic.w	r8, lr, #1
 80130e8:	4490      	add	r8, r2
 80130ea:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80130ee:	f018 0f01 	tst.w	r8, #1
 80130f2:	d059      	beq.n	80131a8 <_realloc_r+0x110>
 80130f4:	f04f 0e00 	mov.w	lr, #0
 80130f8:	4672      	mov	r2, lr
 80130fa:	07db      	lsls	r3, r3, #31
 80130fc:	d476      	bmi.n	80131ec <_realloc_r+0x154>
 80130fe:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8013102:	ebc3 0b0a 	rsb	fp, r3, sl
 8013106:	f8db 3004 	ldr.w	r3, [fp, #4]
 801310a:	f023 0303 	bic.w	r3, r3, #3
 801310e:	199b      	adds	r3, r3, r6
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	2a00      	cmp	r2, #0
 8013114:	d067      	beq.n	80131e6 <_realloc_r+0x14e>
 8013116:	4282      	cmp	r2, r0
 8013118:	eb0e 0803 	add.w	r8, lr, r3
 801311c:	f000 80f1 	beq.w	8013302 <_realloc_r+0x26a>
 8013120:	4588      	cmp	r8, r1
 8013122:	db60      	blt.n	80131e6 <_realloc_r+0x14e>
 8013124:	68d1      	ldr	r1, [r2, #12]
 8013126:	6890      	ldr	r0, [r2, #8]
 8013128:	465f      	mov	r7, fp
 801312a:	60c1      	str	r1, [r0, #12]
 801312c:	6088      	str	r0, [r1, #8]
 801312e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8013132:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013136:	1f32      	subs	r2, r6, #4
 8013138:	2a24      	cmp	r2, #36	; 0x24
 801313a:	60cb      	str	r3, [r1, #12]
 801313c:	6099      	str	r1, [r3, #8]
 801313e:	f200 812a 	bhi.w	8013396 <_realloc_r+0x2fe>
 8013142:	2a13      	cmp	r2, #19
 8013144:	f240 80b9 	bls.w	80132ba <_realloc_r+0x222>
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	f8cb 3008 	str.w	r3, [fp, #8]
 801314e:	6861      	ldr	r1, [r4, #4]
 8013150:	2a1b      	cmp	r2, #27
 8013152:	f8cb 100c 	str.w	r1, [fp, #12]
 8013156:	f200 8134 	bhi.w	80133c2 <_realloc_r+0x32a>
 801315a:	f10b 0010 	add.w	r0, fp, #16
 801315e:	3408      	adds	r4, #8
 8013160:	e0ac      	b.n	80132bc <_realloc_r+0x224>
 8013162:	f025 0507 	bic.w	r5, r5, #7
 8013166:	2d00      	cmp	r5, #0
 8013168:	4629      	mov	r1, r5
 801316a:	daac      	bge.n	80130c6 <_realloc_r+0x2e>
 801316c:	270c      	movs	r7, #12
 801316e:	f8c9 7000 	str.w	r7, [r9]
 8013172:	2700      	movs	r7, #0
 8013174:	e014      	b.n	80131a0 <_realloc_r+0x108>
 8013176:	46b0      	mov	r8, r6
 8013178:	ebc5 0708 	rsb	r7, r5, r8
 801317c:	2f0f      	cmp	r7, #15
 801317e:	d81e      	bhi.n	80131be <_realloc_r+0x126>
 8013180:	f003 0301 	and.w	r3, r3, #1
 8013184:	eb0a 0108 	add.w	r1, sl, r8
 8013188:	ea43 0008 	orr.w	r0, r3, r8
 801318c:	f8ca 0004 	str.w	r0, [sl, #4]
 8013190:	684a      	ldr	r2, [r1, #4]
 8013192:	f042 0701 	orr.w	r7, r2, #1
 8013196:	604f      	str	r7, [r1, #4]
 8013198:	4648      	mov	r0, r9
 801319a:	f7fe fd5f 	bl	8011c5c <__malloc_unlock>
 801319e:	4627      	mov	r7, r4
 80131a0:	4638      	mov	r0, r7
 80131a2:	b003      	add	sp, #12
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a8:	f02e 0e03 	bic.w	lr, lr, #3
 80131ac:	eb0e 0806 	add.w	r8, lr, r6
 80131b0:	4588      	cmp	r8, r1
 80131b2:	dba2      	blt.n	80130fa <_realloc_r+0x62>
 80131b4:	68d7      	ldr	r7, [r2, #12]
 80131b6:	6892      	ldr	r2, [r2, #8]
 80131b8:	60d7      	str	r7, [r2, #12]
 80131ba:	60ba      	str	r2, [r7, #8]
 80131bc:	e7dc      	b.n	8013178 <_realloc_r+0xe0>
 80131be:	eb0a 0105 	add.w	r1, sl, r5
 80131c2:	f003 0301 	and.w	r3, r3, #1
 80131c6:	19c8      	adds	r0, r1, r7
 80131c8:	431d      	orrs	r5, r3
 80131ca:	f047 0201 	orr.w	r2, r7, #1
 80131ce:	f8ca 5004 	str.w	r5, [sl, #4]
 80131d2:	604a      	str	r2, [r1, #4]
 80131d4:	6847      	ldr	r7, [r0, #4]
 80131d6:	f047 0301 	orr.w	r3, r7, #1
 80131da:	6043      	str	r3, [r0, #4]
 80131dc:	3108      	adds	r1, #8
 80131de:	4648      	mov	r0, r9
 80131e0:	f7fd ff9e 	bl	8011120 <_free_r>
 80131e4:	e7d8      	b.n	8013198 <_realloc_r+0x100>
 80131e6:	9b01      	ldr	r3, [sp, #4]
 80131e8:	428b      	cmp	r3, r1
 80131ea:	da34      	bge.n	8013256 <_realloc_r+0x1be>
 80131ec:	4639      	mov	r1, r7
 80131ee:	4648      	mov	r0, r9
 80131f0:	f7fe f942 	bl	8011478 <_malloc_r>
 80131f4:	4607      	mov	r7, r0
 80131f6:	b1c8      	cbz	r0, 801322c <_realloc_r+0x194>
 80131f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80131fc:	f023 0201 	bic.w	r2, r3, #1
 8013200:	f1a0 0108 	sub.w	r1, r0, #8
 8013204:	4452      	add	r2, sl
 8013206:	4291      	cmp	r1, r2
 8013208:	f000 80be 	beq.w	8013388 <_realloc_r+0x2f0>
 801320c:	1f32      	subs	r2, r6, #4
 801320e:	2a24      	cmp	r2, #36	; 0x24
 8013210:	d873      	bhi.n	80132fa <_realloc_r+0x262>
 8013212:	2a13      	cmp	r2, #19
 8013214:	d846      	bhi.n	80132a4 <_realloc_r+0x20c>
 8013216:	4623      	mov	r3, r4
 8013218:	6819      	ldr	r1, [r3, #0]
 801321a:	6001      	str	r1, [r0, #0]
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	6042      	str	r2, [r0, #4]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	6083      	str	r3, [r0, #8]
 8013224:	4648      	mov	r0, r9
 8013226:	4621      	mov	r1, r4
 8013228:	f7fd ff7a 	bl	8011120 <_free_r>
 801322c:	4648      	mov	r0, r9
 801322e:	f7fe fd15 	bl	8011c5c <__malloc_unlock>
 8013232:	e7b5      	b.n	80131a0 <_realloc_r+0x108>
 8013234:	4611      	mov	r1, r2
 8013236:	b003      	add	sp, #12
 8013238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	f7fe b91c 	b.w	8011478 <_malloc_r>
 8013240:	6842      	ldr	r2, [r0, #4]
 8013242:	f022 0e03 	bic.w	lr, r2, #3
 8013246:	eb0e 0206 	add.w	r2, lr, r6
 801324a:	f105 0810 	add.w	r8, r5, #16
 801324e:	4542      	cmp	r2, r8
 8013250:	da3f      	bge.n	80132d2 <_realloc_r+0x23a>
 8013252:	4602      	mov	r2, r0
 8013254:	e751      	b.n	80130fa <_realloc_r+0x62>
 8013256:	465f      	mov	r7, fp
 8013258:	f8db 000c 	ldr.w	r0, [fp, #12]
 801325c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013260:	1f32      	subs	r2, r6, #4
 8013262:	2a24      	cmp	r2, #36	; 0x24
 8013264:	60c8      	str	r0, [r1, #12]
 8013266:	6081      	str	r1, [r0, #8]
 8013268:	f200 80a0 	bhi.w	80133ac <_realloc_r+0x314>
 801326c:	2a13      	cmp	r2, #19
 801326e:	f240 809b 	bls.w	80133a8 <_realloc_r+0x310>
 8013272:	6820      	ldr	r0, [r4, #0]
 8013274:	f8cb 0008 	str.w	r0, [fp, #8]
 8013278:	6861      	ldr	r1, [r4, #4]
 801327a:	2a1b      	cmp	r2, #27
 801327c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013280:	f200 80b4 	bhi.w	80133ec <_realloc_r+0x354>
 8013284:	f10b 0310 	add.w	r3, fp, #16
 8013288:	3408      	adds	r4, #8
 801328a:	6820      	ldr	r0, [r4, #0]
 801328c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013290:	6018      	str	r0, [r3, #0]
 8013292:	6862      	ldr	r2, [r4, #4]
 8013294:	605a      	str	r2, [r3, #4]
 8013296:	68a4      	ldr	r4, [r4, #8]
 8013298:	609c      	str	r4, [r3, #8]
 801329a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801329e:	463c      	mov	r4, r7
 80132a0:	46da      	mov	sl, fp
 80132a2:	e769      	b.n	8013178 <_realloc_r+0xe0>
 80132a4:	6821      	ldr	r1, [r4, #0]
 80132a6:	6001      	str	r1, [r0, #0]
 80132a8:	6860      	ldr	r0, [r4, #4]
 80132aa:	2a1b      	cmp	r2, #27
 80132ac:	6078      	str	r0, [r7, #4]
 80132ae:	d860      	bhi.n	8013372 <_realloc_r+0x2da>
 80132b0:	f107 0008 	add.w	r0, r7, #8
 80132b4:	f104 0308 	add.w	r3, r4, #8
 80132b8:	e7ae      	b.n	8013218 <_realloc_r+0x180>
 80132ba:	4638      	mov	r0, r7
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	6003      	str	r3, [r0, #0]
 80132c0:	6862      	ldr	r2, [r4, #4]
 80132c2:	6042      	str	r2, [r0, #4]
 80132c4:	68a4      	ldr	r4, [r4, #8]
 80132c6:	6084      	str	r4, [r0, #8]
 80132c8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80132cc:	463c      	mov	r4, r7
 80132ce:	46da      	mov	sl, fp
 80132d0:	e752      	b.n	8013178 <_realloc_r+0xe0>
 80132d2:	eb0a 0705 	add.w	r7, sl, r5
 80132d6:	1b50      	subs	r0, r2, r5
 80132d8:	f040 0201 	orr.w	r2, r0, #1
 80132dc:	607a      	str	r2, [r7, #4]
 80132de:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80132e2:	f8cc 7008 	str.w	r7, [ip, #8]
 80132e6:	f001 0301 	and.w	r3, r1, #1
 80132ea:	431d      	orrs	r5, r3
 80132ec:	f844 5c04 	str.w	r5, [r4, #-4]
 80132f0:	4648      	mov	r0, r9
 80132f2:	f7fe fcb3 	bl	8011c5c <__malloc_unlock>
 80132f6:	4627      	mov	r7, r4
 80132f8:	e752      	b.n	80131a0 <_realloc_r+0x108>
 80132fa:	4621      	mov	r1, r4
 80132fc:	f7ff fdec 	bl	8012ed8 <memmove>
 8013300:	e790      	b.n	8013224 <_realloc_r+0x18c>
 8013302:	f105 0010 	add.w	r0, r5, #16
 8013306:	4580      	cmp	r8, r0
 8013308:	f6ff af6d 	blt.w	80131e6 <_realloc_r+0x14e>
 801330c:	465f      	mov	r7, fp
 801330e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8013312:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013316:	1f32      	subs	r2, r6, #4
 8013318:	2a24      	cmp	r2, #36	; 0x24
 801331a:	60c8      	str	r0, [r1, #12]
 801331c:	6081      	str	r1, [r0, #8]
 801331e:	f200 8087 	bhi.w	8013430 <_realloc_r+0x398>
 8013322:	2a13      	cmp	r2, #19
 8013324:	d978      	bls.n	8013418 <_realloc_r+0x380>
 8013326:	6820      	ldr	r0, [r4, #0]
 8013328:	f8cb 0008 	str.w	r0, [fp, #8]
 801332c:	6861      	ldr	r1, [r4, #4]
 801332e:	2a1b      	cmp	r2, #27
 8013330:	f8cb 100c 	str.w	r1, [fp, #12]
 8013334:	f200 8085 	bhi.w	8013442 <_realloc_r+0x3aa>
 8013338:	f10b 0310 	add.w	r3, fp, #16
 801333c:	3408      	adds	r4, #8
 801333e:	6820      	ldr	r0, [r4, #0]
 8013340:	6018      	str	r0, [r3, #0]
 8013342:	6862      	ldr	r2, [r4, #4]
 8013344:	605a      	str	r2, [r3, #4]
 8013346:	68a1      	ldr	r1, [r4, #8]
 8013348:	6099      	str	r1, [r3, #8]
 801334a:	eb0b 0305 	add.w	r3, fp, r5
 801334e:	ebc5 0008 	rsb	r0, r5, r8
 8013352:	f040 0201 	orr.w	r2, r0, #1
 8013356:	605a      	str	r2, [r3, #4]
 8013358:	f8db 1004 	ldr.w	r1, [fp, #4]
 801335c:	f8cc 3008 	str.w	r3, [ip, #8]
 8013360:	f001 0301 	and.w	r3, r1, #1
 8013364:	431d      	orrs	r5, r3
 8013366:	f8cb 5004 	str.w	r5, [fp, #4]
 801336a:	4648      	mov	r0, r9
 801336c:	f7fe fc76 	bl	8011c5c <__malloc_unlock>
 8013370:	e716      	b.n	80131a0 <_realloc_r+0x108>
 8013372:	68a3      	ldr	r3, [r4, #8]
 8013374:	60bb      	str	r3, [r7, #8]
 8013376:	68e1      	ldr	r1, [r4, #12]
 8013378:	2a24      	cmp	r2, #36	; 0x24
 801337a:	60f9      	str	r1, [r7, #12]
 801337c:	d02d      	beq.n	80133da <_realloc_r+0x342>
 801337e:	f107 0010 	add.w	r0, r7, #16
 8013382:	f104 0310 	add.w	r3, r4, #16
 8013386:	e747      	b.n	8013218 <_realloc_r+0x180>
 8013388:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801338c:	f027 0c03 	bic.w	ip, r7, #3
 8013390:	eb0c 0806 	add.w	r8, ip, r6
 8013394:	e6f0      	b.n	8013178 <_realloc_r+0xe0>
 8013396:	4621      	mov	r1, r4
 8013398:	4638      	mov	r0, r7
 801339a:	f7ff fd9d 	bl	8012ed8 <memmove>
 801339e:	463c      	mov	r4, r7
 80133a0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80133a4:	46da      	mov	sl, fp
 80133a6:	e6e7      	b.n	8013178 <_realloc_r+0xe0>
 80133a8:	463b      	mov	r3, r7
 80133aa:	e76e      	b.n	801328a <_realloc_r+0x1f2>
 80133ac:	4621      	mov	r1, r4
 80133ae:	4638      	mov	r0, r7
 80133b0:	f7ff fd92 	bl	8012ed8 <memmove>
 80133b4:	463c      	mov	r4, r7
 80133b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80133ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80133be:	46da      	mov	sl, fp
 80133c0:	e6da      	b.n	8013178 <_realloc_r+0xe0>
 80133c2:	68a0      	ldr	r0, [r4, #8]
 80133c4:	f8cb 0010 	str.w	r0, [fp, #16]
 80133c8:	68e3      	ldr	r3, [r4, #12]
 80133ca:	2a24      	cmp	r2, #36	; 0x24
 80133cc:	f8cb 3014 	str.w	r3, [fp, #20]
 80133d0:	d018      	beq.n	8013404 <_realloc_r+0x36c>
 80133d2:	f10b 0018 	add.w	r0, fp, #24
 80133d6:	3410      	adds	r4, #16
 80133d8:	e770      	b.n	80132bc <_realloc_r+0x224>
 80133da:	6922      	ldr	r2, [r4, #16]
 80133dc:	613a      	str	r2, [r7, #16]
 80133de:	6963      	ldr	r3, [r4, #20]
 80133e0:	f107 0018 	add.w	r0, r7, #24
 80133e4:	617b      	str	r3, [r7, #20]
 80133e6:	f104 0318 	add.w	r3, r4, #24
 80133ea:	e715      	b.n	8013218 <_realloc_r+0x180>
 80133ec:	68a3      	ldr	r3, [r4, #8]
 80133ee:	f8cb 3010 	str.w	r3, [fp, #16]
 80133f2:	68e0      	ldr	r0, [r4, #12]
 80133f4:	2a24      	cmp	r2, #36	; 0x24
 80133f6:	f8cb 0014 	str.w	r0, [fp, #20]
 80133fa:	d00f      	beq.n	801341c <_realloc_r+0x384>
 80133fc:	f10b 0318 	add.w	r3, fp, #24
 8013400:	3410      	adds	r4, #16
 8013402:	e742      	b.n	801328a <_realloc_r+0x1f2>
 8013404:	6922      	ldr	r2, [r4, #16]
 8013406:	f8cb 2018 	str.w	r2, [fp, #24]
 801340a:	6961      	ldr	r1, [r4, #20]
 801340c:	f10b 0020 	add.w	r0, fp, #32
 8013410:	f8cb 101c 	str.w	r1, [fp, #28]
 8013414:	3418      	adds	r4, #24
 8013416:	e751      	b.n	80132bc <_realloc_r+0x224>
 8013418:	463b      	mov	r3, r7
 801341a:	e790      	b.n	801333e <_realloc_r+0x2a6>
 801341c:	6922      	ldr	r2, [r4, #16]
 801341e:	f8cb 2018 	str.w	r2, [fp, #24]
 8013422:	6961      	ldr	r1, [r4, #20]
 8013424:	f10b 0320 	add.w	r3, fp, #32
 8013428:	f8cb 101c 	str.w	r1, [fp, #28]
 801342c:	3418      	adds	r4, #24
 801342e:	e72c      	b.n	801328a <_realloc_r+0x1f2>
 8013430:	4638      	mov	r0, r7
 8013432:	4621      	mov	r1, r4
 8013434:	f8cd c000 	str.w	ip, [sp]
 8013438:	f7ff fd4e 	bl	8012ed8 <memmove>
 801343c:	f8dd c000 	ldr.w	ip, [sp]
 8013440:	e783      	b.n	801334a <_realloc_r+0x2b2>
 8013442:	68a3      	ldr	r3, [r4, #8]
 8013444:	f8cb 3010 	str.w	r3, [fp, #16]
 8013448:	68e0      	ldr	r0, [r4, #12]
 801344a:	2a24      	cmp	r2, #36	; 0x24
 801344c:	f8cb 0014 	str.w	r0, [fp, #20]
 8013450:	d003      	beq.n	801345a <_realloc_r+0x3c2>
 8013452:	f10b 0318 	add.w	r3, fp, #24
 8013456:	3410      	adds	r4, #16
 8013458:	e771      	b.n	801333e <_realloc_r+0x2a6>
 801345a:	6922      	ldr	r2, [r4, #16]
 801345c:	f8cb 2018 	str.w	r2, [fp, #24]
 8013460:	6961      	ldr	r1, [r4, #20]
 8013462:	f10b 0320 	add.w	r3, fp, #32
 8013466:	f8cb 101c 	str.w	r1, [fp, #28]
 801346a:	3418      	adds	r4, #24
 801346c:	e767      	b.n	801333e <_realloc_r+0x2a6>
 801346e:	bf00      	nop
 8013470:	200004f0 	.word	0x200004f0

08013474 <__swbuf_r>:
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	460d      	mov	r5, r1
 8013478:	4614      	mov	r4, r2
 801347a:	4606      	mov	r6, r0
 801347c:	b110      	cbz	r0, 8013484 <__swbuf_r+0x10>
 801347e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013480:	2b00      	cmp	r3, #0
 8013482:	d04a      	beq.n	801351a <__swbuf_r+0xa6>
 8013484:	89a3      	ldrh	r3, [r4, #12]
 8013486:	69a2      	ldr	r2, [r4, #24]
 8013488:	f003 0008 	and.w	r0, r3, #8
 801348c:	b201      	sxth	r1, r0
 801348e:	60a2      	str	r2, [r4, #8]
 8013490:	2900      	cmp	r1, #0
 8013492:	d03a      	beq.n	801350a <__swbuf_r+0x96>
 8013494:	6922      	ldr	r2, [r4, #16]
 8013496:	2a00      	cmp	r2, #0
 8013498:	d037      	beq.n	801350a <__swbuf_r+0x96>
 801349a:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 801349e:	b201      	sxth	r1, r0
 80134a0:	b2ed      	uxtb	r5, r5
 80134a2:	b1a9      	cbz	r1, 80134d0 <__swbuf_r+0x5c>
 80134a4:	6823      	ldr	r3, [r4, #0]
 80134a6:	6960      	ldr	r0, [r4, #20]
 80134a8:	1a9a      	subs	r2, r3, r2
 80134aa:	4282      	cmp	r2, r0
 80134ac:	da1c      	bge.n	80134e8 <__swbuf_r+0x74>
 80134ae:	1c50      	adds	r0, r2, #1
 80134b0:	68a1      	ldr	r1, [r4, #8]
 80134b2:	1e4a      	subs	r2, r1, #1
 80134b4:	60a2      	str	r2, [r4, #8]
 80134b6:	f803 5b01 	strb.w	r5, [r3], #1
 80134ba:	6961      	ldr	r1, [r4, #20]
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	4281      	cmp	r1, r0
 80134c0:	d01a      	beq.n	80134f8 <__swbuf_r+0x84>
 80134c2:	89a3      	ldrh	r3, [r4, #12]
 80134c4:	07db      	lsls	r3, r3, #31
 80134c6:	d501      	bpl.n	80134cc <__swbuf_r+0x58>
 80134c8:	2d0a      	cmp	r5, #10
 80134ca:	d015      	beq.n	80134f8 <__swbuf_r+0x84>
 80134cc:	4628      	mov	r0, r5
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80134d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80134d6:	81a3      	strh	r3, [r4, #12]
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 80134de:	6960      	ldr	r0, [r4, #20]
 80134e0:	6661      	str	r1, [r4, #100]	; 0x64
 80134e2:	1a9a      	subs	r2, r3, r2
 80134e4:	4282      	cmp	r2, r0
 80134e6:	dbe2      	blt.n	80134ae <__swbuf_r+0x3a>
 80134e8:	4630      	mov	r0, r6
 80134ea:	4621      	mov	r1, r4
 80134ec:	f7fd fcc0 	bl	8010e70 <_fflush_r>
 80134f0:	b940      	cbnz	r0, 8013504 <__swbuf_r+0x90>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	2001      	movs	r0, #1
 80134f6:	e7db      	b.n	80134b0 <__swbuf_r+0x3c>
 80134f8:	4630      	mov	r0, r6
 80134fa:	4621      	mov	r1, r4
 80134fc:	f7fd fcb8 	bl	8010e70 <_fflush_r>
 8013500:	2800      	cmp	r0, #0
 8013502:	d0e3      	beq.n	80134cc <__swbuf_r+0x58>
 8013504:	f04f 35ff 	mov.w	r5, #4294967295
 8013508:	e7e0      	b.n	80134cc <__swbuf_r+0x58>
 801350a:	4630      	mov	r0, r6
 801350c:	4621      	mov	r1, r4
 801350e:	f7fc f995 	bl	800f83c <__swsetup_r>
 8013512:	89a3      	ldrh	r3, [r4, #12]
 8013514:	b920      	cbnz	r0, 8013520 <__swbuf_r+0xac>
 8013516:	6922      	ldr	r2, [r4, #16]
 8013518:	e7bf      	b.n	801349a <__swbuf_r+0x26>
 801351a:	f7fd fd8b 	bl	8011034 <__sinit>
 801351e:	e7b1      	b.n	8013484 <__swbuf_r+0x10>
 8013520:	f043 0540 	orr.w	r5, r3, #64	; 0x40
 8013524:	2009      	movs	r0, #9
 8013526:	81a5      	strh	r5, [r4, #12]
 8013528:	f04f 35ff 	mov.w	r5, #4294967295
 801352c:	6030      	str	r0, [r6, #0]
 801352e:	e7cd      	b.n	80134cc <__swbuf_r+0x58>

08013530 <_wcrtomb_r>:
 8013530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013534:	461e      	mov	r6, r3
 8013536:	b086      	sub	sp, #24
 8013538:	460c      	mov	r4, r1
 801353a:	4605      	mov	r5, r0
 801353c:	4617      	mov	r7, r2
 801353e:	4b0f      	ldr	r3, [pc, #60]	; (801357c <_wcrtomb_r+0x4c>)
 8013540:	b191      	cbz	r1, 8013568 <_wcrtomb_r+0x38>
 8013542:	f8d3 8000 	ldr.w	r8, [r3]
 8013546:	f7fd ff11 	bl	801136c <__locale_charset>
 801354a:	9600      	str	r6, [sp, #0]
 801354c:	4603      	mov	r3, r0
 801354e:	4621      	mov	r1, r4
 8013550:	4628      	mov	r0, r5
 8013552:	463a      	mov	r2, r7
 8013554:	47c0      	blx	r8
 8013556:	1c43      	adds	r3, r0, #1
 8013558:	d103      	bne.n	8013562 <_wcrtomb_r+0x32>
 801355a:	2100      	movs	r1, #0
 801355c:	228a      	movs	r2, #138	; 0x8a
 801355e:	6031      	str	r1, [r6, #0]
 8013560:	602a      	str	r2, [r5, #0]
 8013562:	b006      	add	sp, #24
 8013564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013568:	681f      	ldr	r7, [r3, #0]
 801356a:	f7fd feff 	bl	801136c <__locale_charset>
 801356e:	9600      	str	r6, [sp, #0]
 8013570:	4603      	mov	r3, r0
 8013572:	a903      	add	r1, sp, #12
 8013574:	4628      	mov	r0, r5
 8013576:	4622      	mov	r2, r4
 8013578:	47b8      	blx	r7
 801357a:	e7ec      	b.n	8013556 <_wcrtomb_r+0x26>
 801357c:	20000900 	.word	0x20000900

08013580 <__ascii_wctomb>:
 8013580:	b121      	cbz	r1, 801358c <__ascii_wctomb+0xc>
 8013582:	2aff      	cmp	r2, #255	; 0xff
 8013584:	d804      	bhi.n	8013590 <__ascii_wctomb+0x10>
 8013586:	700a      	strb	r2, [r1, #0]
 8013588:	2001      	movs	r0, #1
 801358a:	4770      	bx	lr
 801358c:	4608      	mov	r0, r1
 801358e:	4770      	bx	lr
 8013590:	238a      	movs	r3, #138	; 0x8a
 8013592:	6003      	str	r3, [r0, #0]
 8013594:	f04f 30ff 	mov.w	r0, #4294967295
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	4447334c 	.word	0x4447334c
 80135a0:	72203032 	.word	0x72203032
 80135a4:	20646165 	.word	0x20646165
 80135a8:	65747461 	.word	0x65747461
 80135ac:	2074706d 	.word	0x2074706d
 80135b0:	656d6974 	.word	0x656d6974
 80135b4:	756f2064 	.word	0x756f2064
 80135b8:	2e2e2e74 	.word	0x2e2e2e74
 80135bc:	65686320 	.word	0x65686320
 80135c0:	79206b63 	.word	0x79206b63
 80135c4:	2072756f 	.word	0x2072756f
 80135c8:	69726977 	.word	0x69726977
 80135cc:	632f676e 	.word	0x632f676e
 80135d0:	2165646f 	.word	0x2165646f
 80135d4:	0d0a2121 	.word	0x0d0a2121
 80135d8:	00000000 	.word	0x00000000
 80135dc:	74697865 	.word	0x74697865
 80135e0:	00000000 	.word	0x00000000
 80135e4:	70616548 	.word	0x70616548
 80135e8:	646e6120 	.word	0x646e6120
 80135ec:	61747320 	.word	0x61747320
 80135f0:	63206b63 	.word	0x63206b63
 80135f4:	696c6c6f 	.word	0x696c6c6f
 80135f8:	6e6f6973 	.word	0x6e6f6973
 80135fc:	0000000a 	.word	0x0000000a
 8013600:	00776f70 	.word	0x00776f70
 8013604:	74727173 	.word	0x74727173
	...

08013610 <dp_h>:
	...
 8013618:	40000000 3fe2b803                       ...@...?

08013620 <dp_l>:
	...
 8013628:	43cfd006 3e4cfdeb                       ...C..L>

08013630 <bp>:
 8013630:	00000000 3ff00000 00000000 3ff80000     .......?.......?

08013640 <TWO52>:
 8013640:	00000000 43300000 00000000 c3300000     ......0C......0.
 8013650:	00000043                                C...

08013654 <_global_impure_ptr>:
 8013654:	20000068                                h.. 

08013658 <blanks.6735>:
 8013658:	20202020 20202020 20202020 20202020                     
 8013668:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8013678:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8013688:	00000000 33323130 37363534 62613938     ....0123456789ab
 8013698:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 80136a8:	00000030                                0...

080136ac <zeroes.6736>:
 80136ac:	30303030 30303030 30303030 30303030     0000000000000000
 80136bc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80136cc:	49534f50 00000058 0000002e              POSIX.......

080136d8 <p05.5242>:
 80136d8:	00000005 00000019 0000007d 00000000     ........}.......

080136e8 <__mprec_tens>:
 80136e8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80136f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8013708:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8013718:	00000000 412e8480 00000000 416312d0     .......A......cA
 8013728:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8013738:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8013748:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8013758:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8013768:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8013778:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8013788:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8013798:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 80137a8:	79d99db4 44ea7843                       ...yCx.D

080137b0 <__mprec_bigtens>:
 80137b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 80137c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80137d0:	7f73bf3c 75154fdd                       <.s..O.u

080137d8 <_init>:
 80137d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137da:	bf00      	nop
 80137dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137de:	bc08      	pop	{r3}
 80137e0:	469e      	mov	lr, r3
 80137e2:	4770      	bx	lr

080137e4 <_fini>:
 80137e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137e6:	bf00      	nop
 80137e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137ea:	bc08      	pop	{r3}
 80137ec:	469e      	mov	lr, r3
 80137ee:	4770      	bx	lr
