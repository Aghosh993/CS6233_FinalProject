
STM32F3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08005698  08005698  0000d698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080056a0  080056a0  0000d6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000468  20000000  080056a8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  20000468  20000468  00010468  2**2
                  ALLOC
  6 ._user_heap_stack 00000200  20000a78  20000a78  00010468  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
  8 .debug_info   00006da1  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000eee  00000000  00000000  00017239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000354a  00000000  00000000  00018127  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  0001b678  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000e6a4  00000000  00000000  0001b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003197  00000000  00000000  00029e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005a003  00000000  00000000  0002d01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0008701e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001cc0  00000000  00000000  00087090  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00088d50  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000468 	.word	0x20000468
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005680 	.word	0x08005680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005680 	.word	0x08005680
 80001d0:	2000046c 	.word	0x2000046c
 80001d4:	20000468 	.word	0x20000468
 80001d8:	00000000 	.word	0x00000000

080001dc <_Z10blink_ledsv>:
 */

#include "debug.h"

void blink_leds(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	int foo = 0;
 80001e2:	f04f 0300 	mov.w	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	for(foo = 0; foo < 160000; ++foo){
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <_Z10blink_ledsv+0x30>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
 80001f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001f8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80001fc:	f04f 0201 	mov.w	r2, #1
 8000200:	f000 fecc 	bl	8000f9c <GPIO_WriteBit>
#include "debug.h"

void blink_leds(void)
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0301 	add.w	r3, r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8000212:	f2c0 0302 	movt	r3, #2
 8000216:	429a      	cmp	r2, r3
 8000218:	bfcc      	ite	gt
 800021a:	2300      	movgt	r3, #0
 800021c:	2301      	movle	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e5      	bne.n	80001f0 <_Z10blink_ledsv+0x14>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00d      	b.n	8000248 <_Z10blink_ledsv+0x6c>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
 800022c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000230:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000234:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	f000 feae 	bl	8000f9c <GPIO_WriteBit>
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0301 	add.w	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	f247 03ff 	movw	r3, #28927	; 0x70ff
 800024e:	f2c0 0302 	movt	r3, #2
 8000252:	429a      	cmp	r2, r3
 8000254:	bfcc      	ite	gt
 8000256:	2300      	movgt	r3, #0
 8000258:	2301      	movle	r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1e5      	bne.n	800022c <_Z10blink_ledsv+0x50>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
	}
}
 8000260:	f107 0708 	add.w	r7, r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_Z10UART1_initv>:
 * @Args: None
 * @Return Val: None
 */

void UART1_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef a;

	USART_InitTypeDef u1;

	u1.USART_BaudRate = 115200;
 800026e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000272:	603b      	str	r3, [r7, #0]
	u1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	u1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800027a:	f04f 030c 	mov.w	r3, #12
 800027e:	613b      	str	r3, [r7, #16]
	u1.USART_Parity = USART_Parity_No;
 8000280:	f04f 0300 	mov.w	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	u1.USART_StopBits = USART_StopBits_1;
 8000286:	f04f 0300 	mov.w	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	u1.USART_WordLength = USART_WordLength_8b;
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

	a.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000296:	61bb      	str	r3, [r7, #24]
	a.GPIO_Mode = GPIO_Mode_AF;
 8000298:	f04f 0302 	mov.w	r3, #2
 800029c:	773b      	strb	r3, [r7, #28]
	a.GPIO_OType = GPIO_OType_PP;
 800029e:	f04f 0300 	mov.w	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
	a.GPIO_Speed = GPIO_Speed_50MHz;
 80002a4:	f04f 0303 	mov.w	r3, #3
 80002a8:	777b      	strb	r3, [r7, #29]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b4:	f04f 0101 	mov.w	r1, #1
 80002b8:	f001 fe68 	bl	8001f8c <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002c0:	f04f 0101 	mov.w	r1, #1
 80002c4:	f001 fe38 	bl	8001f38 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_7);
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f04f 0109 	mov.w	r1, #9
 80002d0:	f04f 0207 	mov.w	r2, #7
 80002d4:	f000 fe88 	bl	8000fe8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_7);
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f04f 010a 	mov.w	r1, #10
 80002e0:	f04f 0207 	mov.w	r2, #7
 80002e4:	f000 fe80 	bl	8000fe8 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &a);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 fcf3 	bl	8000cdc <GPIO_Init>

	USART_Init(USART1, &u1);
 80002f6:	463b      	mov	r3, r7
 80002f8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80002fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000300:	4619      	mov	r1, r3
 8000302:	f004 f91f 	bl	8004544 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8000306:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800030a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800030e:	f04f 0101 	mov.w	r1, #1
 8000312:	f004 fa41 	bl	8004798 <USART_Cmd>

	/* Wait until Receive enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_REACK) == RESET)
 8000316:	bf00      	nop
 8000318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800031c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000324:	f004 fe7c 	bl	8005020 <USART_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2300      	movne	r3, #0
 8000330:	2301      	moveq	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1ef      	bne.n	8000318 <_Z10UART1_initv+0xb0>
	{}

	/* Wait until Transmit enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_TEACK) == RESET)
 8000338:	bf00      	nop
 800033a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800033e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000346:	f004 fe6b 	bl	8005020 <USART_GetFlagStatus>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2300      	movne	r3, #0
 8000352:	2301      	moveq	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <_Z10UART1_initv+0xd2>
	{}
}
 800035a:	f107 0720 	add.w	r7, r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <_Z19LED_MATRIX_ISR_initv>:
 * along with some eye candy
 * Priority: 6 (LOW)
 */

void LED_MATRIX_ISR_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	// GPIO Init:

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800036a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f001 fde1 	bl	8001f38 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_15;
 8000376:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800037a:	613b      	str	r3, [r7, #16]
	a.GPIO_Mode = GPIO_Mode_OUT;
 800037c:	f04f 0301 	mov.w	r3, #1
 8000380:	753b      	strb	r3, [r7, #20]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	a.GPIO_OType = GPIO_OType_PP;
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	75bb      	strb	r3, [r7, #22]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 800038e:	f04f 0302 	mov.w	r3, #2
 8000392:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOE, &a);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800039c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 fc9b 	bl	8000cdc <GPIO_Init>

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM6_init;

	nv.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80003a6:	f04f 0336 	mov.w	r3, #54	; 0x36
 80003aa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 6; // Low-priority interrupt since this is just eye-candy...
 80003ac:	f04f 0306 	mov.w	r3, #6
 80003b0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80003b8:	f04f 0301 	mov.w	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fe78 	bl	80010b8 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE); //Enable TIM4 on APB1
 80003c8:	f04f 0010 	mov.w	r0, #16
 80003cc:	f04f 0101 	mov.w	r1, #1
 80003d0:	f001 fe06 	bl	8001fe0 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM6_init.TIM_Period = (10*DT_LED_MATRIX)-1;
 80003d4:	f240 3383 	movw	r3, #899	; 0x383
 80003d8:	607b      	str	r3, [r7, #4]
	TIM6_init.TIM_Prescaler = 7199;
 80003da:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80003de:	803b      	strh	r3, [r7, #0]
	TIM6_init.TIM_RepetitionCounter = 0;
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	72bb      	strb	r3, [r7, #10]
	TIM6_init.TIM_ClockDivision = 0;
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	813b      	strh	r3, [r7, #8]
	TIM6_init.TIM_CounterMode = TIM_CounterMode_Up;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM6, &TIM6_init);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80003fc:	4619      	mov	r1, r3
 80003fe:	f002 f827 	bl	8002450 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000406:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800040a:	f04f 0101 	mov.w	r1, #1
 800040e:	f04f 0201 	mov.w	r2, #1
 8000412:	f003 fc77 	bl	8003d04 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8000416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800041a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800041e:	f04f 0101 	mov.w	r1, #1
 8000422:	f002 f9d9 	bl	80027d8 <TIM_Cmd>
}
 8000426:	f107 0718 	add.w	r7, r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <TIM1_TRG_COM_TIM17_IRQHandler>:

extern void *v;
extern void *(*p)(void*);

	void TIM1_TRG_COM_TIM17_IRQHandler(void)
	{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 8000436:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800043a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800043e:	f04f 0101 	mov.w	r1, #1
 8000442:	f003 fceb 	bl	8003e1c <TIM_ClearITPendingBit>
		int i = 0;
 8000446:	f04f 0300 	mov.w	r3, #0
 800044a:	607b      	str	r3, [r7, #4]
		for(i=0; i < num_processes_active; ++i)
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e04f      	b.n	80004f4 <TIM1_TRG_COM_TIM17_IRQHandler+0xc4>
		{
			if(process_list[i].delayMS > 0)
 8000454:	f240 4390 	movw	r3, #1168	; 0x490
 8000458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	f04f 0194 	mov.w	r1, #148	; 0x94
 8000462:	fb01 f202 	mul.w	r2, r1, r2
 8000466:	189b      	adds	r3, r3, r2
 8000468:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	dd3c      	ble.n	80004ec <TIM1_TRG_COM_TIM17_IRQHandler+0xbc>
			{
				--process_list[i].delayMS;
 8000472:	f240 4390 	movw	r3, #1168	; 0x490
 8000476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	f04f 0194 	mov.w	r1, #148	; 0x94
 8000480:	fb01 f202 	mul.w	r2, r1, r2
 8000484:	189b      	adds	r3, r3, r2
 8000486:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000490:	f240 4390 	movw	r3, #1168	; 0x490
 8000494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	f04f 0094 	mov.w	r0, #148	; 0x94
 800049e:	fb00 f101 	mul.w	r1, r0, r1
 80004a2:	185b      	adds	r3, r3, r1
 80004a4:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80004a8:	601a      	str	r2, [r3, #0]
				if(process_list[i].delayMS == 0)
 80004aa:	f240 4390 	movw	r3, #1168	; 0x490
 80004ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	f04f 0194 	mov.w	r1, #148	; 0x94
 80004b8:	fb01 f202 	mul.w	r2, r1, r2
 80004bc:	189b      	adds	r3, r3, r2
 80004be:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d111      	bne.n	80004ec <TIM1_TRG_COM_TIM17_IRQHandler+0xbc>
				{
					nextProc = i;
 80004c8:	f640 2360 	movw	r3, #2656	; 0xa60
 80004cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
					SCB->ICSR |= (1<<28);
 80004d4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004dc:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80004e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80004e4:	6852      	ldr	r2, [r2, #4]
 80004e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ea:	605a      	str	r2, [r3, #4]

	void TIM1_TRG_COM_TIM17_IRQHandler(void)
	{
		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
		int i = 0;
		for(i=0; i < num_processes_active; ++i)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f103 0301 	add.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	f640 2358 	movw	r3, #2648	; 0xa58
 80004f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	bfac      	ite	ge
 8000504:	2300      	movge	r3, #0
 8000506:	2301      	movlt	r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d1a2      	bne.n	8000454 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>
					nextProc = i;
					SCB->ICSR |= (1<<28);
				}
			}
		}
	}
 800050e:	f107 0708 	add.w	r7, r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop

08000518 <SVC_Handler>:

	void SVC_Handler(void)
	{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
		++current_process;
 800051c:	f240 438c 	movw	r3, #1164	; 0x48c
 8000520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f103 0201 	add.w	r2, r3, #1
 800052a:	f240 438c 	movw	r3, #1164	; 0x48c
 800052e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000532:	601a      	str	r2, [r3, #0]
		if(current_process >= num_processes_active)
 8000534:	f240 438c 	movw	r3, #1164	; 0x48c
 8000538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f640 2358 	movw	r3, #2648	; 0xa58
 8000542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	db06      	blt.n	800055a <SVC_Handler+0x42>
		{
			current_process = 0;
 800054c:	f240 438c 	movw	r3, #1164	; 0x48c
 8000550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000554:	f04f 0200 	mov.w	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
		}

		addrVal = (uint32_t)(process_list[current_process].taskPointer);//0x8001841;
 800055a:	f240 438c 	movw	r3, #1164	; 0x48c
 800055e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	f240 4390 	movw	r3, #1168	; 0x490
 8000568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800056c:	f04f 0194 	mov.w	r1, #148	; 0x94
 8000570:	fb01 f202 	mul.w	r2, r1, r2
 8000574:	189b      	adds	r3, r3, r2
 8000576:	f103 0304 	add.w	r3, r3, #4
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	f640 2374 	movw	r3, #2676	; 0xa74
 8000582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000586:	601a      	str	r2, [r3, #0]
		asm volatile ("mov R10, %[something]\n\t" : [something] "=r" (addrVal));
 8000588:	4692      	mov	sl, r2
 800058a:	f640 2374 	movw	r3, #2676	; 0xa74
 800058e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000592:	601a      	str	r2, [r3, #0]

		asm volatile ("bx R10\n\t");
 8000594:	4750      	bx	sl
	}
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

	void PendSV_Handler(void)
	{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

		SCB->ICSR |= (1<<27);
 80005a0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80005a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005a8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80005ac:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80005b0:	6852      	ldr	r2, [r2, #4]
 80005b2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80005b6:	605a      	str	r2, [r3, #4]
		addrVal = (uint32_t)(process_list[nextProc].process_pc);//0x8001841;
 80005b8:	f640 2360 	movw	r3, #2656	; 0xa60
 80005bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	f240 4390 	movw	r3, #1168	; 0x490
 80005c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ca:	f04f 0194 	mov.w	r1, #148	; 0x94
 80005ce:	fb01 f202 	mul.w	r2, r1, r2
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	f103 030c 	add.w	r3, r3, #12
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f640 2374 	movw	r3, #2676	; 0xa74
 80005de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e2:	601a      	str	r2, [r3, #0]
		active_task = nextProc;
 80005e4:	f640 2360 	movw	r3, #2656	; 0xa60
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f640 235c 	movw	r3, #2652	; 0xa5c
 80005f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f6:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80005f8:	b662      	cpsie	i
		__enable_irq();
		asm volatile ("bx %[num]\n\t" : [num] "+r" ((unsigned)addrVal));
 80005fa:	f640 2374 	movw	r3, #2676	; 0xa74
 80005fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4710      	bx	r2
 8000608:	f640 2374 	movw	r3, #2676	; 0xa74
 800060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000610:	601a      	str	r2, [r3, #0]
//		asm volatile ("svc 1");	// To kick us into SVC handler
	}
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

	void SysTick_Handler(void)
	{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
		++current_process;
 800061c:	f240 438c 	movw	r3, #1164	; 0x48c
 8000620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f103 0201 	add.w	r2, r3, #1
 800062a:	f240 438c 	movw	r3, #1164	; 0x48c
 800062e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000632:	601a      	str	r2, [r3, #0]
		if(process_list[current_process].delayMS > 0)
 8000634:	f240 438c 	movw	r3, #1164	; 0x48c
 8000638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	f240 4390 	movw	r3, #1168	; 0x490
 8000642:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000646:	f04f 0194 	mov.w	r1, #148	; 0x94
 800064a:	fb01 f202 	mul.w	r2, r1, r2
 800064e:	189b      	adds	r3, r3, r2
 8000650:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	dd0b      	ble.n	8000672 <SysTick_Handler+0x5a>
		{
			++current_process;
 800065a:	f240 438c 	movw	r3, #1164	; 0x48c
 800065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f103 0201 	add.w	r2, r3, #1
 8000668:	f240 438c 	movw	r3, #1164	; 0x48c
 800066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000670:	601a      	str	r2, [r3, #0]
		}
		if(current_process >= num_processes_active)
 8000672:	f240 438c 	movw	r3, #1164	; 0x48c
 8000676:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f640 2358 	movw	r3, #2648	; 0xa58
 8000680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	db06      	blt.n	8000698 <SysTick_Handler+0x80>
		{
			current_process = 0;
 800068a:	f240 438c 	movw	r3, #1164	; 0x48c
 800068e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
		}

		addrVal = (uint32_t)(process_list[current_process].taskPointer);//0x8001841;
 8000698:	f240 438c 	movw	r3, #1164	; 0x48c
 800069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f240 4390 	movw	r3, #1168	; 0x490
 80006a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006aa:	f04f 0194 	mov.w	r1, #148	; 0x94
 80006ae:	fb01 f202 	mul.w	r2, r1, r2
 80006b2:	189b      	adds	r3, r3, r2
 80006b4:	f103 0304 	add.w	r3, r3, #4
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	f640 2374 	movw	r3, #2676	; 0xa74
 80006c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006c4:	601a      	str	r2, [r3, #0]
		active_task = current_process;
 80006c6:	f240 438c 	movw	r3, #1164	; 0x48c
 80006ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	f640 235c 	movw	r3, #2652	; 0xa5c
 80006d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	b662      	cpsie	i
		__enable_irq();
		asm volatile ("bx %[num]\n\t" : [num] "+r" ((unsigned)addrVal));
 80006dc:	f640 2374 	movw	r3, #2676	; 0xa74
 80006e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4710      	bx	r2
 80006ea:	f640 2374 	movw	r3, #2676	; 0xa74
 80006ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f2:	601a      	str	r2, [r3, #0]
	}
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <HardFault_Handler>:

	// Primarily for debug purposes:

	void HardFault_Handler(void)
	{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
		while(1);
 8000700:	e7fe      	b.n	8000700 <HardFault_Handler+0x4>
 8000702:	bf00      	nop

08000704 <MemManage_Handler>:
	}
	void MemManage_Handler(void)
	{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
		while(1);
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>
 800070a:	bf00      	nop

0800070c <BusFault_Handler>:
	}
	void BusFault_Handler(void)
	{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
		while(1);
 8000710:	e7fe      	b.n	8000710 <BusFault_Handler+0x4>
 8000712:	bf00      	nop

08000714 <UsageFault_Handler>:
	}
	void UsageFault_Handler(void)
	{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
		while(1);
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>
 800071a:	bf00      	nop

0800071c <_Z5task1v>:
int task1_iter, task2_iter, task3_iter, pc;

uint32_t addrVal;

void task1(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_8, Bit_SET);
 8000720:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000724:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072c:	f04f 0201 	mov.w	r2, #1
 8000730:	f000 fc34 	bl	8000f9c <GPIO_WriteBit>
		while(task1_iter < 1000000)
 8000734:	e00b      	b.n	800074e <_Z5task1v+0x32>
		{
			++task1_iter;
 8000736:	f640 2364 	movw	r3, #2660	; 0xa64
 800073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f103 0201 	add.w	r2, r3, #1
 8000744:	f640 2364 	movw	r3, #2660	; 0xa64
 8000748:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800074c:	601a      	str	r2, [r3, #0]
void task1(void)
{
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_8, Bit_SET);
		while(task1_iter < 1000000)
 800074e:	f640 2364 	movw	r3, #2660	; 0xa64
 8000752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f244 233f 	movw	r3, #16959	; 0x423f
 800075c:	f2c0 030f 	movt	r3, #15
 8000760:	429a      	cmp	r2, r3
 8000762:	bfcc      	ite	gt
 8000764:	2300      	movgt	r3, #0
 8000766:	2301      	movle	r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1e3      	bne.n	8000736 <_Z5task1v+0x1a>
		{
			++task1_iter;
		}
		task1_iter = 0;
 800076e:	f640 2364 	movw	r3, #2660	; 0xa64
 8000772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000776:	f04f 0200 	mov.w	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
		GPIO_WriteBit(GPIOE, GPIO_Pin_8, Bit_RESET);
 800077c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000780:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 0200 	mov.w	r2, #0
 800078c:	f000 fc06 	bl	8000f9c <GPIO_WriteBit>
		yield_time();
 8000790:	f7ff bf42 	b.w	8000618 <SysTick_Handler>

uint32_t addrVal;

void task1(void)
{
	while(1)
 8000794:	e7c4      	b.n	8000720 <_Z5task1v+0x4>
 8000796:	bf00      	nop

08000798 <_Z5task2v>:
		yield_time();
	}
}

void task2(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_9, Bit_SET);
 800079c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007a0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	f04f 0201 	mov.w	r2, #1
 80007ac:	f000 fbf6 	bl	8000f9c <GPIO_WriteBit>
		while(task2_iter < 1000000)
 80007b0:	e00b      	b.n	80007ca <_Z5task2v+0x32>
		{
			++task2_iter;
 80007b2:	f640 2368 	movw	r3, #2664	; 0xa68
 80007b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f103 0201 	add.w	r2, r3, #1
 80007c0:	f640 2368 	movw	r3, #2664	; 0xa68
 80007c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c8:	601a      	str	r2, [r3, #0]
void task2(void)
{
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_9, Bit_SET);
		while(task2_iter < 1000000)
 80007ca:	f640 2368 	movw	r3, #2664	; 0xa68
 80007ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	f244 233f 	movw	r3, #16959	; 0x423f
 80007d8:	f2c0 030f 	movt	r3, #15
 80007dc:	429a      	cmp	r2, r3
 80007de:	bfcc      	ite	gt
 80007e0:	2300      	movgt	r3, #0
 80007e2:	2301      	movle	r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e3      	bne.n	80007b2 <_Z5task2v+0x1a>
		{
			++task2_iter;
		}
		task2_iter = 0;
 80007ea:	f640 2368 	movw	r3, #2664	; 0xa68
 80007ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
		GPIO_WriteBit(GPIOE, GPIO_Pin_9, Bit_RESET);
 80007f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007fc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f000 fbc8 	bl	8000f9c <GPIO_WriteBit>
		yield_time();
 800080c:	f7ff bf04 	b.w	8000618 <SysTick_Handler>
	}
}

void task2(void)
{
	while(1)
 8000810:	e7c4      	b.n	800079c <_Z5task2v+0x4>
 8000812:	bf00      	nop

08000814 <_Z5task3v>:
		yield_time();
	}
}

void task3(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_15, Bit_SET);
 8000818:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800081c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	f04f 0201 	mov.w	r2, #1
 8000828:	f000 fbb8 	bl	8000f9c <GPIO_WriteBit>
		while(task3_iter < 1000000)
 800082c:	e00b      	b.n	8000846 <_Z5task3v+0x32>
		{
			++task3_iter;
 800082e:	f640 236c 	movw	r3, #2668	; 0xa6c
 8000832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f103 0201 	add.w	r2, r3, #1
 800083c:	f640 236c 	movw	r3, #2668	; 0xa6c
 8000840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000844:	601a      	str	r2, [r3, #0]
void task3(void)
{
	while(1)
	{
		GPIO_WriteBit(GPIOE, GPIO_Pin_15, Bit_SET);
		while(task3_iter < 1000000)
 8000846:	f640 236c 	movw	r3, #2668	; 0xa6c
 800084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	f244 233f 	movw	r3, #16959	; 0x423f
 8000854:	f2c0 030f 	movt	r3, #15
 8000858:	429a      	cmp	r2, r3
 800085a:	bfcc      	ite	gt
 800085c:	2300      	movgt	r3, #0
 800085e:	2301      	movle	r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1e3      	bne.n	800082e <_Z5task3v+0x1a>
		{
			++task3_iter;
		}
		task3_iter = 0;
 8000866:	f640 236c 	movw	r3, #2668	; 0xa6c
 800086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
//		while(task3_iter < 1000)
//		{
//			++task3_iter;
//		}
//		task3_iter = 0;
		GPIO_WriteBit(GPIOE, GPIO_Pin_15, Bit_RESET);
 8000874:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000878:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800087c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	f000 fb8a 	bl	8000f9c <GPIO_WriteBit>
		yield_time();
 8000888:	f7ff bec6 	b.w	8000618 <SysTick_Handler>
	}
}

void task3(void)
{
	while(1)
 800088c:	e7c4      	b.n	8000818 <_Z5task3v+0x4>
 800088e:	bf00      	nop

08000890 <main>:
}

void GPIO_init(void);

int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	SystemInit(); // Set up clocks/PLL/et. al
 8000894:	f004 fc66 	bl	8005164 <SystemInit>

	UART1_init(); // Debug bridge
 8000898:	f7ff fce6 	bl	8000268 <_Z10UART1_initv>
	GPIO_init();
 800089c:	f000 f86e 	bl	800097c <_Z9GPIO_initv>

	task1_iter = 0;
 80008a0:	f640 2364 	movw	r3, #2660	; 0xa64
 80008a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	task2_iter = 0;
 80008ae:	f640 2368 	movw	r3, #2664	; 0xa68
 80008b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]

//	process_list[0].taskPointer = task1;
//	process_list[1].taskPointer = task2;

	OS_init();
 80008bc:	f000 f950 	bl	8000b60 <_Z7OS_initv>
	create_task(task1);
 80008c0:	f240 701d 	movw	r0, #1821	; 0x71d
 80008c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008c8:	f000 f8e0 	bl	8000a8c <_Z11create_taskPFPvS_E>
	create_task(task2);
 80008cc:	f240 7099 	movw	r0, #1945	; 0x799
 80008d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008d4:	f000 f8da 	bl	8000a8c <_Z11create_taskPFPvS_E>
	create_task(task3);
 80008d8:	f640 0015 	movw	r0, #2069	; 0x815
 80008dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008e0:	f000 f8d4 	bl	8000a8c <_Z11create_taskPFPvS_E>

	yield_time(); // Kick us into the first task
 80008e4:	f7ff be98 	b.w	8000618 <SysTick_Handler>

	while(true);
 80008e8:	e7fe      	b.n	80008e8 <main+0x58>
 80008ea:	bf00      	nop

080008ec <_Z19timer_tick_ISR_initv>:

	return 0; // We should never manage to get here...
}

void timer_tick_ISR_init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM17_init;

	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 80008f2:	f04f 031a 	mov.w	r3, #26
 80008f6:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 8000904:	f04f 0301 	mov.w	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fbd2 	bl	80010b8 <NVIC_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 8000914:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000918:	f04f 0101 	mov.w	r1, #1
 800091c:	f001 fb36 	bl	8001f8c <RCC_APB2PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM17_init.TIM_Period = (10*DT_OS_TICK)-1;
 8000920:	f04f 0309 	mov.w	r3, #9
 8000924:	607b      	str	r3, [r7, #4]
	TIM17_init.TIM_Prescaler = 7199;
 8000926:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800092a:	803b      	strh	r3, [r7, #0]
	TIM17_init.TIM_RepetitionCounter = 0;
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	72bb      	strb	r3, [r7, #10]
	TIM17_init.TIM_ClockDivision = 0;
 8000932:	f04f 0300 	mov.w	r3, #0
 8000936:	813b      	strh	r3, [r7, #8]
	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM17, &TIM17_init);
 800093e:	463b      	mov	r3, r7
 8000940:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000944:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000948:	4619      	mov	r1, r3
 800094a:	f001 fd81 	bl	8002450 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 800094e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000952:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000956:	f04f 0101 	mov.w	r1, #1
 800095a:	f04f 0201 	mov.w	r2, #1
 800095e:	f003 f9d1 	bl	8003d04 <TIM_ITConfig>
	TIM_Cmd(TIM17, ENABLE);
 8000962:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000966:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800096a:	f04f 0101 	mov.w	r1, #1
 800096e:	f001 ff33 	bl	80027d8 <TIM_Cmd>
}
 8000972:	f107 0710 	add.w	r7, r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop

0800097c <_Z9GPIO_initv>:

void GPIO_init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000982:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000986:	f04f 0101 	mov.w	r1, #1
 800098a:	f001 fad5 	bl	8001f38 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_15;
 800098e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000992:	603b      	str	r3, [r7, #0]
	a.GPIO_Mode = GPIO_Mode_OUT;
 8000994:	f04f 0301 	mov.w	r3, #1
 8000998:	713b      	strb	r3, [r7, #4]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	71fb      	strb	r3, [r7, #7]
	a.GPIO_OType = GPIO_OType_PP;
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	71bb      	strb	r3, [r7, #6]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 80009a6:	f04f 0302 	mov.w	r3, #2
 80009aa:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOE, &a);
 80009ac:	463b      	mov	r3, r7
 80009ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009b2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80009b6:	4619      	mov	r1, r3
 80009b8:	f000 f990 	bl	8000cdc <GPIO_Init>
}
 80009bc:	f107 0708 	add.w	r7, r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_Z20read_current_msp_valv>:
extern int current_process;
extern int num_processes_active, active_task;
extern process_block process_list[MAX_NUM_PROCESSES];

uint32_t read_current_msp_val(void)
{
 80009c4:	b490      	push	{r4, r7}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint32_t val;
	asm volatile ("mrs r0, MSP\n\t");
 80009ca:	f3ef 8008 	mrs	r0, MSP
	asm ("mov %[output], r0" : [output] "=r" (val));
 80009ce:	4604      	mov	r4, r0
 80009d0:	607c      	str	r4, [r7, #4]
	return val;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	f107 0708 	add.w	r7, r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc90      	pop	{r4, r7}
 80009de:	4770      	bx	lr

080009e0 <_Z12context_pushv>:

void context_push(void){
 80009e0:	b490      	push	{r4, r7}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  uint32_t tmp;
  asm volatile ("mrs %[temp], msp\n\t"
      "push {r4-r11}\n\t"
      "MSR msp, %[temp]\n\t"  : [temp] "=r" (tmp) );
 80009e6:	f3ef 8408 	mrs	r4, MSP
 80009ea:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009ee:	f384 8808 	msr	MSP, r4
 80009f2:	607c      	str	r4, [r7, #4]
}
 80009f4:	f107 0708 	add.w	r7, r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc90      	pop	{r4, r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_Z11context_popv>:

void context_pop(void){
 8000a00:	b490      	push	{r4, r7}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  uint32_t tmp;
  asm volatile ("mrs %[temp], msp\n\t"
      "pop {r4-r11}\n\t"
      "MSR msp, %[temp]\n\t"  : [temp] "=r" (tmp) );
 8000a06:	f3ef 8408 	mrs	r4, MSP
 8000a0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a0e:	f384 8808 	msr	MSP, r4
 8000a12:	607c      	str	r4, [r7, #4]
}
 8000a14:	f107 0708 	add.w	r7, r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc90      	pop	{r4, r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <_Z17processTable_initP13process_block>:

void processTable_init(process_block *pBlock)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	pBlock->process_stack_pointer = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	pBlock->taskPointer = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
	pBlock->task_id = 1;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f04f 0201 	mov.w	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
	int i = 0;
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 32; ++i)
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e00b      	b.n	8000a66 <_Z17processTable_initP13process_block+0x46>
	{
		pBlock->task_state[i] = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	f102 0204 	add.w	r2, r2, #4
 8000a56:	f04f 0100 	mov.w	r1, #0
 8000a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
{
	pBlock->process_stack_pointer = 0;
	pBlock->taskPointer = 0;
	pBlock->task_id = 1;
	int i = 0;
	for(i = 0; i < 32; ++i)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f103 0301 	add.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b1f      	cmp	r3, #31
 8000a6a:	bfcc      	ite	gt
 8000a6c:	2300      	movgt	r3, #0
 8000a6e:	2301      	movle	r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1eb      	bne.n	8000a4e <_Z17processTable_initP13process_block+0x2e>
	{
		pBlock->task_state[i] = 0;
	}
	pBlock->delayMS = 0;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f04f 0200 	mov.w	r2, #0
 8000a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000a80:	f107 0714 	add.w	r7, r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <_Z11create_taskPFPvS_E>:

int create_task(void *(*tp)(void*))
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	if(num_processes_active < MAX_NUM_PROCESSES)
 8000a94:	f640 2358 	movw	r3, #2648	; 0xa58
 8000a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	dc56      	bgt.n	8000b50 <_Z11create_taskPFPvS_E+0xc4>
	{
		processTable_init(&process_list[num_processes_active]);
 8000aa2:	f640 2358 	movw	r3, #2648	; 0xa58
 8000aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f04f 0294 	mov.w	r2, #148	; 0x94
 8000ab0:	fb02 f203 	mul.w	r2, r2, r3
 8000ab4:	f240 4390 	movw	r3, #1168	; 0x490
 8000ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ffae 	bl	8000a20 <_Z17processTable_initP13process_block>
		process_list[num_processes_active].taskPointer = tp;
 8000ac4:	f640 2358 	movw	r3, #2648	; 0xa58
 8000ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f240 4390 	movw	r3, #1168	; 0x490
 8000ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad6:	f04f 0194 	mov.w	r1, #148	; 0x94
 8000ada:	fb01 f202 	mul.w	r2, r1, r2
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	f103 0304 	add.w	r3, r3, #4
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
		process_list[num_processes_active].task_id = num_processes_active+1;
 8000ae8:	f640 2358 	movw	r3, #2648	; 0xa58
 8000aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	f640 2358 	movw	r3, #2648	; 0xa58
 8000af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f103 0201 	add.w	r2, r3, #1
 8000b00:	f240 4390 	movw	r3, #1168	; 0x490
 8000b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b08:	f04f 0094 	mov.w	r0, #148	; 0x94
 8000b0c:	fb00 f101 	mul.w	r1, r0, r1
 8000b10:	185b      	adds	r3, r3, r1
 8000b12:	601a      	str	r2, [r3, #0]
		num_processes_active += 1;
 8000b14:	f640 2358 	movw	r3, #2648	; 0xa58
 8000b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f103 0201 	add.w	r2, r3, #1
 8000b22:	f640 2358 	movw	r3, #2648	; 0xa58
 8000b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b2a:	601a      	str	r2, [r3, #0]
		return process_list[num_processes_active - 1].task_id;
 8000b2c:	f640 2358 	movw	r3, #2648	; 0xa58
 8000b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f103 32ff 	add.w	r2, r3, #4294967295
 8000b3a:	f240 4390 	movw	r3, #1168	; 0x490
 8000b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b42:	f04f 0194 	mov.w	r1, #148	; 0x94
 8000b46:	fb01 f202 	mul.w	r2, r1, r2
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	e001      	b.n	8000b54 <_Z11create_taskPFPvS_E+0xc8>
	}
	return -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	f107 0708 	add.w	r7, r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop

08000b60 <_Z7OS_initv>:

void OS_init()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	current_process = 0;
 8000b64:	f240 438c 	movw	r3, #1164	; 0x48c
 8000b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	num_processes_active = 0;
 8000b72:	f640 2358 	movw	r3, #2648	; 0xa58
 8000b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
	active_task = -1;
 8000b80:	f640 235c 	movw	r3, #2652	; 0xa5c
 8000b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	601a      	str	r2, [r3, #0]
	*((uint32_t volatile *)0xE000EF34) = (1<<30); // Disable Cortex-M4F lazy stacking, so we don't save registers 2x
 8000b8e:	f64e 7334 	movw	r3, #61236	; 0xef34
 8000b92:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	601a      	str	r2, [r3, #0]
	timer_tick_ISR_init();
 8000b9c:	f7ff fea6 	bl	80008ec <_Z19timer_tick_ISR_initv>
 8000ba0:	b662      	cpsie	i
	__enable_irq();
}
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_Z11os_delay_msm>:

void os_delay_ms(uint32_t millis)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8000bac:	b672      	cpsid	i
	__disable_irq();
	process_list[active_task].delayMS = millis;
 8000bae:	f640 235c 	movw	r3, #2652	; 0xa5c
 8000bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f240 4390 	movw	r3, #1168	; 0x490
 8000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc2:	f04f 0094 	mov.w	r0, #148	; 0x94
 8000bc6:	fb00 f101 	mul.w	r1, r0, r1
 8000bca:	185b      	adds	r3, r3, r1
 8000bcc:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000bd0:	601a      	str	r2, [r3, #0]
//	asm volatile ("mov %[outval], PC" : [outval] "=r" (process_list[active_task].process_pc));
//	process_list[active_task].process_pc += 0x04;
	yield_time();
 8000bd2:	f7ff bd21 	b.w	8000618 <SysTick_Handler>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000bd6:	b662      	cpsie	i
	__enable_irq();
}
 8000bd8:	f107 070c 	add.w	r7, r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf2:	d10c      	bne.n	8000c0e <GPIO_DeInit+0x2a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000bf4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bf8:	f04f 0101 	mov.w	r1, #1
 8000bfc:	f001 fa1a 	bl	8002034 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000c00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c04:	f04f 0100 	mov.w	r1, #0
 8000c08:	f001 fa14 	bl	8002034 <RCC_AHBPeriphResetCmd>
 8000c0c:	e062      	b.n	8000cd4 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOB)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d10c      	bne.n	8000c36 <GPIO_DeInit+0x52>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000c1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c20:	f04f 0101 	mov.w	r1, #1
 8000c24:	f001 fa06 	bl	8002034 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8000c28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c2c:	f04f 0100 	mov.w	r1, #0
 8000c30:	f001 fa00 	bl	8002034 <RCC_AHBPeriphResetCmd>
 8000c34:	e04e      	b.n	8000cd4 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOC)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c3c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d10c      	bne.n	8000c5e <GPIO_DeInit+0x7a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000c44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c48:	f04f 0101 	mov.w	r1, #1
 8000c4c:	f001 f9f2 	bl	8002034 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000c50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c54:	f04f 0100 	mov.w	r1, #0
 8000c58:	f001 f9ec 	bl	8002034 <RCC_AHBPeriphResetCmd>
 8000c5c:	e03a      	b.n	8000cd4 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOD)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c64:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10c      	bne.n	8000c86 <GPIO_DeInit+0xa2>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000c6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c70:	f04f 0101 	mov.w	r1, #1
 8000c74:	f001 f9de 	bl	8002034 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000c78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c7c:	f04f 0100 	mov.w	r1, #0
 8000c80:	f001 f9d8 	bl	8002034 <RCC_AHBPeriphResetCmd>
 8000c84:	e026      	b.n	8000cd4 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOE)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d10c      	bne.n	8000cae <GPIO_DeInit+0xca>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000c94:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000c98:	f04f 0101 	mov.w	r1, #1
 8000c9c:	f001 f9ca 	bl	8002034 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000ca0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ca4:	f04f 0100 	mov.w	r1, #0
 8000ca8:	f001 f9c4 	bl	8002034 <RCC_AHBPeriphResetCmd>
 8000cac:	e012      	b.n	8000cd4 <GPIO_DeInit+0xf0>
  }
  else
  {
    if(GPIOx == GPIOF)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb4:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d10b      	bne.n	8000cd4 <GPIO_DeInit+0xf0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000cbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000cc0:	f04f 0101 	mov.w	r1, #1
 8000cc4:	f001 f9b6 	bl	8002034 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000cc8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ccc:	f04f 0100 	mov.w	r1, #0
 8000cd0:	f001 f9b0 	bl	8002034 <RCC_AHBPeriphResetCmd>
    }
  }
}
 8000cd4:	f107 0708 	add.w	r7, r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e08c      	b.n	8000e1a <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f04f 0201 	mov.w	r2, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d179      	bne.n	8000e12 <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d003      	beq.n	8000d2e <GPIO_Init+0x52>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d13a      	bne.n	8000da4 <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d38:	f04f 0103 	mov.w	r1, #3
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	ea6f 0303 	mvn.w	r3, r3
 8000d44:	401a      	ands	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	795b      	ldrb	r3, [r3, #5]
 8000d52:	4619      	mov	r1, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f04f 0101 	mov.w	r1, #1
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	ea6f 0303 	mvn.w	r3, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	889b      	ldrh	r3, [r3, #4]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	799b      	ldrb	r3, [r3, #6]
 8000d90:	4619      	mov	r1, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000dae:	f04f 0103 	mov.w	r1, #3
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	ea6f 0303 	mvn.w	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000de6:	f04f 0103 	mov.w	r1, #3
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	ea6f 0303 	mvn.w	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	79db      	ldrb	r3, [r3, #7]
 8000e00:	4619      	mov	r1, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f103 0301 	add.w	r3, r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	f67f af6f 	bls.w	8000d00 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000e22:	f107 071c 	add.w	r7, r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f04f 0202 	mov.w	r2, #2
 8000e4a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	71da      	strb	r2, [r3, #7]
}
 8000e5c:	f107 070c 	add.w	r7, r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	60fb      	str	r3, [r7, #12]
}
 8000ea0:	f107 0714 	add.w	r7, r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	8a1b      	ldrh	r3, [r3, #16]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000ece:	f04f 0301 	mov.w	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e002      	b.n	8000edc <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f107 0714 	add.w	r7, r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	8a1b      	ldrh	r3, [r3, #16]
 8000ef8:	b29b      	uxth	r3, r3
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	f107 070c 	add.w	r7, r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8a9b      	ldrh	r3, [r3, #20]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4013      	ands	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000f2a:	f04f 0301 	mov.w	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e002      	b.n	8000f38 <GPIO_ReadOutputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f107 0714 	add.w	r7, r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	8a9b      	ldrh	r3, [r3, #20]
 8000f54:	b29b      	uxth	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	f107 070c 	add.w	r7, r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	f107 070c 	add.w	r7, r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f92:	f107 070c 	add.w	r7, r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	807a      	strh	r2, [r7, #2]
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	e002      	b.n	8000fc0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	887a      	ldrh	r2, [r7, #2]
 8000fbe:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 8000fc0:	f107 070c 	add.w	r7, r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	829a      	strh	r2, [r3, #20]
}
 8000fde:	f107 070c 	add.w	r7, r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	807a      	strh	r2, [r7, #2]
 8000ff6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001004:	787a      	ldrb	r2, [r7, #1]
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001026:	b29b      	uxth	r3, r3
 8001028:	4619      	mov	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f101 0108 	add.w	r1, r1, #8
 8001030:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800103e:	f04f 000f 	mov.w	r0, #15
 8001042:	fa00 f303 	lsl.w	r3, r0, r3
 8001046:	ea6f 0303 	mvn.w	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f102 0208 	add.w	r2, r2, #8
 8001052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f102 0208 	add.w	r2, r2, #8
 8001066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001076:	b29b      	uxth	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f102 0208 	add.w	r2, r2, #8
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001086:	f107 0714 	add.w	r7, r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001098:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800109c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 80010a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	f107 070c 	add.w	r7, r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	f04f 030f 	mov.w	r3, #15
 80010d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	78db      	ldrb	r3, [r3, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d047      	beq.n	800116a <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80010de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	ea6f 0303 	mvn.w	r3, r3
 80010e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010ec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80010f0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f1c3 0304 	rsb	r3, r3, #4
 80010f8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001102:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	461a      	mov	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4313      	orrs	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001128:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800112a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800112e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	185b      	adds	r3, r3, r1
 800113e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001142:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001146:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001152:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	7809      	ldrb	r1, [r1, #0]
 8001158:	f001 011f 	and.w	r1, r1, #31
 800115c:	f04f 0001 	mov.w	r0, #1
 8001160:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001168:	e014      	b.n	8001194 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800116a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800116e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800117a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	7809      	ldrb	r1, [r1, #0]
 8001180:	f001 011f 	and.w	r1, r1, #31
 8001184:	f04f 0001 	mov.w	r0, #1
 8001188:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800118c:	f102 0220 	add.w	r2, r2, #32
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001194:	f107 071c 	add.w	r7, r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80011aa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80011b8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	430a      	orrs	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]
}
 80011c2:	f107 070c 	add.w	r7, r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	71fa      	strb	r2, [r7, #7]
 80011d8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 80011e0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011e8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80011ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80011f0:	6911      	ldr	r1, [r2, #16]
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	e00d      	b.n	8001216 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80011fa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001202:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001206:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800120a:	6911      	ldr	r1, [r2, #16]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	ea6f 0202 	mvn.w	r2, r2
 8001212:	400a      	ands	r2, r1
 8001214:	611a      	str	r2, [r3, #16]
  }
}
 8001216:	f107 070c 	add.w	r7, r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d10c      	bne.n	8001248 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800122e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001232:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001236:	f24e 0210 	movw	r2, #57360	; 0xe010
 800123a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	f042 0204 	orr.w	r2, r2, #4
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e00b      	b.n	8001260 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001248:	f24e 0310 	movw	r3, #57360	; 0xe010
 800124c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001250:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001254:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f022 0204 	bic.w	r2, r2, #4
 800125e:	601a      	str	r2, [r3, #0]
  }
}
 8001260:	f107 070c 	add.w	r7, r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <RCC_DeInit>:
  * @note     LSI, LSE and RTC clocks                  
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8001288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001298:	6859      	ldr	r1, [r3, #4]
 800129a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800129e:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 80012a2:	400b      	ands	r3, r1
 80012a4:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012c0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012d8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012ea:	6852      	ldr	r2, [r2, #4]
 80012ec:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012f0:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001304:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001308:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 800130e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001312:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001320:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8001324:	f6c0 7300 	movt	r3, #3840	; 0xf00
 8001328:	400b      	ands	r3, r1
 800132a:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
}
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 800134a:	f241 0302 	movw	r3, #4098	; 0x1002
 800134e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8001358:	f241 0302 	movw	r3, #4098	; 0x1002
 800135c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	701a      	strb	r2, [r3, #0]

}
 8001364:	f107 070c 	add.w	r7, r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001388:	f04f 0011 	mov.w	r0, #17
 800138c:	f000 ff00 	bl	8002190 <RCC_GetFlagStatus>
 8001390:	4603      	mov	r3, r0
 8001392:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f103 0301 	add.w	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013a2:	d002      	beq.n	80013aa <RCC_WaitForHSEStartUp+0x3a>
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ee      	beq.n	8001388 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80013aa:	f04f 0011 	mov.w	r0, #17
 80013ae:	f000 feef 	bl	8002190 <RCC_GetFlagStatus>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 80013b8:	f04f 0301 	mov.w	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e002      	b.n	80013c6 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	f107 0708 	add.w	r7, r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	f107 0714 	add.w	r7, r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	f107 070c 	add.w	r7, r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800144c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800146c:	6a12      	ldr	r2, [r2, #32]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800147c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001480:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001484:	6a11      	ldr	r1, [r2, #32]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	430a      	orrs	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
}
 800148c:	f107 070c 	add.w	r7, r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014b0:	6a12      	ldr	r2, [r2, #32]
 80014b2:	f022 0218 	bic.w	r2, r2, #24
 80014b6:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014c8:	6a11      	ldr	r1, [r2, #32]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	621a      	str	r2, [r3, #32]
}
 80014d0:	f107 070c 	add.w	r7, r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80014e6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80014ea:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	f107 070c 	add.w	r7, r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001516:	6852      	ldr	r2, [r2, #4]
 8001518:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800151c:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800152e:	6851      	ldr	r1, [r2, #4]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4302      	orrs	r2, r0
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]
}
 800153a:	f107 070c 	add.w	r7, r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800154e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001552:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	f107 070c 	add.w	r7, r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f023 030f 	bic.w	r3, r3, #15
 8001584:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800159a:	f107 0714 	add.w	r7, r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80015ae:	f04f 034c 	mov.w	r3, #76	; 0x4c
 80015b2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	f107 070c 	add.w	r7, r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 80015ce:	f241 0307 	movw	r3, #4103	; 0x1007
 80015d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	f107 070c 	add.w	r7, r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f023 0303 	bic.w	r3, r3, #3
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]
}
 800161a:	f107 0714 	add.w	r7, r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	b2db      	uxtb	r3, r3
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
}
 800167a:	f107 0714 	add.w	r7, r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	605a      	str	r2, [r3, #4]
}
 80016ba:	f107 0714 	add.w	r7, r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80016e4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
}
 80016fe:	f107 0714 	add.w	r7, r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00a      	beq.n	800176c <RCC_GetClocksFreq+0x64>
 8001756:	2b08      	cmp	r3, #8
 8001758:	d00f      	beq.n	800177a <RCC_GetClocksFreq+0x72>
 800175a:	2b00      	cmp	r3, #0
 800175c:	d148      	bne.n	80017f0 <RCC_GetClocksFreq+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001764:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001768:	6013      	str	r3, [r2, #0]
      break;
 800176a:	e048      	b.n	80017fe <RCC_GetClocksFreq+0xf6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001772:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001776:	6013      	str	r3, [r2, #0]
      break;
 8001778:	e041      	b.n	80017fe <RCC_GetClocksFreq+0xf6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001788:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80017a0:	f103 0302 	add.w	r3, r3, #2
 80017a4:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <RCC_GetClocksFreq+0xb6>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80017b2:	f2c0 033d 	movt	r3, #61	; 0x3d
 80017b6:	fb03 f302 	mul.w	r3, r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e014      	b.n	80017e8 <RCC_GetClocksFreq+0xe0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	f103 0301 	add.w	r3, r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80017d2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80017d6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	601a      	str	r2, [r3, #0]
      break;
 80017ee:	e006      	b.n	80017fe <RCC_GetClocksFreq+0xf6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80017f6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80017fa:	6013      	str	r3, [r2, #0]
      break;
 80017fc:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001814:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8001816:	f240 0300 	movw	r3, #0
 800181a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181e:	6a3a      	ldr	r2, [r7, #32]
 8001820:	189b      	adds	r3, r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	fa22 f203 	lsr.w	r2, r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001844:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800184c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800184e:	f240 0300 	movw	r3, #0
 8001852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001856:	6a3a      	ldr	r2, [r7, #32]
 8001858:	189b      	adds	r3, r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	fa22 f203 	lsr.w	r2, r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800187c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001884:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001886:	f240 0300 	movw	r3, #0
 800188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	189b      	adds	r3, r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	fa22 f203 	lsr.w	r2, r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018b4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80018bc:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80018be:	f240 0310 	movw	r3, #16
 80018c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <RCC_GetClocksFreq+0x1e0>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	e003      	b.n	80018f0 <RCC_GetClocksFreq+0x1e8>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80018fe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8001906:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001908:	f240 0310 	movw	r3, #16
 800190c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001916:	b29b      	uxth	r3, r3
 8001918:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <RCC_GetClocksFreq+0x22a>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fbb2 f2f3 	udiv	r2, r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	e003      	b.n	800193a <RCC_GetClocksFreq+0x232>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d106      	bne.n	800195a <RCC_GetClocksFreq+0x252>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001952:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	e003      	b.n	8001962 <RCC_GetClocksFreq+0x25a>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <RCC_GetClocksFreq+0x27a>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800197a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800197e:	61d3      	str	r3, [r2, #28]
 8001980:	e003      	b.n	800198a <RCC_GetClocksFreq+0x282>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <RCC_GetClocksFreq+0x2b2>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d109      	bne.n	80019ba <RCC_GetClocksFreq+0x2b2>
  && (apb2presc == ahbpresc)) 
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d105      	bne.n	80019ba <RCC_GetClocksFreq+0x2b2>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	e003      	b.n	80019c2 <RCC_GetClocksFreq+0x2ba>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00e      	beq.n	80019f2 <RCC_GetClocksFreq+0x2ea>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	429a      	cmp	r2, r3
 80019dc:	d109      	bne.n	80019f2 <RCC_GetClocksFreq+0x2ea>
  && (apb2presc == ahbpresc))
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d105      	bne.n	80019f2 <RCC_GetClocksFreq+0x2ea>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
 80019f0:	e003      	b.n	80019fa <RCC_GetClocksFreq+0x2f2>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d104      	bne.n	8001a16 <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
 8001a14:	e02a      	b.n	8001a6c <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d104      	bne.n	8001a32 <RCC_GetClocksFreq+0x32a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a30:	e01c      	b.n	8001a6c <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d104      	bne.n	8001a4e <RCC_GetClocksFreq+0x346>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a4c:	e00e      	b.n	8001a6c <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d105      	bne.n	8001a6c <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001a66:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001a6a:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d104      	bne.n	8001a88 <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a86:	e02d      	b.n	8001ae4 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9a:	d104      	bne.n	8001aa6 <RCC_GetClocksFreq+0x39e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa4:	e01e      	b.n	8001ae4 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ab8:	d104      	bne.n	8001ac4 <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac2:	e00f      	b.n	8001ae4 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ad6:	d105      	bne.n	8001ae4 <RCC_GetClocksFreq+0x3dc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ade:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d104      	bne.n	8001b00 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
 8001afe:	e02d      	b.n	8001b5c <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b12:	d104      	bne.n	8001b1e <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1c:	e01e      	b.n	8001b5c <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001b2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b30:	d104      	bne.n	8001b3c <RCC_GetClocksFreq+0x434>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3a:	e00f      	b.n	8001b5c <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001b4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b4e:	d105      	bne.n	8001b5c <RCC_GetClocksFreq+0x454>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001b56:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d104      	bne.n	8001b78 <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	e02d      	b.n	8001bd4 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b8a:	d104      	bne.n	8001b96 <RCC_GetClocksFreq+0x48e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
 8001b94:	e01e      	b.n	8001bd4 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ba8:	d104      	bne.n	8001bb4 <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	e00f      	b.n	8001bd4 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001bc6:	d105      	bne.n	8001bd4 <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001bce:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001bd2:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <RCC_GetClocksFreq+0x4e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
 8001bee:	e02d      	b.n	8001c4c <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c02:	d104      	bne.n	8001c0e <RCC_GetClocksFreq+0x506>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c0c:	e01e      	b.n	8001c4c <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8001c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c20:	d104      	bne.n	8001c2c <RCC_GetClocksFreq+0x524>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2a:	e00f      	b.n	8001c4c <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001c3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c3e:	d105      	bne.n	8001c4c <RCC_GetClocksFreq+0x544>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001c46:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 8001c4c:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <RCC_ADCCLKConfig+0x36>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c86:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8c:	e00b      	b.n	8001ca6 <RCC_ADCCLKConfig+0x4e>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ca0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cbe:	f107 0714 	add.w	r7, r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001cdc:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <RCC_I2CCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cf0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf6:	f022 0220 	bic.w	r2, r2, #32
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfc:	e00b      	b.n	8001d16 <RCC_I2CCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8001cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d10:	f022 0210 	bic.w	r2, r2, #16
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d26:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d2e:	f107 0714 	add.w	r7, r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <RCC_TIMCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6c:	e00b      	b.n	8001d86 <RCC_TIMCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d9e:	f107 0714 	add.w	r7, r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d84e      	bhi.n	8001e66 <RCC_USARTCLKConfig+0xbe>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <RCC_USARTCLKConfig+0x28>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de5 	.word	0x08001de5
 8001dd4:	08001dff 	.word	0x08001dff
 8001dd8:	08001e19 	.word	0x08001e19
 8001ddc:	08001e33 	.word	0x08001e33
 8001de0:	08001e4d 	.word	0x08001e4d
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8001de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df6:	f022 0203 	bic.w	r2, r2, #3
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001dfc:	e034      	b.n	8001e68 <RCC_USARTCLKConfig+0xc0>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e10:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001e16:	e027      	b.n	8001e68 <RCC_USARTCLKConfig+0xc0>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e2a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001e30:	e01a      	b.n	8001e68 <RCC_USARTCLKConfig+0xc0>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001e4a:	e00d      	b.n	8001e68 <RCC_USARTCLKConfig+0xc0>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e5e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001e64:	e000      	b.n	8001e68 <RCC_USARTCLKConfig+0xc0>
    default:
      break;
 8001e66:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e80:	f107 0714 	add.w	r7, r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001e94:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 8001e98:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	f107 070c 	add.w	r7, r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ec0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ec4:	6a11      	ldr	r1, [r2, #32]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	621a      	str	r2, [r3, #32]
}
 8001ecc:	f107 070c 	add.w	r7, r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ee0:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8001ee4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	f107 070c 	add.w	r7, r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001f02:	f240 433c 	movw	r3, #1084	; 0x43c
 8001f06:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	601a      	str	r2, [r3, #0]
}
 8001f0e:	f107 070c 	add.w	r7, r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001f22:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001f26:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	f107 070c 	add.w	r7, r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f5a:	6951      	ldr	r1, [r2, #20]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	e00d      	b.n	8001f80 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f74:	6951      	ldr	r1, [r2, #20]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	ea6f 0202 	mvn.w	r2, r2
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	615a      	str	r2, [r3, #20]
  }
}
 8001f80:	f107 070c 	add.w	r7, r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001faa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fae:	6991      	ldr	r1, [r2, #24]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	619a      	str	r2, [r3, #24]
 8001fb6:	e00d      	b.n	8001fd4 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fc8:	6991      	ldr	r1, [r2, #24]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	ea6f 0202 	mvn.w	r2, r2
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	619a      	str	r2, [r3, #24]
  }
}
 8001fd4:	f107 070c 	add.w	r7, r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ffa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ffe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002002:	69d1      	ldr	r1, [r2, #28]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	430a      	orrs	r2, r1
 8002008:	61da      	str	r2, [r3, #28]
 800200a:	e00d      	b.n	8002028 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800200c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002010:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002018:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800201c:	69d1      	ldr	r1, [r2, #28]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	ea6f 0202 	mvn.w	r2, r2
 8002024:	400a      	ands	r2, r1
 8002026:	61da      	str	r2, [r3, #28]
  }
}
 8002028:	f107 070c 	add.w	r7, r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800204e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002052:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002056:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	430a      	orrs	r2, r1
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
 800205e:	e00d      	b.n	800207c <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800206c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002070:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	ea6f 0202 	mvn.w	r2, r2
 8002078:	400a      	ands	r2, r1
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800207c:	f107 070c 	add.w	r7, r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800209a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020aa:	68d1      	ldr	r1, [r2, #12]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e00d      	b.n	80020d0 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80020b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020c4:	68d1      	ldr	r1, [r2, #12]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	ea6f 0202 	mvn.w	r2, r2
 80020cc:	400a      	ands	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
  }
}
 80020d0:	f107 070c 	add.w	r7, r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop

080020dc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020fe:	6911      	ldr	r1, [r2, #16]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	e00d      	b.n	8002124 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002114:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002118:	6911      	ldr	r1, [r2, #16]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	ea6f 0202 	mvn.w	r2, r2
 8002120:	400a      	ands	r2, r1
 8002122:	611a      	str	r2, [r3, #16]
  }
}
 8002124:	f107 070c 	add.w	r7, r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	71fa      	strb	r2, [r7, #7]
 800213c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800213e:	79bb      	ldrb	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8002144:	f241 0309 	movw	r3, #4105	; 0x1009
 8002148:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800214c:	f241 0209 	movw	r2, #4105	; 0x1009
 8002150:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	b2d1      	uxtb	r1, r2
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	430a      	orrs	r2, r1
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e010      	b.n	8002184 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8002162:	f241 0309 	movw	r3, #4105	; 0x1009
 8002166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800216a:	f241 0209 	movw	r2, #4105	; 0x1009
 800216e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	b2d1      	uxtb	r1, r2
 8002176:	79fa      	ldrb	r2, [r7, #7]
 8002178:	ea6f 0202 	mvn.w	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	400a      	ands	r2, r1
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
  }
}
 8002184:	f107 070c 	add.w	r7, r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 80021bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e019      	b.n	80021fe <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00f      	b.n	80021fe <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d106      	bne.n	80021f2 <RCC_GetFlagStatus+0x62>
  {
    statusreg = RCC->CFGR;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e005      	b.n	80021fe <RCC_GetFlagStatus+0x6e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <RCC_GetFlagStatus+0x8e>
  {
    bitstatus = SET;
 8002216:	f04f 0301 	mov.w	r3, #1
 800221a:	74fb      	strb	r3, [r7, #19]
 800221c:	e002      	b.n	8002224 <RCC_GetFlagStatus+0x94>
  }
  else
  {
    bitstatus = RESET;
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
}
 8002226:	4618      	mov	r0, r3
 8002228:	f107 071c 	add.w	r7, r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop

08002234 <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002244:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800227a:	f04f 0301 	mov.w	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e002      	b.n	8002288 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	f107 0714 	add.w	r7, r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80022a2:	f241 030a 	movw	r3, #4106	; 0x100a
 80022a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	701a      	strb	r2, [r3, #0]
}
 80022ae:	f107 070c 	add.w	r7, r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80022c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d10c      	bne.n	80022e8 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80022ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022d2:	f04f 0101 	mov.w	r1, #1
 80022d6:	f7ff fed7 	bl	8002088 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80022da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	f7ff fed1 	bl	8002088 <RCC_APB2PeriphResetCmd>
 80022e6:	e0af      	b.n	8002448 <TIM_DeInit+0x190>
  } 
  else if (TIMx == TIM2) 
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d10c      	bne.n	800230a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80022f0:	f04f 0001 	mov.w	r0, #1
 80022f4:	f04f 0101 	mov.w	r1, #1
 80022f8:	f7ff fef0 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80022fc:	f04f 0001 	mov.w	r0, #1
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	f7ff feea 	bl	80020dc <RCC_APB1PeriphResetCmd>
 8002308:	e09e      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM3)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002310:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002314:	429a      	cmp	r2, r3
 8002316:	d10c      	bne.n	8002332 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002318:	f04f 0002 	mov.w	r0, #2
 800231c:	f04f 0101 	mov.w	r1, #1
 8002320:	f7ff fedc 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002324:	f04f 0002 	mov.w	r0, #2
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	f7ff fed6 	bl	80020dc <RCC_APB1PeriphResetCmd>
 8002330:	e08a      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM4)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002338:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800233c:	429a      	cmp	r2, r3
 800233e:	d10c      	bne.n	800235a <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002340:	f04f 0004 	mov.w	r0, #4
 8002344:	f04f 0101 	mov.w	r1, #1
 8002348:	f7ff fec8 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800234c:	f04f 0004 	mov.w	r0, #4
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	f7ff fec2 	bl	80020dc <RCC_APB1PeriphResetCmd>
 8002358:	e076      	b.n	8002448 <TIM_DeInit+0x190>
  }   
  else if (TIMx == TIM6)  
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002360:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002364:	429a      	cmp	r2, r3
 8002366:	d10c      	bne.n	8002382 <TIM_DeInit+0xca>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002368:	f04f 0010 	mov.w	r0, #16
 800236c:	f04f 0101 	mov.w	r1, #1
 8002370:	f7ff feb4 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002374:	f04f 0010 	mov.w	r0, #16
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f7ff feae 	bl	80020dc <RCC_APB1PeriphResetCmd>
 8002380:	e062      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM7)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002388:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800238c:	429a      	cmp	r2, r3
 800238e:	d10c      	bne.n	80023aa <TIM_DeInit+0xf2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002390:	f04f 0020 	mov.w	r0, #32
 8002394:	f04f 0101 	mov.w	r1, #1
 8002398:	f7ff fea0 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800239c:	f04f 0020 	mov.w	r0, #32
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	f7ff fe9a 	bl	80020dc <RCC_APB1PeriphResetCmd>
 80023a8:	e04e      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM8)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80023b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10c      	bne.n	80023d2 <TIM_DeInit+0x11a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80023b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023bc:	f04f 0101 	mov.w	r1, #1
 80023c0:	f7ff fe62 	bl	8002088 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80023c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	f7ff fe5c 	bl	8002088 <RCC_APB2PeriphResetCmd>
 80023d0:	e03a      	b.n	8002448 <TIM_DeInit+0x190>
  }    
  else if (TIMx == TIM15)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10c      	bne.n	80023fa <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80023e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80023e4:	f04f 0101 	mov.w	r1, #1
 80023e8:	f7ff fe4e 	bl	8002088 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 80023ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	f7ff fe48 	bl	8002088 <RCC_APB2PeriphResetCmd>
 80023f8:	e026      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM16) 
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002400:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002404:	429a      	cmp	r2, r3
 8002406:	d10c      	bne.n	8002422 <TIM_DeInit+0x16a>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002408:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800240c:	f04f 0101 	mov.w	r1, #1
 8002410:	f7ff fe3a 	bl	8002088 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8002414:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	f7ff fe34 	bl	8002088 <RCC_APB2PeriphResetCmd>
 8002420:	e012      	b.n	8002448 <TIM_DeInit+0x190>
  }  
  else
  { 
    if (TIMx == TIM17) 
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002428:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800242c:	429a      	cmp	r2, r3
 800242e:	d10b      	bne.n	8002448 <TIM_DeInit+0x190>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002430:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002434:	f04f 0101 	mov.w	r1, #1
 8002438:	f7ff fe26 	bl	8002088 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 800243c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f7ff fe20 	bl	8002088 <RCC_APB2PeriphResetCmd>
    }   
  }
}
 8002448:	f107 0708 	add.w	r7, r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800246c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002470:	429a      	cmp	r2, r3
 8002472:	d018      	beq.n	80024a6 <TIM_TimeBaseInit+0x56>
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800247a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800247e:	429a      	cmp	r2, r3
 8002480:	d011      	beq.n	80024a6 <TIM_TimeBaseInit+0x56>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002488:	d00d      	beq.n	80024a6 <TIM_TimeBaseInit+0x56>
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002490:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002494:	429a      	cmp	r2, r3
 8002496:	d006      	beq.n	80024a6 <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d108      	bne.n	80024b8 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ac:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	885a      	ldrh	r2, [r3, #2]
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d00f      	beq.n	80024e6 <TIM_TimeBaseInit+0x96>
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d008      	beq.n	80024e6 <TIM_TimeBaseInit+0x96>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024da:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	891a      	ldrh	r2, [r3, #8]
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	89fa      	ldrh	r2, [r7, #14]
 80024ea:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002502:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002506:	429a      	cmp	r2, r3
 8002508:	d01b      	beq.n	8002542 <TIM_TimeBaseInit+0xf2>
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002510:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002514:	429a      	cmp	r2, r3
 8002516:	d014      	beq.n	8002542 <TIM_TimeBaseInit+0xf2>
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800251e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002522:	429a      	cmp	r2, r3
 8002524:	d00d      	beq.n	8002542 <TIM_TimeBaseInit+0xf2>
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800252c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002530:	429a      	cmp	r2, r3
 8002532:	d006      	beq.n	8002542 <TIM_TimeBaseInit+0xf2>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800253a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800253e:	429a      	cmp	r2, r3
 8002540:	d104      	bne.n	800254c <TIM_TimeBaseInit+0xfc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7a9b      	ldrb	r3, [r3, #10]
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f04f 0201 	mov.w	r2, #1
 8002552:	615a      	str	r2, [r3, #20]
}
 8002554:	f107 0714 	add.w	r7, r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	729a      	strb	r2, [r3, #10]
}
 8002590:	f107 070c 	add.w	r7, r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	460a      	mov	r2, r1
 80025a8:	807a      	strh	r2, [r7, #2]
 80025aa:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80025b2:	883a      	ldrh	r2, [r7, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]
}
 80025b8:	f107 070c 	add.w	r7, r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80025e4:	89fa      	ldrh	r2, [r7, #14]
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	89fa      	ldrh	r2, [r7, #14]
 80025f0:	801a      	strh	r2, [r3, #0]
}
 80025f2:	f107 0714 	add.w	r7, r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800260c:	f107 070c 	add.w	r7, r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002628:	f107 070c 	add.w	r7, r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002640:	4618      	mov	r0, r3
 8002642:	f107 070c 	add.w	r7, r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b29b      	uxth	r3, r3
}
 800265a:	4618      	mov	r0, r3
 800265c:	f107 070c 	add.w	r7, r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	b29a      	uxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f023 0302 	bic.w	r3, r3, #2
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	801a      	strh	r2, [r3, #0]
  }
}
 800269c:	f107 070c 	add.w	r7, r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e007      	b.n	80026dc <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f023 0304 	bic.w	r3, r3, #4
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	801a      	strh	r2, [r3, #0]
  }
}
 80026dc:	f107 070c 	add.w	r7, r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	e007      	b.n	800271c <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	801a      	strh	r2, [r3, #0]
  }  
}
 800271c:	f107 070c 	add.w	r7, r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	801a      	strh	r2, [r3, #0]
  }
}
 800275c:	f107 070c 	add.w	r7, r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f023 0308 	bic.w	r3, r3, #8
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29a      	uxth	r2, r3
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	4313      	orrs	r3, r2
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	801a      	strh	r2, [r3, #0]
}
 8002794:	f107 070c 	add.w	r7, r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	801a      	strh	r2, [r3, #0]
}
 80027cc:	f107 070c 	add.w	r7, r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop

080027d8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e007      	b.n	800280c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	801a      	strh	r2, [r3, #0]
  }
}
 800280c:	f107 070c 	add.w	r7, r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 0201 	bic.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f023 0303 	bic.w	r3, r3, #3
 8002864:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0302 	bic.w	r3, r3, #2
 8002876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	899b      	ldrh	r3, [r3, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	889b      	ldrh	r3, [r3, #4]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002892:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002896:	429a      	cmp	r2, r3
 8002898:	d01b      	beq.n	80028d2 <TIM_OC1Init+0xba>
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80028a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d014      	beq.n	80028d2 <TIM_OC1Init+0xba>
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d00d      	beq.n	80028d2 <TIM_OC1Init+0xba>
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80028bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d006      	beq.n	80028d2 <TIM_OC1Init+0xba>
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80028ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d123      	bne.n	800291a <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f023 0308 	bic.w	r3, r3, #8
 80028d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	89db      	ldrh	r3, [r3, #14]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	88db      	ldrh	r3, [r3, #6]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	8a1b      	ldrh	r3, [r3, #16]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	8a5b      	ldrh	r3, [r3, #18]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	621a      	str	r2, [r3, #32]
}
 8002934:	f107 071c 	add.w	r7, r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 0210 	bic.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0320 	bic.w	r3, r3, #32
 80029a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	899b      	ldrh	r3, [r3, #12]
 80029a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	889b      	ldrh	r3, [r3, #4]
 80029b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d006      	beq.n	80029dc <TIM_OC2Init+0x9c>
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80029d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029d8:	429a      	cmp	r2, r3
 80029da:	d12b      	bne.n	8002a34 <TIM_OC2Init+0xf4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	89db      	ldrh	r3, [r3, #14]
 80029e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f8:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	88db      	ldrh	r3, [r3, #6]
 80029fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	8a1b      	ldrh	r3, [r3, #16]
 8002a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	8a5b      	ldrh	r3, [r3, #18]
 8002a2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	f107 071c 	add.w	r7, r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f023 0303 	bic.w	r3, r3, #3
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	899b      	ldrh	r3, [r3, #12]
 8002ab8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	889b      	ldrh	r3, [r3, #4]
 8002ac6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002ad6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d006      	beq.n	8002aec <TIM_OC3Init+0x94>
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002ae4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d12b      	bne.n	8002b44 <TIM_OC3Init+0xec>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	89db      	ldrh	r3, [r3, #14]
 8002af8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b08:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	88db      	ldrh	r3, [r3, #6]
 8002b0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	8a1b      	ldrh	r3, [r3, #16]
 8002b2c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	8a5b      	ldrh	r3, [r3, #18]
 8002b3a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	f107 071c 	add.w	r7, r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	899b      	ldrh	r3, [r3, #12]
 8002bcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	889b      	ldrh	r3, [r3, #4]
 8002bda:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002bea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d006      	beq.n	8002c00 <TIM_OC4Init+0x98>
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002bf8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d10a      	bne.n	8002c16 <TIM_OC4Init+0xae>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	8a1b      	ldrh	r3, [r3, #16]
 8002c0c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	621a      	str	r2, [r3, #32]
}
 8002c30:	f107 071c 	add.w	r7, r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop

08002c3c <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	899b      	ldrh	r3, [r3, #12]
 8002c94:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002cb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d006      	beq.n	8002cc8 <TIM_OC5Init+0x8c>
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002cc0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10a      	bne.n	8002cde <TIM_OC5Init+0xa2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	8a1b      	ldrh	r3, [r3, #16]
 8002cd4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	f107 071c 	add.w	r7, r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop

08002d04 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d44:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	899b      	ldrh	r3, [r3, #12]
 8002d60:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	889b      	ldrh	r3, [r3, #4]
 8002d6e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002d7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d006      	beq.n	8002d94 <TIM_OC6Init+0x90>
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002d8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d103      	bne.n	8002d9c <TIM_OC6Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	f107 071c 	add.w	r7, r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dde:	e005      	b.n	8002dec <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8002dec:	f107 070c 	add.w	r7, r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58
 8002e16:	e005      	b.n	8002e24 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8002e24:	f107 070c 	add.w	r7, r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop

08002e30 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e4e:	e005      	b.n	8002e5c <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8002e5c:	f107 070c 	add.w	r7, r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	825a      	strh	r2, [r3, #18]
}
 8002eb0:	f107 070c 	add.w	r7, r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f103 0318 	add.w	r3, r3, #24
 8002ee0:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	f04f 0201 	mov.w	r2, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	8a7b      	ldrh	r3, [r7, #18]
 8002ef4:	ea6f 0303 	mvn.w	r3, r3
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <TIM_SelectOCxM+0x50>
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d115      	bne.n	8002f38 <TIM_SelectOCxM+0x7c>
  {
    tmp += (TIM_Channel>>1);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f28:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6811      	ldr	r1, [r2, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e019      	b.n	8002f6c <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	f1a3 0304 	sub.w	r3, r3, #4
 8002f3e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	6811      	ldr	r1, [r2, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	b292      	uxth	r2, r2
 8002f62:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002f66:	b292      	uxth	r2, r2
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
  }
}
 8002f6c:	f107 071c 	add.w	r7, r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f88:	f107 070c 	add.w	r7, r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fa4:	f107 070c 	add.w	r7, r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop

08002fb0 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002fc0:	f107 070c 	add.w	r7, r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop

08002fcc <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002fdc:	f107 070c 	add.w	r7, r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop

08002fe8 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002ff8:	f107 070c 	add.w	r7, r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop

08003004 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003014:	f107 070c 	add.w	r7, r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	f107 0714 	add.w	r7, r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	f107 0714 	add.w	r7, r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	61da      	str	r2, [r3, #28]
}
 80030ca:	f107 0714 	add.w	r7, r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	61da      	str	r2, [r3, #28]
}
 8003106:	f107 0714 	add.w	r7, r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800313e:	f107 0714 	add.w	r7, r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
}
 800317a:	f107 0714 	add.w	r7, r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0308 	bic.w	r3, r3, #8
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	619a      	str	r2, [r3, #24]
}
 80031b2:	f107 0714 	add.w	r7, r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031da:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	f107 0714 	add.w	r7, r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0308 	bic.w	r3, r3, #8
 8003216:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]
}
 8003226:	f107 0714 	add.w	r7, r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]
}
 8003262:	f107 0714 	add.w	r7, r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0308 	bic.w	r3, r3, #8
 800328a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
}
 800329a:	f107 0714 	add.w	r7, r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
}
 80032d6:	f107 0714 	add.w	r7, r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	f107 0714 	add.w	r7, r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003336:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	f107 0714 	add.w	r7, r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	61da      	str	r2, [r3, #28]
}
 8003382:	f107 0714 	add.w	r7, r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	61da      	str	r2, [r3, #28]
}
 80033be:	f107 0714 	add.w	r7, r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	f107 0714 	add.w	r7, r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800341e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	f107 0714 	add.w	r7, r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	61da      	str	r2, [r3, #28]
}
 800346a:	f107 0714 	add.w	r7, r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003492:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	61da      	str	r2, [r3, #28]
}
 80034a6:	f107 0714 	add.w	r7, r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80034de:	f107 0714 	add.w	r7, r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003506:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
}
 800351a:	f107 0714 	add.w	r7, r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]
}
 800354a:	f107 070c 	add.w	r7, r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0302 	bic.w	r3, r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
}
 8003582:	f107 0714 	add.w	r7, r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0308 	bic.w	r3, r3, #8
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	f107 0714 	add.w	r7, r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0320 	bic.w	r3, r3, #32
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 80035e4:	887b      	ldrh	r3, [r7, #2]
 80035e6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	f107 0714 	add.w	r7, r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	f107 0714 	add.w	r7, r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	f107 0714 	add.w	r7, r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	f107 0714 	add.w	r7, r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	f107 0714 	add.w	r7, r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	f107 0714 	add.w	r7, r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	f107 0714 	add.w	r7, r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	460a      	mov	r2, r1
 8003774:	807a      	strh	r2, [r7, #2]
 8003776:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	f04f 0201 	mov.w	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	ea6f 0303 	mvn.w	r3, r3
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	8839      	ldrh	r1, [r7, #0]
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	f107 0714 	add.w	r7, r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	460a      	mov	r2, r1
 80037c4:	807a      	strh	r2, [r7, #2]
 80037c6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	f04f 0204 	mov.w	r2, #4
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	ea6f 0303 	mvn.w	r3, r3
 80037e4:	401a      	ands	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	8839      	ldrh	r1, [r7, #0]
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	621a      	str	r2, [r3, #32]
}
 80037fc:	f107 0714 	add.w	r7, r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800381e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003820:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003824:	891b      	ldrh	r3, [r3, #8]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fd02 	bl	8004230 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	88db      	ldrh	r3, [r3, #6]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4619      	mov	r1, r3
 8003834:	f000 f8ec 	bl	8003a10 <TIM_SetIC1Prescaler>
 8003838:	e036      	b.n	80038a8 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d10f      	bne.n	8003862 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003846:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003848:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800384a:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800384c:	891b      	ldrh	r3, [r3, #8]
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fd2a 	bl	80042a8 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	88db      	ldrh	r3, [r3, #6]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4619      	mov	r1, r3
 800385c:	f000 f8f0 	bl	8003a40 <TIM_SetIC2Prescaler>
 8003860:	e022      	b.n	80038a8 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10f      	bne.n	800388a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800386e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003870:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003874:	891b      	ldrh	r3, [r3, #8]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fd60 	bl	800433c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	88db      	ldrh	r3, [r3, #6]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4619      	mov	r1, r3
 8003884:	f000 f8f6 	bl	8003a74 <TIM_SetIC3Prescaler>
 8003888:	e00e      	b.n	80038a8 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800388e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003890:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003894:	891b      	ldrh	r3, [r3, #8]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd96 	bl	80043c8 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	88db      	ldrh	r3, [r3, #6]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4619      	mov	r1, r3
 80038a4:	f000 f8fe 	bl	8003aa4 <TIM_SetIC4Prescaler>
  }
}
 80038a8:	f107 0708 	add.w	r7, r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f04f 0201 	mov.w	r2, #1
 80038ce:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	811a      	strh	r2, [r3, #8]
}
 80038e0:	f107 070c 	add.w	r7, r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 80038fc:	f04f 0301 	mov.w	r3, #1
 8003900:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	885b      	ldrh	r3, [r3, #2]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800390a:	f04f 0302 	mov.w	r3, #2
 800390e:	81fb      	strh	r3, [r7, #14]
 8003910:	e002      	b.n	8003918 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	889b      	ldrh	r3, [r3, #4]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d103      	bne.n	8003928 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8003920:	f04f 0302 	mov.w	r3, #2
 8003924:	81bb      	strh	r3, [r7, #12]
 8003926:	e002      	b.n	800392e <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003928:	f04f 0301 	mov.w	r3, #1
 800392c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11c      	bne.n	8003970 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	8859      	ldrh	r1, [r3, #2]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003940:	891b      	ldrh	r3, [r3, #8]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fc74 	bl	8004230 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	88db      	ldrh	r3, [r3, #6]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4619      	mov	r1, r3
 8003950:	f000 f85e 	bl	8003a10 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	891b      	ldrh	r3, [r3, #8]
 8003958:	89f9      	ldrh	r1, [r7, #14]
 800395a:	89ba      	ldrh	r2, [r7, #12]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fca3 	bl	80042a8 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	88db      	ldrh	r3, [r3, #6]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4619      	mov	r1, r3
 800396a:	f000 f869 	bl	8003a40 <TIM_SetIC2Prescaler>
 800396e:	e01b      	b.n	80039a8 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	8859      	ldrh	r1, [r3, #2]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8003978:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800397a:	891b      	ldrh	r3, [r3, #8]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fc93 	bl	80042a8 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	88db      	ldrh	r3, [r3, #6]
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4619      	mov	r1, r3
 800398a:	f000 f859 	bl	8003a40 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	891b      	ldrh	r3, [r3, #8]
 8003992:	89f9      	ldrh	r1, [r7, #14]
 8003994:	89ba      	ldrh	r2, [r7, #12]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fc4a 	bl	8004230 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	88db      	ldrh	r3, [r3, #6]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	f000 f834 	bl	8003a10 <TIM_SetIC1Prescaler>
  }
}
 80039a8:	f107 0710 	add.w	r7, r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80039bc:	4618      	mov	r0, r3
 80039be:	f107 070c 	add.w	r7, r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	f107 070c 	add.w	r7, r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	f107 070c 	add.w	r7, r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	f107 070c 	add.w	r7, r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 020c 	bic.w	r2, r3, #12
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
}
 8003a34:	f107 070c 	add.w	r7, r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop

08003a40 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
}
 8003a68:	f107 070c 	add.w	r7, r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	61da      	str	r2, [r3, #28]
}
 8003a9a:	f107 070c 	add.w	r7, r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	61da      	str	r2, [r3, #28]
}
 8003ad0:	f107 070c 	add.w	r7, r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	891b      	ldrh	r3, [r3, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	895b      	ldrh	r3, [r3, #10]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8003b20:	f107 070c 	add.w	r7, r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	ea4f 4103 	mov.w	r1, r3, lsl #16
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003b5a:	f107 0714 	add.w	r7, r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	ea4f 5103 	mov.w	r1, r3, lsl #20
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003b92:	f107 0714 	add.w	r7, r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8003bba:	e005      	b.n	8003bc8 <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 8003bc8:	f107 070c 	add.w	r7, r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bf2:	e005      	b.n	8003c00 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8003c00:	f107 070c 	add.w	r7, r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	819a      	strh	r2, [r3, #12]
}
 8003c4c:	f107 070c 	add.w	r7, r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
 8003c76:	e007      	b.n	8003c88 <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003c80:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 8003c88:	f107 070c 	add.w	r7, r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	e006      	b.n	8003cc2 <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6053      	str	r3, [r2, #4]
  }
}
 8003cc2:	f107 070c 	add.w	r7, r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e006      	b.n	8003cfa <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6053      	str	r3, [r2, #4]
  }
}
 8003cfa:	f107 070c 	add.w	r7, r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	460a      	mov	r2, r1
 8003d10:	807a      	strh	r2, [r7, #2]
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	e008      	b.n	8003d3a <TIM_ITConfig+0x36>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	ea6f 0303 	mvn.w	r3, r3
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	401a      	ands	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60da      	str	r2, [r3, #12]
  }
}
 8003d3a:	f107 070c 	add.w	r7, r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	615a      	str	r2, [r3, #20]
}
 8003d56:	f107 070c 	add.w	r7, r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 8003d7c:	f04f 0301 	mov.w	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e002      	b.n	8003d8a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f107 0714 	add.w	r7, r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	ea6f 0303 	mvn.w	r3, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
}
 8003db2:	f107 070c 	add.w	r7, r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	81bb      	strh	r3, [r7, #12]
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	4013      	ands	r3, r2
 8003de4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	4013      	ands	r3, r2
 8003df0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003df2:	89bb      	ldrh	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <TIM_GetITStatus+0x4a>
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 8003dfe:	f04f 0301 	mov.w	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	e002      	b.n	8003e0c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f107 0714 	add.w	r7, r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	ea6f 0303 	mvn.w	r3, r3
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]
}
 8003e36:	f107 070c 	add.w	r7, r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	807a      	strh	r2, [r7, #2]
 8003e4e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003e5e:	f107 070c 	add.w	r7, r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	460a      	mov	r2, r1
 8003e74:	807a      	strh	r2, [r7, #2]
 8003e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003e78:	787b      	ldrb	r3, [r7, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e008      	b.n	8003e9e <TIM_DMACmd+0x36>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	ea6f 0303 	mvn.w	r3, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	401a      	ands	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60da      	str	r2, [r3, #12]
  }
}
 8003e9e:	f107 070c 	add.w	r7, r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f043 0208 	orr.w	r2, r3, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e006      	b.n	8003ed6 <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6053      	str	r3, [r2, #4]
  }
}
 8003ed6:	f107 070c 	add.w	r7, r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6093      	str	r3, [r2, #8]
}
 8003ef6:	f107 070c 	add.w	r7, r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	f000 f877 	bl	8004004 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f043 0207 	orr.w	r2, r3, #7
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]
}
 8003f22:	f107 0708 	add.w	r7, r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	8179      	strh	r1, [r7, #10]
 8003f36:	813a      	strh	r2, [r7, #8]
 8003f38:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d108      	bne.n	8003f52 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003f40:	893a      	ldrh	r2, [r7, #8]
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	4611      	mov	r1, r2
 8003f48:	f04f 0201 	mov.w	r2, #1
 8003f4c:	f000 f9ac 	bl	80042a8 <TI2_Config>
 8003f50:	e007      	b.n	8003f62 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003f52:	893a      	ldrh	r2, [r7, #8]
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	f04f 0201 	mov.w	r2, #1
 8003f5e:	f000 f967 	bl	8004230 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f000 f84c 	bl	8004004 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f043 0207 	orr.w	r2, r3, #7
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	f107 0710 	add.w	r7, r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	8179      	strh	r1, [r7, #10]
 8003f8a:	813a      	strh	r2, [r7, #8]
 8003f8c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	893a      	ldrh	r2, [r7, #8]
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f8ac 	bl	80040f8 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003fa6:	8afb      	ldrh	r3, [r7, #22]
 8003fa8:	f023 0307 	bic.w	r3, r3, #7
 8003fac:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	f043 0307 	orr.w	r3, r3, #7
 8003fb4:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbc:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003fc4:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	8afa      	ldrh	r2, [r7, #22]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	f107 0718 	add.w	r7, r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	8179      	strh	r1, [r7, #10]
 8003fde:	813a      	strh	r2, [r7, #8]
 8003fe0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003fe2:	8979      	ldrh	r1, [r7, #10]
 8003fe4:	893a      	ldrh	r2, [r7, #8]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f885 	bl	80040f8 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	609a      	str	r2, [r3, #8]
}
 8003ffa:	f107 0710 	add.w	r7, r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800401c:	89fb      	ldrh	r3, [r7, #14]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8004024:	89fa      	ldrh	r2, [r7, #14]
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	4313      	orrs	r3, r2
 800402a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402c:	89fa      	ldrh	r2, [r7, #14]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	f107 0714 	add.w	r7, r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	605a      	str	r2, [r3, #4]
}
 8004062:	f107 070c 	add.w	r7, r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	605a      	str	r2, [r3, #4]
}
 800408e:	f107 070c 	add.w	r7, r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040aa:	f023 0307 	bic.w	r3, r3, #7
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	f107 070c 	add.w	r7, r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	f107 070c 	add.w	r7, r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	8179      	strh	r1, [r7, #10]
 8004102:	813a      	strh	r2, [r7, #8]
 8004104:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8004112:	8afb      	ldrh	r3, [r7, #22]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800411e:	b29a      	uxth	r2, r3
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	4313      	orrs	r3, r2
 800412a:	b29a      	uxth	r2, r3
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	4313      	orrs	r3, r2
 8004130:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	8afa      	ldrh	r2, [r7, #22]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	f107 071c 	add.w	r7, r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	8179      	strh	r1, [r7, #10]
 800414e:	813a      	strh	r2, [r7, #8]
 8004150:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8004176:	8afb      	ldrh	r3, [r7, #22]
 8004178:	f023 0307 	bic.w	r3, r3, #7
 800417c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800417e:	8afa      	ldrh	r2, [r7, #22]
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	4313      	orrs	r3, r2
 8004184:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8004186:	8abb      	ldrh	r3, [r7, #20]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	f023 0303 	bic.w	r3, r3, #3
 8004190:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8004192:	8abb      	ldrh	r3, [r7, #20]
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800419e:	8a7b      	ldrh	r3, [r7, #18]
 80041a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041a4:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	893b      	ldrh	r3, [r7, #8]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	8a7b      	ldrh	r3, [r7, #18]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ba:	8afa      	ldrh	r2, [r7, #22]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80041c0:	8aba      	ldrh	r2, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	8a7a      	ldrh	r2, [r7, #18]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	f107 071c 	add.w	r7, r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e006      	b.n	8004206 <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6053      	str	r3, [r2, #4]
  }
}
 8004206:	f107 070c 	add.w	r7, r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8004224:	f107 070c 	add.w	r7, r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop

08004230 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	8179      	strh	r1, [r7, #10]
 800423a:	813a      	strh	r2, [r7, #8]
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0201 	bic.w	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 800426a:	893a      	ldrh	r2, [r7, #8]
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004272:	4313      	orrs	r3, r2
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f023 030a 	bic.w	r3, r3, #10
 8004280:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	f107 071c 	add.w	r7, r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	8179      	strh	r1, [r7, #10]
 80042b2:	813a      	strh	r2, [r7, #8]
 80042b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80042d0:	4013      	ands	r3, r2
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 80042f2:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8004300:	893b      	ldrh	r3, [r7, #8]
 8004302:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f043 0310 	orr.w	r3, r3, #16
 800431e:	b29b      	uxth	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	8179      	strh	r1, [r7, #10]
 8004346:	813a      	strh	r2, [r7, #8]
 8004348:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	82fb      	strh	r3, [r7, #22]
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	82bb      	strh	r3, [r7, #20]
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004364:	4013      	ands	r3, r2
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800437c:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800437e:	8afb      	ldrh	r3, [r7, #22]
 8004380:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8004384:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800438c:	b29a      	uxth	r2, r3
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	b29a      	uxth	r2, r3
 8004394:	8afb      	ldrh	r3, [r7, #22]
 8004396:	4313      	orrs	r3, r2
 8004398:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800439a:	8abb      	ldrh	r3, [r7, #20]
 800439c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043a0:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80043a2:	8a7a      	ldrh	r2, [r7, #18]
 80043a4:	8abb      	ldrh	r3, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043b0:	8afa      	ldrh	r2, [r7, #22]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043b6:	8aba      	ldrh	r2, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	f107 071c 	add.w	r7, r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop

080043c8 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	8179      	strh	r1, [r7, #10]
 80043d2:	813a      	strh	r2, [r7, #8]
 80043d4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	82fb      	strh	r3, [r7, #22]
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	82bb      	strh	r3, [r7, #20]
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80043f0:	4013      	ands	r3, r2
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004408:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800440a:	8afb      	ldrh	r3, [r7, #22]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004414:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8004418:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800441a:	893b      	ldrh	r3, [r7, #8]
 800441c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004420:	b29a      	uxth	r2, r3
 8004422:	8afb      	ldrh	r3, [r7, #22]
 8004424:	4313      	orrs	r3, r2
 8004426:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800442e:	b29a      	uxth	r2, r3
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	4313      	orrs	r3, r2
 8004434:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004436:	8abb      	ldrh	r3, [r7, #20]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443c:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004440:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004444:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8004446:	8a7a      	ldrh	r2, [r7, #18]
 8004448:	8abb      	ldrh	r3, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004452:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004454:	8afa      	ldrh	r2, [r7, #22]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800445a:	8aba      	ldrh	r2, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]
}
 8004460:	f107 071c 	add.w	r7, r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800447a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800447e:	429a      	cmp	r2, r3
 8004480:	d10c      	bne.n	800449c <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8004482:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004486:	f04f 0101 	mov.w	r1, #1
 800448a:	f7fd fdfd 	bl	8002088 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800448e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f7fd fdf7 	bl	8002088 <RCC_APB2PeriphResetCmd>
 800449a:	e04e      	b.n	800453a <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80044a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10c      	bne.n	80044c4 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80044aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80044ae:	f04f 0101 	mov.w	r1, #1
 80044b2:	f7fd fe13 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80044b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80044ba:	f04f 0100 	mov.w	r1, #0
 80044be:	f7fd fe0d 	bl	80020dc <RCC_APB1PeriphResetCmd>
 80044c2:	e03a      	b.n	800453a <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80044ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10c      	bne.n	80044ec <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80044d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80044d6:	f04f 0101 	mov.w	r1, #1
 80044da:	f7fd fdff 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80044de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f7fd fdf9 	bl	80020dc <RCC_APB1PeriphResetCmd>
 80044ea:	e026      	b.n	800453a <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80044f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10c      	bne.n	8004514 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80044fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044fe:	f04f 0101 	mov.w	r1, #1
 8004502:	f7fd fdeb 	bl	80020dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8004506:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	f7fd fde5 	bl	80020dc <RCC_APB1PeriphResetCmd>
 8004512:	e012      	b.n	800453a <USART_DeInit+0xce>
  }
  else
  {
    if  (USARTx == UART5)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800451a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800451e:	429a      	cmp	r2, r3
 8004520:	d10b      	bne.n	800453a <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8004522:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004526:	f04f 0101 	mov.w	r1, #1
 800452a:	f7fd fdd7 	bl	80020dc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800452e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f7fd fdd1 	bl	80020dc <RCC_APB1PeriphResetCmd>
    }
  }
}
 800453a:	f107 0708 	add.w	r7, r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop

08004544 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b094      	sub	sp, #80	; 0x50
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 0201 	bic.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004580:	4313      	orrs	r3, r2
 8004582:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004588:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004592:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004596:	f023 030c 	bic.w	r3, r3, #12
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80045aa:	4313      	orrs	r3, r2
 80045ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ae:	4313      	orrs	r3, r2
 80045b0:	647b      	str	r3, [r7, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b6:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80045be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	4313      	orrs	r3, r2
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d4:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd f894 	bl	8001708 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80045e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d102      	bne.n	80045f4 <USART_Init+0xb0>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f2:	e01f      	b.n	8004634 <USART_Init+0xf0>
  }
  else if (USARTx == USART2)
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80045fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045fe:	429a      	cmp	r2, r3
 8004600:	d102      	bne.n	8004608 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	64bb      	str	r3, [r7, #72]	; 0x48
 8004606:	e015      	b.n	8004634 <USART_Init+0xf0>
  }
  else if (USARTx == USART3)
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800460e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004612:	429a      	cmp	r2, r3
 8004614:	d102      	bne.n	800461c <USART_Init+0xd8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
 800461a:	e00b      	b.n	8004634 <USART_Init+0xf0>
  }
  else if (USARTx == UART4)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8004622:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004626:	429a      	cmp	r2, r3
 8004628:	d102      	bne.n	8004630 <USART_Init+0xec>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	64bb      	str	r3, [r7, #72]	; 0x48
 800462e:	e001      	b.n	8004634 <USART_Init+0xf0>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <USART_Init+0x124>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8004650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004652:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	fbb3 f1f2 	udiv	r1, r3, r2
 800465e:	fb02 f201 	mul.w	r2, r2, r1
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
 8004666:	e00e      	b.n	8004686 <USART_Init+0x142>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	fbb3 f1f2 	udiv	r1, r3, r2
 800467e:	fb02 f201 	mul.w	r2, r2, r1
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004690:	429a      	cmp	r2, r3
 8004692:	d803      	bhi.n	800469c <USART_Init+0x158>
  {
    divider++;
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	f103 0301 	add.w	r3, r3, #1
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <USART_Init+0x17e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80046b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80046ba:	4013      	ands	r3, r2
 80046bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046be:	4313      	orrs	r3, r2
 80046c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	819a      	strh	r2, [r3, #12]
}
 80046ca:	f107 0750 	add.w	r7, r7, #80	; 0x50
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop

080046d4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80046e2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f04f 020c 	mov.w	r2, #12
 8004702:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	615a      	str	r2, [r3, #20]
}
 800470c:	f107 070c 	add.w	r7, r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004734:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004744:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800474a:	4313      	orrs	r3, r2
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
}
 8004758:	f107 0714 	add.w	r7, r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop

08004764 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	60da      	str	r2, [r3, #12]
}
 800478c:	f107 070c 	add.w	r7, r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop

08004798 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d006      	beq.n	80047b8 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e005      	b.n	80047c4 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 0201 	bic.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
  }
}
 80047c4:	f107 070c 	add.w	r7, r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e007      	b.n	8004802 <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	ea6f 0303 	mvn.w	r3, r3
 80047fc:	401a      	ands	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]
  }
}
 8004802:	f107 0714 	add.w	r7, r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e005      	b.n	8004838 <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
  }
}
 8004838:	f107 070c 	add.w	r7, r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	e005      	b.n	8004870 <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
  }
}
 8004870:	f107 070c 	add.w	r7, r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop

0800487c <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	e005      	b.n	80048a8 <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	f107 070c 	add.w	r7, r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	e005      	b.n	80048e0 <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	605a      	str	r2, [r3, #4]
  }
}
 80048e0:	f107 070c 	add.w	r7, r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop

080048ec <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e007      	b.n	800491e <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	ea6f 0303 	mvn.w	r3, r3
 8004918:	401a      	ands	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]
  }
}
 800491e:	f107 0714 	add.w	r7, r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	e005      	b.n	8004954 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
  }
}
 8004954:	f107 070c 	add.w	r7, r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop

08004960 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	e005      	b.n	800498c <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]
  }
}
 800498c:	f107 070c 	add.w	r7, r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop

08004998 <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	615a      	str	r2, [r3, #20]
}
 80049ba:	f107 070c 	add.w	r7, r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8a1b      	ldrh	r3, [r3, #16]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8a1b      	ldrh	r3, [r3, #16]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	821a      	strh	r2, [r3, #16]
}
 80049f2:	f107 070c 	add.w	r7, r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d006      	beq.n	8004a1c <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e005      	b.n	8004a28 <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 0202 	bic.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
  }
}
 8004a28:	f107 070c 	add.w	r7, r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop

08004a34 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
}
 8004a56:	f107 070c 	add.w	r7, r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e005      	b.n	8004a8c <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]
  }
}
 8004a8c:	f107 070c 	add.w	r7, r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	605a      	str	r2, [r3, #4]
}
 8004aba:	f107 070c 	add.w	r7, r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8004ad6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8004ae0:	f107 070c 	add.w	r7, r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8004afe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8004b02:	b29b      	uxth	r3, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	f107 070c 	add.w	r7, r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	605a      	str	r2, [r3, #4]
}
 8004b38:	f107 070c 	add.w	r7, r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e005      	b.n	8004b70 <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]
  }
}
 8004b70:	f107 070c 	add.w	r7, r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop

08004b7c <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	f107 070c 	add.w	r7, r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]
}
 8004bca:	f107 070c 	add.w	r7, r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f023 0220 	bic.w	r2, r3, #32
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]
}
 8004bf6:	f107 070c 	add.w	r7, r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d006      	beq.n	8004c20 <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e005      	b.n	8004c2c <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	605a      	str	r2, [r3, #4]
  }
}
 8004c2c:	f107 070c 	add.w	r7, r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f043 0208 	orr.w	r2, r3, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]
 8004c56:	e005      	b.n	8004c64 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 0208 	bic.w	r2, r3, #8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
  }
}
 8004c64:	f107 070c 	add.w	r7, r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8a1b      	ldrh	r3, [r3, #16]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8a1b      	ldrh	r3, [r3, #16]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	821a      	strh	r2, [r3, #16]
}
 8004ca2:	f107 070c 	add.w	r7, r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]
 8004cca:	e005      	b.n	8004cd8 <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f023 0220 	bic.w	r2, r3, #32
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
  }
}
 8004cd8:	f107 070c 	add.w	r7, r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f043 0210 	orr.w	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	e005      	b.n	8004d10 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 0210 	bic.w	r2, r3, #16
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
  }
}
 8004d10:	f107 070c 	add.w	r7, r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop

08004d1c <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	f107 070c 	add.w	r7, r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop

08004d50 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	615a      	str	r2, [r3, #20]
}
 8004d78:	f107 070c 	add.w	r7, r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop

08004d84 <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0204 	bic.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
}
 8004da6:	f107 070c 	add.w	r7, r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	e005      	b.n	8004ddc <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f023 0202 	bic.w	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
  }
}
 8004ddc:	f107 070c 	add.w	r7, r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d006      	beq.n	8004e08 <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
 8004e06:	e005      	b.n	8004e14 <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
  }
}
 8004e14:	f107 070c 	add.w	r7, r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	609a      	str	r2, [r3, #8]
}
 8004e42:	f107 070c 	add.w	r7, r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	f107 070c 	add.w	r7, r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
}
 8004ea2:	f107 070c 	add.w	r7, r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	e007      	b.n	8004ede <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	ea6f 0303 	mvn.w	r3, r3
 8004ed8:	401a      	ands	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	609a      	str	r2, [r3, #8]
  }
}
 8004ede:	f107 0714 	add.w	r7, r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
}
 8004f0a:	f107 070c 	add.w	r7, r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f04f 0201 	mov.w	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d104      	bne.n	8004f6c <USART_ITConfig+0x58>
  {
    usartxbase += 0x04;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f103 0304 	add.w	r3, r3, #4
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	e006      	b.n	8004f7a <USART_ITConfig+0x66>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d103      	bne.n	8004f7a <USART_ITConfig+0x66>
  {
    usartxbase += 0x08;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f103 0308 	add.w	r3, r3, #8
 8004f78:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d006      	beq.n	8004f8e <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e007      	b.n	8004f9e <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	6811      	ldr	r1, [r2, #0]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	ea6f 0202 	mvn.w	r2, r2
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
  }
}
 8004f9e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8b1b      	ldrh	r3, [r3, #24]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	831a      	strh	r2, [r3, #24]
 8004fce:	e00b      	b.n	8004fe8 <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8b1b      	ldrh	r3, [r3, #24]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	ea6f 0303 	mvn.w	r3, r3
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	831a      	strh	r2, [r3, #24]
  }
}
 8004fe8:	f107 0714 	add.w	r7, r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop

08004ff4 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
}
 8005016:	f107 070c 	add.w	r7, r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 800503c:	f04f 0301 	mov.w	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e002      	b.n	800504a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	f107 0714 	add.w	r7, r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	f107 070c 	add.w	r7, r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop

08005074 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800509e:	b29b      	uxth	r3, r3
 80050a0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f04f 0201 	mov.w	r2, #1
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <USART_GetITStatus+0x52>
  {
    itmask &= USARTx->CR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4013      	ands	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e00d      	b.n	80050e2 <USART_GetITStatus+0x6e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d105      	bne.n	80050d8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4013      	ands	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e004      	b.n	80050e2 <USART_GetITStatus+0x6e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80050e8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f04f 0201 	mov.w	r2, #1
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <USART_GetITStatus+0xa0>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 800510c:	f04f 0301 	mov.w	r3, #1
 8005110:	74fb      	strb	r3, [r7, #19]
 8005112:	e002      	b.n	800511a <USART_GetITStatus+0xa6>
  }
  else
  {
    bitstatus = RESET;
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800511a:	7cfb      	ldrb	r3, [r7, #19]
}
 800511c:	4618      	mov	r0, r3
 800511e:	f107 071c 	add.w	r7, r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005144:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f04f 0201 	mov.w	r2, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	f107 0714 	add.w	r7, r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop

08005164 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005168:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800516c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005170:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005174:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005178:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800517c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800518c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800519c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80051a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	f24c 030c 	movw	r3, #49164	; 0xc00c
 80051b2:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 80051b6:	400b      	ands	r3, r1
 80051b8:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80051ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80051d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80051d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80051ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005204:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800520a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800520e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005212:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005216:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005218:	f022 020f 	bic.w	r2, r2, #15
 800521c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800521e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005222:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800522a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800522e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005230:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8005234:	f6cf 7300 	movt	r3, #65280	; 0xff00
 8005238:	400b      	ands	r3, r1
 800523a:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800523c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005240:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800524a:	f000 f8a7 	bl	800539c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800524e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005252:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800525a:	609a      	str	r2, [r3, #8]
#endif  
}
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop

08005260 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800527e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005282:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d00d      	beq.n	80052b0 <SystemCoreClockUpdate+0x50>
 8005294:	2b08      	cmp	r3, #8
 8005296:	d015      	beq.n	80052c4 <SystemCoreClockUpdate+0x64>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d153      	bne.n	8005344 <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800529c:	f240 032c 	movw	r3, #44	; 0x2c
 80052a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052a4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80052a8:	f2c0 027a 	movt	r2, #122	; 0x7a
 80052ac:	601a      	str	r2, [r3, #0]
      break;
 80052ae:	e053      	b.n	8005358 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80052b0:	f240 032c 	movw	r3, #44	; 0x2c
 80052b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052b8:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80052bc:	f2c0 027a 	movt	r2, #122	; 0x7a
 80052c0:	601a      	str	r2, [r3, #0]
      break;
 80052c2:	e049      	b.n	8005358 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80052c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80052d2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80052d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e2:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80052ea:	f103 0302 	add.w	r3, r3, #2
 80052ee:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80052fc:	f2c0 033d 	movt	r3, #61	; 0x3d
 8005300:	fb03 f202 	mul.w	r2, r3, r2
 8005304:	f240 032c 	movw	r3, #44	; 0x2c
 8005308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800530c:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 800530e:	e023      	b.n	8005358 <SystemCoreClockUpdate+0xf8>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8005310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005314:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	f103 0301 	add.w	r3, r3, #1
 8005322:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8005324:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005328:	f2c0 037a 	movt	r3, #122	; 0x7a
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	fb02 f203 	mul.w	r2, r2, r3
 8005338:	f240 032c 	movw	r3, #44	; 0x2c
 800533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005340:	601a      	str	r2, [r3, #0]
      }      
      break;
 8005342:	e009      	b.n	8005358 <SystemCoreClockUpdate+0xf8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005344:	f240 032c 	movw	r3, #44	; 0x2c
 8005348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800534c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8005350:	f2c0 027a 	movt	r2, #122	; 0x7a
 8005354:	601a      	str	r2, [r3, #0]
      break;
 8005356:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800535c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005366:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800536a:	f240 0330 	movw	r3, #48	; 0x30
 800536e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005372:	5c9b      	ldrb	r3, [r3, r2]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8005378:	f240 032c 	movw	r3, #44	; 0x2c
 800537c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	fa22 f203 	lsr.w	r2, r2, r3
 8005388:	f240 032c 	movw	r3, #44	; 0x2c
 800538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	f107 0714 	add.w	r7, r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80053ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053c4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80053c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 0301 	add.w	r3, r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <SetSysClock+0x50>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80053ea:	d1ec      	bne.n	80053c6 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80053ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80053fe:	f04f 0301 	mov.w	r3, #1
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	e002      	b.n	800540c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d176      	bne.n	8005500 <SetSysClock+0x164>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8005412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800541a:	f04f 0212 	mov.w	r2, #18
 800541e:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800542c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005430:	6852      	ldr	r2, [r2, #4]
 8005432:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005438:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800543c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005440:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005444:	6852      	ldr	r2, [r2, #4]
 8005446:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800544c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005454:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005458:	6852      	ldr	r2, [r2, #4]
 800545a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800545e:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8005460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800546c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005470:	6852      	ldr	r2, [r2, #4]
 8005472:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005476:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 8005478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005484:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005488:	6852      	ldr	r2, [r2, #4]
 800548a:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800548e:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800549c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80054a6:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80054a8:	bf00      	nop
 80054aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f6      	beq.n	80054aa <SetSysClock+0x10e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80054bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	f022 0203 	bic.w	r2, r2, #3
 80054d2:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80054e4:	6852      	ldr	r2, [r2, #4]
 80054e6:	f042 0202 	orr.w	r2, r2, #2
 80054ea:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80054ec:	bf00      	nop
 80054ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d1f6      	bne.n	80054ee <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8005500:	f107 070c 	add.w	r7, r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop

0800550c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800550c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800550e:	f000 b804 	b.w	800551a <LoopCopyDataInit>

08005512 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8005514:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005516:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005518:	3104      	adds	r1, #4

0800551a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800551a:	480b      	ldr	r0, [pc, #44]	; (8005548 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 800551e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005520:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005522:	f4ff aff6 	bcc.w	8005512 <CopyDataInit>
  ldr  r2, =_sbss
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8005528:	f000 b803 	b.w	8005532 <LoopFillZerobss>

0800552c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800552c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800552e:	f842 3b04 	str.w	r3, [r2], #4

08005532 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8005534:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005536:	f4ff aff9 	bcc.w	800552c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800553a:	f7ff fe13 	bl	8005164 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800553e:	f7fb f9a7 	bl	8000890 <main>
  bx  lr    
 8005542:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005544:	080056a8 	.word	0x080056a8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800554c:	20000468 	.word	0x20000468
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005550:	20000468 	.word	0x20000468
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005554:	20000a78 	.word	0x20000a78

08005558 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005558:	f7ff bffe 	b.w	8005558 <ADC1_2_IRQHandler>

0800555c <__register_exitproc>:
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4c27      	ldr	r4, [pc, #156]	; (8005600 <__register_exitproc+0xa4>)
 8005562:	6825      	ldr	r5, [r4, #0]
 8005564:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8005568:	b084      	sub	sp, #16
 800556a:	4607      	mov	r7, r0
 800556c:	2c00      	cmp	r4, #0
 800556e:	d041      	beq.n	80055f4 <__register_exitproc+0x98>
 8005570:	6866      	ldr	r6, [r4, #4]
 8005572:	2e1f      	cmp	r6, #31
 8005574:	dd1c      	ble.n	80055b0 <__register_exitproc+0x54>
 8005576:	4823      	ldr	r0, [pc, #140]	; (8005604 <__register_exitproc+0xa8>)
 8005578:	b910      	cbnz	r0, 8005580 <__register_exitproc+0x24>
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	e01f      	b.n	80055c0 <__register_exitproc+0x64>
 8005580:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005584:	9103      	str	r1, [sp, #12]
 8005586:	9202      	str	r2, [sp, #8]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	f3af 8000 	nop.w
 800558e:	9903      	ldr	r1, [sp, #12]
 8005590:	9a02      	ldr	r2, [sp, #8]
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	4604      	mov	r4, r0
 8005596:	2800      	cmp	r0, #0
 8005598:	d0ef      	beq.n	800557a <__register_exitproc+0x1e>
 800559a:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800559e:	2000      	movs	r0, #0
 80055a0:	6060      	str	r0, [r4, #4]
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80055a8:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80055ac:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80055b0:	6865      	ldr	r5, [r4, #4]
 80055b2:	b947      	cbnz	r7, 80055c6 <__register_exitproc+0x6a>
 80055b4:	1ca8      	adds	r0, r5, #2
 80055b6:	3501      	adds	r5, #1
 80055b8:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 80055bc:	6065      	str	r5, [r4, #4]
 80055be:	2000      	movs	r0, #0
 80055c0:	b004      	add	sp, #16
 80055c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c6:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80055ca:	2001      	movs	r0, #1
 80055cc:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 80055d0:	fa00 f005 	lsl.w	r0, r0, r5
 80055d4:	4306      	orrs	r6, r0
 80055d6:	2f02      	cmp	r7, #2
 80055d8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 80055dc:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80055e0:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 80055e4:	d1e6      	bne.n	80055b4 <__register_exitproc+0x58>
 80055e6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80055ea:	ea43 0200 	orr.w	r2, r3, r0
 80055ee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80055f2:	e7df      	b.n	80055b4 <__register_exitproc+0x58>
 80055f4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80055f8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80055fc:	e7b8      	b.n	8005570 <__register_exitproc+0x14>
 80055fe:	bf00      	nop
 8005600:	0800567c 	.word	0x0800567c
 8005604:	00000000 	.word	0x00000000

08005608 <__libc_fini_array>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <__libc_fini_array+0x48>)
 800560c:	4c11      	ldr	r4, [pc, #68]	; (8005654 <__libc_fini_array+0x4c>)
 800560e:	1b18      	subs	r0, r3, r4
 8005610:	1081      	asrs	r1, r0, #2
 8005612:	d018      	beq.n	8005646 <__libc_fini_array+0x3e>
 8005614:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005618:	1e4e      	subs	r6, r1, #1
 800561a:	4635      	mov	r5, r6
 800561c:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8005620:	f006 0601 	and.w	r6, r6, #1
 8005624:	4790      	blx	r2
 8005626:	b175      	cbz	r5, 8005646 <__libc_fini_array+0x3e>
 8005628:	b126      	cbz	r6, 8005634 <__libc_fini_array+0x2c>
 800562a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800562e:	4798      	blx	r3
 8005630:	3d01      	subs	r5, #1
 8005632:	d008      	beq.n	8005646 <__libc_fini_array+0x3e>
 8005634:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8005638:	4780      	blx	r0
 800563a:	3d01      	subs	r5, #1
 800563c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005640:	4788      	blx	r1
 8005642:	3d01      	subs	r5, #1
 8005644:	d1f6      	bne.n	8005634 <__libc_fini_array+0x2c>
 8005646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800564a:	f000 b81f 	b.w	800568c <_fini>
 800564e:	bf00      	nop
 8005650:	080056a4 	.word	0x080056a4
 8005654:	080056a0 	.word	0x080056a0

08005658 <register_fini>:
 8005658:	4b02      	ldr	r3, [pc, #8]	; (8005664 <register_fini+0xc>)
 800565a:	b113      	cbz	r3, 8005662 <register_fini+0xa>
 800565c:	4802      	ldr	r0, [pc, #8]	; (8005668 <register_fini+0x10>)
 800565e:	f000 b805 	b.w	800566c <atexit>
 8005662:	4770      	bx	lr
 8005664:	00000000 	.word	0x00000000
 8005668:	08005609 	.word	0x08005609

0800566c <atexit>:
 800566c:	4601      	mov	r1, r0
 800566e:	2000      	movs	r0, #0
 8005670:	4602      	mov	r2, r0
 8005672:	4603      	mov	r3, r0
 8005674:	f7ff bf72 	b.w	800555c <__register_exitproc>
 8005678:	00000043 	.word	0x00000043

0800567c <_global_impure_ptr>:
 800567c:	20000040                                @.. 

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
