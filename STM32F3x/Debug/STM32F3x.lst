
STM32F3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e4  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  0800526c  0800526c  0000d26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005274  08005274  0000d274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000468  20000000  08005278  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f0  20000468  20000468  00010468  2**2
                  ALLOC
  6 ._user_heap_stack 00000200  20000658  20000658  00010468  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000686d  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000e24  00000000  00000000  00016d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000344a  00000000  00000000  00017b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  0001af78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000e698  00000000  00000000  0001b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003119  00000000  00000000  00029778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00059f15  00000000  00000000  0002c891  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  000867a6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c24  00000000  00000000  00086818  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00088440  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000468 	.word	0x20000468
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005254 	.word	0x08005254

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005254 	.word	0x08005254
 80001d0:	2000046c 	.word	0x2000046c
 80001d4:	20000468 	.word	0x20000468
 80001d8:	00000000 	.word	0x00000000

080001dc <_Z10blink_ledsv>:
 */

#include "debug.h"

void blink_leds(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	int foo = 0;
 80001e2:	f04f 0300 	mov.w	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	for(foo = 0; foo < 160000; ++foo){
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <_Z10blink_ledsv+0x30>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
 80001f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001f8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80001fc:	f04f 0201 	mov.w	r2, #1
 8000200:	f000 fcb6 	bl	8000b70 <GPIO_WriteBit>
#include "debug.h"

void blink_leds(void)
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0301 	add.w	r3, r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8000212:	f2c0 0302 	movt	r3, #2
 8000216:	429a      	cmp	r2, r3
 8000218:	bfcc      	ite	gt
 800021a:	2300      	movgt	r3, #0
 800021c:	2301      	movle	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e5      	bne.n	80001f0 <_Z10blink_ledsv+0x14>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00d      	b.n	8000248 <_Z10blink_ledsv+0x6c>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
 800022c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000230:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000234:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	f000 fc98 	bl	8000b70 <GPIO_WriteBit>
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0301 	add.w	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	f247 03ff 	movw	r3, #28927	; 0x70ff
 800024e:	f2c0 0302 	movt	r3, #2
 8000252:	429a      	cmp	r2, r3
 8000254:	bfcc      	ite	gt
 8000256:	2300      	movgt	r3, #0
 8000258:	2301      	movle	r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1e5      	bne.n	800022c <_Z10blink_ledsv+0x50>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
	}
}
 8000260:	f107 0708 	add.w	r7, r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_Z10UART1_initv>:
 * @Args: None
 * @Return Val: None
 */

void UART1_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef a;

	USART_InitTypeDef u1;

	u1.USART_BaudRate = 115200;
 800026e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000272:	603b      	str	r3, [r7, #0]
	u1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	u1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800027a:	f04f 030c 	mov.w	r3, #12
 800027e:	613b      	str	r3, [r7, #16]
	u1.USART_Parity = USART_Parity_No;
 8000280:	f04f 0300 	mov.w	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	u1.USART_StopBits = USART_StopBits_1;
 8000286:	f04f 0300 	mov.w	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	u1.USART_WordLength = USART_WordLength_8b;
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

	a.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000296:	61bb      	str	r3, [r7, #24]
	a.GPIO_Mode = GPIO_Mode_AF;
 8000298:	f04f 0302 	mov.w	r3, #2
 800029c:	773b      	strb	r3, [r7, #28]
	a.GPIO_OType = GPIO_OType_PP;
 800029e:	f04f 0300 	mov.w	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
	a.GPIO_Speed = GPIO_Speed_50MHz;
 80002a4:	f04f 0303 	mov.w	r3, #3
 80002a8:	777b      	strb	r3, [r7, #29]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b4:	f04f 0101 	mov.w	r1, #1
 80002b8:	f001 fc52 	bl	8001b60 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002c0:	f04f 0101 	mov.w	r1, #1
 80002c4:	f001 fc22 	bl	8001b0c <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_7);
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f04f 0109 	mov.w	r1, #9
 80002d0:	f04f 0207 	mov.w	r2, #7
 80002d4:	f000 fc72 	bl	8000bbc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_7);
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f04f 010a 	mov.w	r1, #10
 80002e0:	f04f 0207 	mov.w	r2, #7
 80002e4:	f000 fc6a 	bl	8000bbc <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &a);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 fadd 	bl	80008b0 <GPIO_Init>

	USART_Init(USART1, &u1);
 80002f6:	463b      	mov	r3, r7
 80002f8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80002fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000300:	4619      	mov	r1, r3
 8000302:	f003 ff09 	bl	8004118 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8000306:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800030a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800030e:	f04f 0101 	mov.w	r1, #1
 8000312:	f004 f82b 	bl	800436c <USART_Cmd>

	/* Wait until Receive enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_REACK) == RESET)
 8000316:	bf00      	nop
 8000318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800031c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000324:	f004 fc66 	bl	8004bf4 <USART_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2300      	movne	r3, #0
 8000330:	2301      	moveq	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1ef      	bne.n	8000318 <_Z10UART1_initv+0xb0>
	{}

	/* Wait until Transmit enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_TEACK) == RESET)
 8000338:	bf00      	nop
 800033a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800033e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000346:	f004 fc55 	bl	8004bf4 <USART_GetFlagStatus>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2300      	movne	r3, #0
 8000352:	2301      	moveq	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <_Z10UART1_initv+0xd2>
	{}
}
 800035a:	f107 0720 	add.w	r7, r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <_Z19LED_MATRIX_ISR_initv>:
 * along with some eye candy
 * Priority: 6 (LOW)
 */

void LED_MATRIX_ISR_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	// GPIO Init:

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800036a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f001 fbcb 	bl	8001b0c <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_15;
 8000376:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800037a:	613b      	str	r3, [r7, #16]
	a.GPIO_Mode = GPIO_Mode_OUT;
 800037c:	f04f 0301 	mov.w	r3, #1
 8000380:	753b      	strb	r3, [r7, #20]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	a.GPIO_OType = GPIO_OType_PP;
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	75bb      	strb	r3, [r7, #22]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 800038e:	f04f 0302 	mov.w	r3, #2
 8000392:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOE, &a);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800039c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 fa85 	bl	80008b0 <GPIO_Init>

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM6_init;

	nv.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80003a6:	f04f 0336 	mov.w	r3, #54	; 0x36
 80003aa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 6; // Low-priority interrupt since this is just eye-candy...
 80003ac:	f04f 0306 	mov.w	r3, #6
 80003b0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80003b8:	f04f 0301 	mov.w	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fc62 	bl	8000c8c <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE); //Enable TIM4 on APB1
 80003c8:	f04f 0010 	mov.w	r0, #16
 80003cc:	f04f 0101 	mov.w	r1, #1
 80003d0:	f001 fbf0 	bl	8001bb4 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM6_init.TIM_Period = (10*DT_LED_MATRIX)-1;
 80003d4:	f240 3383 	movw	r3, #899	; 0x383
 80003d8:	607b      	str	r3, [r7, #4]
	TIM6_init.TIM_Prescaler = 7199;
 80003da:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80003de:	803b      	strh	r3, [r7, #0]
	TIM6_init.TIM_RepetitionCounter = 0;
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	72bb      	strb	r3, [r7, #10]
	TIM6_init.TIM_ClockDivision = 0;
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	813b      	strh	r3, [r7, #8]
	TIM6_init.TIM_CounterMode = TIM_CounterMode_Up;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM6, &TIM6_init);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80003fc:	4619      	mov	r1, r3
 80003fe:	f001 fe11 	bl	8002024 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000406:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800040a:	f04f 0101 	mov.w	r1, #1
 800040e:	f04f 0201 	mov.w	r2, #1
 8000412:	f003 fa61 	bl	80038d8 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8000416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800041a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800041e:	f04f 0101 	mov.w	r1, #1
 8000422:	f001 ffc3 	bl	80023ac <TIM_Cmd>
}
 8000426:	f107 0718 	add.w	r7, r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <SVC_Handler>:

extern void *v;
extern void *(*p)(void*);

	void SVC_Handler(void)
	{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
		++current_process;
 8000434:	f240 438c 	movw	r3, #1164	; 0x48c
 8000438:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f103 0201 	add.w	r2, r3, #1
 8000442:	f240 438c 	movw	r3, #1164	; 0x48c
 8000446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800044a:	601a      	str	r2, [r3, #0]
		if(current_process >= MAX_NUM_PROCESSES)
 800044c:	f240 438c 	movw	r3, #1164	; 0x48c
 8000450:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	dd06      	ble.n	8000468 <SVC_Handler+0x38>
		{
			current_process = 0;
 800045a:	f240 438c 	movw	r3, #1164	; 0x48c
 800045e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000462:	f04f 0200 	mov.w	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
		}

		addrVal = (uint32_t)(process_list[current_process].taskPointer);//0x8001841;
 8000468:	f240 438c 	movw	r3, #1164	; 0x48c
 800046c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	f240 4390 	movw	r3, #1168	; 0x490
 8000476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047a:	f04f 0194 	mov.w	r1, #148	; 0x94
 800047e:	fb01 f202 	mul.w	r2, r1, r2
 8000482:	189b      	adds	r3, r3, r2
 8000484:	f103 0304 	add.w	r3, r3, #4
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	f240 6354 	movw	r3, #1620	; 0x654
 8000490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000494:	601a      	str	r2, [r3, #0]
		asm volatile ("mov R10, %[something]\n\t" : [something] "=r" (addrVal));
 8000496:	4692      	mov	sl, r2
 8000498:	f240 6354 	movw	r3, #1620	; 0x654
 800049c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004a0:	601a      	str	r2, [r3, #0]

		asm volatile ("bx R10\n\t");
 80004a2:	4750      	bx	sl
	}
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <PendSV_Handler>:

	void PendSV_Handler(void)
	{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

		SCB->ICSR |= (1<<27);
 80004b0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004b8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80004bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80004c0:	6852      	ldr	r2, [r2, #4]
 80004c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80004c6:	605a      	str	r2, [r3, #4]
		asm volatile ("svc 1");	// To kick us into SVC handler
 80004c8:	df01      	svc	1
	}
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

	void SysTick_Handler(void)
	{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
		++current_process;
 80004d4:	f240 438c 	movw	r3, #1164	; 0x48c
 80004d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f103 0201 	add.w	r2, r3, #1
 80004e2:	f240 438c 	movw	r3, #1164	; 0x48c
 80004e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ea:	601a      	str	r2, [r3, #0]
		if(current_process >= MAX_NUM_PROCESSES)
 80004ec:	f240 438c 	movw	r3, #1164	; 0x48c
 80004f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	dd06      	ble.n	8000508 <SysTick_Handler+0x38>
		{
			current_process = 0;
 80004fa:	f240 438c 	movw	r3, #1164	; 0x48c
 80004fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000502:	f04f 0200 	mov.w	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
		}

		addrVal = (uint32_t)(process_list[current_process].taskPointer);//0x8001841;
 8000508:	f240 438c 	movw	r3, #1164	; 0x48c
 800050c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f240 4390 	movw	r3, #1168	; 0x490
 8000516:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800051a:	f04f 0194 	mov.w	r1, #148	; 0x94
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	189b      	adds	r3, r3, r2
 8000524:	f103 0304 	add.w	r3, r3, #4
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	f240 6354 	movw	r3, #1620	; 0x654
 8000530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000534:	601a      	str	r2, [r3, #0]
		asm volatile ("mov R10, %[something]\n\t" : [something] "=r" (addrVal));
 8000536:	4692      	mov	sl, r2
 8000538:	f240 6354 	movw	r3, #1620	; 0x654
 800053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000540:	601a      	str	r2, [r3, #0]

		asm volatile ("bx R10\n\t");
 8000542:	4750      	bx	sl
	}
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HardFault_Handler>:

	// Primarily for debug purposes:

	void HardFault_Handler(void)
	{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
		while(1);
 8000550:	e7fe      	b.n	8000550 <HardFault_Handler+0x4>
 8000552:	bf00      	nop

08000554 <MemManage_Handler>:
	}
	void MemManage_Handler(void)
	{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
		while(1);
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>
 800055a:	bf00      	nop

0800055c <BusFault_Handler>:
	}
	void BusFault_Handler(void)
	{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
		while(1);
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler+0x4>
 8000562:	bf00      	nop

08000564 <UsageFault_Handler>:
	}
	void UsageFault_Handler(void)
	{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
		while(1);
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>
 800056a:	bf00      	nop

0800056c <_Z5task1v>:
int task1_iter, task2_iter;

uint32_t addrVal;

void task1(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	while(1)
	{
		++task1_iter;
 8000570:	f240 634c 	movw	r3, #1612	; 0x64c
 8000574:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f103 0201 	add.w	r2, r3, #1
 800057e:	f240 634c 	movw	r3, #1612	; 0x64c
 8000582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000586:	601a      	str	r2, [r3, #0]
		yield_time();
 8000588:	f7ff bfa2 	b.w	80004d0 <SysTick_Handler>

uint32_t addrVal;

void task1(void)
{
	while(1)
 800058c:	e7f0      	b.n	8000570 <_Z5task1v+0x4>
 800058e:	bf00      	nop

08000590 <_Z5task2v>:
		yield_time();
	}
}

void task2(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	while(1)
	{
		++task2_iter;
 8000594:	f240 6350 	movw	r3, #1616	; 0x650
 8000598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f103 0201 	add.w	r2, r3, #1
 80005a2:	f240 6350 	movw	r3, #1616	; 0x650
 80005a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005aa:	601a      	str	r2, [r3, #0]
		yield_time();
 80005ac:	f7ff bf90 	b.w	80004d0 <SysTick_Handler>
	}
}

void task2(void)
{
	while(1)
 80005b0:	e7f0      	b.n	8000594 <_Z5task2v+0x4>
 80005b2:	bf00      	nop

080005b4 <main>:
		yield_time();
	}
}

int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	SystemInit(); // Set up clocks/PLL/et. al
 80005b8:	f004 fbbe 	bl	8004d38 <SystemInit>

	UART1_init(); // Debug bridge
 80005bc:	f7ff fe54 	bl	8000268 <_Z10UART1_initv>

	task1_iter = 0;
 80005c0:	f240 634c 	movw	r3, #1612	; 0x64c
 80005c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
	task2_iter = 0;
 80005ce:	f240 6350 	movw	r3, #1616	; 0x650
 80005d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d6:	f04f 0200 	mov.w	r2, #0
 80005da:	601a      	str	r2, [r3, #0]

	process_list[0].taskPointer = task1;
 80005dc:	f240 4390 	movw	r3, #1168	; 0x490
 80005e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e4:	f240 526d 	movw	r2, #1389	; 0x56d
 80005e8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80005ec:	605a      	str	r2, [r3, #4]
	process_list[1].taskPointer = task2;
 80005ee:	f240 4390 	movw	r3, #1168	; 0x490
 80005f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f6:	f240 5291 	movw	r2, #1425	; 0x591
 80005fa:	f6c0 0200 	movt	r2, #2048	; 0x800
 80005fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	OS_init(&pList);
 8000602:	f240 50b8 	movw	r0, #1464	; 0x5b8
 8000606:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800060a:	f000 f8b7 	bl	800077c <_Z7OS_initP13process_block>

	while(true);
 800060e:	e7fe      	b.n	800060e <main+0x5a>

08000610 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	da10      	bge.n	8000646 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000624:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000628:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	f002 020f 	and.w	r2, r2, #15
 8000632:	f1a2 0104 	sub.w	r1, r2, #4
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	185b      	adds	r3, r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
 8000644:	e00d      	b.n	8000662 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000646:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800064a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800064e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	185b      	adds	r3, r3, r1
 800065e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000662:	f107 070c 	add.w	r7, r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800067a:	429a      	cmp	r2, r3
 800067c:	d902      	bls.n	8000684 <SysTick_Config+0x18>
 800067e:	f04f 0301 	mov.w	r3, #1
 8000682:	e01f      	b.n	80006c4 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000684:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000688:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000692:	f102 32ff 	add.w	r2, r2, #4294967295
 8000696:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f04f 010f 	mov.w	r1, #15
 80006a0:	f7ff ffb6 	bl	8000610 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80006a4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80006a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006ac:	f04f 0200 	mov.w	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 80006b2:	f24e 0310 	movw	r3, #57360	; 0xe010
 80006b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006ba:	f04f 0207 	mov.w	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 80006c0:	f04f 0300 	mov.w	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	f107 0708 	add.w	r7, r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop

080006d0 <_Z20read_current_msp_valv>:
#include "os.h"

extern int current_process;

uint32_t read_current_msp_val(void)
{
 80006d0:	b490      	push	{r4, r7}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint32_t val;
	asm volatile ("mrs r0, MSP\n\t");
 80006d6:	f3ef 8008 	mrs	r0, MSP
	asm ("mov %[output], r0" : [output] "=r" (val));
 80006da:	4604      	mov	r4, r0
 80006dc:	607c      	str	r4, [r7, #4]
	return val;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	f107 0708 	add.w	r7, r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc90      	pop	{r4, r7}
 80006ea:	4770      	bx	lr

080006ec <_Z17processTable_initP13process_block>:

void processTable_init(process_block *pBlock)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	pBlock->previous = 0;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
	pBlock->next = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
	pBlock->process_stack_pointer = 0;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
	pBlock->taskPointer = 0;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f04f 0200 	mov.w	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
	pBlock->task_id = 1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f04f 0201 	mov.w	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
	int i = 0;
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 32; ++i)
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e00d      	b.n	8000746 <_Z17processTable_initP13process_block+0x5a>
	{
		pBlock->task_state[i] = 0;
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f103 0304 	add.w	r3, r3, #4
 8000732:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	f04f 0200 	mov.w	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
	pBlock->next = 0;
	pBlock->process_stack_pointer = 0;
	pBlock->taskPointer = 0;
	pBlock->task_id = 1;
	int i = 0;
	for(i = 0; i < 32; ++i)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f103 0301 	add.w	r3, r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	bfcc      	ite	gt
 800074c:	2300      	movgt	r3, #0
 800074e:	2301      	movle	r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1e9      	bne.n	800072a <_Z17processTable_initP13process_block+0x3e>
	{
		pBlock->task_state[i] = 0;
	}
}
 8000756:	f107 0714 	add.w	r7, r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <_Z11create_taskPvP13process_block>:

int create_task(void *taskFunc, process_block *pList)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	return -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076e:	4618      	mov	r0, r3
 8000770:	f107 070c 	add.w	r7, r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <_Z7OS_initP13process_block>:

void OS_init(process_block *process_ll)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	processTable_init(process_ll);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ffb1 	bl	80006ec <_Z17processTable_initP13process_block>
	current_process = 0;
 800078a:	f240 438c 	movw	r3, #1164	; 0x48c
 800078e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000792:	f04f 0200 	mov.w	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
	*((uint32_t volatile *)0xE000EF34) = (1<<30); // Disable Cortex-M4F lazy stacking, so we don't save registers 2x
 8000798:	f64e 7334 	movw	r3, #61236	; 0xef34
 800079c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	601a      	str	r2, [r3, #0]
	SysTick_Config(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f7ff ff5f 	bl	800066c <SysTick_Config>
}
 80007ae:	f107 0708 	add.w	r7, r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop

080007b8 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80007c6:	d10c      	bne.n	80007e2 <GPIO_DeInit+0x2a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80007c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007cc:	f04f 0101 	mov.w	r1, #1
 80007d0:	f001 fa1a 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80007d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007d8:	f04f 0100 	mov.w	r1, #0
 80007dc:	f001 fa14 	bl	8001c08 <RCC_AHBPeriphResetCmd>
 80007e0:	e062      	b.n	80008a8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOB)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e8:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <GPIO_DeInit+0x52>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80007f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007f4:	f04f 0101 	mov.w	r1, #1
 80007f8:	f001 fa06 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80007fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000800:	f04f 0100 	mov.w	r1, #0
 8000804:	f001 fa00 	bl	8001c08 <RCC_AHBPeriphResetCmd>
 8000808:	e04e      	b.n	80008a8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOC)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000810:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000814:	429a      	cmp	r2, r3
 8000816:	d10c      	bne.n	8000832 <GPIO_DeInit+0x7a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000818:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800081c:	f04f 0101 	mov.w	r1, #1
 8000820:	f001 f9f2 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000824:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000828:	f04f 0100 	mov.w	r1, #0
 800082c:	f001 f9ec 	bl	8001c08 <RCC_AHBPeriphResetCmd>
 8000830:	e03a      	b.n	80008a8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOD)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000838:	f6c4 0300 	movt	r3, #18432	; 0x4800
 800083c:	429a      	cmp	r2, r3
 800083e:	d10c      	bne.n	800085a <GPIO_DeInit+0xa2>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000840:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000844:	f04f 0101 	mov.w	r1, #1
 8000848:	f001 f9de 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800084c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000850:	f04f 0100 	mov.w	r1, #0
 8000854:	f001 f9d8 	bl	8001c08 <RCC_AHBPeriphResetCmd>
 8000858:	e026      	b.n	80008a8 <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOE)
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000864:	429a      	cmp	r2, r3
 8000866:	d10c      	bne.n	8000882 <GPIO_DeInit+0xca>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000868:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800086c:	f04f 0101 	mov.w	r1, #1
 8000870:	f001 f9ca 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000874:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000878:	f04f 0100 	mov.w	r1, #0
 800087c:	f001 f9c4 	bl	8001c08 <RCC_AHBPeriphResetCmd>
 8000880:	e012      	b.n	80008a8 <GPIO_DeInit+0xf0>
  }
  else
  {
    if(GPIOx == GPIOF)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000888:	f6c4 0300 	movt	r3, #18432	; 0x4800
 800088c:	429a      	cmp	r2, r3
 800088e:	d10b      	bne.n	80008a8 <GPIO_DeInit+0xf0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000890:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000894:	f04f 0101 	mov.w	r1, #1
 8000898:	f001 f9b6 	bl	8001c08 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 800089c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80008a0:	f04f 0100 	mov.w	r1, #0
 80008a4:	f001 f9b0 	bl	8001c08 <RCC_AHBPeriphResetCmd>
    }
  }
}
 80008a8:	f107 0708 	add.w	r7, r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e08c      	b.n	80009ee <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f04f 0201 	mov.w	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d179      	bne.n	80009e6 <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d003      	beq.n	8000902 <GPIO_Init+0x52>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d13a      	bne.n	8000978 <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800090c:	f04f 0103 	mov.w	r1, #3
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	ea6f 0303 	mvn.w	r3, r3
 8000918:	401a      	ands	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	4619      	mov	r1, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	b29a      	uxth	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	b29b      	uxth	r3, r3
 8000942:	f04f 0101 	mov.w	r1, #1
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	ea6f 0303 	mvn.w	r3, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	4013      	ands	r3, r2
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	b29a      	uxth	r2, r3
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	799b      	ldrb	r3, [r3, #6]
 8000964:	4619      	mov	r1, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	b29b      	uxth	r3, r3
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000982:	f04f 0103 	mov.w	r1, #3
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	ea6f 0303 	mvn.w	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	4619      	mov	r1, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ba:	f04f 0103 	mov.w	r1, #3
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	ea6f 0303 	mvn.w	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	4619      	mov	r1, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f103 0301 	add.w	r3, r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	f67f af6f 	bls.w	80008d4 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80009f6:	f107 071c 	add.w	r7, r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f04f 0202 	mov.w	r2, #2
 8000a1e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	71da      	strb	r2, [r3, #7]
}
 8000a30:	f107 070c 	add.w	r7, r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	60fb      	str	r3, [r7, #12]
}
 8000a74:	f107 0714 	add.w	r7, r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	8a1b      	ldrh	r3, [r3, #16]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000aa2:	f04f 0301 	mov.w	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e002      	b.n	8000ab0 <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f107 0714 	add.w	r7, r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8a1b      	ldrh	r3, [r3, #16]
 8000acc:	b29b      	uxth	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f107 070c 	add.w	r7, r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	8a9b      	ldrh	r3, [r3, #20]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	4013      	ands	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000afe:	f04f 0301 	mov.w	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e002      	b.n	8000b0c <GPIO_ReadOutputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000b06:	f04f 0300 	mov.w	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f107 0714 	add.w	r7, r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	8a9b      	ldrh	r3, [r3, #20]
 8000b28:	b29b      	uxth	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f107 070c 	add.w	r7, r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000b44:	887a      	ldrh	r2, [r7, #2]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	619a      	str	r2, [r3, #24]
}
 8000b4a:	f107 070c 	add.w	r7, r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000b66:	f107 070c 	add.w	r7, r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	807a      	strh	r2, [r7, #2]
 8000b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000b80:	787b      	ldrb	r3, [r7, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
 8000b8c:	e002      	b.n	8000b94 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 8000b94:	f107 070c 	add.w	r7, r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	829a      	strh	r2, [r3, #20]
}
 8000bb2:	f107 070c 	add.w	r7, r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	807a      	strh	r2, [r7, #2]
 8000bca:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000bd8:	787a      	ldrb	r2, [r7, #1]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f101 0108 	add.w	r1, r1, #8
 8000c04:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c12:	f04f 000f 	mov.w	r0, #15
 8000c16:	fa00 f303 	lsl.w	r3, r0, r3
 8000c1a:	ea6f 0303 	mvn.w	r3, r3
 8000c1e:	4019      	ands	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f102 0208 	add.w	r2, r2, #8
 8000c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f102 0208 	add.w	r2, r2, #8
 8000c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f102 0208 	add.w	r2, r2, #8
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c5a:	f107 0714 	add.w	r7, r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c6c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000c70:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000c7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c7e:	60da      	str	r2, [r3, #12]
}
 8000c80:	f107 070c 	add.w	r7, r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	f04f 030f 	mov.w	r3, #15
 8000ca4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d047      	beq.n	8000d3e <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cae:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000cb2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	ea6f 0303 	mvn.w	r3, r3
 8000cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cc0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000cc4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f1c3 0304 	rsb	r3, r3, #4
 8000ccc:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	785b      	ldrb	r3, [r3, #1]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000cfc:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000cfe:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000d02:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	185b      	adds	r3, r3, r1
 8000d12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d16:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000d1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000d26:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	7809      	ldrb	r1, [r1, #0]
 8000d2c:	f001 011f 	and.w	r1, r1, #31
 8000d30:	f04f 0001 	mov.w	r0, #1
 8000d34:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000d3c:	e014      	b.n	8000d68 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000d42:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8000d4e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	7809      	ldrb	r1, [r1, #0]
 8000d54:	f001 011f 	and.w	r1, r1, #31
 8000d58:	f04f 0001 	mov.w	r0, #1
 8000d5c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d68:	f107 071c 	add.w	r7, r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000d7e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000d8c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	609a      	str	r2, [r3, #8]
}
 8000d96:	f107 070c 	add.w	r7, r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	71fa      	strb	r2, [r7, #7]
 8000dac:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00c      	beq.n	8000dce <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8000db4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000db8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000dbc:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000dc0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000dc4:	6911      	ldr	r1, [r2, #16]
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	e00d      	b.n	8000dea <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000dce:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000dd2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000dd6:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000dda:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000dde:	6911      	ldr	r1, [r2, #16]
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	ea6f 0202 	mvn.w	r2, r2
 8000de6:	400a      	ands	r2, r1
 8000de8:	611a      	str	r2, [r3, #16]
  }
}
 8000dea:	f107 070c 	add.w	r7, r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d10c      	bne.n	8000e1c <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e02:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000e06:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e0a:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000e0e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00b      	b.n	8000e34 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000e1c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000e20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e24:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000e28:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	f022 0204 	bic.w	r2, r2, #4
 8000e32:	601a      	str	r2, [r3, #0]
  }
}
 8000e34:	f107 070c 	add.w	r7, r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <RCC_DeInit>:
  * @note     LSI, LSE and RTC clocks                  
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8000e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e72:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000e76:	400b      	ands	r3, r1
 8000e78:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e94:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ebe:	6852      	ldr	r2, [r2, #4]
 8000ec0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ec4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ed6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ed8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000edc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8000ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef4:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8000ef8:	f6c0 7300 	movt	r3, #3840	; 0xf00
 8000efc:	400b      	ands	r3, r1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
}
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000f1e:	f241 0302 	movw	r3, #4098	; 0x1002
 8000f22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8000f2c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	701a      	strb	r2, [r3, #0]

}
 8000f38:	f107 070c 	add.w	r7, r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000f5c:	f04f 0011 	mov.w	r0, #17
 8000f60:	f000 ff00 	bl	8001d64 <RCC_GetFlagStatus>
 8000f64:	4603      	mov	r3, r0
 8000f66:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f103 0301 	add.w	r3, r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f76:	d002      	beq.n	8000f7e <RCC_WaitForHSEStartUp+0x3a>
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0ee      	beq.n	8000f5c <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	f04f 0011 	mov.w	r0, #17
 8000f82:	f000 feef 	bl	8001d64 <RCC_GetFlagStatus>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8000f8c:	f04f 0301 	mov.w	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e002      	b.n	8000f9a <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f107 0708 	add.w	r7, r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fca:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	f107 0714 	add.w	r7, r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	f107 070c 	add.w	r7, r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001024:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001028:	6a12      	ldr	r2, [r2, #32]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001040:	6a12      	ldr	r2, [r2, #32]
 8001042:	f022 0204 	bic.w	r2, r2, #4
 8001046:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001058:	6a11      	ldr	r1, [r2, #32]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	430a      	orrs	r2, r1
 800105e:	621a      	str	r2, [r3, #32]
}
 8001060:	f107 070c 	add.w	r7, r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800107c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001080:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001084:	6a12      	ldr	r2, [r2, #32]
 8001086:	f022 0218 	bic.w	r2, r2, #24
 800108a:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001098:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800109c:	6a11      	ldr	r1, [r2, #32]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	621a      	str	r2, [r3, #32]
}
 80010a4:	f107 070c 	add.w	r7, r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80010ba:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80010be:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	f107 070c 	add.w	r7, r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010f0:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001102:	6851      	ldr	r1, [r2, #4]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4302      	orrs	r2, r0
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
}
 800110e:	f107 070c 	add.w	r7, r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001122:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001126:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	f107 070c 	add.w	r7, r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800116e:	f107 0714 	add.w	r7, r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001182:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8001186:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	f107 070c 	add.w	r7, r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 80011a2:	f241 0307 	movw	r3, #4103	; 0x1007
 80011a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	f107 070c 	add.w	r7, r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f023 0303 	bic.w	r3, r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	605a      	str	r2, [r3, #4]
}
 80011ee:	f107 0714 	add.w	r7, r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	b2db      	uxtb	r3, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001238:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	605a      	str	r2, [r3, #4]
}
 800124e:	f107 0714 	add.w	r7, r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001278:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	605a      	str	r2, [r3, #4]
}
 800128e:	f107 0714 	add.w	r7, r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012b8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	605a      	str	r2, [r3, #4]
}
 80012d2:	f107 0714 	add.w	r7, r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d00a      	beq.n	8001340 <RCC_GetClocksFreq+0x64>
 800132a:	2b08      	cmp	r3, #8
 800132c:	d00f      	beq.n	800134e <RCC_GetClocksFreq+0x72>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d148      	bne.n	80013c4 <RCC_GetClocksFreq+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001338:	f2c0 037a 	movt	r3, #122	; 0x7a
 800133c:	6013      	str	r3, [r2, #0]
      break;
 800133e:	e048      	b.n	80013d2 <RCC_GetClocksFreq+0xf6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001346:	f2c0 037a 	movt	r3, #122	; 0x7a
 800134a:	6013      	str	r3, [r2, #0]
      break;
 800134c:	e041      	b.n	80013d2 <RCC_GetClocksFreq+0xf6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800135c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001374:	f103 0302 	add.w	r3, r3, #2
 8001378:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <RCC_GetClocksFreq+0xb6>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001386:	f2c0 033d 	movt	r3, #61	; 0x3d
 800138a:	fb03 f302 	mul.w	r3, r3, r2
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
 8001390:	e014      	b.n	80013bc <RCC_GetClocksFreq+0xe0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	f103 0301 	add.w	r3, r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80013a6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80013aa:	f2c0 037a 	movt	r3, #122	; 0x7a
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	601a      	str	r2, [r3, #0]
      break;
 80013c2:	e006      	b.n	80013d2 <RCC_GetClocksFreq+0xf6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80013ca:	f2c0 037a 	movt	r3, #122	; 0x7a
 80013ce:	6013      	str	r3, [r2, #0]
      break;
 80013d0:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013e0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80013e8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80013ea:	f240 0300 	movw	r3, #0
 80013ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f2:	6a3a      	ldr	r2, [r7, #32]
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	fa22 f203 	lsr.w	r2, r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001418:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001420:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001422:	f240 0300 	movw	r3, #0
 8001426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142a:	6a3a      	ldr	r2, [r7, #32]
 800142c:	189b      	adds	r3, r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	fa22 f203 	lsr.w	r2, r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001450:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001458:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800145a:	f240 0300 	movw	r3, #0
 800145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	189b      	adds	r3, r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	fa22 f203 	lsr.w	r2, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001488:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8001490:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001492:	f240 0310 	movw	r3, #16
 8001496:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <RCC_GetClocksFreq+0x1e0>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	e003      	b.n	80014c4 <RCC_GetClocksFreq+0x1e8>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80014d2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	ea4f 2353 	mov.w	r3, r3, lsr #9
 80014da:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80014dc:	f240 0310 	movw	r3, #16
 80014e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014e4:	6a3a      	ldr	r2, [r7, #32]
 80014e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <RCC_GetClocksFreq+0x22a>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	e003      	b.n	800150e <RCC_GetClocksFreq+0x232>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <RCC_GetClocksFreq+0x252>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001526:	f2c0 037a 	movt	r3, #122	; 0x7a
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	e003      	b.n	8001536 <RCC_GetClocksFreq+0x25a>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <RCC_GetClocksFreq+0x27a>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800154e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	e003      	b.n	800155e <RCC_GetClocksFreq+0x282>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <RCC_GetClocksFreq+0x2b2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	429a      	cmp	r2, r3
 8001578:	d109      	bne.n	800158e <RCC_GetClocksFreq+0x2b2>
  && (apb2presc == ahbpresc)) 
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	d105      	bne.n	800158e <RCC_GetClocksFreq+0x2b2>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	621a      	str	r2, [r3, #32]
 800158c:	e003      	b.n	8001596 <RCC_GetClocksFreq+0x2ba>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00e      	beq.n	80015c6 <RCC_GetClocksFreq+0x2ea>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d109      	bne.n	80015c6 <RCC_GetClocksFreq+0x2ea>
  && (apb2presc == ahbpresc))
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d105      	bne.n	80015c6 <RCC_GetClocksFreq+0x2ea>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
 80015c4:	e003      	b.n	80015ce <RCC_GetClocksFreq+0x2f2>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
 80015e8:	e02a      	b.n	8001640 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d104      	bne.n	8001606 <RCC_GetClocksFreq+0x32a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
 8001604:	e01c      	b.n	8001640 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d104      	bne.n	8001622 <RCC_GetClocksFreq+0x346>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
 8001620:	e00e      	b.n	8001640 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d105      	bne.n	8001640 <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800163a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800163e:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
 800165a:	e02d      	b.n	80016b8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166e:	d104      	bne.n	800167a <RCC_GetClocksFreq+0x39e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
 8001678:	e01e      	b.n	80016b8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800168c:	d104      	bne.n	8001698 <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
 8001696:	e00f      	b.n	80016b8 <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80016aa:	d105      	bne.n	80016b8 <RCC_GetClocksFreq+0x3dc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80016b2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80016b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
 80016d2:	e02d      	b.n	8001730 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80016e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016e6:	d104      	bne.n	80016f2 <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
 80016f0:	e01e      	b.n	8001730 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001700:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001704:	d104      	bne.n	8001710 <RCC_GetClocksFreq+0x434>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
 800170e:	e00f      	b.n	8001730 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800171e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001722:	d105      	bne.n	8001730 <RCC_GetClocksFreq+0x454>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800172a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	e02d      	b.n	80017a8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800175a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175e:	d104      	bne.n	800176a <RCC_GetClocksFreq+0x48e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
 8001768:	e01e      	b.n	80017a8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800177c:	d104      	bne.n	8001788 <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e00f      	b.n	80017a8 <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800179a:	d105      	bne.n	80017a8 <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80017a2:	f2c0 037a 	movt	r3, #122	; 0x7a
 80017a6:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <RCC_GetClocksFreq+0x4e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
 80017c2:	e02d      	b.n	8001820 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d6:	d104      	bne.n	80017e2 <RCC_GetClocksFreq+0x506>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	e01e      	b.n	8001820 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017f4:	d104      	bne.n	8001800 <RCC_GetClocksFreq+0x524>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
 80017fe:	e00f      	b.n	8001820 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800180e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001812:	d105      	bne.n	8001820 <RCC_GetClocksFreq+0x544>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800181a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800181e:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 8001820:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001840:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <RCC_ADCCLKConfig+0x36>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001854:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800185a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001860:	e00b      	b.n	800187a <RCC_ADCCLKConfig+0x4e>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800186a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001872:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001874:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001886:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800188a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	430a      	orrs	r2, r1
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001892:	f107 0714 	add.w	r7, r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80018b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <RCC_I2CCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ca:	f022 0220 	bic.w	r2, r2, #32
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
 80018d0:	e00b      	b.n	80018ea <RCC_I2CCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018e4:	f022 0210 	bic.w	r2, r2, #16
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	430a      	orrs	r2, r1
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001902:	f107 0714 	add.w	r7, r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001920:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <RCC_TIMCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001934:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800193a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
 8001940:	e00b      	b.n	800195a <RCC_TIMCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800194a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001952:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001966:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800196a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	430a      	orrs	r2, r1
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001972:	f107 0714 	add.w	r7, r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8001990:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f103 33ff 	add.w	r3, r3, #4294967295
 8001998:	2b04      	cmp	r3, #4
 800199a:	d84e      	bhi.n	8001a3a <RCC_USARTCLKConfig+0xbe>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <RCC_USARTCLKConfig+0x28>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b9 	.word	0x080019b9
 80019a8:	080019d3 	.word	0x080019d3
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	08001a07 	.word	0x08001a07
 80019b4:	08001a21 	.word	0x08001a21
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019ca:	f022 0203 	bic.w	r2, r2, #3
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80019d0:	e034      	b.n	8001a3c <RCC_USARTCLKConfig+0xc0>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80019ea:	e027      	b.n	8001a3c <RCC_USARTCLKConfig+0xc0>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019fe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001a04:	e01a      	b.n	8001a3c <RCC_USARTCLKConfig+0xc0>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a18:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001a1e:	e00d      	b.n	8001a3c <RCC_USARTCLKConfig+0xc0>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a32:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8001a38:	e000      	b.n	8001a3c <RCC_USARTCLKConfig+0xc0>
    default:
      break;
 8001a3a:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a54:	f107 0714 	add.w	r7, r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001a68:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 8001a6c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	f107 070c 	add.w	r7, r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a98:	6a11      	ldr	r1, [r2, #32]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	621a      	str	r2, [r3, #32]
}
 8001aa0:	f107 070c 	add.w	r7, r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001ab4:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8001ab8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	f107 070c 	add.w	r7, r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001ad6:	f240 433c 	movw	r3, #1084	; 0x43c
 8001ada:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001ade:	79fa      	ldrb	r2, [r7, #7]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	f107 070c 	add.w	r7, r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001af6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001afa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	f107 070c 	add.w	r7, r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b2e:	6951      	ldr	r1, [r2, #20]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	e00d      	b.n	8001b54 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b48:	6951      	ldr	r1, [r2, #20]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	ea6f 0202 	mvn.w	r2, r2
 8001b50:	400a      	ands	r2, r1
 8001b52:	615a      	str	r2, [r3, #20]
  }
}
 8001b54:	f107 070c 	add.w	r7, r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b82:	6991      	ldr	r1, [r2, #24]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	619a      	str	r2, [r3, #24]
 8001b8a:	e00d      	b.n	8001ba8 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b9c:	6991      	ldr	r1, [r2, #24]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	ea6f 0202 	mvn.w	r2, r2
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	619a      	str	r2, [r3, #24]
  }
}
 8001ba8:	f107 070c 	add.w	r7, r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bd6:	69d1      	ldr	r1, [r2, #28]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	e00d      	b.n	8001bfc <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bf0:	69d1      	ldr	r1, [r2, #28]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	ea6f 0202 	mvn.w	r2, r2
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	61da      	str	r2, [r3, #28]
  }
}
 8001bfc:	f107 070c 	add.w	r7, r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
 8001c32:	e00d      	b.n	8001c50 <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	ea6f 0202 	mvn.w	r2, r2
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001c50:	f107 070c 	add.w	r7, r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c7e:	68d1      	ldr	r1, [r2, #12]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	e00d      	b.n	8001ca4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c98:	68d1      	ldr	r1, [r2, #12]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	ea6f 0202 	mvn.w	r2, r2
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
  }
}
 8001ca4:	f107 070c 	add.w	r7, r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cd2:	6911      	ldr	r1, [r2, #16]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	e00d      	b.n	8001cf8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cec:	6911      	ldr	r1, [r2, #16]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	ea6f 0202 	mvn.w	r2, r2
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	611a      	str	r2, [r3, #16]
  }
}
 8001cf8:	f107 070c 	add.w	r7, r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	71fa      	strb	r2, [r7, #7]
 8001d10:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001d18:	f241 0309 	movw	r3, #4105	; 0x1009
 8001d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d20:	f241 0209 	movw	r2, #4105	; 0x1009
 8001d24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	b2d1      	uxtb	r1, r2
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e010      	b.n	8001d58 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001d36:	f241 0309 	movw	r3, #4105	; 0x1009
 8001d3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d3e:	f241 0209 	movw	r2, #4105	; 0x1009
 8001d42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	b2d1      	uxtb	r1, r2
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	ea6f 0202 	mvn.w	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	400a      	ands	r2, r1
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
  }
}
 8001d58:	f107 070c 	add.w	r7, r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d106      	bne.n	8001d9e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e019      	b.n	8001dd2 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e00f      	b.n	8001dd2 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d106      	bne.n	8001dc6 <RCC_GetFlagStatus+0x62>
  {
    statusreg = RCC->CFGR;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e005      	b.n	8001dd2 <RCC_GetFlagStatus+0x6e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <RCC_GetFlagStatus+0x8e>
  {
    bitstatus = SET;
 8001dea:	f04f 0301 	mov.w	r3, #1
 8001dee:	74fb      	strb	r3, [r7, #19]
 8001df0:	e002      	b.n	8001df8 <RCC_GetFlagStatus+0x94>
  }
  else
  {
    bitstatus = RESET;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f107 071c 	add.w	r7, r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8001e4e:	f04f 0301 	mov.w	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e002      	b.n	8001e5c <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f107 0714 	add.w	r7, r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001e76:	f241 030a 	movw	r3, #4106	; 0x100a
 8001e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e7e:	79fa      	ldrb	r2, [r7, #7]
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	f107 070c 	add.w	r7, r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001e9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d10c      	bne.n	8001ebc <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001ea2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ea6:	f04f 0101 	mov.w	r1, #1
 8001eaa:	f7ff fed7 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001eae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	f7ff fed1 	bl	8001c5c <RCC_APB2PeriphResetCmd>
 8001eba:	e0af      	b.n	800201c <TIM_DeInit+0x190>
  } 
  else if (TIMx == TIM2) 
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d10c      	bne.n	8001ede <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001ec4:	f04f 0001 	mov.w	r0, #1
 8001ec8:	f04f 0101 	mov.w	r1, #1
 8001ecc:	f7ff fef0 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001ed0:	f04f 0001 	mov.w	r0, #1
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	f7ff feea 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8001edc:	e09e      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM3)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10c      	bne.n	8001f06 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001eec:	f04f 0002 	mov.w	r0, #2
 8001ef0:	f04f 0101 	mov.w	r1, #1
 8001ef4:	f7ff fedc 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001ef8:	f04f 0002 	mov.w	r0, #2
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f7ff fed6 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8001f04:	e08a      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM4)
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10c      	bne.n	8001f2e <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001f14:	f04f 0004 	mov.w	r0, #4
 8001f18:	f04f 0101 	mov.w	r1, #1
 8001f1c:	f7ff fec8 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001f20:	f04f 0004 	mov.w	r0, #4
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	f7ff fec2 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8001f2c:	e076      	b.n	800201c <TIM_DeInit+0x190>
  }   
  else if (TIMx == TIM6)  
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10c      	bne.n	8001f56 <TIM_DeInit+0xca>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001f3c:	f04f 0010 	mov.w	r0, #16
 8001f40:	f04f 0101 	mov.w	r1, #1
 8001f44:	f7ff feb4 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001f48:	f04f 0010 	mov.w	r0, #16
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	f7ff feae 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8001f54:	e062      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM7)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d10c      	bne.n	8001f7e <TIM_DeInit+0xf2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001f64:	f04f 0020 	mov.w	r0, #32
 8001f68:	f04f 0101 	mov.w	r1, #1
 8001f6c:	f7ff fea0 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001f70:	f04f 0020 	mov.w	r0, #32
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	f7ff fe9a 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8001f7c:	e04e      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM8)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001f84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10c      	bne.n	8001fa6 <TIM_DeInit+0x11a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f90:	f04f 0101 	mov.w	r1, #1
 8001f94:	f7ff fe62 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001f98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	f7ff fe5c 	bl	8001c5c <RCC_APB2PeriphResetCmd>
 8001fa4:	e03a      	b.n	800201c <TIM_DeInit+0x190>
  }    
  else if (TIMx == TIM15)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d10c      	bne.n	8001fce <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001fb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001fb8:	f04f 0101 	mov.w	r1, #1
 8001fbc:	f7ff fe4e 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8001fc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f7ff fe48 	bl	8001c5c <RCC_APB2PeriphResetCmd>
 8001fcc:	e026      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM16) 
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001fd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10c      	bne.n	8001ff6 <TIM_DeInit+0x16a>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001fdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fe0:	f04f 0101 	mov.w	r1, #1
 8001fe4:	f7ff fe3a 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8001fe8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	f7ff fe34 	bl	8001c5c <RCC_APB2PeriphResetCmd>
 8001ff4:	e012      	b.n	800201c <TIM_DeInit+0x190>
  }  
  else
  { 
    if (TIMx == TIM17) 
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001ffc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002000:	429a      	cmp	r2, r3
 8002002:	d10b      	bne.n	800201c <TIM_DeInit+0x190>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002004:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002008:	f04f 0101 	mov.w	r1, #1
 800200c:	f7ff fe26 	bl	8001c5c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8002010:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	f7ff fe20 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    }   
  }
}
 800201c:	f107 0708 	add.w	r7, r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002040:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002044:	429a      	cmp	r2, r3
 8002046:	d018      	beq.n	800207a <TIM_TimeBaseInit+0x56>
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002052:	429a      	cmp	r2, r3
 8002054:	d011      	beq.n	800207a <TIM_TimeBaseInit+0x56>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d00d      	beq.n	800207a <TIM_TimeBaseInit+0x56>
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002064:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002068:	429a      	cmp	r2, r3
 800206a:	d006      	beq.n	800207a <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002072:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002076:	429a      	cmp	r2, r3
 8002078:	d108      	bne.n	800208c <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002080:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	885a      	ldrh	r2, [r3, #2]
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	4313      	orrs	r3, r2
 800208a:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002092:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002096:	429a      	cmp	r2, r3
 8002098:	d00f      	beq.n	80020ba <TIM_TimeBaseInit+0x96>
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d008      	beq.n	80020ba <TIM_TimeBaseInit+0x96>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80020a8:	89fb      	ldrh	r3, [r7, #14]
 80020aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	891a      	ldrh	r2, [r3, #8]
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	89fa      	ldrh	r2, [r7, #14]
 80020be:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80020d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020da:	429a      	cmp	r2, r3
 80020dc:	d01b      	beq.n	8002116 <TIM_TimeBaseInit+0xf2>
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80020e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d014      	beq.n	8002116 <TIM_TimeBaseInit+0xf2>
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d00d      	beq.n	8002116 <TIM_TimeBaseInit+0xf2>
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002100:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002104:	429a      	cmp	r2, r3
 8002106:	d006      	beq.n	8002116 <TIM_TimeBaseInit+0xf2>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800210e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002112:	429a      	cmp	r2, r3
 8002114:	d104      	bne.n	8002120 <TIM_TimeBaseInit+0xfc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7a9b      	ldrb	r3, [r3, #10]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f04f 0201 	mov.w	r2, #1
 8002126:	615a      	str	r2, [r3, #20]
}
 8002128:	f107 0714 	add.w	r7, r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop

08002134 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	729a      	strb	r2, [r3, #10]
}
 8002164:	f107 070c 	add.w	r7, r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	807a      	strh	r2, [r7, #2]
 800217e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8002186:	883a      	ldrh	r2, [r7, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	615a      	str	r2, [r3, #20]
}
 800218c:	f107 070c 	add.w	r7, r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80021b8:	89fa      	ldrh	r2, [r7, #14]
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	4313      	orrs	r3, r2
 80021be:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	89fa      	ldrh	r2, [r7, #14]
 80021c4:	801a      	strh	r2, [r3, #0]
}
 80021c6:	f107 0714 	add.w	r7, r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021e0:	f107 070c 	add.w	r7, r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80021fc:	f107 070c 	add.w	r7, r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002214:	4618      	mov	r0, r3
 8002216:	f107 070c 	add.w	r7, r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	b29b      	uxth	r3, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	f107 070c 	add.w	r7, r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	801a      	strh	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f023 0302 	bic.w	r3, r3, #2
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	801a      	strh	r2, [r3, #0]
  }
}
 8002270:	f107 070c 	add.w	r7, r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop

0800227c <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	b29a      	uxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	801a      	strh	r2, [r3, #0]
  }
}
 80022b0:	f107 070c 	add.w	r7, r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	e007      	b.n	80022f0 <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	801a      	strh	r2, [r3, #0]
  }  
}
 80022f0:	f107 070c 	add.w	r7, r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop

080022fc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	e007      	b.n	8002330 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	801a      	strh	r2, [r3, #0]
  }
}
 8002330:	f107 070c 	add.w	r7, r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f023 0308 	bic.w	r3, r3, #8
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	4313      	orrs	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	801a      	strh	r2, [r3, #0]
}
 8002368:	f107 070c 	add.w	r7, r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29a      	uxth	r2, r3
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	4313      	orrs	r3, r2
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	801a      	strh	r2, [r3, #0]
}
 80023a0:	f107 070c 	add.w	r7, r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	801a      	strh	r2, [r3, #0]
  }
}
 80023e0:	f107 070c 	add.w	r7, r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f023 0201 	bic.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f023 0303 	bic.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0302 	bic.w	r3, r3, #2
 800244a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	899b      	ldrh	r3, [r3, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	889b      	ldrh	r3, [r3, #4]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002466:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800246a:	429a      	cmp	r2, r3
 800246c:	d01b      	beq.n	80024a6 <TIM_OC1Init+0xba>
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002474:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002478:	429a      	cmp	r2, r3
 800247a:	d014      	beq.n	80024a6 <TIM_OC1Init+0xba>
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002482:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002486:	429a      	cmp	r2, r3
 8002488:	d00d      	beq.n	80024a6 <TIM_OC1Init+0xba>
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002490:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002494:	429a      	cmp	r2, r3
 8002496:	d006      	beq.n	80024a6 <TIM_OC1Init+0xba>
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800249e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d123      	bne.n	80024ee <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f023 0308 	bic.w	r3, r3, #8
 80024ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	89db      	ldrh	r3, [r3, #14]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	8a1b      	ldrh	r3, [r3, #16]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	8a5b      	ldrh	r3, [r3, #18]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	f107 071c 	add.w	r7, r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 0210 	bic.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002558:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0320 	bic.w	r3, r3, #32
 8002576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	899b      	ldrh	r3, [r3, #12]
 800257c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800259a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800259e:	429a      	cmp	r2, r3
 80025a0:	d006      	beq.n	80025b0 <TIM_OC2Init+0x9c>
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d12b      	bne.n	8002608 <TIM_OC2Init+0xf4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	89db      	ldrh	r3, [r3, #14]
 80025bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025cc:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	88db      	ldrh	r3, [r3, #6]
 80025d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	8a1b      	ldrh	r3, [r3, #16]
 80025f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	8a5b      	ldrh	r3, [r3, #18]
 80025fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	f107 071c 	add.w	r7, r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f023 0303 	bic.w	r3, r3, #3
 8002674:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	899b      	ldrh	r3, [r3, #12]
 800268c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	889b      	ldrh	r3, [r3, #4]
 800269a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80026aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d006      	beq.n	80026c0 <TIM_OC3Init+0x94>
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80026b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026bc:	429a      	cmp	r2, r3
 80026be:	d12b      	bne.n	8002718 <TIM_OC3Init+0xec>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	89db      	ldrh	r3, [r3, #14]
 80026cc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026dc:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	88db      	ldrh	r3, [r3, #6]
 80026e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	8a1b      	ldrh	r3, [r3, #16]
 8002700:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	8a5b      	ldrh	r3, [r3, #18]
 800270e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	f107 071c 	add.w	r7, r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277c:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	899b      	ldrh	r3, [r3, #12]
 80027a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	889b      	ldrh	r3, [r3, #4]
 80027ae:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80027be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d006      	beq.n	80027d4 <TIM_OC4Init+0x98>
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80027cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10a      	bne.n	80027ea <TIM_OC4Init+0xae>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	8a1b      	ldrh	r3, [r3, #16]
 80027e0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	f107 071c 	add.w	r7, r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002862:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	899b      	ldrh	r3, [r3, #12]
 8002868:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002886:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800288a:	429a      	cmp	r2, r3
 800288c:	d006      	beq.n	800289c <TIM_OC5Init+0x8c>
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002894:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002898:	429a      	cmp	r2, r3
 800289a:	d10a      	bne.n	80028b2 <TIM_OC5Init+0xa2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	8a1b      	ldrh	r3, [r3, #16]
 80028a8:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]
}
 80028cc:	f107 071c 	add.w	r7, r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002918:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800292e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	899b      	ldrh	r3, [r3, #12]
 8002934:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	889b      	ldrh	r3, [r3, #4]
 8002942:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002952:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002956:	429a      	cmp	r2, r3
 8002958:	d006      	beq.n	8002968 <TIM_OC6Init+0x90>
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002960:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002964:	429a      	cmp	r2, r3
 8002966:	d103      	bne.n	8002970 <TIM_OC6Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800296e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
}
 800298a:	f107 071c 	add.w	r7, r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	; 0x58
 80029b2:	e005      	b.n	80029c0 <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80029c0:	f107 070c 	add.w	r7, r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58
 80029ea:	e005      	b.n	80029f8 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80029f8:	f107 070c 	add.w	r7, r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	659a      	str	r2, [r3, #88]	; 0x58
 8002a22:	e005      	b.n	8002a30 <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8002a30:	f107 070c 	add.w	r7, r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	825a      	strh	r2, [r3, #18]
}
 8002a84:	f107 070c 	add.w	r7, r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f103 0318 	add.w	r3, r3, #24
 8002ab4:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	f04f 0201 	mov.w	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	ea6f 0303 	mvn.w	r3, r3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <TIM_SelectOCxM+0x50>
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d115      	bne.n	8002b0c <TIM_SelectOCxM+0x7c>
  {
    tmp += (TIM_Channel>>1);
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6811      	ldr	r1, [r2, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e019      	b.n	8002b40 <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 8002b0c:	897b      	ldrh	r3, [r7, #10]
 8002b0e:	f1a3 0304 	sub.w	r3, r3, #4
 8002b12:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2a:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	b292      	uxth	r2, r2
 8002b36:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
  }
}
 8002b40:	f107 071c 	add.w	r7, r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b5c:	f107 070c 	add.w	r7, r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b78:	f107 070c 	add.w	r7, r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b94:	f107 070c 	add.w	r7, r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bb0:	f107 070c 	add.w	r7, r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop

08002bbc <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002bcc:	f107 070c 	add.w	r7, r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002be8:	f107 070c 	add.w	r7, r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	f107 0714 	add.w	r7, r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	f107 0714 	add.w	r7, r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	61da      	str	r2, [r3, #28]
}
 8002c9e:	f107 0714 	add.w	r7, r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]
}
 8002cda:	f107 0714 	add.w	r7, r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002d12:	f107 0714 	add.w	r7, r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002d4e:	f107 0714 	add.w	r7, r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0308 	bic.w	r3, r3, #8
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	f107 0714 	add.w	r7, r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	f107 0714 	add.w	r7, r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0308 	bic.w	r3, r3, #8
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	61da      	str	r2, [r3, #28]
}
 8002dfa:	f107 0714 	add.w	r7, r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	61da      	str	r2, [r3, #28]
}
 8002e36:	f107 0714 	add.w	r7, r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0308 	bic.w	r3, r3, #8
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002e6e:	f107 0714 	add.w	r7, r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002eaa:	f107 0714 	add.w	r7, r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	619a      	str	r2, [r3, #24]
}
 8002ee2:	f107 0714 	add.w	r7, r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	f107 0714 	add.w	r7, r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	61da      	str	r2, [r3, #28]
}
 8002f56:	f107 0714 	add.w	r7, r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	61da      	str	r2, [r3, #28]
}
 8002f92:	f107 0714 	add.w	r7, r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	f107 0714 	add.w	r7, r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	f107 0714 	add.w	r7, r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]
}
 800303e:	f107 0714 	add.w	r7, r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003066:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	61da      	str	r2, [r3, #28]
}
 800307a:	f107 0714 	add.w	r7, r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80030b2:	f107 0714 	add.w	r7, r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030da:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
}
 80030ee:	f107 0714 	add.w	r7, r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	f107 070c 	add.w	r7, r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0302 	bic.w	r3, r3, #2
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	f107 0714 	add.w	r7, r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0308 	bic.w	r3, r3, #8
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	f107 0714 	add.w	r7, r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0320 	bic.w	r3, r3, #32
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	f107 0714 	add.w	r7, r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	f107 0714 	add.w	r7, r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	f107 0714 	add.w	r7, r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326a:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	f107 0714 	add.w	r7, r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	f107 0714 	add.w	r7, r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	f107 0714 	add.w	r7, r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	f107 0714 	add.w	r7, r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	460a      	mov	r2, r1
 8003348:	807a      	strh	r2, [r7, #2]
 800334a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	f04f 0201 	mov.w	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	ea6f 0303 	mvn.w	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	8839      	ldrh	r1, [r7, #0]
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	f107 0714 	add.w	r7, r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	460a      	mov	r2, r1
 8003398:	807a      	strh	r2, [r7, #2]
 800339a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	f04f 0204 	mov.w	r2, #4
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	ea6f 0303 	mvn.w	r3, r3
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	8839      	ldrh	r1, [r7, #0]
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	f107 0714 	add.w	r7, r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop

080033dc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80033f2:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033f4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033f8:	891b      	ldrh	r3, [r3, #8]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fd02 	bl	8003e04 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	88db      	ldrh	r3, [r3, #6]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4619      	mov	r1, r3
 8003408:	f000 f8ec 	bl	80035e4 <TIM_SetIC1Prescaler>
 800340c:	e036      	b.n	800347c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d10f      	bne.n	8003436 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800341a:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800341c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003420:	891b      	ldrh	r3, [r3, #8]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fd2a 	bl	8003e7c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	88db      	ldrh	r3, [r3, #6]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4619      	mov	r1, r3
 8003430:	f000 f8f0 	bl	8003614 <TIM_SetIC2Prescaler>
 8003434:	e022      	b.n	800347c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	2b08      	cmp	r3, #8
 800343c:	d10f      	bne.n	800345e <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003442:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003444:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003446:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003448:	891b      	ldrh	r3, [r3, #8]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fd60 	bl	8003f10 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	88db      	ldrh	r3, [r3, #6]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4619      	mov	r1, r3
 8003458:	f000 f8f6 	bl	8003648 <TIM_SetIC3Prescaler>
 800345c:	e00e      	b.n	800347c <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8003462:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003464:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003468:	891b      	ldrh	r3, [r3, #8]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fd96 	bl	8003f9c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	88db      	ldrh	r3, [r3, #6]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4619      	mov	r1, r3
 8003478:	f000 f8fe 	bl	8003678 <TIM_SetIC4Prescaler>
  }
}
 800347c:	f107 0708 	add.w	r7, r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f04f 0201 	mov.w	r2, #1
 80034a2:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	811a      	strh	r2, [r3, #8]
}
 80034b4:	f107 070c 	add.w	r7, r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 80034d0:	f04f 0301 	mov.w	r3, #1
 80034d4:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	885b      	ldrh	r3, [r3, #2]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80034de:	f04f 0302 	mov.w	r3, #2
 80034e2:	81fb      	strh	r3, [r7, #14]
 80034e4:	e002      	b.n	80034ec <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	889b      	ldrh	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d103      	bne.n	80034fc <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80034f4:	f04f 0302 	mov.w	r3, #2
 80034f8:	81bb      	strh	r3, [r7, #12]
 80034fa:	e002      	b.n	8003502 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80034fc:	f04f 0301 	mov.w	r3, #1
 8003500:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11c      	bne.n	8003544 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	8859      	ldrh	r1, [r3, #2]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003514:	891b      	ldrh	r3, [r3, #8]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fc74 	bl	8003e04 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	88db      	ldrh	r3, [r3, #6]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4619      	mov	r1, r3
 8003524:	f000 f85e 	bl	80035e4 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	891b      	ldrh	r3, [r3, #8]
 800352c:	89f9      	ldrh	r1, [r7, #14]
 800352e:	89ba      	ldrh	r2, [r7, #12]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fca3 	bl	8003e7c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	88db      	ldrh	r3, [r3, #6]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	f000 f869 	bl	8003614 <TIM_SetIC2Prescaler>
 8003542:	e01b      	b.n	800357c <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	8859      	ldrh	r1, [r3, #2]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800354c:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800354e:	891b      	ldrh	r3, [r3, #8]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fc93 	bl	8003e7c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	88db      	ldrh	r3, [r3, #6]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4619      	mov	r1, r3
 800355e:	f000 f859 	bl	8003614 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	891b      	ldrh	r3, [r3, #8]
 8003566:	89f9      	ldrh	r1, [r7, #14]
 8003568:	89ba      	ldrh	r2, [r7, #12]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fc4a 	bl	8003e04 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	88db      	ldrh	r3, [r3, #6]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	f000 f834 	bl	80035e4 <TIM_SetIC1Prescaler>
  }
}
 800357c:	f107 0710 	add.w	r7, r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003590:	4618      	mov	r0, r3
 8003592:	f107 070c 	add.w	r7, r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	f107 070c 	add.w	r7, r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	f107 070c 	add.w	r7, r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80035d8:	4618      	mov	r0, r3
 80035da:	f107 070c 	add.w	r7, r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f023 020c 	bic.w	r2, r3, #12
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	887b      	ldrh	r3, [r7, #2]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
}
 8003608:	f107 070c 	add.w	r7, r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop

08003614 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
}
 800363c:	f107 070c 	add.w	r7, r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	61da      	str	r2, [r3, #28]
}
 800366e:	f107 070c 	add.w	r7, r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	61da      	str	r2, [r3, #28]
}
 80036a4:	f107 070c 	add.w	r7, r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop

080036b0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	891b      	ldrh	r3, [r3, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	b29a      	uxth	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	895b      	ldrh	r3, [r3, #10]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80036f4:	f107 070c 	add.w	r7, r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	ea4f 4103 	mov.w	r1, r3, lsl #16
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	430b      	orrs	r3, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800372e:	f107 0714 	add.w	r7, r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	ea4f 5103 	mov.w	r1, r3, lsl #20
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	430b      	orrs	r3, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003766:	f107 0714 	add.w	r7, r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
 800378e:	e005      	b.n	800379c <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 800379c:	f107 070c 	add.w	r7, r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop

080037a8 <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
 80037c6:	e005      	b.n	80037d4 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80037d4:	f107 070c 	add.w	r7, r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	819a      	strh	r2, [r3, #12]
}
 8003820:	f107 070c 	add.w	r7, r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
 800384a:	e007      	b.n	800385c <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003854:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 800385c:	f107 070c 	add.w	r7, r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	e006      	b.n	8003896 <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6053      	str	r3, [r2, #4]
  }
}
 8003896:	f107 070c 	add.w	r7, r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e006      	b.n	80038ce <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6053      	str	r3, [r2, #4]
  }
}
 80038ce:	f107 070c 	add.w	r7, r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	460a      	mov	r2, r1
 80038e4:	807a      	strh	r2, [r7, #2]
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e008      	b.n	800390e <TIM_ITConfig+0x36>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	ea6f 0303 	mvn.w	r3, r3
 8003906:	b29b      	uxth	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]
  }
}
 800390e:	f107 070c 	add.w	r7, r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	615a      	str	r2, [r3, #20]
}
 800392a:	f107 070c 	add.w	r7, r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 8003950:	f04f 0301 	mov.w	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e002      	b.n	800395e <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	f107 0714 	add.w	r7, r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	ea6f 0303 	mvn.w	r3, r3
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]
}
 8003986:	f107 070c 	add.w	r7, r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	81bb      	strh	r3, [r7, #12]
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	4013      	ands	r3, r2
 80039b8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	4013      	ands	r3, r2
 80039c4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80039c6:	89bb      	ldrh	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <TIM_GetITStatus+0x4a>
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80039d2:	f04f 0301 	mov.w	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e002      	b.n	80039e0 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	f107 0714 	add.w	r7, r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	ea6f 0303 	mvn.w	r3, r3
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]
}
 8003a0a:	f107 070c 	add.w	r7, r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	460a      	mov	r2, r1
 8003a20:	807a      	strh	r2, [r7, #2]
 8003a22:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	883b      	ldrh	r3, [r7, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003a32:	f107 070c 	add.w	r7, r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	460a      	mov	r2, r1
 8003a48:	807a      	strh	r2, [r7, #2]
 8003a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a4c:	787b      	ldrb	r3, [r7, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	e008      	b.n	8003a72 <TIM_DMACmd+0x36>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	ea6f 0303 	mvn.w	r3, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60da      	str	r2, [r3, #12]
  }
}
 8003a72:	f107 070c 	add.w	r7, r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	e006      	b.n	8003aaa <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6053      	str	r3, [r2, #4]
  }
}
 8003aaa:	f107 070c 	add.w	r7, r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6093      	str	r3, [r2, #8]
}
 8003aca:	f107 070c 	add.w	r7, r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f000 f877 	bl	8003bd8 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f043 0207 	orr.w	r2, r3, #7
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	f107 0708 	add.w	r7, r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop

08003b00 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	8179      	strh	r1, [r7, #10]
 8003b0a:	813a      	strh	r2, [r7, #8]
 8003b0c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d108      	bne.n	8003b26 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	f04f 0201 	mov.w	r2, #1
 8003b20:	f000 f9ac 	bl	8003e7c <TI2_Config>
 8003b24:	e007      	b.n	8003b36 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003b26:	893a      	ldrh	r2, [r7, #8]
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f04f 0201 	mov.w	r2, #1
 8003b32:	f000 f967 	bl	8003e04 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f000 f84c 	bl	8003bd8 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f043 0207 	orr.w	r2, r3, #7
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	f107 0710 	add.w	r7, r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	8179      	strh	r1, [r7, #10]
 8003b5e:	813a      	strh	r2, [r7, #8]
 8003b60:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003b68:	8979      	ldrh	r1, [r7, #10]
 8003b6a:	893a      	ldrh	r2, [r7, #8]
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8ac 	bl	8003ccc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8003b82:	8afb      	ldrh	r3, [r7, #22]
 8003b84:	f043 0307 	orr.w	r3, r3, #7
 8003b88:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b90:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8003b92:	8afb      	ldrh	r3, [r7, #22]
 8003b94:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003b98:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	8afa      	ldrh	r2, [r7, #22]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	f107 0718 	add.w	r7, r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	8179      	strh	r1, [r7, #10]
 8003bb2:	813a      	strh	r2, [r7, #8]
 8003bb4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	893a      	ldrh	r2, [r7, #8]
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f885 	bl	8003ccc <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
}
 8003bce:	f107 0710 	add.w	r7, r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop

08003bd8 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003bf8:	89fa      	ldrh	r2, [r7, #14]
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c00:	89fa      	ldrh	r2, [r7, #14]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	f107 0714 	add.w	r7, r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	605a      	str	r2, [r3, #4]
}
 8003c36:	f107 070c 	add.w	r7, r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	605a      	str	r2, [r3, #4]
}
 8003c62:	f107 070c 	add.w	r7, r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	f107 070c 	add.w	r7, r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	f107 070c 	add.w	r7, r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	8179      	strh	r1, [r7, #10]
 8003cd6:	813a      	strh	r2, [r7, #8]
 8003cd8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	8afb      	ldrh	r3, [r7, #22]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	8afa      	ldrh	r2, [r7, #22]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	f107 071c 	add.w	r7, r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	8179      	strh	r1, [r7, #10]
 8003d22:	813a      	strh	r2, [r7, #8]
 8003d24:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003d4a:	8afb      	ldrh	r3, [r7, #22]
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003d52:	8afa      	ldrh	r2, [r7, #22]
 8003d54:	897b      	ldrh	r3, [r7, #10]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003d5a:	8abb      	ldrh	r3, [r7, #20]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	f023 0303 	bic.w	r3, r3, #3
 8003d64:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003d66:	8abb      	ldrh	r3, [r7, #20]
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8003d72:	8a7b      	ldrh	r3, [r7, #18]
 8003d74:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d78:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	893b      	ldrh	r3, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003d94:	8aba      	ldrh	r2, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9a:	8a7a      	ldrh	r2, [r7, #18]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]
}
 8003da0:	f107 071c 	add.w	r7, r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e006      	b.n	8003dda <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6053      	str	r3, [r2, #4]
  }
}
 8003dda:	f107 070c 	add.w	r7, r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8003df8:	f107 070c 	add.w	r7, r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	8179      	strh	r1, [r7, #10]
 8003e0e:	813a      	strh	r2, [r7, #8]
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 8003e3e:	893a      	ldrh	r2, [r7, #8]
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 030a 	bic.w	r3, r3, #10
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	f107 071c 	add.w	r7, r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	8179      	strh	r1, [r7, #10]
 8003e86:	813a      	strh	r2, [r7, #8]
 8003e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003eb6:	897b      	ldrh	r3, [r7, #10]
 8003eb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8003ec6:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f043 0310 	orr.w	r3, r3, #16
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	8179      	strh	r1, [r7, #10]
 8003f1a:	813a      	strh	r2, [r7, #8]
 8003f1c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	82fb      	strh	r3, [r7, #22]
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	82bb      	strh	r3, [r7, #20]
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003f38:	4013      	ands	r3, r2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003f50:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8003f52:	8afb      	ldrh	r3, [r7, #22]
 8003f54:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003f58:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	893b      	ldrh	r3, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	8afb      	ldrh	r3, [r7, #22]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f6e:	8abb      	ldrh	r3, [r7, #20]
 8003f70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f74:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003f76:	8a7a      	ldrh	r2, [r7, #18]
 8003f78:	8abb      	ldrh	r3, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f84:	8afa      	ldrh	r2, [r7, #22]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f8a:	8aba      	ldrh	r2, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	f107 071c 	add.w	r7, r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop

08003f9c <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	8179      	strh	r1, [r7, #10]
 8003fa6:	813a      	strh	r2, [r7, #8]
 8003fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	82fb      	strh	r3, [r7, #22]
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	82bb      	strh	r3, [r7, #20]
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003fdc:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003fde:	8afb      	ldrh	r3, [r7, #22]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003fe8:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003fec:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	8afb      	ldrh	r3, [r7, #22]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004002:	b29a      	uxth	r2, r3
 8004004:	8afb      	ldrh	r3, [r7, #22]
 8004006:	4313      	orrs	r3, r2
 8004008:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800400a:	8abb      	ldrh	r3, [r7, #20]
 800400c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004010:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004014:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004018:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800401a:	8a7a      	ldrh	r2, [r7, #18]
 800401c:	8abb      	ldrh	r3, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004026:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004028:	8afa      	ldrh	r2, [r7, #22]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800402e:	8aba      	ldrh	r2, [r7, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	f107 071c 	add.w	r7, r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800404e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004052:	429a      	cmp	r2, r3
 8004054:	d10c      	bne.n	8004070 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8004056:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800405a:	f04f 0101 	mov.w	r1, #1
 800405e:	f7fd fdfd 	bl	8001c5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8004062:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	f7fd fdf7 	bl	8001c5c <RCC_APB2PeriphResetCmd>
 800406e:	e04e      	b.n	800410e <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8004076:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800407a:	429a      	cmp	r2, r3
 800407c:	d10c      	bne.n	8004098 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800407e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004082:	f04f 0101 	mov.w	r1, #1
 8004086:	f7fd fe13 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800408a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	f7fd fe0d 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 8004096:	e03a      	b.n	800410e <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800409e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d10c      	bne.n	80040c0 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80040a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80040aa:	f04f 0101 	mov.w	r1, #1
 80040ae:	f7fd fdff 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80040b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	f7fd fdf9 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 80040be:	e026      	b.n	800410e <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80040c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10c      	bne.n	80040e8 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80040ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040d2:	f04f 0101 	mov.w	r1, #1
 80040d6:	f7fd fdeb 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80040da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f7fd fde5 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
 80040e6:	e012      	b.n	800410e <USART_DeInit+0xce>
  }
  else
  {
    if  (USARTx == UART5)
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80040ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10b      	bne.n	800410e <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80040f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80040fa:	f04f 0101 	mov.w	r1, #1
 80040fe:	f7fd fdd7 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8004102:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	f7fd fdd1 	bl	8001cb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800410e:	f107 0708 	add.w	r7, r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b094      	sub	sp, #80	; 0x50
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0201 	bic.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004154:	4313      	orrs	r3, r2
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415c:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800416a:	f023 030c 	bic.w	r3, r3, #12
 800416e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800417e:	4313      	orrs	r3, r2
 8004180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004182:	4313      	orrs	r3, r2
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800418a:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a0:	4313      	orrs	r3, r2
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd f894 	bl	80012dc <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80041ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80041be:	429a      	cmp	r2, r3
 80041c0:	d102      	bne.n	80041c8 <USART_Init+0xb0>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c6:	e01f      	b.n	8004208 <USART_Init+0xf0>
  }
  else if (USARTx == USART2)
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80041ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d102      	bne.n	80041dc <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80041d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041da:	e015      	b.n	8004208 <USART_Init+0xf0>
  }
  else if (USARTx == USART3)
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80041e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d102      	bne.n	80041f0 <USART_Init+0xd8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ee:	e00b      	b.n	8004208 <USART_Init+0xf0>
  }
  else if (USARTx == UART4)
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80041f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d102      	bne.n	8004204 <USART_Init+0xec>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	64bb      	str	r3, [r7, #72]	; 0x48
 8004202:	e001      	b.n	8004208 <USART_Init+0xf0>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8004204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <USART_Init+0x124>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8004224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004226:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004232:	fb02 f201 	mul.w	r2, r2, r1
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	e00e      	b.n	800425a <USART_Init+0x142>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004252:	fb02 f201 	mul.w	r2, r2, r1
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8004262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004264:	429a      	cmp	r2, r3
 8004266:	d803      	bhi.n	8004270 <USART_Init+0x158>
  {
    divider++;
 8004268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426a:	f103 0301 	add.w	r3, r3, #1
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <USART_Init+0x17e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800428e:	4013      	ands	r3, r2
 8004290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004292:	4313      	orrs	r3, r2
 8004294:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	819a      	strh	r2, [r3, #12]
}
 800429e:	f107 0750 	add.w	r7, r7, #80	; 0x50
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042b6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 020c 	mov.w	r2, #12
 80042d6:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	615a      	str	r2, [r3, #20]
}
 80042e0:	f107 070c 	add.w	r7, r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004308:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004318:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800431e:	4313      	orrs	r3, r2
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
}
 800432c:	f107 0714 	add.w	r7, r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	f107 070c 	add.w	r7, r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e005      	b.n	8004398 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 0201 	bic.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
  }
}
 8004398:	f107 070c 	add.w	r7, r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop

080043a4 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e007      	b.n	80043d6 <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	ea6f 0303 	mvn.w	r3, r3
 80043d0:	401a      	ands	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
  }
}
 80043d6:	f107 0714 	add.w	r7, r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e005      	b.n	800440c <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]
  }
}
 800440c:	f107 070c 	add.w	r7, r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	e005      	b.n	8004444 <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
  }
}
 8004444:	f107 070c 	add.w	r7, r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	e005      	b.n	800447c <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]
  }
}
 800447c:	f107 070c 	add.w	r7, r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e005      	b.n	80044b4 <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
  }
}
 80044b4:	f107 070c 	add.w	r7, r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	431a      	orrs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	e007      	b.n	80044f2 <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	ea6f 0303 	mvn.w	r3, r3
 80044ec:	401a      	ands	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
  }
}
 80044f2:	f107 0714 	add.w	r7, r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	e005      	b.n	8004528 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]
  }
}
 8004528:	f107 070c 	add.w	r7, r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e005      	b.n	8004560 <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]
  }
}
 8004560:	f107 070c 	add.w	r7, r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	615a      	str	r2, [r3, #20]
}
 800458e:	f107 070c 	add.w	r7, r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8a1b      	ldrh	r3, [r3, #16]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8a1b      	ldrh	r3, [r3, #16]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	821a      	strh	r2, [r3, #16]
}
 80045c6:	f107 070c 	add.w	r7, r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e005      	b.n	80045fc <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 0202 	bic.w	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
  }
}
 80045fc:	f107 070c 	add.w	r7, r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	f107 070c 	add.w	r7, r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e005      	b.n	8004660 <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	605a      	str	r2, [r3, #4]
  }
}
 8004660:	f107 070c 	add.w	r7, r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop

0800466c <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]
}
 800468e:	f107 070c 	add.w	r7, r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80046aa:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80046b4:	f107 070c 	add.w	r7, r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 80046d2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 80046d6:	b29b      	uxth	r3, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	f107 070c 	add.w	r7, r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]
}
 800470c:	f107 070c 	add.w	r7, r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e005      	b.n	8004744 <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	601a      	str	r2, [r3, #0]
  }
}
 8004744:	f107 070c 	add.w	r7, r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop

08004750 <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	f107 070c 	add.w	r7, r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f023 0210 	bic.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]
}
 800479e:	f107 070c 	add.w	r7, r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f023 0220 	bic.w	r2, r3, #32
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
}
 80047ca:	f107 070c 	add.w	r7, r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d006      	beq.n	80047f4 <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e005      	b.n	8004800 <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	605a      	str	r2, [r3, #4]
  }
}
 8004800:	f107 070c 	add.w	r7, r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop

0800480c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]
 800482a:	e005      	b.n	8004838 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 0208 	bic.w	r2, r3, #8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	609a      	str	r2, [r3, #8]
  }
}
 8004838:	f107 070c 	add.w	r7, r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8a1b      	ldrh	r3, [r3, #16]
 8004854:	b29b      	uxth	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8a1b      	ldrh	r3, [r3, #16]
 8004862:	b29a      	uxth	r2, r3
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	b29b      	uxth	r3, r3
 8004868:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800486c:	b29b      	uxth	r3, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	821a      	strh	r2, [r3, #16]
}
 8004876:	f107 070c 	add.w	r7, r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	e005      	b.n	80048ac <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 0220 	bic.w	r2, r3, #32
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	609a      	str	r2, [r3, #8]
  }
}
 80048ac:	f107 070c 	add.w	r7, r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f043 0210 	orr.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	e005      	b.n	80048e4 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 0210 	bic.w	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	609a      	str	r2, [r3, #8]
  }
}
 80048e4:	f107 070c 	add.w	r7, r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	f107 070c 	add.w	r7, r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop

08004924 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	615a      	str	r2, [r3, #20]
}
 800494c:	f107 070c 	add.w	r7, r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 0204 	bic.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
}
 800497a:	f107 070c 	add.w	r7, r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f043 0202 	orr.w	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	e005      	b.n	80049b0 <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 0202 	bic.w	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	609a      	str	r2, [r3, #8]
  }
}
 80049b0:	f107 070c 	add.w	r7, r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop

080049bc <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]
 80049da:	e005      	b.n	80049e8 <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]
  }
}
 80049e8:	f107 070c 	add.w	r7, r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop

080049f4 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	f107 070c 	add.w	r7, r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	f107 070c 	add.w	r7, r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
}
 8004a76:	f107 070c 	add.w	r7, r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e007      	b.n	8004ab2 <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	ea6f 0303 	mvn.w	r3, r3
 8004aac:	401a      	ands	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	609a      	str	r2, [r3, #8]
  }
}
 8004ab2:	f107 0714 	add.w	r7, r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]
}
 8004ade:	f107 070c 	add.w	r7, r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f04f 0201 	mov.w	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d104      	bne.n	8004b40 <USART_ITConfig+0x58>
  {
    usartxbase += 0x04;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f103 0304 	add.w	r3, r3, #4
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e006      	b.n	8004b4e <USART_ITConfig+0x66>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d103      	bne.n	8004b4e <USART_ITConfig+0x66>
  {
    usartxbase += 0x08;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f103 0308 	add.w	r3, r3, #8
 8004b4c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	6811      	ldr	r1, [r2, #0]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e007      	b.n	8004b72 <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	6811      	ldr	r1, [r2, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	ea6f 0202 	mvn.w	r2, r2
 8004b6e:	400a      	ands	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]
  }
}
 8004b72:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8b1b      	ldrh	r3, [r3, #24]
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	831a      	strh	r2, [r3, #24]
 8004ba2:	e00b      	b.n	8004bbc <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8b1b      	ldrh	r3, [r3, #24]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 0303 	mvn.w	r3, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	831a      	strh	r2, [r3, #24]
  }
}
 8004bbc:	f107 0714 	add.w	r7, r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	f107 070c 	add.w	r7, r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 8004c10:	f04f 0301 	mov.w	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e002      	b.n	8004c1e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	f107 0714 	add.w	r7, r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	f107 070c 	add.w	r7, r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop

08004c48 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f04f 0201 	mov.w	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d105      	bne.n	8004c9a <USART_GetITStatus+0x52>
  {
    itmask &= USARTx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4013      	ands	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e00d      	b.n	8004cb6 <USART_GetITStatus+0x6e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d105      	bne.n	8004cac <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e004      	b.n	8004cb6 <USART_GetITStatus+0x6e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004cbc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f04f 0201 	mov.w	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <USART_GetITStatus+0xa0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 8004ce0:	f04f 0301 	mov.w	r3, #1
 8004ce4:	74fb      	strb	r3, [r7, #19]
 8004ce6:	e002      	b.n	8004cee <USART_GetITStatus+0xa6>
  }
  else
  {
    bitstatus = RESET;
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f107 071c 	add.w	r7, r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004d18:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f04f 0201 	mov.w	r2, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	f107 0714 	add.w	r7, r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d3c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004d40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004d44:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8004d48:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8004d4c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004d50:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8004d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	f24c 030c 	movw	r3, #49164	; 0xc00c
 8004d86:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004da4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004da8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004db2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004db6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8004dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004de6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dec:	f022 020f 	bic.w	r2, r2, #15
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8004df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004df6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e04:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8004e08:	f6cf 7300 	movt	r3, #65280	; 0xff00
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004e1e:	f000 f8a7 	bl	8004f70 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004e26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e2e:	609a      	str	r2, [r3, #8]
#endif  
}
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop

08004e34 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d00d      	beq.n	8004e84 <SystemCoreClockUpdate+0x50>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d015      	beq.n	8004e98 <SystemCoreClockUpdate+0x64>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d153      	bne.n	8004f18 <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004e70:	f240 032c 	movw	r3, #44	; 0x2c
 8004e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e78:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004e7c:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004e80:	601a      	str	r2, [r3, #0]
      break;
 8004e82:	e053      	b.n	8004f2c <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8004e84:	f240 032c 	movw	r3, #44	; 0x2c
 8004e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e8c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004e90:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004e94:	601a      	str	r2, [r3, #0]
      break;
 8004e96:	e049      	b.n	8004f2c <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8004e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ea6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb6:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8004ebe:	f103 0302 	add.w	r3, r3, #2
 8004ec2:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004ed0:	f2c0 033d 	movt	r3, #61	; 0x3d
 8004ed4:	fb03 f202 	mul.w	r2, r3, r2
 8004ed8:	f240 032c 	movw	r3, #44	; 0x2c
 8004edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ee0:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8004ee2:	e023      	b.n	8004f2c <SystemCoreClockUpdate+0xf8>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8004ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	f103 0301 	add.w	r3, r3, #1
 8004ef6:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8004ef8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8004efc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	fb02 f203 	mul.w	r2, r2, r3
 8004f0c:	f240 032c 	movw	r3, #44	; 0x2c
 8004f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f14:	601a      	str	r2, [r3, #0]
      }      
      break;
 8004f16:	e009      	b.n	8004f2c <SystemCoreClockUpdate+0xf8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004f18:	f240 032c 	movw	r3, #44	; 0x2c
 8004f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f20:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004f24:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004f28:	601a      	str	r2, [r3, #0]
      break;
 8004f2a:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3a:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8004f3e:	f240 0330 	movw	r3, #48	; 0x30
 8004f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8004f4c:	f240 032c 	movw	r3, #44	; 0x2c
 8004f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	fa22 f203 	lsr.w	r2, r2, r3
 8004f5c:	f240 032c 	movw	r3, #44	; 0x2c
 8004f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	f107 0714 	add.w	r7, r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f98:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 0301 	add.w	r3, r3, #1
 8004fb0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <SetSysClock+0x50>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004fbe:	d1ec      	bne.n	8004f9a <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8004fd2:	f04f 0301 	mov.w	r3, #1
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e002      	b.n	8004fe0 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d176      	bne.n	80050d4 <SetSysClock+0x164>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8004fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fee:	f04f 0212 	mov.w	r2, #18
 8004ff2:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ff8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005000:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005004:	6852      	ldr	r2, [r2, #4]
 8005006:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800500c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005014:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005018:	6852      	ldr	r2, [r2, #4]
 800501a:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800501c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005020:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005028:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800502c:	6852      	ldr	r2, [r2, #4]
 800502e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005032:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8005034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800503c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005040:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005044:	6852      	ldr	r2, [r2, #4]
 8005046:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800504a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 800504c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005058:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800505c:	6852      	ldr	r2, [r2, #4]
 800505e:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8005062:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005068:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800506c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005070:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800507a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800507c:	bf00      	nop
 800507e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005082:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f6      	beq.n	800507e <SetSysClock+0x10e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005094:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800509c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80050a0:	6852      	ldr	r2, [r2, #4]
 80050a2:	f022 0203 	bic.w	r2, r2, #3
 80050a6:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80050a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80050b8:	6852      	ldr	r2, [r2, #4]
 80050ba:	f042 0202 	orr.w	r2, r2, #2
 80050be:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80050c0:	bf00      	nop
 80050c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d1f6      	bne.n	80050c2 <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 80050d4:	f107 070c 	add.w	r7, r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050e2:	f000 b804 	b.w	80050ee <LoopCopyDataInit>

080050e6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 80050e8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050ea:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050ec:	3104      	adds	r1, #4

080050ee <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050ee:	480b      	ldr	r0, [pc, #44]	; (800511c <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 80050f2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050f4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050f6:	f4ff aff6 	bcc.w	80050e6 <CopyDataInit>
  ldr  r2, =_sbss
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 80050fc:	f000 b803 	b.w	8005106 <LoopFillZerobss>

08005100 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005100:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005102:	f842 3b04 	str.w	r3, [r2], #4

08005106 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8005108:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800510a:	f4ff aff9 	bcc.w	8005100 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800510e:	f7ff fe13 	bl	8004d38 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8005112:	f7fb fa4f 	bl	80005b4 <main>
  bx  lr    
 8005116:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005118:	08005278 	.word	0x08005278
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800511c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005120:	20000468 	.word	0x20000468
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005124:	20000468 	.word	0x20000468
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005128:	20000658 	.word	0x20000658

0800512c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800512c:	f7ff bffe 	b.w	800512c <ADC1_2_IRQHandler>

08005130 <__register_exitproc>:
 8005130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005134:	4c27      	ldr	r4, [pc, #156]	; (80051d4 <__register_exitproc+0xa4>)
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800513c:	b084      	sub	sp, #16
 800513e:	4607      	mov	r7, r0
 8005140:	2c00      	cmp	r4, #0
 8005142:	d041      	beq.n	80051c8 <__register_exitproc+0x98>
 8005144:	6866      	ldr	r6, [r4, #4]
 8005146:	2e1f      	cmp	r6, #31
 8005148:	dd1c      	ble.n	8005184 <__register_exitproc+0x54>
 800514a:	4823      	ldr	r0, [pc, #140]	; (80051d8 <__register_exitproc+0xa8>)
 800514c:	b910      	cbnz	r0, 8005154 <__register_exitproc+0x24>
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	e01f      	b.n	8005194 <__register_exitproc+0x64>
 8005154:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	f3af 8000 	nop.w
 8005162:	9903      	ldr	r1, [sp, #12]
 8005164:	9a02      	ldr	r2, [sp, #8]
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	4604      	mov	r4, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d0ef      	beq.n	800514e <__register_exitproc+0x1e>
 800516e:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 8005172:	2000      	movs	r0, #0
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	6026      	str	r6, [r4, #0]
 8005178:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800517c:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005180:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8005184:	6865      	ldr	r5, [r4, #4]
 8005186:	b947      	cbnz	r7, 800519a <__register_exitproc+0x6a>
 8005188:	1ca8      	adds	r0, r5, #2
 800518a:	3501      	adds	r5, #1
 800518c:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 8005190:	6065      	str	r5, [r4, #4]
 8005192:	2000      	movs	r0, #0
 8005194:	b004      	add	sp, #16
 8005196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519a:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800519e:	2001      	movs	r0, #1
 80051a0:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 80051a4:	fa00 f005 	lsl.w	r0, r0, r5
 80051a8:	4306      	orrs	r6, r0
 80051aa:	2f02      	cmp	r7, #2
 80051ac:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 80051b0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80051b4:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 80051b8:	d1e6      	bne.n	8005188 <__register_exitproc+0x58>
 80051ba:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80051be:	ea43 0200 	orr.w	r2, r3, r0
 80051c2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80051c6:	e7df      	b.n	8005188 <__register_exitproc+0x58>
 80051c8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80051cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80051d0:	e7b8      	b.n	8005144 <__register_exitproc+0x14>
 80051d2:	bf00      	nop
 80051d4:	08005250 	.word	0x08005250
 80051d8:	00000000 	.word	0x00000000

080051dc <__libc_fini_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <__libc_fini_array+0x48>)
 80051e0:	4c11      	ldr	r4, [pc, #68]	; (8005228 <__libc_fini_array+0x4c>)
 80051e2:	1b18      	subs	r0, r3, r4
 80051e4:	1081      	asrs	r1, r0, #2
 80051e6:	d018      	beq.n	800521a <__libc_fini_array+0x3e>
 80051e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80051ec:	1e4e      	subs	r6, r1, #1
 80051ee:	4635      	mov	r5, r6
 80051f0:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 80051f4:	f006 0601 	and.w	r6, r6, #1
 80051f8:	4790      	blx	r2
 80051fa:	b175      	cbz	r5, 800521a <__libc_fini_array+0x3e>
 80051fc:	b126      	cbz	r6, 8005208 <__libc_fini_array+0x2c>
 80051fe:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005202:	4798      	blx	r3
 8005204:	3d01      	subs	r5, #1
 8005206:	d008      	beq.n	800521a <__libc_fini_array+0x3e>
 8005208:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800520c:	4780      	blx	r0
 800520e:	3d01      	subs	r5, #1
 8005210:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8005214:	4788      	blx	r1
 8005216:	3d01      	subs	r5, #1
 8005218:	d1f6      	bne.n	8005208 <__libc_fini_array+0x2c>
 800521a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800521e:	f000 b81f 	b.w	8005260 <_fini>
 8005222:	bf00      	nop
 8005224:	08005278 	.word	0x08005278
 8005228:	08005274 	.word	0x08005274

0800522c <register_fini>:
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <register_fini+0xc>)
 800522e:	b113      	cbz	r3, 8005236 <register_fini+0xa>
 8005230:	4802      	ldr	r0, [pc, #8]	; (800523c <register_fini+0x10>)
 8005232:	f000 b805 	b.w	8005240 <atexit>
 8005236:	4770      	bx	lr
 8005238:	00000000 	.word	0x00000000
 800523c:	080051dd 	.word	0x080051dd

08005240 <atexit>:
 8005240:	4601      	mov	r1, r0
 8005242:	2000      	movs	r0, #0
 8005244:	4602      	mov	r2, r0
 8005246:	4603      	mov	r3, r0
 8005248:	f7ff bf72 	b.w	8005130 <__register_exitproc>
 800524c:	00000043 	.word	0x00000043

08005250 <_global_impure_ptr>:
 8005250:	20000040                                @.. 

08005254 <_init>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

08005260 <_fini>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr
