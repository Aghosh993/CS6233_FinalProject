
STM32F3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013558  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  080136e0  080136e0  0001b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080136e8  080136e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080136f0  080136f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000904  20000000  080136f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  20000904  20000904  00020904  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000a1c  20000a1c  00020904  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020904  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c72d  00000000  00000000  00020934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c0a  00000000  00000000  0002d061  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b86  00000000  00000000  0002ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000268  00000000  00000000  000347f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001196b  00000000  00000000  00034a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d38  00000000  00000000  000463cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0005dbbb  00000000  00000000  0004c103  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000070  00000000  00000000  000a9cbe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004008  00000000  00000000  000a9d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  000add38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000904 	.word	0x20000904
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080136c8 	.word	0x080136c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080136c8 	.word	0x080136c8
 80001d0:	20000908 	.word	0x20000908
 80001d4:	20000904 	.word	0x20000904
 80001d8:	00000000 	.word	0x00000000

080001dc <_Z10blink_ledsv>:
 */

#include "debug.h"

void blink_leds(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	int foo = 0;
 80001e2:	f04f 0300 	mov.w	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	for(foo = 0; foo < 160000; ++foo){
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00d      	b.n	800020c <_Z10blink_ledsv+0x30>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
 80001f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80001f4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80001f8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80001fc:	f04f 0201 	mov.w	r2, #1
 8000200:	f005 fb48 	bl	8005894 <GPIO_WriteBit>
#include "debug.h"

void blink_leds(void)
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0301 	add.w	r3, r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8000212:	f2c0 0302 	movt	r3, #2
 8000216:	429a      	cmp	r2, r3
 8000218:	bfcc      	ite	gt
 800021a:	2300      	movgt	r3, #0
 800021c:	2301      	movle	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e5      	bne.n	80001f0 <_Z10blink_ledsv+0x14>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00d      	b.n	8000248 <_Z10blink_ledsv+0x6c>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
 800022c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000230:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000234:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	f005 fb2a 	bl	8005894 <GPIO_WriteBit>
{
	int foo = 0;
	for(foo = 0; foo < 160000; ++foo){
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_SET);
	}
	for(foo = 0; foo < 160000; ++foo){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0301 	add.w	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	f247 03ff 	movw	r3, #28927	; 0x70ff
 800024e:	f2c0 0302 	movt	r3, #2
 8000252:	429a      	cmp	r2, r3
 8000254:	bfcc      	ite	gt
 8000256:	2300      	movgt	r3, #0
 8000258:	2301      	movle	r3, #1
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1e5      	bne.n	800022c <_Z10blink_ledsv+0x50>
		GPIO_WriteBit(GPIOE, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15, Bit_RESET);
	}
}
 8000260:	f107 0708 	add.w	r7, r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <_Z10UART1_initv>:
 * @Args: None
 * @Return Val: None
 */

void UART1_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef a;

	USART_InitTypeDef u1;

	u1.USART_BaudRate = 115200;
 800026e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000272:	603b      	str	r3, [r7, #0]
	u1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000274:	f04f 0300 	mov.w	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	u1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800027a:	f04f 030c 	mov.w	r3, #12
 800027e:	613b      	str	r3, [r7, #16]
	u1.USART_Parity = USART_Parity_No;
 8000280:	f04f 0300 	mov.w	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	u1.USART_StopBits = USART_StopBits_1;
 8000286:	f04f 0300 	mov.w	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
	u1.USART_WordLength = USART_WordLength_8b;
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

	a.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000296:	61bb      	str	r3, [r7, #24]
	a.GPIO_Mode = GPIO_Mode_AF;
 8000298:	f04f 0302 	mov.w	r3, #2
 800029c:	773b      	strb	r3, [r7, #28]
	a.GPIO_OType = GPIO_OType_PP;
 800029e:	f04f 0300 	mov.w	r3, #0
 80002a2:	77bb      	strb	r3, [r7, #30]
	a.GPIO_Speed = GPIO_Speed_50MHz;
 80002a4:	f04f 0303 	mov.w	r3, #3
 80002a8:	777b      	strb	r3, [r7, #29]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	f04f 0300 	mov.w	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b4:	f04f 0101 	mov.w	r1, #1
 80002b8:	f006 fae4 	bl	8006884 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002c0:	f04f 0101 	mov.w	r1, #1
 80002c4:	f006 fab4 	bl	8006830 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_7);
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f04f 0109 	mov.w	r1, #9
 80002d0:	f04f 0207 	mov.w	r2, #7
 80002d4:	f005 fb04 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_7);
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f04f 010a 	mov.w	r1, #10
 80002e0:	f04f 0207 	mov.w	r2, #7
 80002e4:	f005 fafc 	bl	80058e0 <GPIO_PinAFConfig>

	GPIO_Init(GPIOA, &a);
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	4619      	mov	r1, r3
 80002f2:	f005 f96f 	bl	80055d4 <GPIO_Init>

	USART_Init(USART1, &u1);
 80002f6:	463b      	mov	r3, r7
 80002f8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80002fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000300:	4619      	mov	r1, r3
 8000302:	f009 fccf 	bl	8009ca4 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8000306:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800030a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800030e:	f04f 0101 	mov.w	r1, #1
 8000312:	f009 fdf1 	bl	8009ef8 <USART_Cmd>

	/* Wait until Receive enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_REACK) == RESET)
 8000316:	bf00      	nop
 8000318:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800031c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000324:	f00a fa2c 	bl	800a780 <USART_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2300      	movne	r3, #0
 8000330:	2301      	moveq	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1ef      	bne.n	8000318 <_Z10UART1_initv+0xb0>
	{}

	/* Wait until Transmit enable acknowledge flag is set */
	while(USART_GetFlagStatus(USART1, USART_FLAG_TEACK) == RESET)
 8000338:	bf00      	nop
 800033a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800033e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000346:	f00a fa1b 	bl	800a780 <USART_GetFlagStatus>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf14      	ite	ne
 8000350:	2300      	movne	r3, #0
 8000352:	2301      	moveq	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ef      	bne.n	800033a <_Z10UART1_initv+0xd2>
	{}
}
 800035a:	f107 0720 	add.w	r7, r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <_Z19LED_MATRIX_ISR_initv>:
 * along with some eye candy
 * Priority: 6 (LOW)
 */

void LED_MATRIX_ISR_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
	// GPIO Init:

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800036a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800036e:	f04f 0101 	mov.w	r1, #1
 8000372:	f006 fa5d 	bl	8006830 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef a;

	a.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_15;
 8000376:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800037a:	613b      	str	r3, [r7, #16]
	a.GPIO_Mode = GPIO_Mode_OUT;
 800037c:	f04f 0301 	mov.w	r3, #1
 8000380:	753b      	strb	r3, [r7, #20]
	a.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000382:	f04f 0300 	mov.w	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	a.GPIO_OType = GPIO_OType_PP;
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	75bb      	strb	r3, [r7, #22]
	a.GPIO_Speed = GPIO_Speed_Level_2;
 800038e:	f04f 0302 	mov.w	r3, #2
 8000392:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOE, &a);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800039c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80003a0:	4619      	mov	r1, r3
 80003a2:	f005 f917 	bl	80055d4 <GPIO_Init>

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM6_init;

	nv.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80003a6:	f04f 0336 	mov.w	r3, #54	; 0x36
 80003aa:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 6; // Low-priority interrupt since this is just eye-candy...
 80003ac:	f04f 0306 	mov.w	r3, #6
 80003b0:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80003b8:	f04f 0301 	mov.w	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 faf4 	bl	80059b0 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE); //Enable TIM4 on APB1
 80003c8:	f04f 0010 	mov.w	r0, #16
 80003cc:	f04f 0101 	mov.w	r1, #1
 80003d0:	f006 fa82 	bl	80068d8 <RCC_APB1PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM6_init.TIM_Period = (10*DT_LED_MATRIX)-1;
 80003d4:	f240 3383 	movw	r3, #899	; 0x383
 80003d8:	607b      	str	r3, [r7, #4]
	TIM6_init.TIM_Prescaler = 7199;
 80003da:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80003de:	803b      	strh	r3, [r7, #0]
	TIM6_init.TIM_RepetitionCounter = 0;
 80003e0:	f04f 0300 	mov.w	r3, #0
 80003e4:	72bb      	strb	r3, [r7, #10]
	TIM6_init.TIM_ClockDivision = 0;
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	813b      	strh	r3, [r7, #8]
	TIM6_init.TIM_CounterMode = TIM_CounterMode_Up;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM6, &TIM6_init);
 80003f2:	463b      	mov	r3, r7
 80003f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80003fc:	4619      	mov	r1, r3
 80003fe:	f007 fbd7 	bl	8007bb0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000406:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800040a:	f04f 0101 	mov.w	r1, #1
 800040e:	f04f 0201 	mov.w	r2, #1
 8000412:	f009 f827 	bl	8009464 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8000416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800041a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800041e:	f04f 0101 	mov.w	r1, #1
 8000422:	f007 fd89 	bl	8007f38 <TIM_Cmd>
}
 8000426:	f107 0718 	add.w	r7, r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <TIM7_IRQHandler>:

void update_pid(void);

	void TIM7_IRQHandler(void) // ISR that performs encoder state update:
										// Runs every DT milliseconds
	{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b099      	sub	sp, #100	; 0x64
 8000434:	af00      	add	r7, sp, #0
		float left_out, right_out;
		int error, abs_err;

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8000436:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800043a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800043e:	f04f 0101 	mov.w	r1, #1
 8000442:	f009 f89b 	bl	800957c <TIM_ClearITPendingBit>

		encoderState left_temp, right_temp;

		left_temp.position = left_enc.position;
 8000446:	f640 1324 	movw	r3, #2340	; 0x924
 800044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	603b      	str	r3, [r7, #0]
		left_temp.speed = left_enc.speed;
 8000452:	f640 1324 	movw	r3, #2340	; 0x924
 8000456:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	607b      	str	r3, [r7, #4]
		left_temp.acceleration = left_enc.acceleration;
 800045e:	f640 1324 	movw	r3, #2340	; 0x924
 8000462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	60bb      	str	r3, [r7, #8]

		right_temp.position = right_enc.position;
 800046a:	f640 134c 	movw	r3, #2380	; 0x94c
 800046e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
		right_temp.speed = right_enc.speed;
 8000476:	f640 134c 	movw	r3, #2380	; 0x94c
 800047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
		right_temp.acceleration = right_enc.acceleration;
 8000482:	f640 134c 	movw	r3, #2380	; 0x94c
 8000486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	633b      	str	r3, [r7, #48]	; 0x30

		left_enc.position = left_temp.position + (int16_t)TIM_GetCounter(TIM4); //Instead of TIM2 on other boards with functional TIM2
 800048e:	683c      	ldr	r4, [r7, #0]
 8000490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000494:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000498:	f007 fc7c 	bl	8007d94 <TIM_GetCounter>
 800049c:	4603      	mov	r3, r0
 800049e:	b29b      	uxth	r3, r3
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	18e2      	adds	r2, r4, r3
 80004a4:	f640 1324 	movw	r3, #2340	; 0x924
 80004a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ac:	601a      	str	r2, [r3, #0]
		TIM_SetCounter(TIM4, 0);
 80004ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80004b2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004b6:	f04f 0100 	mov.w	r1, #0
 80004ba:	f007 fc4f 	bl	8007d5c <TIM_SetCounter>
		left_enc.speed = (float)((left_enc.position - left_temp.position)*1000)/(float)DT_ENCODER; // Since DT is in milliseconds...
 80004be:	f640 1324 	movw	r3, #2340	; 0x924
 80004c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	ee07 3a90 	vmov	s15, r3
 80004d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004dc:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80004e0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80004e4:	f640 1324 	movw	r3, #2340	; 0x924
 80004e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ec:	edc3 7a01 	vstr	s15, [r3, #4]
		left_enc.acceleration = (float)((left_enc.speed - left_temp.speed)*1000)/(float)DT_ENCODER;
 80004f0:	f640 1324 	movw	r3, #2340	; 0x924
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80004fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000504:	eddf 7ada 	vldr	s15, [pc, #872]	; 8000870 <TIM7_IRQHandler+0x440>
 8000508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800050c:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 8000510:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000514:	f640 1324 	movw	r3, #2340	; 0x924
 8000518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800051c:	edc3 7a02 	vstr	s15, [r3, #8]

		right_enc.position = right_temp.position + (int16_t)(TIM_GetCounter(TIM8));
 8000520:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000522:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8000526:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800052a:	f007 fc33 	bl	8007d94 <TIM_GetCounter>
 800052e:	4603      	mov	r3, r0
 8000530:	b29b      	uxth	r3, r3
 8000532:	b21b      	sxth	r3, r3
 8000534:	18e2      	adds	r2, r4, r3
 8000536:	f640 134c 	movw	r3, #2380	; 0x94c
 800053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053e:	601a      	str	r2, [r3, #0]
		TIM_SetCounter(TIM8, 0); // To get around the stupid 16-bit counter limitation present on all timers except timer 2
 8000540:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8000544:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	f007 fc06 	bl	8007d5c <TIM_SetCounter>
		right_enc.speed = (float)((right_enc.position - right_temp.position)*1000)/(float)DT_ENCODER;
 8000550:	f640 134c 	movw	r3, #2380	; 0x94c
 8000554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056e:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 8000572:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000576:	f640 134c 	movw	r3, #2380	; 0x94c
 800057a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800057e:	edc3 7a01 	vstr	s15, [r3, #4]
		right_enc.acceleration = (float)((right_enc.speed - right_temp.speed)*1000)/(float)DT_ENCODER;
 8000582:	f640 134c 	movw	r3, #2380	; 0x94c
 8000586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058a:	ed93 7a01 	vldr	s14, [r3, #4]
 800058e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000596:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8000870 <TIM7_IRQHandler+0x440>
 800059a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800059e:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80005a2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80005a6:	f640 134c 	movw	r3, #2380	; 0x94c
 80005aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ae:	edc3 7a02 	vstr	s15, [r3, #8]

		if(left_enc.m == MODE_POSITION)
 80005b2:	f640 1324 	movw	r3, #2340	; 0x924
 80005b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d15d      	bne.n	800067e <TIM7_IRQHandler+0x24e>
		{
			left_out = ((float)k_p * (float)(left_enc.position_target - left_enc.position))
					+ ((float)k_i*(float)(left_enc.integral))
					+ ((float)k_d*(float)left_enc.speed);
 80005c2:	f640 1324 	movw	r3, #2340	; 0x924
 80005c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	f640 1324 	movw	r3, #2340	; 0x924
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	ee07 3a10 	vmov	s14, r3
 80005dc:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80005e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80005e4:	f640 1324 	movw	r3, #2340	; 0x924
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80005f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005f4:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8000874 <TIM7_IRQHandler+0x444>
 80005f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000600:	f640 1324 	movw	r3, #2340	; 0x924
 8000604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000608:	edd3 6a01 	vldr	s13, [r3, #4]
 800060c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8000878 <TIM7_IRQHandler+0x448>
 8000610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000618:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			left_out = (left_out > 100) ? 100 : ((left_out < -100) ? -100 : left_out);
 800061c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000620:	eddf 7a96 	vldr	s15, [pc, #600]	; 800087c <TIM7_IRQHandler+0x44c>
 8000624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	dd04      	ble.n	8000638 <TIM7_IRQHandler+0x208>
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8000636:	e00e      	b.n	8000656 <TIM7_IRQHandler+0x226>
 8000638:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800063c:	eddf 7a90 	vldr	s15, [pc, #576]	; 8000880 <TIM7_IRQHandler+0x450>
 8000640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d504      	bpl.n	8000654 <TIM7_IRQHandler+0x224>
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	f2cc 23c8 	movt	r3, #49864	; 0xc2c8
 8000652:	e000      	b.n	8000656 <TIM7_IRQHandler+0x226>
 8000654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c

			pwm2_output(100-((float)(left_out+100)/(float)2));
 8000658:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800065c:	eddf 7a87 	vldr	s15, [pc, #540]	; 800087c <TIM7_IRQHandler+0x44c>
 8000660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000664:	eef0 7a00 	vmov.f32	s15, #0
 8000668:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800066c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800087c <TIM7_IRQHandler+0x44c>
 8000670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000674:	ee17 0a90 	vmov	r0, s15
 8000678:	f002 fcc8 	bl	800300c <_Z11pwm2_outputf>
 800067c:	e00b      	b.n	8000696 <TIM7_IRQHandler+0x266>
		}
		else if(left_enc.m == MODE_SPEED)
 800067e:	f640 1324 	movw	r3, #2340	; 0x924
 8000682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800068a:	2b02      	cmp	r3, #2
 800068c:	d103      	bne.n	8000696 <TIM7_IRQHandler+0x266>
		{
			pwm2_output(0);
 800068e:	f04f 0000 	mov.w	r0, #0
 8000692:	f002 fcbb 	bl	800300c <_Z11pwm2_outputf>
		}

		if(right_enc.m == MODE_POSITION)
 8000696:	f640 134c 	movw	r3, #2380	; 0x94c
 800069a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800069e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	f040 80fe 	bne.w	80008a4 <TIM7_IRQHandler+0x474>
		{
			error = right_enc.position - right_enc.position_target;
 80006a8:	f640 134c 	movw	r3, #2380	; 0x94c
 80006ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f640 134c 	movw	r3, #2380	; 0x94c
 80006b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
			right_enc.integral += (float)(error) * (float)DT_ENCODER / (float)1000;
 80006c0:	f640 134c 	movw	r3, #2380	; 0x94c
 80006c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80006cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80006d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006d8:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 80006dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80006e0:	eddf 7a63 	vldr	s15, [pc, #396]	; 8000870 <TIM7_IRQHandler+0x440>
 80006e4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80006e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f0:	f640 134c 	movw	r3, #2380	; 0x94c
 80006f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f8:	edc3 7a05 	vstr	s15, [r3, #20]

			if(right_enc.integral * k_i > 100 || right_enc.integral * k_i < -100)
 80006fc:	f640 134c 	movw	r3, #2380	; 0x94c
 8000700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4618      	mov	r0, r3
 8000708:	f00a ff26 	bl	800b558 <__aeabi_i2d>
 800070c:	4602      	mov	r2, r0
 800070e:	460b      	mov	r3, r1
 8000710:	4610      	mov	r0, r2
 8000712:	4619      	mov	r1, r3
 8000714:	a354      	add	r3, pc, #336	; (adr r3, 8000868 <TIM7_IRQHandler+0x438>)
 8000716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071a:	f00a ff83 	bl	800b624 <__aeabi_dmul>
 800071e:	4602      	mov	r2, r0
 8000720:	460b      	mov	r3, r1
 8000722:	4610      	mov	r0, r2
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8000732:	f00b fa07 	bl	800bb44 <__aeabi_dcmpgt>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11f      	bne.n	800077c <TIM7_IRQHandler+0x34c>
 800073c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000740:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4618      	mov	r0, r3
 8000748:	f00a ff06 	bl	800b558 <__aeabi_i2d>
 800074c:	4602      	mov	r2, r0
 800074e:	460b      	mov	r3, r1
 8000750:	4610      	mov	r0, r2
 8000752:	4619      	mov	r1, r3
 8000754:	a344      	add	r3, pc, #272	; (adr r3, 8000868 <TIM7_IRQHandler+0x438>)
 8000756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075a:	f00a ff63 	bl	800b624 <__aeabi_dmul>
 800075e:	4602      	mov	r2, r0
 8000760:	460b      	mov	r3, r1
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 0200 	mov.w	r2, #0
 800076a:	f04f 0300 	mov.w	r3, #0
 800076e:	f2cc 0359 	movt	r3, #49241	; 0xc059
 8000772:	f00b f9c9 	bl	800bb08 <__aeabi_dcmplt>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <TIM7_IRQHandler+0x35a>
			{
				right_enc.integral = (float)100/(float)k_i;
 800077c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000784:	f240 229a 	movw	r2, #666	; 0x29a
 8000788:	615a      	str	r2, [r3, #20]
			}

			right_out = ((float)k_p * (float)error)
					+ ((float)k_i*(float)(right_enc.integral))
					+ ((float)k_d*(float)(error - right_enc.last_error)/(float)(DT_ENCODER/(float)1000));
 800078a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800078e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000792:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000796:	f640 134c 	movw	r3, #2380	; 0x94c
 800079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079e:	edd3 7a05 	vldr	s15, [r3, #20]
 80007a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007a6:	eddf 7a33 	vldr	s15, [pc, #204]	; 8000874 <TIM7_IRQHandler+0x444>
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007b2:	f640 134c 	movw	r3, #2380	; 0x94c
 80007b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007c8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8000878 <TIM7_IRQHandler+0x448>
 80007cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80007d0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8000888 <TIM7_IRQHandler+0x458>
 80007d4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			right_out = (right_out > 100) ? 100 : ((right_out < -100) ? -100 : right_out);
 80007e0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80007e4:	eddf 7a25 	vldr	s15, [pc, #148]	; 800087c <TIM7_IRQHandler+0x44c>
 80007e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f0:	dd04      	ble.n	80007fc <TIM7_IRQHandler+0x3cc>
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 80007fa:	e00e      	b.n	800081a <TIM7_IRQHandler+0x3ea>
 80007fc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000800:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000880 <TIM7_IRQHandler+0x450>
 8000804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	d504      	bpl.n	8000818 <TIM7_IRQHandler+0x3e8>
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	f2cc 23c8 	movt	r3, #49864	; 0xc2c8
 8000816:	e000      	b.n	800081a <TIM7_IRQHandler+0x3ea>
 8000818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800081a:	657b      	str	r3, [r7, #84]	; 0x54
			right_enc.last_error = error;
 800081c:	f640 134c 	movw	r3, #2380	; 0x94c
 8000820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000826:	619a      	str	r2, [r3, #24]

			abs_err = (error > 0) ? error : (error*-1);
 8000828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800082a:	2b00      	cmp	r3, #0
 800082c:	bfb8      	it	lt
 800082e:	425b      	neglt	r3, r3
 8000830:	653b      	str	r3, [r7, #80]	; 0x50

			if(error > 10 || error < -10)
 8000832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000834:	2b0a      	cmp	r3, #10
 8000836:	dc03      	bgt.n	8000840 <TIM7_IRQHandler+0x410>
 8000838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800083a:	f113 0f0a 	cmn.w	r3, #10
 800083e:	da25      	bge.n	800088c <TIM7_IRQHandler+0x45c>
			{
				pwm1_output((((float)(right_out+100)/(float)2))*(float)0.01);
 8000840:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000844:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800087c <TIM7_IRQHandler+0x44c>
 8000848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800084c:	eef0 7a00 	vmov.f32	s15, #0
 8000850:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000854:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000884 <TIM7_IRQHandler+0x454>
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	ee17 0a90 	vmov	r0, s15
 8000860:	f002 fb08 	bl	8002e74 <_Z11pwm1_outputf>
 8000864:	e01e      	b.n	80008a4 <TIM7_IRQHandler+0x474>
 8000866:	bf00      	nop
 8000868:	33333333 	.word	0x33333333
 800086c:	3fc33333 	.word	0x3fc33333
 8000870:	447a0000 	.word	0x447a0000
 8000874:	3e19999a 	.word	0x3e19999a
 8000878:	3f35c28f 	.word	0x3f35c28f
 800087c:	42c80000 	.word	0x42c80000
 8000880:	c2c80000 	.word	0xc2c80000
 8000884:	3c23d70a 	.word	0x3c23d70a
 8000888:	3ccccccd 	.word	0x3ccccccd
			}
			else
			{
				pwm1_output(0.50f);
 800088c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000890:	f002 faf0 	bl	8002e74 <_Z11pwm1_outputf>
				right_enc.m = MODE_OPENLOOP;
 8000894:	f640 134c 	movw	r3, #2380	; 0x94c
 8000898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		update_pid();
 80008a4:	f000 faf8 	bl	8000e98 <update_pid>
		if(state > ST_READY)
 80008a8:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80008ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0f      	blt.n	80008d6 <TIM7_IRQHandler+0x4a6>
		{
			match_time_counter += (float)DT_ENCODER/(float)1000; // Increment main match time counter by DT_ENCODER ms
 80008b6:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008be:	ed93 7a00 	vldr	s14, [r3]
 80008c2:	ed5f 7a0f 	vldr	s15, [pc, #-60]	; 8000888 <TIM7_IRQHandler+0x458>
 80008c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ca:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80008ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008d2:	edc3 7a00 	vstr	s15, [r3]
			pwm1_output(0.50f);

			right_enc.last_speed_error = error;
		}
		*/
	}
 80008d6:	f107 0764 	add.w	r7, r7, #100	; 0x64
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	bf00      	nop

080008e0 <TIM1_TRG_COM_TIM17_IRQHandler>:

	void TIM1_TRG_COM_TIM17_IRQHandler(void)
	{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

		TIM_ClearITPendingBit(TIM17, TIM_IT_Update);
 80008e6:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 80008ea:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80008ee:	f04f 0101 	mov.w	r1, #1
 80008f2:	f008 fe43 	bl	800957c <TIM_ClearITPendingBit>
		 * Below: code required to trigger the ping sensor:
		 */

		EXTI_InitTypeDef e;

		e.EXTI_Line = EXTI_Line9;
 80008f6:	f04f 0309 	mov.w	r3, #9
 80008fa:	60fb      	str	r3, [r7, #12]
		e.EXTI_LineCmd = DISABLE;
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	74bb      	strb	r3, [r7, #18]
		e.EXTI_Mode = EXTI_Mode_Interrupt;
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	743b      	strb	r3, [r7, #16]
		e.EXTI_Trigger = EXTI_Trigger_Rising;
 8000908:	f04f 0308 	mov.w	r3, #8
 800090c:	747b      	strb	r3, [r7, #17]

		EXTI_Init(&e);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fbb6 	bl	8005084 <EXTI_Init>

		GPIO_InitTypeDef g;
		g.GPIO_Mode = GPIO_Mode_OUT;
 8000918:	f04f 0301 	mov.w	r3, #1
 800091c:	723b      	strb	r3, [r7, #8]
		g.GPIO_OType = GPIO_OType_PP;
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	72bb      	strb	r3, [r7, #10]
		g.GPIO_Pin = GPIO_Pin_0;
 8000924:	f04f 0301 	mov.w	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	72fb      	strb	r3, [r7, #11]
		g.GPIO_Speed = GPIO_Speed_Level_1;
 8000930:	f04f 0301 	mov.w	r3, #1
 8000934:	727b      	strb	r3, [r7, #9]

		GPIO_Init(GPIOB, &g);
 8000936:	f107 0304 	add.w	r3, r7, #4
 800093a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800093e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000942:	4619      	mov	r1, r3
 8000944:	f004 fe46 	bl	80055d4 <GPIO_Init>
		int iter = 0;
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

		for(iter=0;iter<10;++iter)
 800094e:	f04f 0300 	mov.w	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00d      	b.n	8000972 <TIM1_TRG_COM_TIM17_IRQHandler+0x92>
		{
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 8000956:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800095a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800095e:	f04f 0101 	mov.w	r1, #1
 8000962:	f04f 0201 	mov.w	r2, #1
 8000966:	f004 ff95 	bl	8005894 <GPIO_WriteBit>
		g.GPIO_Speed = GPIO_Speed_Level_1;

		GPIO_Init(GPIOB, &g);
		int iter = 0;

		for(iter=0;iter<10;++iter)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f103 0301 	add.w	r3, r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2b09      	cmp	r3, #9
 8000976:	bfcc      	ite	gt
 8000978:	2300      	movgt	r3, #0
 800097a:	2301      	movle	r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1e9      	bne.n	8000956 <TIM1_TRG_COM_TIM17_IRQHandler+0x76>
		{
			GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
		}

		GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 8000982:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000986:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800098a:	f04f 0101 	mov.w	r1, #1
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f004 ff7f 	bl	8005894 <GPIO_WriteBit>


		g.GPIO_Mode = GPIO_Mode_IN;
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	723b      	strb	r3, [r7, #8]
		g.GPIO_OType = GPIO_OType_OD;
 800099c:	f04f 0301 	mov.w	r3, #1
 80009a0:	72bb      	strb	r3, [r7, #10]
		g.GPIO_Pin = GPIO_Pin_0;
 80009a2:	f04f 0301 	mov.w	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
		g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]
		g.GPIO_Speed = GPIO_Speed_Level_1;
 80009ae:	f04f 0301 	mov.w	r3, #1
 80009b2:	727b      	strb	r3, [r7, #9]

		GPIO_Init(GPIOB, &g);
 80009b4:	f107 0304 	add.w	r3, r7, #4
 80009b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009bc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80009c0:	4619      	mov	r1, r3
 80009c2:	f004 fe07 	bl	80055d4 <GPIO_Init>

		TIM_SetCounter(TIM2, 0);
 80009c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009ca:	f04f 0100 	mov.w	r1, #0
 80009ce:	f007 f9c5 	bl	8007d5c <TIM_SetCounter>

		stage = 0;
 80009d2:	f640 13a4 	movw	r3, #2468	; 0x9a4
 80009d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

		e.EXTI_Line = EXTI_Line9;
 80009e0:	f04f 0309 	mov.w	r3, #9
 80009e4:	60fb      	str	r3, [r7, #12]
		e.EXTI_LineCmd = ENABLE;
 80009e6:	f04f 0301 	mov.w	r3, #1
 80009ea:	74bb      	strb	r3, [r7, #18]
		e.EXTI_Mode = EXTI_Mode_Interrupt;
 80009ec:	f04f 0300 	mov.w	r3, #0
 80009f0:	743b      	strb	r3, [r7, #16]
		e.EXTI_Trigger = EXTI_Trigger_Rising;
 80009f2:	f04f 0308 	mov.w	r3, #8
 80009f6:	747b      	strb	r3, [r7, #17]

		EXTI_Init(&e);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fb41 	bl	8005084 <EXTI_Init>

		NVIC_InitTypeDef nv;

		nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000a02:	f04f 0317 	mov.w	r3, #23
 8000a06:	703b      	strb	r3, [r7, #0]
		nv.NVIC_IRQChannelCmd = ENABLE;
 8000a08:	f04f 0301 	mov.w	r3, #1
 8000a0c:	70fb      	strb	r3, [r7, #3]
		nv.NVIC_IRQChannelPreemptionPriority = 0;
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	707b      	strb	r3, [r7, #1]
		nv.NVIC_IRQChannelSubPriority = 0;
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	70bb      	strb	r3, [r7, #2]

		NVIC_Init(&nv);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 ffc7 	bl	80059b0 <NVIC_Init>

	}
 8000a22:	f107 0718 	add.w	r7, r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <TIM6_DAC_IRQHandler>:
	void TIM6_DAC_IRQHandler(void)
	{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a34:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000a38:	f04f 0101 	mov.w	r1, #1
 8000a3c:	f008 fd9e 	bl	800957c <TIM_ClearITPendingBit>
		if(state == ST_READY)
 8000a40:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4e:	d116      	bne.n	8000a7e <TIM6_DAC_IRQHandler+0x52>
		{
			GPIO_Write(GPIOE, led_matrix[2] | led_matrix[5]); 	// Two greens
 8000a50:	f240 0300 	movw	r3, #0
 8000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f240 0300 	movw	r3, #0
 8000a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a72:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000a76:	4619      	mov	r1, r3
 8000a78:	f004 ff24 	bl	80058c4 <GPIO_Write>
 8000a7c:	e0e8      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_WANDER)
 8000a7e:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10d      	bne.n	8000aa8 <TIM6_DAC_IRQHandler+0x7c>
		{
			GPIO_Write(GPIOE, led_matrix[6]);					// Two Orange (one's lit via PWM pin for ESC control)
 8000a8c:	f240 0300 	movw	r3, #0
 8000a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a9c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f004 ff0f 	bl	80058c4 <GPIO_Write>
 8000aa6:	e0d3      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_HOMING)
 8000aa8:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d116      	bne.n	8000ae4 <TIM6_DAC_IRQHandler+0xb8>
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3]);	// Two orange + Two red
 8000ab6:	f240 0300 	movw	r3, #0
 8000aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f240 0300 	movw	r3, #0
 8000ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ad8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000adc:	4619      	mov	r1, r3
 8000ade:	f004 fef1 	bl	80058c4 <GPIO_Write>
 8000ae2:	e0b5      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if(state == ST_FIREFIGHT)
 8000ae4:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d11e      	bne.n	8000b30 <TIM6_DAC_IRQHandler+0x104>
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
 8000af2:	f240 0300 	movw	r3, #0
 8000af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f240 0300 	movw	r3, #0
 8000b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f240 0300 	movw	r3, #0
 8000b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b24:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f004 fecb 	bl	80058c4 <GPIO_Write>
 8000b2e:	e08f      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if (state == ST_CANDLE_BLOWOUT)
 8000b30:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d13e      	bne.n	8000bbc <TIM6_DAC_IRQHandler+0x190>
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b3e:	f240 0300 	movw	r3, #0
 8000b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b46:	699b      	ldr	r3, [r3, #24]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b48:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b4a:	f240 0300 	movw	r3, #0
 8000b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b52:	681b      	ldr	r3, [r3, #0]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b5a:	f240 0300 	movw	r3, #0
 8000b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b62:	685b      	ldr	r3, [r3, #4]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b6a:	f240 0300 	movw	r3, #0
 8000b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b72:	689b      	ldr	r3, [r3, #8]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b29a      	uxth	r2, r3
		{
			GPIO_Write(GPIOE, led_matrix[0] | led_matrix[3] | led_matrix[6]);
		}
		else if (state == ST_CANDLE_BLOWOUT)
		{
			GPIO_Write(GPIOE, led_matrix[6] | led_matrix[0] | led_matrix[1] | led_matrix[2] | led_matrix[3]
 8000b7a:	f240 0300 	movw	r3, #0
 8000b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b82:	68db      	ldr	r3, [r3, #12]
                                            | led_matrix[4] | led_matrix[5]); // All LED's
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f240 0300 	movw	r3, #0
 8000b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f240 0300 	movw	r3, #0
 8000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bb0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f004 fe85 	bl	80058c4 <GPIO_Write>
 8000bba:	e049      	b.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		}
		else if (state == ST_DONE)
 8000bbc:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d142      	bne.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
		{
			++led_iter;
 8000bca:	f640 1320 	movw	r3, #2336	; 0x920
 8000bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f103 0201 	add.w	r2, r3, #1
 8000bd8:	f640 1320 	movw	r3, #2336	; 0x920
 8000bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be0:	601a      	str	r2, [r3, #0]
			GPIO_Write(GPIOE, led_matrix[led_iter] | led_matrix[6-led_iter]);
 8000be2:	f640 1320 	movw	r3, #2336	; 0x920
 8000be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f240 0300 	movw	r3, #0
 8000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f640 1320 	movw	r3, #2336	; 0x920
 8000bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1c3 0106 	rsb	r1, r3, #6
 8000c08:	f240 0300 	movw	r3, #0
 8000c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c20:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8000c24:	4619      	mov	r1, r3
 8000c26:	f004 fe4d 	bl	80058c4 <GPIO_Write>
			if(led_iter > 6)
 8000c2a:	f640 1320 	movw	r3, #2336	; 0x920
 8000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	bfd4      	ite	le
 8000c38:	2300      	movle	r3, #0
 8000c3a:	2301      	movgt	r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <TIM6_DAC_IRQHandler+0x224>
			{
				led_iter = 0;
 8000c42:	f640 1320 	movw	r3, #2336	; 0x920
 8000c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
				}
				leds_on = (leds_on == 1) ? leds_on = 0 : leds_on = 1;
			}
			*/
		}
	}
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop

08000c54 <ADC1_2_IRQHandler>:
	void ADC1_2_IRQHandler(void)
	{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
		if(ADC_GetITStatus(ADC1, ADC_IT_EOC) == SET)
 8000c58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c5c:	f04f 0104 	mov.w	r1, #4
 8000c60:	f003 fdc2 	bl	80047e8 <ADC_GetITStatus>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	bf14      	ite	ne
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <ADC1_2_IRQHandler+0x42>
		{
			adcval = ADC_GetConversionValue(ADC1);
 8000c74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c78:	f003 fa9e 	bl	80041b8 <ADC_GetConversionValue>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f640 137c 	movw	r3, #2428	; 0x97c
 8000c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c88:	601a      	str	r2, [r3, #0]
			ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8000c8a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c8e:	f04f 0104 	mov.w	r1, #4
 8000c92:	f003 fdd9 	bl	8004848 <ADC_ClearITPendingBit>
		}
	}
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DMA1_Channel1_IRQHandler>:

	void DMA1_Channel1_IRQHandler(void)
	{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
		DMA_ClearITPendingBit(DMA1_IT_TC1);
 8000c9c:	f04f 0002 	mov.w	r0, #2
 8000ca0:	f004 f97a 	bl	8004f98 <DMA_ClearITPendingBit>
		new_data = 1;
 8000ca4:	f640 1388 	movw	r3, #2440	; 0x988
 8000ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cac:	f04f 0201 	mov.w	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
	}
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <DMA2_Channel1_IRQHandler>:

	void DMA2_Channel1_IRQHandler(void)
	{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
		DMA_ClearITPendingBit(DMA2_IT_TC1);
 8000cb8:	f04f 0002 	mov.w	r0, #2
 8000cbc:	f2c1 0000 	movt	r0, #4096	; 0x1000
 8000cc0:	f004 f96a 	bl	8004f98 <DMA_ClearITPendingBit>
		adc2_new_data = 1;
 8000cc4:	f640 139c 	movw	r3, #2460	; 0x99c
 8000cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ccc:	f04f 0201 	mov.w	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	}
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ADC3_IRQHandler>:

	void ADC3_IRQHandler(void)
	{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
		int i = 0;
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
		int sum = 0;
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
 8000ce6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cea:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000cee:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000cf2:	f003 fd79 	bl	80047e8 <ADC_GetITStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	2301      	movne	r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d038      	beq.n	8000d78 <ADC3_IRQHandler+0xa4>
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
 8000d06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d0a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000d12:	f003 fd99 	bl	8004848 <ADC_ClearITPendingBit>
			for(i=0; i<35;++i)
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	e00d      	b.n	8000d3a <ADC3_IRQHandler+0x66>
			{
				sum += ADC_GetConversionValue(ADC3);
 8000d1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d22:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d26:	f003 fa47 	bl	80041b8 <ADC_GetConversionValue>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	603b      	str	r3, [r7, #0]
		int i = 0;
		int sum = 0;
		if(ADC_GetITStatus(ADC3, ADC_IT_AWD1) != RESET)
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD1);
			for(i=0; i<35;++i)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f103 0301 	add.w	r3, r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b22      	cmp	r3, #34	; 0x22
 8000d3e:	bfcc      	ite	gt
 8000d40:	2300      	movgt	r3, #0
 8000d42:	2301      	movle	r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1e9      	bne.n	8000d1e <ADC3_IRQHandler+0x4a>
			{
				sum += ADC_GetConversionValue(ADC3);
			}
			if((float)sum/float(35) > 2048)
 8000d4a:	edd7 7a00 	vldr	s15, [r7]
 8000d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d52:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000dc0 <ADC3_IRQHandler+0xec>
 8000d56:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000d5a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000dc4 <ADC3_IRQHandler+0xf0>
 8000d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d66:	dd26      	ble.n	8000db6 <ADC3_IRQHandler+0xe2>
			{
				adc3_awd1 = 1;
 8000d68:	f640 139d 	movw	r3, #2461	; 0x99d
 8000d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d70:	f04f 0201 	mov.w	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e01e      	b.n	8000db6 <ADC3_IRQHandler+0xe2>
			}
		}
		else if (ADC_GetITStatus(ADC3, ADC_IT_AWD2) != RESET)
 8000d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d7c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	f003 fd30 	bl	80047e8 <ADC_GetITStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	2301      	movne	r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00e      	beq.n	8000db6 <ADC3_IRQHandler+0xe2>
		{
			ADC_ClearITPendingBit(ADC3, ADC_IT_AWD2);
 8000d98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d9c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	f003 fd50 	bl	8004848 <ADC_ClearITPendingBit>
			adc3_awd2 = 1;
 8000da8:	f640 139e 	movw	r3, #2462	; 0x99e
 8000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000db0:	f04f 0201 	mov.w	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
		}
	}
 8000db6:	f107 0708 	add.w	r7, r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	420c0000 	.word	0x420c0000
 8000dc4:	45000000 	.word	0x45000000

08000dc8 <EXTI9_5_IRQHandler>:

	void EXTI9_5_IRQHandler(void)//EXTI5_IRQHandler(void)
	{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
		EXTI_ClearITPendingBit(EXTI_Line9);
 8000dce:	f04f 0009 	mov.w	r0, #9
 8000dd2:	f004 fb67 	bl	80054a4 <EXTI_ClearITPendingBit>
		if(stage == 0)
 8000dd6:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d124      	bne.n	8000e2e <EXTI9_5_IRQHandler+0x66>
		{
			TIM_SetCounter(TIM2, 0);
 8000de4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000de8:	f04f 0100 	mov.w	r1, #0
 8000dec:	f006 ffb6 	bl	8007d5c <TIM_SetCounter>
			TIM_Cmd(TIM2, ENABLE);
 8000df0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000df4:	f04f 0101 	mov.w	r1, #1
 8000df8:	f007 f89e 	bl	8007f38 <TIM_Cmd>

			EXTI_InitTypeDef e;

			e.EXTI_Line = EXTI_Line9;
 8000dfc:	f04f 0309 	mov.w	r3, #9
 8000e00:	60bb      	str	r3, [r7, #8]
			e.EXTI_LineCmd = ENABLE;
 8000e02:	f04f 0301 	mov.w	r3, #1
 8000e06:	73bb      	strb	r3, [r7, #14]
			e.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	733b      	strb	r3, [r7, #12]
			e.EXTI_Trigger = EXTI_Trigger_Falling;
 8000e0e:	f04f 030c 	mov.w	r3, #12
 8000e12:	737b      	strb	r3, [r7, #13]

			EXTI_Init(&e);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 f933 	bl	8005084 <EXTI_Init>

			stage = 1;
 8000e1e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e26:	f04f 0201 	mov.w	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e02f      	b.n	8000e8e <EXTI9_5_IRQHandler+0xc6>
			return;
		}
		else if(stage == 1)
 8000e2e:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d128      	bne.n	8000e8e <EXTI9_5_IRQHandler+0xc6>
		{
			count = TIM_GetCounter(TIM2);
 8000e3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e40:	f006 ffa8 	bl	8007d94 <TIM_GetCounter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	f640 13a0 	movw	r3, #2464	; 0x9a0
 8000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e50:	601a      	str	r2, [r3, #0]
			TIM_Cmd(TIM2, DISABLE);
 8000e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	f007 f86d 	bl	8007f38 <TIM_Cmd>

			NVIC_InitTypeDef nv;

			nv.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000e5e:	f04f 0317 	mov.w	r3, #23
 8000e62:	713b      	strb	r3, [r7, #4]
			nv.NVIC_IRQChannelCmd = DISABLE;
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
			nv.NVIC_IRQChannelPreemptionPriority = 0;
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	717b      	strb	r3, [r7, #5]
			nv.NVIC_IRQChannelSubPriority = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	71bb      	strb	r3, [r7, #6]

			NVIC_Init(&nv);
 8000e76:	f107 0304 	add.w	r3, r7, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f004 fd98 	bl	80059b0 <NVIC_Init>

			stage = 0;
 8000e80:	f640 13a4 	movw	r3, #2468	; 0x9a4
 8000e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
			return;
		}
	}
 8000e8e:	f107 0710 	add.w	r7, r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop

08000e98 <update_pid>:

	void update_pid(void)
	{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
		float mtr_out = 0.50f;
 8000e9e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000ea2:	607b      	str	r3, [r7, #4]
		d_front = ((float)count*(float)0.5*(float)K_ULTRASONIC);
 8000ea4:	f640 13a0 	movw	r3, #2464	; 0x9a0
 8000ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebc:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8001250 <update_pid+0x3b8>
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8000ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ecc:	edc3 7a00 	vstr	s15, [r3]

		if(state == ST_HOMING)
 8000ed0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f040 8131 	bne.w	8001142 <update_pid+0x2aa>
		{
			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 8000ee0:	f640 1380 	movw	r3, #2432	; 0x980
 8000ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f640 138c 	movw	r3, #2444	; 0x98c
 8000ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	ee07 3a10 	vmov	s14, r3
 8000efc:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8000f00:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	edc3 7a00 	vstr	s15, [r3]
			if(err > -20 && err < 20)
 8000f0c:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f14:	ed93 7a00 	vldr	s14, [r3]
 8000f18:	eefb 7a04 	vmov.f32	s15, #180	; 0xb4
 8000f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	dd1c      	ble.n	8000f60 <update_pid+0xc8>
 8000f26:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f2e:	ed93 7a00 	vldr	s14, [r3]
 8000f32:	eef3 7a04 	vmov.f32	s15, #52	; 0x34
 8000f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d50f      	bpl.n	8000f60 <update_pid+0xc8>
			{
				pwm1_output(0.50f);
 8000f40:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000f44:	f001 ff96 	bl	8002e74 <_Z11pwm1_outputf>
				pwm2_output(0.50f);
 8000f48:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000f4c:	f002 f85e 	bl	800300c <_Z11pwm2_outputf>
				state = ST_FIREFIGHT;
 8000f50:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	f04f 0202 	mov.w	r2, #2
 8000f5c:	601a      	str	r2, [r3, #0]
				return;
 8000f5e:	e3e5      	b.n	800172c <update_pid+0x894>
			}

			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 8000f60:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f68:	ed93 7a00 	vldr	s14, [r3]
 8000f6c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8000f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7c:	eddf 7aba 	vldr	s15, [pc, #744]	; 8001268 <update_pid+0x3d0>
 8000f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f84:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8000f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
			integral =0;//+= err * 0.04f;
 8000f90:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8000f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
			drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)735)); // k_deriv = 944
 8000f9e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8000fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa6:	ed93 7a00 	vldr	s14, [r3]
 8000faa:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800126c <update_pid+0x3d4>
 8000fae:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8000fb2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8000fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fba:	edd3 6a00 	vldr	s13, [r3]
 8000fbe:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8001254 <update_pid+0x3bc>
 8000fc2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fd2:	edc3 7a00 	vstr	s15, [r3]

			rt = 0.0f;
 8000fd6:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8000fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
			mtr_out = 0.5f;
 8000fe4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000fe8:	607b      	str	r3, [r7, #4]

			if(drive_cmd > 0.5)
 8000fea:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8000fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8000ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd06      	ble.n	8001012 <update_pid+0x17a>
			{
				drive_cmd = 0.5f;
 8001004:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001010:	601a      	str	r2, [r3, #0]
			}
			if(drive_cmd < -0.5)
 8001012:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d506      	bpl.n	800103a <update_pid+0x1a2>
			{
				drive_cmd = -0.5f;
 800102c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001034:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001038:	601a      	str	r2, [r3, #0]
			}

			left = (1-mtr_out) - drive_cmd - rt;
 800103a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800103e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001046:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001056:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106e:	edc3 7a00 	vstr	s15, [r3]
			right = mtr_out - drive_cmd - rt;
 8001072:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001076:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001082:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001086:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800108a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109e:	edc3 7a00 	vstr	s15, [r3]

			if(left>1.0)
 80010a2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80010b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd07      	ble.n	80010cc <update_pid+0x234>
			{
				left=1.0;
 80010bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e011      	b.n	80010f0 <update_pid+0x258>
			}
			else if(left<0)
 80010cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d506      	bpl.n	80010f0 <update_pid+0x258>
			{
				left=0;//-1.0;
 80010e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
			}

			if(right>1.0f)
 80010f0:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80010f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8001100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd07      	ble.n	800111a <update_pid+0x282>
			{
				right=1.0f;
 800110a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800110e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001112:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e2d9      	b.n	80016ce <update_pid+0x836>
			}
			else if(right<0)
 800111a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800111e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	f140 82ce 	bpl.w	80016ce <update_pid+0x836>
			{
				right=0;
 8001132:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001136:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e2c5      	b.n	80016ce <update_pid+0x836>
			}
		}
		else if(state == ST_WANDER)
 8001142:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001146:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8161 	bne.w	8001414 <update_pid+0x57c>
		{
			err = ((float)(0.55)*(float)((int)adc2_data[0] - 2200)) + ((float)(0.45)*(float)((int)adcData[1] - 150));
 8001152:	f640 138c 	movw	r3, #2444	; 0x98c
 8001156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8001258 <update_pid+0x3c0>
 800116c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001170:	f640 1380 	movw	r3, #2432	; 0x980
 8001174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f1a3 0396 	sub.w	r3, r3, #150	; 0x96
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	eddf 7a35 	vldr	s15, [pc, #212]	; 800125c <update_pid+0x3c4>
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119a:	edc3 7a00 	vstr	s15, [r3]

		diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 800119e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 80011a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	f640 13b0 	movw	r3, #2480	; 0x9b0
 80011ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001268 <update_pid+0x3d0>
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80011c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ca:	edc3 7a00 	vstr	s15, [r3]
		drive_cmd = (((float)(err)/(float)2500) + ((float)diff_err/(float)3720)); //1100=diff term
 80011ce:	f640 13ac 	movw	r3, #2476	; 0x9ac
 80011d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001260 <update_pid+0x3c8>
 80011de:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80011e2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80011e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ea:	edd3 6a00 	vldr	s13, [r3]
 80011ee:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001264 <update_pid+0x3cc>
 80011f2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80011fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001202:	edc3 7a00 	vstr	s15, [r3]

		if(d_front < 0.690 || adc2_data[3] > 1870)//0.69
 8001206:	f640 13bc 	movw	r3, #2492	; 0x9bc
 800120a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00a f9b3 	bl	800b57c <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	a30a      	add	r3, pc, #40	; (adr r3, 8001248 <update_pid+0x3b0>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f00a fc70 	bl	800bb08 <__aeabi_dcmplt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <update_pid+0x3a8>
 800122e:	f640 138c 	movw	r3, #2444	; 0x98c
 8001232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	f240 734e 	movw	r3, #1870	; 0x74e
 800123c:	429a      	cmp	r2, r3
 800123e:	d919      	bls.n	8001274 <update_pid+0x3dc>
 8001240:	f04f 0301 	mov.w	r3, #1
 8001244:	e018      	b.n	8001278 <update_pid+0x3e0>
 8001246:	bf00      	nop
 8001248:	e147ae14 	.word	0xe147ae14
 800124c:	3fe6147a 	.word	0x3fe6147a
 8001250:	3a941c82 	.word	0x3a941c82
 8001254:	4437c000 	.word	0x4437c000
 8001258:	3f0ccccd 	.word	0x3f0ccccd
 800125c:	3ee66666 	.word	0x3ee66666
 8001260:	451c4000 	.word	0x451c4000
 8001264:	45688000 	.word	0x45688000
 8001268:	3ccccccd 	.word	0x3ccccccd
 800126c:	43fa0000 	.word	0x43fa0000
 8001270:	446c0000 	.word	0x446c0000
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <update_pid+0x40c>
		{
			rt = 0.5f;
 800127c:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001280:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001284:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001288:	601a      	str	r2, [r3, #0]
			mtr_out = 0.3f;
 800128a:	f649 139a 	movw	r3, #39322	; 0x999a
 800128e:	f6c3 6399 	movt	r3, #16025	; 0x3e99
 8001292:	607b      	str	r3, [r7, #4]
			drive_cmd = 0;
 8001294:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <update_pid+0x424>
		}
		else
		{
			rt = 0.0f;
 80012a4:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80012a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
			mtr_out = 0.85f;
 80012b2:	f649 139a 	movw	r3, #39322	; 0x999a
 80012b6:	f6c3 7359 	movt	r3, #16217	; 0x3f59
 80012ba:	607b      	str	r3, [r7, #4]
		}

		if(drive_cmd > 0.5)
 80012bc:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80012cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd06      	ble.n	80012e4 <update_pid+0x44c>
		{
			drive_cmd = 0.5f;
 80012d6:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012e2:	601a      	str	r2, [r3, #0]
		}
		if(drive_cmd < -0.5)
 80012e4:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80012e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d506      	bpl.n	800130c <update_pid+0x474>
		{
			drive_cmd = -0.5f;
 80012fe:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001306:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800130a:	601a      	str	r2, [r3, #0]
		}

		left = (1-mtr_out) - drive_cmd - rt;
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8001310:	edd7 7a01 	vldr	s15, [r7, #4]
 8001314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001318:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001338:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800133c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001340:	edc3 7a00 	vstr	s15, [r3]
		right = mtr_out - drive_cmd - rt;
 8001344:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed97 7a01 	vldr	s14, [r7, #4]
 8001354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001358:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800135c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800136c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001370:	edc3 7a00 	vstr	s15, [r3]

		if(left>1.0)
 8001374:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800137c:	ed93 7a00 	vldr	s14, [r3]
 8001380:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8001384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	dd07      	ble.n	800139e <update_pid+0x506>
		{
			left=1.0;
 800138e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e011      	b.n	80013c2 <update_pid+0x52a>
		}
		else if(left<0)
 800139e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d506      	bpl.n	80013c2 <update_pid+0x52a>
		{
			left=0;//-1.0;
 80013b4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		}

		if(right>1.0f)
 80013c2:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd07      	ble.n	80013ec <update_pid+0x554>
		{
			right=1.0f;
 80013dc:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e170      	b.n	80016ce <update_pid+0x836>
		}
		else if(right<0)
 80013ec:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80013f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	f140 8165 	bpl.w	80016ce <update_pid+0x836>
		{
			right=0;
 8001404:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e15c      	b.n	80016ce <update_pid+0x836>
		}
		}
		else if(state == ST_CANDLE_BLOWOUT)
 8001414:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	f040 8155 	bne.w	80016ce <update_pid+0x836>
		{
			err = (float)(1.0) * (float)((int)adcData[0] - (int)adc2_data[2]);
 8001424:	f640 1380 	movw	r3, #2432	; 0x980
 8001428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	f640 138c 	movw	r3, #2444	; 0x98c
 8001434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	ee07 3a10 	vmov	s14, r3
 8001440:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001444:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800144c:	edc3 7a00 	vstr	s15, [r3]

			diff_err = (float)(err-last_err)*((float)DT_ENCODER/(float)1000);
 8001450:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8001460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146c:	ed5f 7a82 	vldr	s15, [pc, #-520]	; 8001268 <update_pid+0x3d0>
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800147c:	edc3 7a00 	vstr	s15, [r3]
			integral =0;//+= err * 0.04f;
 8001480:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8001484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			drive_cmd = (((float)(err)/(float)500) + ((float)diff_err/(float)944));
 800148e:	f640 13ac 	movw	r3, #2476	; 0x9ac
 8001492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	ed5f 7a8c 	vldr	s15, [pc, #-560]	; 800126c <update_pid+0x3d4>
 800149e:	ee87 7a27 	vdiv.f32	s14, s14, s15
 80014a2:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80014a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014aa:	edd3 6a00 	vldr	s13, [r3]
 80014ae:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8001270 <update_pid+0x3d8>
 80014b2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014c2:	edc3 7a00 	vstr	s15, [r3]

			rt = 0.0f;
 80014c6:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80014ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			mtr_out = 0.5f;
 80014d4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80014d8:	607b      	str	r3, [r7, #4]

			if(drive_cmd > 0.5)
 80014da:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80014ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd06      	ble.n	8001502 <update_pid+0x66a>
			{
				drive_cmd = 0.5f;
 80014f4:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80014f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014fc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001500:	601a      	str	r2, [r3, #0]
			}
			if(drive_cmd < -0.5)
 8001502:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150a:	ed93 7a00 	vldr	s14, [r3]
 800150e:	eefe 7a00 	vmov.f32	s15, #224	; 0xe0
 8001512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d506      	bpl.n	800152a <update_pid+0x692>
			{
				drive_cmd = -0.5f;
 800151c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001524:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001528:	601a      	str	r2, [r3, #0]
			}

			left = (1-mtr_out) - drive_cmd - rt;
 800152a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800152e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001536:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800153a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001546:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800154a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155e:	edc3 7a00 	vstr	s15, [r3]
			right = mtr_out - drive_cmd - rt;
 8001562:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8001566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001576:	f640 13b8 	movw	r3, #2488	; 0x9b8
 800157a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800158a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800158e:	edc3 7a00 	vstr	s15, [r3]

			if(left>1.0)
 8001592:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80015a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dd07      	ble.n	80015bc <update_pid+0x724>
			{
				left=1.0;
 80015ac:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e011      	b.n	80015e0 <update_pid+0x748>
			}
			else if(left<0)
 80015bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d506      	bpl.n	80015e0 <update_pid+0x748>
			{
				left=0;//-1.0;
 80015d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
			}

			if(right>1.0f)
 80015e0:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80015e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd07      	ble.n	800160a <update_pid+0x772>
			{
				right=1.0f;
 80015fa:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80015fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001602:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e011      	b.n	800162e <update_pid+0x796>
			}
			else if(right<0)
 800160a:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d506      	bpl.n	800162e <update_pid+0x796>
			{
				right=0;
 8001620:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8001624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
			}

			if(match_time_counter - t_firefight_start > FIREFIGHT_TIMEOUT)
 800162e:	f640 13d0 	movw	r3, #2512	; 0x9d0
 8001632:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	f640 13d4 	movw	r3, #2516	; 0x9d4
 800163e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164a:	eef2 7a04 	vmov.f32	s15, #36	; 0x24
 800164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	dd3a      	ble.n	80016ce <update_pid+0x836>
			{
				pwm3_output(0.05f);
 8001658:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 800165c:	f6c3 504c 	movt	r0, #15692	; 0x3d4c
 8001660:	f001 fda8 	bl	80031b4 <_Z11pwm3_outputf>
				if((adc2_data[2] > UV_THRESHOLD || adcData[0] > UV_THRESHOLD))
 8001664:	f640 138c 	movw	r3, #2444	; 0x98c
 8001668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001672:	d807      	bhi.n	8001684 <update_pid+0x7ec>
 8001674:	f640 1380 	movw	r3, #2432	; 0x980
 8001678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001682:	d902      	bls.n	800168a <update_pid+0x7f2>
 8001684:	f04f 0301 	mov.w	r3, #1
 8001688:	e001      	b.n	800168e <update_pid+0x7f6>
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <update_pid+0x80a>
				{
					state = ST_WANDER;
 8001692:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8001696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e015      	b.n	80016ce <update_pid+0x836>
				}
				else
				{
					pwm1_output(0.5f);
 80016a2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80016a6:	f001 fbe5 	bl	8002e74 <_Z11pwm1_outputf>
					pwm2_output(0.5f);
 80016aa:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80016ae:	f001 fcad 	bl	800300c <_Z11pwm2_outputf>
					rt = 0;
 80016b2:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80016b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
					state = ST_DONE;
 80016c0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016c8:	f04f 0204 	mov.w	r2, #4
 80016cc:	601a      	str	r2, [r3, #0]
//			else if(match_time_counter - t_firefight_start > FIREFIGHT_TIMEOUT)
//			{

//			}
		}
		if(state == ST_WANDER || state == ST_HOMING || state == ST_CANDLE_BLOWOUT) {
 80016ce:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00d      	beq.n	80016f8 <update_pid+0x860>
 80016dc:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d006      	beq.n	80016f8 <update_pid+0x860>
 80016ea:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80016ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d119      	bne.n	800172c <update_pid+0x894>
		pwm1_output(left);
 80016f8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fbb6 	bl	8002e74 <_Z11pwm1_outputf>
		pwm2_output(right);
 8001708:	f640 13c8 	movw	r3, #2504	; 0x9c8
 800170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc7a 	bl	800300c <_Z11pwm2_outputf>
		last_err = err;
 8001718:	f640 13ac 	movw	r3, #2476	; 0x9ac
 800171c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f640 13b0 	movw	r3, #2480	; 0x9b0
 8001726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800172a:	601a      	str	r2, [r3, #0]
		}
	}
 800172c:	f107 0708 	add.w	r7, r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f3af 8000 	nop.w

08001738 <main>:
int leds_on;

// Initialize all encoder data structures to zero:

int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	SystemInit(); // Set up clocks/PLL/et. al
 800173c:	f009 fbe6 	bl	800af0c <SystemInit>

	UART1_init(); // Debug bridge
 8001740:	f7fe fd92 	bl	8000268 <_Z10UART1_initv>

	while(true);
 8001744:	e7fe      	b.n	8001744 <main+0xc>
 8001746:	bf00      	nop

08001748 <_Z24trinity2013_waitForStartv>:

	return 0; // We should never manage to get here...
}

void trinity2013_waitForStart(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800174e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001752:	f04f 0101 	mov.w	r1, #1
 8001756:	f005 f86b 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_DeInit(GPIOD);
 800175a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800175e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001762:	f003 febb 	bl	80054dc <GPIO_DeInit>
	GPIO_InitTypeDef g;
	g.GPIO_Mode = GPIO_Mode_IN;
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_OD;
 800176c:	f04f 0301 	mov.w	r3, #1
 8001770:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_3;
 8001772:	f04f 0308 	mov.w	r3, #8
 8001776:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001778:	f04f 0302 	mov.w	r3, #2
 800177c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD,&g);
 800177e:	463b      	mov	r3, r7
 8001780:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001784:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001788:	4619      	mov	r1, r3
 800178a:	f003 ff23 	bl	80055d4 <GPIO_Init>

	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 800178e:	bf00      	nop
 8001790:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001794:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001798:	f04f 0108 	mov.w	r1, #8
 800179c:	f004 f802 	bl	80057a4 <GPIO_ReadInputDataBit>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2300      	movne	r3, #0
 80017a8:	2301      	moveq	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ef      	bne.n	8001790 <_Z24trinity2013_waitForStartv+0x48>
	match_time_counter = 0.0f;
 80017b0:	f640 13d0 	movw	r3, #2512	; 0x9d0
 80017b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
	state = ST_WANDER;
 80017be:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80017c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	f107 0708 	add.w	r7, r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_Z11IR_distancei>:

float IR_distance(int IR_ADC_VAL)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	ed2d 8b02 	vpush	{d8}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001938 <_Z11IR_distancei+0x164>
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	edc7 7a03 	vstr	s15, [r7, #12]
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f009 fec1 	bl	800b57c <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f2c4 0318 	movt	r3, #16408	; 0x4018
 800180e:	f00a fd29 	bl	800c264 <pow>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f00a f9c5 	bl	800bba8 <__aeabi_d2f>
 800181e:	ee07 0a10 	vmov	s14, r0
 8001822:	eddf 7a46 	vldr	s15, [pc, #280]	; 800193c <_Z11IR_distancei+0x168>
 8001826:	ee27 8a27 	vmul.f32	s16, s14, s15
}

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f009 fea6 	bl	800b57c <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8001844:	f00a fd0e 	bl	800c264 <pow>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f00a f9aa 	bl	800bba8 <__aeabi_d2f>
 8001854:	ee07 0a10 	vmov	s14, r0
 8001858:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001940 <_Z11IR_distancei+0x16c>
 800185c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001860:	ee38 8a67 	vsub.f32	s16, s16, s15

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f009 fe89 	bl	800b57c <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	f2c4 0310 	movt	r3, #16400	; 0x4010
 800187e:	f00a fcf1 	bl	800c264 <pow>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f00a f98d 	bl	800bba8 <__aeabi_d2f>
 800188e:	ee07 0a10 	vmov	s14, r0
 8001892:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001944 <_Z11IR_distancei+0x170>
 8001896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189a:	ee38 8a27 	vadd.f32	s16, s16, s15

float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f009 fe6c 	bl	800b57c <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f2c4 0308 	movt	r3, #16392	; 0x4008
 80018b8:	f00a fcd4 	bl	800c264 <pow>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
			+ (float)60.24);
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f00a f970 	bl	800bba8 <__aeabi_d2f>
 80018c8:	ee07 0a10 	vmov	s14, r0
 80018cc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001948 <_Z11IR_distancei+0x174>
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	ee38 8a67 	vsub.f32	s16, s16, s15
float IR_distance(int IR_ADC_VAL)
{
	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,5))
			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3))
			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f009 fe4f 	bl	800b57c <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ee:	f00a fcb9 	bl	800c264 <pow>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
			+ (float)60.24);
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f00a f955 	bl	800bba8 <__aeabi_d2f>
 80018fe:	ee07 0a10 	vmov	s14, r0
 8001902:	eddf 7a12 	vldr	s15, [pc, #72]	; 800194c <_Z11IR_distancei+0x178>
 8001906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800190e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001912:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001950 <_Z11IR_distancei+0x17c>
 8001916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001954 <_Z11IR_distancei+0x180>
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	ee17 3a90 	vmov	r3, s15
}
 800192a:	4618      	mov	r0, r3
 800192c:	f107 0710 	add.w	r7, r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	ecbd 8b02 	vpop	{d8}
 8001936:	bd80      	pop	{r7, pc}
 8001938:	3a64034a 	.word	0x3a64034a
 800193c:	3f21cac1 	.word	0x3f21cac1
 8001940:	41003127 	.word	0x41003127
 8001944:	42243333 	.word	0x42243333
 8001948:	42db6666 	.word	0x42db6666
 800194c:	4324b333 	.word	0x4324b333
 8001950:	430acccd 	.word	0x430acccd
 8001954:	4270f5c3 	.word	0x4270f5c3

08001958 <_Z19imu_update_ISR_initv>:

// Initializes the ISR that reads inertial sensors (gyro + accelerometer)
// Interrupt priority is HIGHEST (0)

void imu_update_ISR_init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
	L3GD20_InitTypeDef l3gInit;

	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 800195e:	f04f 0307 	mov.w	r3, #7
 8001962:	74bb      	strb	r3, [r7, #18]
	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	74fb      	strb	r3, [r7, #19]
	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	753b      	strb	r3, [r7, #20]
	l3gInit.Endianness = L3GD20_BLE_LSB;
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	757b      	strb	r3, [r7, #21]
	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	75bb      	strb	r3, [r7, #22]
	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	747b      	strb	r3, [r7, #17]
	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 8001982:	f04f 0308 	mov.w	r3, #8
 8001986:	743b      	strb	r3, [r7, #16]

	L3GD20_Init(&l3gInit);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4618      	mov	r0, r3
 800198e:	f008 ff99 	bl	800a8c4 <L3GD20_Init>
	gyro_bias_x = calc_gyro_bias();
 8001992:	f000 fab3 	bl	8001efc <_Z14calc_gyro_biasv>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	f640 1378 	movw	r3, #2424	; 0x978
 800199e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a2:	601a      	str	r2, [r3, #0]

	gyro_angle_x = 0;
 80019a4:	f640 1374 	movw	r3, #2420	; 0x974
 80019a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

	NVIC_InitTypeDef nv;
	TIM_TimeBaseInitTypeDef TIM17_init;

	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 80019b2:	f04f 031a 	mov.w	r3, #26
 80019b6:	733b      	strb	r3, [r7, #12]
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	737b      	strb	r3, [r7, #13]
	nv.NVIC_IRQChannelSubPriority = 0;
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	73bb      	strb	r3, [r7, #14]
	nv.NVIC_IRQChannelCmd = ENABLE;
 80019c4:	f04f 0301 	mov.w	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&nv);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 ffee 	bl	80059b0 <NVIC_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 80019d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80019d8:	f04f 0101 	mov.w	r1, #1
 80019dc:	f004 ff52 	bl	8006884 <RCC_APB2PeriphClockCmd>
	 * 	  Prescaler -> PRESCALER
	 * 	  Period -> ARR
	 * 	  RepetitionCounter -> REPCOUNTER
	 */

	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 80019e0:	f240 138f 	movw	r3, #399	; 0x18f
 80019e4:	607b      	str	r3, [r7, #4]
	TIM17_init.TIM_Prescaler = 7199;
 80019e6:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80019ea:	803b      	strh	r3, [r7, #0]
	TIM17_init.TIM_RepetitionCounter = 0;
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	72bb      	strb	r3, [r7, #10]
	TIM17_init.TIM_ClockDivision = 0;
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	813b      	strh	r3, [r7, #8]
	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	807b      	strh	r3, [r7, #2]

	TIM_TimeBaseInit(TIM17, &TIM17_init);
 80019fe:	463b      	mov	r3, r7
 8001a00:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001a04:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f006 f8d1 	bl	8007bb0 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 8001a0e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001a12:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001a16:	f04f 0101 	mov.w	r1, #1
 8001a1a:	f04f 0201 	mov.w	r2, #1
 8001a1e:	f007 fd21 	bl	8009464 <TIM_ITConfig>
	TIM_Cmd(TIM17, ENABLE);
 8001a22:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8001a26:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001a2a:	f04f 0101 	mov.w	r1, #1
 8001a2e:	f006 fa83 	bl	8007f38 <TIM_Cmd>
}
 8001a32:	f107 0718 	add.w	r7, r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop

08001a3c <L3GD20_TIMEOUT_UserCallback>:

uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 8001a40:	f243 408c 	movw	r0, #13452	; 0x348c
 8001a44:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001a48:	f00b ff18 	bl	800d87c <printf>
	return 0;
 8001a4c:	f04f 0300 	mov.w	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_Z15brake_pins_initv>:

void brake_pins_init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8001a5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a5e:	f04f 0101 	mov.w	r1, #1
 8001a62:	f004 fee5 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8001a66:	463b      	mov	r3, r7
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fe5b 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001a6e:	f04f 030c 	mov.w	r3, #12
 8001a72:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a7a:	f04f 0301 	mov.w	r3, #1
 8001a7e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 8001a86:	f04f 0302 	mov.w	r3, #2
 8001a8a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a92:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001a96:	4619      	mov	r1, r3
 8001a98:	f003 fd9c 	bl	80055d4 <GPIO_Init>

	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 8001a9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001aa0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001aa4:	f04f 0104 	mov.w	r1, #4
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f003 fef2 	bl	8005894 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 8001ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ab8:	f04f 0108 	mov.w	r1, #8
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f003 fee8 	bl	8005894 <GPIO_WriteBit>
}
 8001ac4:	f107 0708 	add.w	r7, r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_Z13ping_pin_initv>:
/*
 * PB0: OUTPUT
 * PC1: INPUT
 */
void ping_pin_init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 8001ad2:	f44f 0088 	mov.w	r0, #4456448	; 0x440000
 8001ad6:	f04f 0101 	mov.w	r1, #1
 8001ada:	f004 fea9 	bl	8006830 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef g;
	g.GPIO_Mode = GPIO_Mode_IN;
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_OD;
 8001ae4:	f04f 0301 	mov.w	r3, #1
 8001ae8:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_9;
 8001aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aee:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
	g.GPIO_Speed = GPIO_Speed_Level_1;
 8001af6:	f04f 0301 	mov.w	r3, #1
 8001afa:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOF, &g);
 8001afc:	463b      	mov	r3, r7
 8001afe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001b02:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001b06:	4619      	mov	r1, r3
 8001b08:	f003 fd64 	bl	80055d4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_OUT;
 8001b0c:	f04f 0301 	mov.w	r3, #1
 8001b10:	713b      	strb	r3, [r7, #4]
	g.GPIO_OType = GPIO_OType_PP;
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	71bb      	strb	r3, [r7, #6]
	g.GPIO_Pin = GPIO_Pin_0;
 8001b18:	f04f 0301 	mov.w	r3, #1
 8001b1c:	603b      	str	r3, [r7, #0]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]
	g.GPIO_Speed = GPIO_Speed_Level_1;
 8001b24:	f04f 0301 	mov.w	r3, #1
 8001b28:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOB, &g);
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b30:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001b34:	4619      	mov	r1, r3
 8001b36:	f003 fd4d 	bl	80055d4 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001b3a:	f04f 0001 	mov.w	r0, #1
 8001b3e:	f04f 0101 	mov.w	r1, #1
 8001b42:	f004 fe9f 	bl	8006884 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 8001b46:	f04f 0005 	mov.w	r0, #5
 8001b4a:	f04f 0109 	mov.w	r1, #9
 8001b4e:	f005 fe9f 	bl	8007890 <SYSCFG_EXTILineConfig>

}
 8001b52:	f107 0708 	add.w	r7, r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop

08001b5c <_Z20timer2_timebase_initv>:

void timer2_timebase_init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001b62:	f04f 0001 	mov.w	r0, #1
 8001b66:	f04f 0101 	mov.w	r1, #1
 8001b6a:	f004 feb5 	bl	80068d8 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 8001b6e:	f244 634f 	movw	r3, #17999	; 0x464f
 8001b72:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 8001b7a:	f04f 0347 	mov.w	r3, #71	; 0x47
 8001b7e:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001b8c:	f107 0304 	add.w	r3, r7, #4
 8001b90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b94:	4619      	mov	r1, r3
 8001b96:	f006 f80b 	bl	8007bb0 <TIM_TimeBaseInit>

	TIM_SetCounter(TIM2, 0);
 8001b9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	f006 f8db 	bl	8007d5c <TIM_SetCounter>
}
 8001ba6:	f107 0710 	add.w	r7, r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop

08001bb0 <_Z9comp_initv>:
 * COMP7:	Input->		PC1	 (IO2)
 * 			Output->	PC2
 */

void comp_init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
	//COMP2 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001bb6:	f04f 0001 	mov.w	r0, #1
 8001bba:	f04f 0101 	mov.w	r1, #1
 8001bbe:	f004 fe61 	bl	8006884 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef g;

	g.GPIO_Mode = GPIO_Mode_AN;
 8001bc2:	f04f 0303 	mov.w	r3, #3
 8001bc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_7;
 8001bd2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001bd6:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001bd8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bdc:	f04f 0101 	mov.w	r1, #1
 8001be0:	f004 fe26 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOA, &g);
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bec:	4619      	mov	r1, r3
 8001bee:	f003 fcf1 	bl	80055d4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001bf2:	f04f 0302 	mov.w	r3, #2
 8001bf6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_9;
 8001c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0e:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 8001c10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c14:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001c18:	f04f 0109 	mov.w	r1, #9
 8001c1c:	f04f 0208 	mov.w	r2, #8
 8001c20:	f003 fe5e 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c2c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001c30:	4619      	mov	r1, r3
 8001c32:	f003 fccf 	bl	80055d4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	f004 f9bf 	bl	8005fbc <RCC_PCLK2Config>

	COMP_InitTypeDef c;

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001c3e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001c42:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001c4a:	f04f 0304 	mov.w	r3, #4
 8001c4e:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c60:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP2, &c);
 8001c68:	f107 0304 	add.w	r3, r7, #4
 8001c6c:	f04f 0004 	mov.w	r0, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	f002 fe0b 	bl	800488c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 8001c76:	f04f 0004 	mov.w	r0, #4
 8001c7a:	f04f 0101 	mov.w	r1, #1
 8001c7e:	f002 fe63 	bl	8004948 <COMP_Cmd>

	//COMP3 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001c82:	f04f 0001 	mov.w	r0, #1
 8001c86:	f04f 0101 	mov.w	r1, #1
 8001c8a:	f004 fdfb 	bl	8006884 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001c8e:	f04f 0303 	mov.w	r3, #3
 8001c92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 8001c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca2:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 8001ca4:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8001ca8:	f04f 0101 	mov.w	r1, #1
 8001cac:	f004 fdc0 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOB, &g);
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cb8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f003 fc89 	bl	80055d4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001cc2:	f04f 0302 	mov.w	r3, #2
 8001cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 8001cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cde:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 8001ce0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ce4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ce8:	f04f 0108 	mov.w	r1, #8
 8001cec:	f04f 0207 	mov.w	r2, #7
 8001cf0:	f003 fdf6 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOC, &g);
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cfc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001d00:	4619      	mov	r1, r3
 8001d02:	f003 fc67 	bl	80055d4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f004 f957 	bl	8005fbc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001d0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001d12:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001d1a:	f04f 0304 	mov.w	r3, #4
 8001d1e:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d30:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP3, &c);
 8001d38:	f107 0304 	add.w	r3, r7, #4
 8001d3c:	f04f 0008 	mov.w	r0, #8
 8001d40:	4619      	mov	r1, r3
 8001d42:	f002 fda3 	bl	800488c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 8001d46:	f04f 0008 	mov.w	r0, #8
 8001d4a:	f04f 0101 	mov.w	r1, #1
 8001d4e:	f002 fdfb 	bl	8004948 <COMP_Cmd>

	//COMP4 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001d52:	f04f 0001 	mov.w	r0, #1
 8001d56:	f04f 0101 	mov.w	r1, #1
 8001d5a:	f004 fd93 	bl	8006884 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001d5e:	f04f 0303 	mov.w	r3, #3
 8001d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 8001d6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001d72:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 8001d74:	f44f 1010 	mov.w	r0, #2359296	; 0x240000
 8001d78:	f04f 0101 	mov.w	r1, #1
 8001d7c:	f004 fd58 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOE, &g);
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d88:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f003 fc21 	bl	80055d4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001d92:	f04f 0302 	mov.w	r3, #2
 8001d96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 8001daa:	f04f 0302 	mov.w	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 8001db0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001db4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001db8:	f04f 0101 	mov.w	r1, #1
 8001dbc:	f04f 0208 	mov.w	r2, #8
 8001dc0:	f003 fd8e 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dcc:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f003 fbff 	bl	80055d4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f004 f8ef 	bl	8005fbc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001dde:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001de2:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 8001de4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001de8:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001dea:	f04f 0304 	mov.w	r3, #4
 8001dee:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e00:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP4, &c);
 8001e08:	f107 0304 	add.w	r3, r7, #4
 8001e0c:	f04f 000c 	mov.w	r0, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	f002 fd3b 	bl	800488c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 8001e16:	f04f 000c 	mov.w	r0, #12
 8001e1a:	f04f 0101 	mov.w	r1, #1
 8001e1e:	f002 fd93 	bl	8004948 <COMP_Cmd>

	//COMP7 Init:

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001e22:	f04f 0001 	mov.w	r0, #1
 8001e26:	f04f 0101 	mov.w	r1, #1
 8001e2a:	f004 fd2b 	bl	8006884 <RCC_APB2PeriphClockCmd>

	g.GPIO_Mode = GPIO_Mode_AN;
 8001e2e:	f04f 0303 	mov.w	r3, #3
 8001e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 8001e3e:	f04f 0302 	mov.w	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001e44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e48:	f04f 0101 	mov.w	r1, #1
 8001e4c:	f004 fcf0 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_Init(GPIOC, &g);
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e58:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f003 fbb9 	bl	80055d4 <GPIO_Init>

	g.GPIO_Mode = GPIO_Mode_AF;
 8001e62:	f04f 0302 	mov.w	r3, #2
 8001e66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g.GPIO_OType = GPIO_OType_PP;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 8001e7a:	f04f 0304 	mov.w	r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 8001e80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e84:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001e88:	f04f 0102 	mov.w	r1, #2
 8001e8c:	f04f 0203 	mov.w	r2, #3
 8001e90:	f003 fd26 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOC, &g);
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e9c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f003 fb97 	bl	80055d4 <GPIO_Init>

	RCC_PCLK2Config(RCC_HCLK_Div1);
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	f004 f887 	bl	8005fbc <RCC_PCLK2Config>

	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 8001eae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001eb2:	607b      	str	r3, [r7, #4]
	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 8001eb4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001eb8:	60bb      	str	r3, [r7, #8]
	c.COMP_Mode = COMP_Mode_MediumSpeed;
 8001eba:	f04f 0304 	mov.w	r3, #4
 8001ebe:	61fb      	str	r3, [r7, #28]
	c.COMP_Output = COMP_Output_None;
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	61bb      	str	r3, [r7, #24]
	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]

	COMP_Init(COMP_Selection_COMP7, &c);
 8001ed8:	f107 0304 	add.w	r3, r7, #4
 8001edc:	f04f 0018 	mov.w	r0, #24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f002 fcd3 	bl	800488c <COMP_Init>
	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 8001ee6:	f04f 0018 	mov.w	r0, #24
 8001eea:	f04f 0101 	mov.w	r1, #1
 8001eee:	f002 fd2b 	bl	8004948 <COMP_Cmd>
}
 8001ef2:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <_Z14calc_gyro_biasv>:

int16_t calc_gyro_bias(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
	int i = 0;
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
	int accum_x = 0;
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e019      	b.n	8001f4a <_Z14calc_gyro_biasv+0x4e>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 8001f16:	463b      	mov	r3, r7
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f04f 0128 	mov.w	r1, #40	; 0x28
 8001f1e:	f04f 0202 	mov.w	r2, #2
 8001f22:	f008 fe61 	bl	800abe8 <L3GD20_Read>
		convert.un_signed = (bytes[1] << 8) | bytes[0];
 8001f26:	787b      	ldrb	r3, [r7, #1]
 8001f28:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	783b      	ldrb	r3, [r7, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	80bb      	strh	r3, [r7, #4]
		accum_x += convert.output;
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	18d3      	adds	r3, r2, r3
 8001f40:	60bb      	str	r3, [r7, #8]
		int16_t output;
	} convert;

	uint8_t bytes[2];

	for(i = 0; i < 250; ++i)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f103 0301 	add.w	r3, r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2bf9      	cmp	r3, #249	; 0xf9
 8001f4e:	bfcc      	ite	gt
 8001f50:	2300      	movgt	r3, #0
 8001f52:	2301      	movle	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1dd      	bne.n	8001f16 <_Z14calc_gyro_biasv+0x1a>
	{
		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
		convert.un_signed = (bytes[1] << 8) | bytes[0];
		accum_x += convert.output;
	}
	return (int16_t)((float)accum_x/(float)250);
 8001f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f62:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001f80 <_Z14calc_gyro_biasv+0x84>
 8001f66:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6e:	ee17 3a90 	vmov	r3, s15
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b21b      	sxth	r3, r3
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	f107 0710 	add.w	r7, r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	437a0000 	.word	0x437a0000

08001f84 <_Z13adc1_init_DMAv>:
 * @Args: None
 * @Return Val: None
 */

void adc1_init_DMA(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b09c      	sub	sp, #112	; 0x70
 8001f88:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;

	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 8001f8a:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001f8e:	f004 fadf 	bl	8006550 <RCC_ADCCLKConfig>
	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8001f92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f96:	f04f 0101 	mov.w	r1, #1
 8001f9a:	f004 fc49 	bl	8006830 <RCC_AHBPeriphClockCmd>
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001f9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fa2:	f04f 0101 	mov.w	r1, #1
 8001fa6:	f004 fc43 	bl	8006830 <RCC_AHBPeriphClockCmd>

	// Configure ADC Channel 3 and 4 as analog inputs

	GPIO_StructInit(&GPIO_InitStructure);
 8001faa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fbb8 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001fb4:	f04f 030c 	mov.w	r3, #12
 8001fb8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001fba:	f04f 0303 	mov.w	r3, #3
 8001fbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f003 fafe 	bl	80055d4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 8001fd8:	463b      	mov	r3, r7
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 fafa 	bl	80035d4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8001fe0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fe4:	f04f 0101 	mov.w	r1, #1
 8001fe8:	f001 fc9c 	bl	8003924 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ff2:	e007      	b.n	8002004 <_Z13adc1_init_DMAv+0x80>
	{
	  ++foo;
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	f103 0301 	add.w	r3, r3, #1
 8001ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 8001ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffe:	f103 0301 	add.w	r3, r3, #1
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002006:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800200a:	429a      	cmp	r2, r3
 800200c:	bfcc      	ite	gt
 800200e:	2300      	movgt	r3, #0
 8002010:	2301      	movle	r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ed      	bne.n	8001ff4 <_Z13adc1_init_DMAv+0x70>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002018:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	f001 fc24 	bl	800386c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8002024:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002028:	f001 fbf4 	bl	8003814 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 800202c:	bf00      	nop
 800202e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002032:	f001 fc31 	bl	8003898 <ADC_GetCalibrationStatus>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2300      	moveq	r3, #0
 800203e:	2301      	movne	r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f3      	bne.n	800202e <_Z13adc1_init_DMAv+0xaa>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8002058:	f04f 0302 	mov.w	r3, #2
 800205c:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 800205e:	f04f 030f 	mov.w	r3, #15
 8002062:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8002066:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800206a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800206e:	4619      	mov	r1, r3
 8002070:	f001 fb36 	bl	80036e0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 800209e:	f04f 0302 	mov.w	r3, #2
 80020a2:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 80020a4:	463b      	mov	r3, r7
 80020a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020aa:	4619      	mov	r1, r3
 80020ac:	f001 fa50 	bl	8003550 <ADC_Init>

	/* ADC1 regular channel3 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80020b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020b4:	f04f 0103 	mov.w	r1, #3
 80020b8:	f04f 0201 	mov.w	r2, #1
 80020bc:	f04f 0307 	mov.w	r3, #7
 80020c0:	f001 feb0 	bl	8003e24 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80020c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020c8:	f04f 0104 	mov.w	r1, #4
 80020cc:	f04f 0202 	mov.w	r2, #2
 80020d0:	f04f 0307 	mov.w	r3, #7
 80020d4:	f001 fea6 	bl	8003e24 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 80020d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020dc:	f04f 0101 	mov.w	r1, #1
 80020e0:	f001 fb7c 	bl	80037dc <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 80020e4:	bf00      	nop
 80020e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020ea:	f04f 0101 	mov.w	r1, #1
 80020ee:	f002 faed 	bl	80046cc <ADC_GetFlagStatus>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2300      	movne	r3, #0
 80020fa:	2301      	moveq	r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f1      	bne.n	80020e6 <_Z13adc1_init_DMAv+0x162>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 8002102:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002106:	f001 ffd9 	bl	80040bc <ADC_StartConversion>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800210a:	f04f 0001 	mov.w	r0, #1
 800210e:	f04f 0101 	mov.w	r1, #1
 8002112:	f004 fb8d 	bl	8006830 <RCC_AHBPeriphClockCmd>

	DMA_InitTypeDef			DMA_InitStructure;
	DMA_StructInit(&DMA_InitStructure);
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fe34 	bl	8004d88 <DMA_StructInit>

	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 8002120:	f04f 0008 	mov.w	r0, #8
 8002124:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002128:	f002 fcde 	bl	8004ae8 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 800212c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002130:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002134:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will be stored
 8002136:	f640 1380 	movw	r3, #2432	; 0x980
 800213a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = 2;
 8002146:	f04f 0302 	mov.w	r3, #2
 800214a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002152:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8002158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800215e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002164:	f04f 0320 	mov.w	r3, #32
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800216a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48

	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	f04f 0008 	mov.w	r0, #8
 800217e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002182:	4619      	mov	r1, r3
 8002184:	f002 fdc0 	bl	8004d08 <DMA_Init>

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8002188:	f04f 030b 	mov.w	r3, #11
 800218c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 8002190:	f04f 0302 	mov.w	r3, #2
 8002194:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	nv.NVIC_IRQChannelSubPriority = 0;
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	nv.NVIC_IRQChannelCmd = ENABLE;
 80021a0:	f04f 0301 	mov.w	r3, #1
 80021a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	NVIC_Init(&nv);
 80021a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fbff 	bl	80059b0 <NVIC_Init>

	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 80021b2:	f04f 0008 	mov.w	r0, #8
 80021b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021ba:	f04f 0102 	mov.w	r1, #2
 80021be:	f04f 0201 	mov.w	r2, #1
 80021c2:	f002 fe4f 	bl	8004e64 <DMA_ITConfig>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 80021c6:	f04f 0008 	mov.w	r0, #8
 80021ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021ce:	f04f 0101 	mov.w	r1, #1
 80021d2:	f002 fe0f 	bl	8004df4 <DMA_Cmd>

	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 80021d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021da:	f04f 0102 	mov.w	r1, #2
 80021de:	f002 f953 	bl	8004488 <ADC_DMAConfig>
	ADC_DMACmd(ADC1, ENABLE);
 80021e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e6:	f04f 0101 	mov.w	r1, #1
 80021ea:	f002 f931 	bl	8004450 <ADC_DMACmd>
}
 80021ee:	f107 0770 	add.w	r7, r7, #112	; 0x70
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <_Z13adc2_init_DMAv>:

void adc2_init_DMA(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09c      	sub	sp, #112	; 0x70
 80021fc:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;

	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 80021fe:	f44f 7088 	mov.w	r0, #272	; 0x110
 8002202:	f004 f9a5 	bl	8006550 <RCC_ADCCLKConfig>
	/* Enable ADC2 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8002206:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800220a:	f04f 0101 	mov.w	r1, #1
 800220e:	f004 fb0f 	bl	8006830 <RCC_AHBPeriphClockCmd>
	/* GPIOA, GPIOB, GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 8002212:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8002216:	f04f 0101 	mov.w	r1, #1
 800221a:	f004 fb09 	bl	8006830 <RCC_AHBPeriphClockCmd>

	// Configure PA4, PB2, PC4, PC5 as analog inputs

	GPIO_StructInit(&GPIO_InitStructure);
 800221e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fa7e 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002228:	f04f 0310 	mov.w	r3, #16
 800222c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800222e:	f04f 0303 	mov.w	r3, #3
 8002232:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800223e:	f04f 0303 	mov.w	r3, #3
 8002242:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002246:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	4619      	mov	r1, r3
 8002250:	f003 f9c0 	bl	80055d4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8002254:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fa63 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800225e:	f04f 0304 	mov.w	r3, #4
 8002262:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002264:	f04f 0303 	mov.w	r3, #3
 8002268:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002274:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002278:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800227c:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002280:	4619      	mov	r1, r3
 8002282:	f003 f9a7 	bl	80055d4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8002286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fa4a 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8002290:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002294:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002296:	f04f 0303 	mov.w	r3, #3
 800229a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80022a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022ae:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80022b2:	4619      	mov	r1, r3
 80022b4:	f003 f98e 	bl	80055d4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 80022b8:	463b      	mov	r3, r7
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f98a 	bl	80035d4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 80022c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022c4:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80022c8:	f04f 0101 	mov.w	r1, #1
 80022cc:	f001 fb2a 	bl	8003924 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022d6:	e007      	b.n	80022e8 <_Z13adc2_init_DMAv+0xf0>
	{
	  ++foo;
 80022d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022da:	f103 0301 	add.w	r3, r3, #1
 80022de:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC2, ENABLE);

	/* Insert delay equal to about 900 µs */
	int foo;
	for(foo = 0; foo < 64000; ++foo)
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	f103 0301 	add.w	r3, r3, #1
 80022e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022ea:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 80022ee:	429a      	cmp	r2, r3
 80022f0:	bfcc      	ite	gt
 80022f2:	2300      	movgt	r3, #0
 80022f4:	2301      	movle	r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ed      	bne.n	80022d8 <_Z13adc2_init_DMAv+0xe0>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 80022fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002300:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	f001 fab0 	bl	800386c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC2);
 800230c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002310:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002314:	f001 fa7e 	bl	8003814 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 8002318:	bf00      	nop
 800231a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800231e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002322:	f001 fab9 	bl	8003898 <ADC_GetCalibrationStatus>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2300      	moveq	r3, #0
 800232e:	2301      	movne	r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f1      	bne.n	800231a <_Z13adc2_init_DMAv+0x122>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	65bb      	str	r3, [r7, #88]	; 0x58
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	65fb      	str	r3, [r7, #92]	; 0x5c
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8002342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8002348:	f04f 0302 	mov.w	r3, #2
 800234c:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 800234e:	f04f 030f 	mov.w	r3, #15
 8002352:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 8002356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800235a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800235e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002362:	4619      	mov	r1, r3
 8002364:	f001 f9bc 	bl	80036e0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 8002392:	f04f 0304 	mov.w	r3, #4
 8002396:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC2, &ADC_InitStructure);
 8002398:	463b      	mov	r3, r7
 800239a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800239e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023a2:	4619      	mov	r1, r3
 80023a4:	f001 f8d4 	bl	8003550 <ADC_Init>

	/* ADC2 regular Channel 1,2,3,4 configuration */

	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 80023a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023ac:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023b0:	f04f 0101 	mov.w	r1, #1
 80023b4:	f04f 0201 	mov.w	r2, #1
 80023b8:	f04f 0307 	mov.w	r3, #7
 80023bc:	f001 fd32 	bl	8003e24 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 80023c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023c4:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023c8:	f04f 0105 	mov.w	r1, #5
 80023cc:	f04f 0202 	mov.w	r2, #2
 80023d0:	f04f 0307 	mov.w	r3, #7
 80023d4:	f001 fd26 	bl	8003e24 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 80023d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023dc:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023e0:	f04f 010b 	mov.w	r1, #11
 80023e4:	f04f 0203 	mov.w	r2, #3
 80023e8:	f04f 0307 	mov.w	r3, #7
 80023ec:	f001 fd1a 	bl	8003e24 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 80023f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023f4:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80023f8:	f04f 010c 	mov.w	r1, #12
 80023fc:	f04f 0204 	mov.w	r2, #4
 8002400:	f04f 0307 	mov.w	r3, #7
 8002404:	f001 fd0e 	bl	8003e24 <ADC_RegularChannelConfig>

	/* Enable ADC2 */
	ADC_Cmd(ADC2, ENABLE);
 8002408:	f44f 7080 	mov.w	r0, #256	; 0x100
 800240c:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002410:	f04f 0101 	mov.w	r1, #1
 8002414:	f001 f9e2 	bl	80037dc <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 8002418:	bf00      	nop
 800241a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800241e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002422:	f04f 0101 	mov.w	r1, #1
 8002426:	f002 f951 	bl	80046cc <ADC_GetFlagStatus>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2300      	movne	r3, #0
 8002432:	2301      	moveq	r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ef      	bne.n	800241a <_Z13adc2_init_DMAv+0x222>

	/* Start ADC2 Software Conversion */
	ADC_StartConversion(ADC2);
 800243a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800243e:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002442:	f001 fe3b 	bl	80040bc <ADC_StartConversion>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 8002446:	f04f 0002 	mov.w	r0, #2
 800244a:	f04f 0101 	mov.w	r1, #1
 800244e:	f004 f9ef 	bl	8006830 <RCC_AHBPeriphClockCmd>

	DMA_InitTypeDef			DMA_InitStructure;
	DMA_StructInit(&DMA_InitStructure);
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fc96 	bl	8004d88 <DMA_StructInit>

	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 800245c:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8002460:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002464:	f002 fb40 	bl	8004ae8 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 8002468:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800246c:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8002470:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values will be stored
 8002472:	f640 138c 	movw	r3, #2444	; 0x98c
 8002476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = 4;
 8002482:	f04f 0304 	mov.w	r3, #4
 8002486:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800248e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8002494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800249a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80024a0:	f04f 0320 	mov.w	r3, #32
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80024a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024aa:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48

	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 80024b2:	f107 0320 	add.w	r3, r7, #32
 80024b6:	f44f 6081 	mov.w	r0, #1032	; 0x408
 80024ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80024be:	4619      	mov	r1, r3
 80024c0:	f002 fc22 	bl	8004d08 <DMA_Init>

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 80024c4:	f04f 0338 	mov.w	r3, #56	; 0x38
 80024c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 80024cc:	f04f 0302 	mov.w	r3, #2
 80024d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	nv.NVIC_IRQChannelSubPriority = 0;
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	nv.NVIC_IRQChannelCmd = ENABLE;
 80024dc:	f04f 0301 	mov.w	r3, #1
 80024e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	NVIC_Init(&nv);
 80024e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fa61 	bl	80059b0 <NVIC_Init>

	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 80024ee:	f44f 6081 	mov.w	r0, #1032	; 0x408
 80024f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80024f6:	f04f 0102 	mov.w	r1, #2
 80024fa:	f04f 0201 	mov.w	r2, #1
 80024fe:	f002 fcb1 	bl	8004e64 <DMA_ITConfig>
	DMA_Cmd(DMA2_Channel1, ENABLE);
 8002502:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8002506:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800250a:	f04f 0101 	mov.w	r1, #1
 800250e:	f002 fc71 	bl	8004df4 <DMA_Cmd>

	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 8002512:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002516:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800251a:	f04f 0102 	mov.w	r1, #2
 800251e:	f001 ffb3 	bl	8004488 <ADC_DMAConfig>
	ADC_DMACmd(ADC2, ENABLE);
 8002522:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002526:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800252a:	f04f 0101 	mov.w	r1, #1
 800252e:	f001 ff8f 	bl	8004450 <ADC_DMACmd>
}
 8002532:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop

0800253c <_Z21battery_watchdog_initv>:

void battery_watchdog_init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b092      	sub	sp, #72	; 0x48
 8002540:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;
	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 8002542:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8002546:	f2c1 0000 	movt	r0, #4096	; 0x1000
 800254a:	f004 f801 	bl	8006550 <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 800254e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002552:	f04f 0101 	mov.w	r1, #1
 8002556:	f004 f96b 	bl	8006830 <RCC_AHBPeriphClockCmd>
	/* ADC Channel configuration */
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 800255a:	f44f 1010 	mov.w	r0, #2359296	; 0x240000
 800255e:	f04f 0101 	mov.w	r1, #1
 8002562:	f004 f965 	bl	8006830 <RCC_AHBPeriphClockCmd>

	/* Configure PB1, PE7 as analog inputs */
	GPIO_StructInit(&GPIO_InitStructure);
 8002566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256a:	4618      	mov	r0, r3
 800256c:	f003 f8da 	bl	8005724 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 8002570:	f242 0302 	movw	r3, #8194	; 0x2002
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002576:	f04f 0303 	mov.w	r3, #3
 800257a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800258e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002592:	4619      	mov	r1, r3
 8002594:	f003 f81e 	bl	80055d4 <GPIO_Init>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
*/

	ADC_StructInit(&ADC_InitStructure);
 8002598:	f107 0304 	add.w	r3, r7, #4
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f819 	bl	80035d4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 80025a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025a6:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80025aa:	f04f 0101 	mov.w	r1, #1
 80025ae:	f001 f9b9 	bl	8003924 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 222 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	e007      	b.n	80025ca <_Z21battery_watchdog_initv+0x8e>
	{
	  ++foo;
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	f103 0301 	add.w	r3, r3, #1
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC3, ENABLE);

	/* Insert delay equal to 222 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	f103 0301 	add.w	r3, r3, #1
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025cc:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80025d0:	429a      	cmp	r2, r3
 80025d2:	bfcc      	ite	gt
 80025d4:	2300      	movgt	r3, #0
 80025d6:	2301      	movle	r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ed      	bne.n	80025ba <_Z21battery_watchdog_initv+0x7e>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 80025de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025e2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f001 f93f 	bl	800386c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC3);
 80025ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025f2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80025f6:	f001 f90d 	bl	8003814 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 80025fa:	bf00      	nop
 80025fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002600:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002604:	f001 f948 	bl	8003898 <ADC_GetCalibrationStatus>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2300      	moveq	r3, #0
 8002610:	2301      	movne	r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f1      	bne.n	80025fc <_Z21battery_watchdog_initv+0xc0>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 800261e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 8002638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800263c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002640:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002644:	4619      	mov	r1, r3
 8002646:	f001 f84b 	bl	80036e0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 800264a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264e:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 8002674:	f04f 0302 	mov.w	r3, #2
 8002678:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC3, &ADC_InitStructure);
 800267c:	f107 0304 	add.w	r3, r7, #4
 8002680:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002684:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002688:	4619      	mov	r1, r3
 800268a:	f000 ff61 	bl	8003550 <ADC_Init>

	/* ADC3 regular Channel 1, 13 configuration */
	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 800268e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002692:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002696:	f04f 0101 	mov.w	r1, #1
 800269a:	f04f 0201 	mov.w	r2, #1
 800269e:	f04f 0307 	mov.w	r3, #7
 80026a2:	f001 fbbf 	bl	8003e24 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 80026a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026aa:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026ae:	f04f 0105 	mov.w	r1, #5
 80026b2:	f04f 0202 	mov.w	r2, #2
 80026b6:	f04f 0307 	mov.w	r3, #7
 80026ba:	f001 fbb3 	bl	8003e24 <ADC_RegularChannelConfig>

	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 80026be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026c2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026c6:	f04f 0101 	mov.w	r1, #1
 80026ca:	f001 fa49 	bl	8003b60 <ADC_AnalogWatchdog1SingleChannelConfig>
	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 80026ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026d2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026d6:	f04f 0105 	mov.w	r1, #5
 80026da:	f001 fa5f 	bl	8003b9c <ADC_AnalogWatchdog2SingleChannelConfig>

	/* Configure AWD 1 & 2 Thresholds: */

	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 80026de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026e2:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ea:	f04f 020a 	mov.w	r2, #10
 80026ee:	f001 f9bb 	bl	8003a68 <ADC_AnalogWatchdog1ThresholdsConfig>
	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 80026f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026f6:	f2c5 0000 	movt	r0, #20480	; 0x5000
 80026fa:	f04f 0180 	mov.w	r1, #128	; 0x80
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f001 f9dd 	bl	8003ac0 <ADC_AnalogWatchdog2ThresholdsConfig>

	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 8002706:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800270a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800270e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8002712:	f001 f98d 	bl	8003a30 <ADC_AnalogWatchdogCmd>

	// Configure ADC3 global interrupt:

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = ADC3_IRQn;
 8002716:	f04f 032f 	mov.w	r3, #47	; 0x2f
 800271a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nv.NVIC_IRQChannelPreemptionPriority = 0;
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nv.NVIC_IRQChannelSubPriority = 0;
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nv.NVIC_IRQChannelCmd = ENABLE;
 800272e:	f04f 0301 	mov.w	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	NVIC_Init(&nv);
 8002736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273a:	4618      	mov	r0, r3
 800273c:	f003 f938 	bl	80059b0 <NVIC_Init>

	// Enable ADC3's global interrupt:

	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 8002740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002744:	f2c5 0000 	movt	r0, #20480	; 0x5000
 8002748:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800274c:	f04f 0201 	mov.w	r2, #1
 8002750:	f001 ff9e 	bl	8004690 <ADC_ITConfig>

	/* Enable ADC3 */
	ADC_Cmd(ADC3, ENABLE);
 8002754:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002758:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800275c:	f04f 0101 	mov.w	r1, #1
 8002760:	f001 f83c 	bl	80037dc <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 8002764:	bf00      	nop
 8002766:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800276a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800276e:	f04f 0101 	mov.w	r1, #1
 8002772:	f001 ffab 	bl	80046cc <ADC_GetFlagStatus>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2300      	movne	r3, #0
 800277e:	2301      	moveq	r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ef      	bne.n	8002766 <_Z21battery_watchdog_initv+0x22a>

	/* Start ADC3 Software Conversion */
	ADC_StartConversion(ADC3);
 8002786:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800278a:	f2c5 0000 	movt	r0, #20480	; 0x5000
 800278e:	f001 fc95 	bl	80040bc <ADC_StartConversion>
}
 8002792:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <_Z9adc1_initv>:
 * @Args: Nothing
 * @Return Val: Nothing
 */

void adc1_init(void) //PA2 -> Channel 3 on ADC1
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b092      	sub	sp, #72	; 0x48
 80027a0:	af00      	add	r7, sp, #0
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	GPIO_InitTypeDef      GPIO_InitStructure;
	/* Configure the ADC clock */
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 80027a2:	f44f 7088 	mov.w	r0, #272	; 0x110
 80027a6:	f003 fed3 	bl	8006550 <RCC_ADCCLKConfig>

	/* Enable ADC1 clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80027aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80027ae:	f04f 0101 	mov.w	r1, #1
 80027b2:	f004 f83d 	bl	8006830 <RCC_AHBPeriphClockCmd>
	/* ADC Channel configuration */
	/* GPIOC Periph clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80027b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027ba:	f04f 0101 	mov.w	r1, #1
 80027be:	f004 f837 	bl	8006830 <RCC_AHBPeriphClockCmd>

	/* Configure ADC Channel7 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80027c2:	f04f 0304 	mov.w	r3, #4
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80027c8:	f04f 0303 	mov.w	r3, #3
 80027cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80027d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e0:	4619      	mov	r1, r3
 80027e2:	f002 fef7 	bl	80055d4 <GPIO_Init>

	ADC_StructInit(&ADC_InitStructure);
 80027e6:	f107 0304 	add.w	r3, r7, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fef2 	bl	80035d4 <ADC_StructInit>

	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 80027f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027f4:	f04f 0101 	mov.w	r1, #1
 80027f8:	f001 f894 	bl	8003924 <ADC_VoltageRegulatorCmd>

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
 8002802:	e007      	b.n	8002814 <_Z9adc1_initv+0x78>
	{
	  ++foo;
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002806:	f103 0301 	add.w	r3, r3, #1
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
	/* Calibration procedure */
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);

	/* Insert delay equal to 10 µs */
	int foo;
	for(foo = 0; foo < 32000; ++foo)
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	f103 0301 	add.w	r3, r3, #1
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
 8002814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002816:	f647 43ff 	movw	r3, #31999	; 0x7cff
 800281a:	429a      	cmp	r2, r3
 800281c:	bfcc      	ite	gt
 800281e:	2300      	movgt	r3, #0
 8002820:	2301      	movle	r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ed      	bne.n	8002804 <_Z9adc1_initv+0x68>
	{
	  ++foo;
	}

	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002828:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	f001 f81c 	bl	800386c <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8002834:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002838:	f000 ffec 	bl	8003814 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 800283c:	bf00      	nop
 800283e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002842:	f001 f829 	bl	8003898 <ADC_GetCalibrationStatus>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2300      	moveq	r3, #0
 800284e:	2301      	movne	r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f3      	bne.n	800283e <_Z9adc1_initv+0xa2>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8002876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800287e:	4619      	mov	r1, r3
 8002880:	f000 ff2e 	bl	80036e0 <ADC_CommonInit>

	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8002884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002888:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 80028ae:	f04f 0301 	mov.w	r3, #1
 80028b2:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &ADC_InitStructure);
 80028b6:	f107 0304 	add.w	r3, r7, #4
 80028ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028be:	4619      	mov	r1, r3
 80028c0:	f000 fe46 	bl	8003550 <ADC_Init>

	/* ADC1 regular channel3 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cycles5);//ADC_SampleTime_7Cycles5);
 80028c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028c8:	f04f 0103 	mov.w	r1, #3
 80028cc:	f04f 0201 	mov.w	r2, #1
 80028d0:	f04f 0307 	mov.w	r3, #7
 80028d4:	f001 faa6 	bl	8003e24 <ADC_RegularChannelConfig>

	// Configure ADC1_2 global interrupt:

	NVIC_InitTypeDef nv;

	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 80028d8:	f04f 0312 	mov.w	r3, #18
 80028dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nv.NVIC_IRQChannelPreemptionPriority = 2;
 80028e0:	f04f 0302 	mov.w	r3, #2
 80028e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nv.NVIC_IRQChannelSubPriority = 0;
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nv.NVIC_IRQChannelCmd = ENABLE;
 80028f0:	f04f 0301 	mov.w	r3, #1
 80028f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	NVIC_Init(&nv);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f857 	bl	80059b0 <NVIC_Init>

	// Enable ADC1's global interrupt:

	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8002902:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002906:	f04f 0104 	mov.w	r1, #4
 800290a:	f04f 0201 	mov.w	r2, #1
 800290e:	f001 febf 	bl	8004690 <ADC_ITConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8002912:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002916:	f04f 0101 	mov.w	r1, #1
 800291a:	f000 ff5f 	bl	80037dc <ADC_Cmd>

	/* wait for ADRDY */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 800291e:	bf00      	nop
 8002920:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002924:	f04f 0101 	mov.w	r1, #1
 8002928:	f001 fed0 	bl	80046cc <ADC_GetFlagStatus>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2300      	movne	r3, #0
 8002934:	2301      	moveq	r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f1      	bne.n	8002920 <_Z9adc1_initv+0x184>

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
 800293c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002940:	f001 fbbc 	bl	80040bc <ADC_StartConversion>
}
 8002944:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    _write(1, "exit", 4);
 8002954:	f04f 0001 	mov.w	r0, #1
 8002958:	f243 41cc 	movw	r1, #13516	; 0x34cc
 800295c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002960:	f04f 0204 	mov.w	r2, #4
 8002964:	f000 f97a 	bl	8002c5c <_write>
    while (1) {
        ;
    }
 8002968:	e7fe      	b.n	8002968 <_exit+0x1c>
 800296a:	bf00      	nop

0800296c <_close>:
}

int _close(int file) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002978:	4618      	mov	r0, r3
 800297a:	f107 070c 	add.w	r7, r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
 8002990:	f640 2318 	movw	r3, #2584	; 0xa18
 8002994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002998:	f04f 020c 	mov.w	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return -1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	f107 0714 	add.w	r7, r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
    errno = EAGAIN;
 80029b4:	f640 2318 	movw	r3, #2584	; 0xa18
 80029b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029bc:	f04f 020b 	mov.w	r2, #11
 80029c0:	601a      	str	r2, [r3, #0]
    return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e0:	605a      	str	r2, [r3, #4]
    return 0;
 80029e2:	f04f 0300 	mov.w	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	f107 070c 	add.w	r7, r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
    return 1;
 80029f8:	f04f 0301 	mov.w	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    switch (file){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f103 0300 	add.w	r3, r3, #0
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d802      	bhi.n	8002a1c <_isatty+0x18>
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8002a16:	f04f 0301 	mov.w	r3, #1
 8002a1a:	e008      	b.n	8002a2e <_isatty+0x2a>
    default:
        //errno = ENOTTY;
        errno = EBADF;
 8002a1c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a24:	f04f 0209 	mov.w	r2, #9
 8002a28:	601a      	str	r2, [r3, #0]
        return 0;
 8002a2a:	f04f 0300 	mov.w	r3, #0
    }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f107 070c 	add.w	r7, r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8002a46:	f640 2318 	movw	r3, #2584	; 0xa18
 8002a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4e:	f04f 0216 	mov.w	r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
    return (-1);
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f107 070c 	add.w	r7, r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
 8002a6e:	f640 2318 	movw	r3, #2584	; 0xa18
 8002a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a76:	f04f 021f 	mov.w	r2, #31
 8002a7a:	601a      	str	r2, [r3, #0]
    return -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	f107 070c 	add.w	r7, r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
    return 0;
 8002a98:	f04f 0300 	mov.w	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f107 0714 	add.w	r7, r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8002ab0:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <_sbrk+0x28>
        heap_end = &_ebss;
 8002abe:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ac6:	f640 221c 	movw	r2, #2588	; 0xa1c
 8002aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002ace:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8002ad0:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002adc:	f3ef 8408 	mrs	r4, MSP
  return(result);
 8002ae0:	4623      	mov	r3, r4

char * stack = (char*) __get_MSP();
 8002ae2:	60bb      	str	r3, [r7, #8]
     if (heap_end + incr >  stack)
 8002ae4:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	18d2      	adds	r2, r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d913      	bls.n	8002b20 <_sbrk+0x78>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8002af8:	f04f 0002 	mov.w	r0, #2
 8002afc:	f243 41d4 	movw	r1, #13524	; 0x34d4
 8002b00:	f6c0 0101 	movt	r1, #2049	; 0x801
 8002b04:	f04f 0219 	mov.w	r2, #25
 8002b08:	f000 f8a8 	bl	8002c5c <_write>
         errno = ENOMEM;
 8002b0c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b14:	f04f 020c 	mov.w	r2, #12
 8002b18:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	e00c      	b.n	8002b3a <_sbrk+0x92>
         //abort ();
     }

    heap_end += incr;
 8002b20:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	18d2      	adds	r2, r2, r3
 8002b2e:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b36:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8002b38:	68fb      	ldr	r3, [r7, #12]

}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f107 0714 	add.w	r7, r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
    int n;
    int num = 0;
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
    switch (file) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d128      	bne.n	8002bae <_read+0x6a>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e01f      	b.n	8002ba4 <_read+0x60>
#if   STDIN_USART == 1
            while ((USART1->ISR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002b64:	bf00      	nop
 8002b66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f6      	beq.n	8002b66 <_read+0x22>
            char c = (char)(USART1->RDR & (uint16_t)0x01FF);
 8002b78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	75fb      	strb	r3, [r7, #23]
            char c = (char) (USART2->RDR & (uint16_t) 0x01FF);
#elif STDIN_USART == 3
            while ((USART3->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	7dfa      	ldrb	r2, [r7, #23]
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f103 0301 	add.w	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
            num++;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f103 0301 	add.w	r3, r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
int _read(int file, char *ptr, int len) {
    int n;
    int num = 0;
    switch (file) {
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f103 0301 	add.w	r3, r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbdb      	blt.n	8002b64 <_read+0x20>
            char c = (char)(USART3->RDR & (uint16_t)0x01FF);
#endif
            *ptr++ = c;
            num++;
        }
        break;
 8002bac:	e009      	b.n	8002bc2 <_read+0x7e>
    default:
        errno = EBADF;
 8002bae:	f640 2318 	movw	r3, #2584	; 0xa18
 8002bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bb6:	f04f 0209 	mov.w	r2, #9
 8002bba:	601a      	str	r2, [r3, #0]
        return -1;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e000      	b.n	8002bc4 <_read+0x80>
    }
    return num;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be0:	605a      	str	r2, [r3, #4]
    return 0;
 8002be2:	f04f 0300 	mov.w	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	f107 070c 	add.w	r7, r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	f107 070c 	add.w	r7, r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
 8002c14:	f640 2318 	movw	r3, #2584	; 0xa18
 8002c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c1c:	f04f 0202 	mov.w	r2, #2
 8002c20:	601a      	str	r2, [r3, #0]
    return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	f107 070c 	add.w	r7, r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop

08002c34 <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
 8002c3c:	f640 2318 	movw	r3, #2584	; 0xa18
 8002c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c44:	f04f 020a 	mov.w	r2, #10
 8002c48:	601a      	str	r2, [r3, #0]
    return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f107 070c 	add.w	r7, r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
    int n;
    switch (file) {
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <_write+0x18>
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d022      	beq.n	8002cb8 <_write+0x5c>
 8002c72:	e043      	b.n	8002cfc <_write+0xa0>
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e018      	b.n	8002cae <_write+0x52>
#if STDOUT_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002c7c:	bf00      	nop
 8002c7e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c82:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f6      	beq.n	8002c7e <_write+0x22>
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
 8002c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f103 0301 	add.w	r3, r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++) {
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f103 0301 	add.w	r3, r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dbe2      	blt.n	8002c7c <_write+0x20>
            while ((USART3->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);

#endif
        }
        break;
 8002cb6:	e02b      	b.n	8002d10 <_write+0xb4>
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e018      	b.n	8002cf2 <_write+0x96>
#if STDERR_USART == 1
            while ((USART1->ISR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART1->TDR = (*ptr++ & (uint16_t)0x01FF);
#elif  STDERR_USART == 2
            while ((USART2->ISR & USART_FLAG_TC) == (uint16_t) RESET) {
 8002cc0:	bf00      	nop
 8002cc2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002cc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f6      	beq.n	8002cc2 <_write+0x66>
            }
            USART2->TDR = (*ptr++ & (uint16_t) 0x01FF);
 8002cd4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002cd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f103 0301 	add.w	r3, r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]

#endif
        }
        break;
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f103 0301 	add.w	r3, r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	dbe2      	blt.n	8002cc0 <_write+0x64>
#elif  STDERR_USART == 3
            while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->TDR = (*ptr++ & (uint16_t)0x01FF);
#endif
        }
        break;
 8002cfa:	e009      	b.n	8002d10 <_write+0xb4>
    default:
        errno = EBADF;
 8002cfc:	f640 2318 	movw	r3, #2584	; 0xa18
 8002d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d04:	f04f 0209 	mov.w	r2, #9
 8002d08:	601a      	str	r2, [r3, #0]
        return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	e000      	b.n	8002d12 <_write+0xb6>
    }
    return len;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	f107 071c 	add.w	r7, r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <_Z13pwm_out1_initt>:
 */

#include "pwm.h"

void pwm_out1_init(uint16_t frequency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8002d36:	88f9      	ldrh	r1, [r7, #6]
 8002d38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	f000 fa57 	bl	80031f8 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 8002d74:	f04f 0360 	mov.w	r3, #96	; 0x60
 8002d78:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 8002d7a:	f04f 0301 	mov.w	r3, #1
 8002d7e:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;//25000;
 8002d80:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002d84:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 8002d8c:	f04f 0302 	mov.w	r3, #2
 8002d90:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_4;
 8002d98:	f04f 0310 	mov.w	r3, #16
 8002d9c:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 8002d9e:	f04f 0301 	mov.w	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 8002da4:	f04f 0303 	mov.w	r3, #3
 8002da8:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002daa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002dae:	f04f 0101 	mov.w	r1, #1
 8002db2:	f003 fd3d 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_2); // AF2, 10:
 8002db6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dba:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002dbe:	f04f 0104 	mov.w	r1, #4
 8002dc2:	f04f 0202 	mov.w	r2, #2
 8002dc6:	f002 fd8b 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dd2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f002 fbfc 	bl	80055d4 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002ddc:	f04f 0002 	mov.w	r0, #2
 8002de0:	f04f 0101 	mov.w	r1, #1
 8002de4:	f003 fd78 	bl	80068d8 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 8002de8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002df0:	f006 fc26 	bl	8009640 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dfc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e00:	4619      	mov	r1, r3
 8002e02:	f004 fed5 	bl	8007bb0 <TIM_TimeBaseInit>
	TIM_OC1Init(TIM3, &j);
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e0e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e12:	4619      	mov	r1, r3
 8002e14:	f005 f8b0 	bl	8007f78 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002e18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e1c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e20:	f04f 0108 	mov.w	r1, #8
 8002e24:	f005 fd5e 	bl	80088e4 <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8002e28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e2c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e30:	f04f 0101 	mov.w	r1, #1
 8002e34:	f005 f828 	bl	8007e88 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_1, TIM_CCx_Enable);
 8002e38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e40:	f04f 0100 	mov.w	r1, #0
 8002e44:	f04f 0201 	mov.w	r2, #1
 8002e48:	f006 f83e 	bl	8008ec8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 8002e4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e50:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e54:	f04f 0101 	mov.w	r1, #1
 8002e58:	f005 f86e 	bl	8007f38 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 8002e5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e60:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002e64:	f04f 0101 	mov.w	r1, #1
 8002e68:	f006 fb1c 	bl	80094a4 <TIM_GenerateEvent>
}
 8002e6c:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_Z11pwm1_outputf>:

void pwm1_output(float duty)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 8002e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e84:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e98:	ee17 3a90 	vmov	r3, s15
 8002e9c:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare1(TIM3, setval);
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ea4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f005 fc15 	bl	80086d8 <TIM_SetCompare1>
}
 8002eae:	f107 0710 	add.w	r7, r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <_Z13pwm_out2_initt>:

void pwm_out2_init(uint16_t frequency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	; 0x38
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
	int period = 0;
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8002ece:	88f9      	ldrh	r1, [r7, #6]
 8002ed0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	f000 f98b 	bl	80031f8 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;//clk_div;
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f103 33ff 	add.w	r3, r3, #4294967295
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 8002f0c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8002f10:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 8002f12:	f04f 0301 	mov.w	r3, #1
 8002f16:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;
 8002f18:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002f1c:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	83bb      	strh	r3, [r7, #28]

	g.GPIO_Mode = GPIO_Mode_AF;
 8002f24:	f04f 0302 	mov.w	r3, #2
 8002f28:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_5;
 8002f30:	f04f 0320 	mov.w	r3, #32
 8002f34:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_UP;
 8002f36:	f04f 0301 	mov.w	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 8002f3c:	f04f 0303 	mov.w	r3, #3
 8002f40:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002f42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002f46:	f04f 0101 	mov.w	r1, #1
 8002f4a:	f003 fc71 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_2); // AF 2, 10:
 8002f4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f52:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002f56:	f04f 0105 	mov.w	r1, #5
 8002f5a:	f04f 0202 	mov.w	r2, #2
 8002f5e:	f002 fcbf 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &g);
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f6a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f002 fb30 	bl	80055d4 <GPIO_Init>


	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002f74:	f04f 0002 	mov.w	r0, #2
 8002f78:	f04f 0101 	mov.w	r1, #1
 8002f7c:	f003 fcac 	bl	80068d8 <RCC_APB1PeriphClockCmd>
	TIM_InternalClockConfig(TIM3);
 8002f80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f84:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f88:	f006 fb5a 	bl	8009640 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM3, &i);
 8002f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f94:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f004 fe09 	bl	8007bb0 <TIM_TimeBaseInit>
	TIM_OC2Init(TIM3, &j);
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fa6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002faa:	4619      	mov	r1, r3
 8002fac:	f005 f878 	bl	80080a0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002fb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fb4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002fb8:	f04f 0108 	mov.w	r1, #8
 8002fbc:	f005 fcae 	bl	800891c <TIM_OC2PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8002fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fc4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002fc8:	f04f 0101 	mov.w	r1, #1
 8002fcc:	f004 ff5c 	bl	8007e88 <TIM_ARRPreloadConfig>

	TIM_CCxCmd(TIM3, TIM_Channel_2, TIM_CCx_Enable);
 8002fd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fd4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002fd8:	f04f 0104 	mov.w	r1, #4
 8002fdc:	f04f 0201 	mov.w	r2, #1
 8002fe0:	f005 ff72 	bl	8008ec8 <TIM_CCxCmd>
	TIM_Cmd(TIM3, ENABLE);
 8002fe4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fe8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002fec:	f04f 0101 	mov.w	r1, #1
 8002ff0:	f004 ffa2 	bl	8007f38 <TIM_Cmd>
	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 8002ff4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ff8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002ffc:	f04f 0101 	mov.w	r1, #1
 8003000:	f006 fa50 	bl	80094a4 <TIM_GenerateEvent>
}
 8003004:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_Z11pwm2_outputf>:

void pwm2_output(float duty)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 8003014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003018:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800301c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003024:	edd7 7a01 	vldr	s15, [r7, #4]
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003030:	ee17 3a90 	vmov	r3, s15
 8003034:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare2(TIM3, setval);
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800303c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003040:	4619      	mov	r1, r3
 8003042:	f005 fb57 	bl	80086f4 <TIM_SetCompare2>
}
 8003046:	f107 0710 	add.w	r7, r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop

08003050 <_Z13pwm_out3_initt>:
// PE0, TIM16:
void pwm_out3_init(uint16_t frequency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
	TIM_GenerateEvent(TIM16, TIM_EventSource_Update);
	*/

	///////////////////////////////////////////////////

	int period = 0;
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
	int psc = 0;
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
	config_pwm_freq((int)frequency, &period, &psc);
 8003066:	88f9      	ldrh	r1, [r7, #6]
 8003068:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800306c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	f000 f8bf 	bl	80031f8 <_Z15config_pwm_freqiPiS_>

	TIM_TimeBaseInitTypeDef i;
	TIM_OCInitTypeDef j;
	GPIO_InitTypeDef g;

	i.TIM_CounterMode = TIM_CounterMode_Up;
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	84fb      	strh	r3, [r7, #38]	; 0x26
	i.TIM_ClockDivision = 0;
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	85bb      	strh	r3, [r7, #44]	; 0x2c
	i.TIM_RepetitionCounter = 0;
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	i.TIM_Prescaler = ((uint16_t)psc)-1;
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	b29b      	uxth	r3, r3
 8003092:	f103 33ff 	add.w	r3, r3, #4294967295
 8003096:	b29b      	uxth	r3, r3
 8003098:	84bb      	strh	r3, [r7, #36]	; 0x24
	i.TIM_Period = ((uint16_t)period)-1;
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	b29b      	uxth	r3, r3
 800309e:	f103 33ff 	add.w	r3, r3, #4294967295
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28

	j.TIM_OCMode = TIM_OCMode_PWM1;
 80030a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80030a8:	613b      	str	r3, [r7, #16]
	j.TIM_OutputState = TIM_OutputState_Enable;
 80030aa:	f04f 0301 	mov.w	r3, #1
 80030ae:	82bb      	strh	r3, [r7, #20]
	j.TIM_Pulse = 8191;
 80030b0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80030b4:	61bb      	str	r3, [r7, #24]
	j.TIM_OCPolarity = TIM_OCPolarity_High;
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	83bb      	strh	r3, [r7, #28]

	// PE0

	g.GPIO_Mode = GPIO_Mode_AF;
 80030bc:	f04f 0302 	mov.w	r3, #2
 80030c0:	733b      	strb	r3, [r7, #12]
	g.GPIO_OType = GPIO_OType_PP;
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	73bb      	strb	r3, [r7, #14]
	g.GPIO_Pin = GPIO_Pin_14;
 80030c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030cc:	60bb      	str	r3, [r7, #8]
	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
	g.GPIO_Speed = GPIO_Speed_Level_1;//GPIO_Speed_50MHz;
 80030d4:	f04f 0301 	mov.w	r3, #1
 80030d8:	737b      	strb	r3, [r7, #13]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 80030da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80030de:	f04f 0101 	mov.w	r1, #1
 80030e2:	f003 fba5 	bl	8006830 <RCC_AHBPeriphClockCmd>
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_2); // AF 1, 2, 3, or 9 (TIM15); 1, 4 (TIM16); 1, 2, 10 (TIM2); 2, 4, 6, 9, 11, 12 (TIM1)
 80030e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030ea:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80030ee:	f04f 010e 	mov.w	r1, #14
 80030f2:	f04f 0202 	mov.w	r2, #2
 80030f6:	f002 fbf3 	bl	80058e0 <GPIO_PinAFConfig>
	GPIO_Init(GPIOE, &g);
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003102:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003106:	4619      	mov	r1, r3
 8003108:	f002 fa64 	bl	80055d4 <GPIO_Init>


	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800310c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003110:	f04f 0101 	mov.w	r1, #1
 8003114:	f003 fbb6 	bl	8006884 <RCC_APB2PeriphClockCmd>
	TIM_InternalClockConfig(TIM1);
 8003118:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800311c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003120:	f006 fa8e 	bl	8009640 <TIM_InternalClockConfig>
	TIM_TimeBaseInit(TIM1, &i);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800312c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003130:	4619      	mov	r1, r3
 8003132:	f004 fd3d 	bl	8007bb0 <TIM_TimeBaseInit>
	TIM_OC4Init(TIM1, &j);
 8003136:	f107 0310 	add.w	r3, r7, #16
 800313a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800313e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003142:	4619      	mov	r1, r3
 8003144:	f005 f8c0 	bl	80082c8 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8003148:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800314c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003150:	f04f 0108 	mov.w	r1, #8
 8003154:	f005 fc1c 	bl	8008990 <TIM_OC4PreloadConfig>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003158:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800315c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003160:	f04f 0101 	mov.w	r1, #1
 8003164:	f004 fe90 	bl	8007e88 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8003168:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800316c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003170:	f04f 0101 	mov.w	r1, #1
 8003174:	f006 f920 	bl	80093b8 <TIM_CtrlPWMOutputs>
//	TIM_CCPreloadControl(TIM1, ENABLE);

	TIM_CCxCmd(TIM1, TIM_Channel_4, TIM_CCx_Enable);
 8003178:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800317c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003180:	f04f 010c 	mov.w	r1, #12
 8003184:	f04f 0201 	mov.w	r2, #1
 8003188:	f005 fe9e 	bl	8008ec8 <TIM_CCxCmd>
	TIM_Cmd(TIM1, ENABLE);
 800318c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8003190:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003194:	f04f 0101 	mov.w	r1, #1
 8003198:	f004 fece 	bl	8007f38 <TIM_Cmd>
	TIM_GenerateEvent(TIM1, TIM_EventSource_Update);
 800319c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80031a0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80031a4:	f04f 0101 	mov.w	r1, #1
 80031a8:	f006 f97c 	bl	80094a4 <TIM_GenerateEvent>
}
 80031ac:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_Z11pwm3_outputf>:
void pwm3_output(float duty)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	uint16_t setval = (uint16_t)((float)TIM1->ARR * duty);
 80031bc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80031c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80031c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80031c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d8:	ee17 3a90 	vmov	r3, s15
 80031dc:	81fb      	strh	r3, [r7, #14]
	TIM_SetCompare4(TIM1, setval);
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80031e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80031e8:	4619      	mov	r1, r3
 80031ea:	f005 fa9f 	bl	800872c <TIM_SetCompare4>
}
 80031ee:	f107 0710 	add.w	r7, r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <_Z15config_pwm_freqiPiS_>:

void config_pwm_freq(int frequency, int* period, int* prescaler)
{
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	b091      	sub	sp, #68	; 0x44
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	466b      	mov	r3, sp
 8003208:	461e      	mov	r6, r3
	int max = (int)((float)72000000/(float)frequency);
 800320a:	edd7 7a03 	vldr	s15, [r7, #12]
 800320e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003212:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80034b8 <_Z15config_pwm_freqiPiS_+0x2c0>
 8003216:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800321a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	int max_num = (int)sqrt(max);
 8003222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003224:	f008 f998 	bl	800b558 <__aeabi_i2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f009 f9ae 	bl	800c590 <sqrt>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f008 fc8c 	bl	800bb58 <__aeabi_d2iz>
 8003240:	4603      	mov	r3, r0
 8003242:	623b      	str	r3, [r7, #32]

	int seive[max_num];
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f103 31ff 	add.w	r1, r3, #4294967295
 800324a:	61f9      	str	r1, [r7, #28]
 800324c:	4608      	mov	r0, r1
 800324e:	4602      	mov	r2, r0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f04f 0a01 	mov.w	sl, #1
 8003258:	f04f 0b00 	mov.w	fp, #0
 800325c:	eb12 020a 	adds.w	r2, r2, sl
 8003260:	eb43 030b 	adc.w	r3, r3, fp
 8003264:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 8003268:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800326c:	ea40 0909 	orr.w	r9, r0, r9
 8003270:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003274:	4608      	mov	r0, r1
 8003276:	4602      	mov	r2, r0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f04f 0801 	mov.w	r8, #1
 8003280:	f04f 0900 	mov.w	r9, #0
 8003284:	eb12 0208 	adds.w	r2, r2, r8
 8003288:	eb43 0309 	adc.w	r3, r3, r9
 800328c:	ea4f 60d2 	mov.w	r0, r2, lsr #27
 8003290:	ea4f 1543 	mov.w	r5, r3, lsl #5
 8003294:	4305      	orrs	r5, r0
 8003296:	ea4f 1442 	mov.w	r4, r2, lsl #5
 800329a:	460b      	mov	r3, r1
 800329c:	f103 0301 	add.w	r3, r3, #1
 80032a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032a4:	f103 0303 	add.w	r3, r3, #3
 80032a8:	f103 0307 	add.w	r3, r3, #7
 80032ac:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80032b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80032b4:	ebad 0d03 	sub.w	sp, sp, r3
 80032b8:	466b      	mov	r3, sp
 80032ba:	f103 0303 	add.w	r3, r3, #3
 80032be:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80032c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032c6:	61bb      	str	r3, [r7, #24]

	int startpos = 1;
 80032c8:	f04f 0301 	mov.w	r3, #1
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int testval = 1;
 80032ce:	f04f 0301 	mov.w	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]

	int iter = 0;
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e0:	e00a      	b.n	80032f8 <_Z15config_pwm_freqiPiS_+0x100>
	{
		seive[iter] = iter+1;
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	f103 0101 	add.w	r1, r3, #1
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int startpos = 1;
	int testval = 1;

	int iter = 0;
	int iter2;
	for(iter = 0; iter < max_num; ++iter)
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	f103 0301 	add.w	r3, r3, #1
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bfac      	ite	ge
 8003300:	2300      	movge	r3, #0
 8003302:	2301      	movlt	r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1eb      	bne.n	80032e2 <_Z15config_pwm_freqiPiS_+0xea>
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 800330a:	e038      	b.n	800337e <_Z15config_pwm_freqiPiS_+0x186>
	{
		testval = seive[startpos];
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	617b      	str	r3, [r7, #20]
		if(testval != -1)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d02b      	beq.n	8003376 <_Z15config_pwm_freqiPiS_+0x17e>
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	f103 0301 	add.w	r3, r3, #1
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
 8003326:	e01d      	b.n	8003364 <_Z15config_pwm_freqiPiS_+0x16c>
		{
			if((seive[iter] != -1) && ((seive[iter])%testval == 0))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d012      	beq.n	800335c <_Z15config_pwm_freqiPiS_+0x164>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	fb93 f2f2 	sdiv	r2, r3, r2
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	fb01 f202 	mul.w	r2, r1, r2
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <_Z15config_pwm_freqiPiS_+0x164>
			{
				seive[iter] = -1;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	while(startpos < max_num)
	{
		testval = seive[startpos];
		if(testval != -1)
		{
		for(iter = startpos+1; iter < max_num; ++iter)
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	f103 0301 	add.w	r3, r3, #1
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	bfac      	ite	ge
 800336c:	2300      	movge	r3, #0
 800336e:	2301      	movlt	r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d8      	bne.n	8003328 <_Z15config_pwm_freqiPiS_+0x130>
			{
				seive[iter] = -1;
			}
		}
		}
		++startpos;
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	f103 0301 	add.w	r3, r3, #1
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(iter = 0; iter < max_num; ++iter)
	{
		seive[iter] = iter+1;
	}

	while(startpos < max_num)
 800337e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	429a      	cmp	r2, r3
 8003384:	bfac      	ite	ge
 8003386:	2300      	movge	r3, #0
 8003388:	2301      	movlt	r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1bd      	bne.n	800330c <_Z15config_pwm_freqiPiS_+0x114>
		++startpos;
	}

	int last_valid_iter;

	iter = 0;
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
	for(iter = 0; iter < max_num; ++iter)
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
 800339c:	e03e      	b.n	800341c <_Z15config_pwm_freqiPiS_+0x224>
	{
		if(seive[iter] != -1)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d002      	beq.n	80033b2 <_Z15config_pwm_freqiPiS_+0x1ba>
		{
		last_valid_iter = iter;
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	e030      	b.n	8003414 <_Z15config_pwm_freqiPiS_+0x21c>
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
 80033b6:	e024      	b.n	8003402 <_Z15config_pwm_freqiPiS_+0x20a>
			{
				if(seive[iter2] != -1)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d019      	beq.n	80033fa <_Z15config_pwm_freqiPiS_+0x202>
				{
				seive[last_valid_iter+1] = seive[iter2];
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	f103 0201 	add.w	r2, r3, #1
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				seive[iter2] = -1;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033de:	f04f 31ff 	mov.w	r1, #4294967295
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				iter = iter2;
 80033e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
				last_valid_iter += 1;
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	f103 0301 	add.w	r3, r3, #1
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
				iter2 = max_num+1;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f103 0301 	add.w	r3, r3, #1
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
		{
		last_valid_iter = iter;
		}
		else
		{
			for(iter2 = iter; iter2<max_num; ++iter2)
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	f103 0301 	add.w	r3, r3, #1
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
 8003402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	429a      	cmp	r2, r3
 8003408:	bfac      	ite	ge
 800340a:	2300      	movge	r3, #0
 800340c:	2301      	movlt	r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1d1      	bne.n	80033b8 <_Z15config_pwm_freqiPiS_+0x1c0>
	}

	int last_valid_iter;

	iter = 0;
	for(iter = 0; iter < max_num; ++iter)
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f103 0301 	add.w	r3, r3, #1
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38
 800341c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	bfac      	ite	ge
 8003424:	2300      	movge	r3, #0
 8003426:	2301      	movlt	r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1b7      	bne.n	800339e <_Z15config_pwm_freqiPiS_+0x1a6>
				}
			}
		}
	}

	int i = max;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
	int clkdiv = 1;
 8003432:	f04f 0301 	mov.w	r3, #1
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
	int divisor = 1;
 8003438:	f04f 0301 	mov.w	r3, #1
 800343c:	613b      	str	r3, [r7, #16]

	while(i > 1)
 800343e:	e03e      	b.n	80034be <_Z15config_pwm_freqiPiS_+0x2c6>
	{
	for(iter = 1; iter < max_num; ++iter)
 8003440:	f04f 0301 	mov.w	r3, #1
 8003444:	63bb      	str	r3, [r7, #56]	; 0x38
 8003446:	e02c      	b.n	80034a2 <_Z15config_pwm_freqiPiS_+0x2aa>
	{
		divisor = seive[iter];
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
		if(divisor == -1){break;}
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d030      	beq.n	80034bc <_Z15config_pwm_freqiPiS_+0x2c4>
		else
		{
		if(i%divisor == 0)
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	fb93 f2f2 	sdiv	r2, r3, r2
 8003462:	6939      	ldr	r1, [r7, #16]
 8003464:	fb01 f202 	mul.w	r2, r1, r2
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <_Z15config_pwm_freqiPiS_+0x2a2>
			{
			i /= divisor;
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	fb92 f3f3 	sdiv	r3, r2, r3
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
			clkdiv *= divisor;
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
			if(i < 65536)
 8003482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003488:	429a      	cmp	r2, r3
 800348a:	dc06      	bgt.n	800349a <_Z15config_pwm_freqiPiS_+0x2a2>
				{
				*period = i;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003490:	601a      	str	r2, [r3, #0]
				*prescaler = clkdiv;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e019      	b.n	80034ce <_Z15config_pwm_freqiPiS_+0x2d6>
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
	{
	for(iter = 1; iter < max_num; ++iter)
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	f103 0301 	add.w	r3, r3, #1
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bfac      	ite	ge
 80034aa:	2300      	movge	r3, #0
 80034ac:	2301      	movlt	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1c9      	bne.n	8003448 <_Z15config_pwm_freqiPiS_+0x250>
 80034b4:	e003      	b.n	80034be <_Z15config_pwm_freqiPiS_+0x2c6>
 80034b6:	bf00      	nop
 80034b8:	4c895440 	.word	0x4c895440
	{
		divisor = seive[iter];
		if(divisor == -1){break;}
 80034bc:	bf00      	nop

	int i = max;
	int clkdiv = 1;
	int divisor = 1;

	while(i > 1)
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bfd4      	ite	le
 80034c4:	2300      	movle	r3, #0
 80034c6:	2301      	movgt	r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1b8      	bne.n	8003440 <_Z15config_pwm_freqiPiS_+0x248>
 80034ce:	46b5      	mov	sp, r6
				}
			}
		}
	}
	}
}
 80034d0:	f107 0744 	add.w	r7, r7, #68	; 0x44
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop

080034dc <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2,3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));


  if((ADCx == ADC1) || (ADCx == ADC2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ea:	d006      	beq.n	80034fa <ADC_DeInit+0x1e>
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f2:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10c      	bne.n	8003514 <ADC_DeInit+0x38>
  {
    /* Enable ADC1/ADC2 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80034fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80034fe:	f04f 0101 	mov.w	r1, #1
 8003502:	f003 fa13 	bl	800692c <RCC_AHBPeriphResetCmd>
    /* Release ADC1/ADC2 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC12, DISABLE);
 8003506:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	f003 fa0d 	bl	800692c <RCC_AHBPeriphResetCmd>
 8003512:	e019      	b.n	8003548 <ADC_DeInit+0x6c>
  }
  else if((ADCx == ADC3) || (ADCx == ADC4))
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800351e:	429a      	cmp	r2, r3
 8003520:	d006      	beq.n	8003530 <ADC_DeInit+0x54>
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003528:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800352c:	429a      	cmp	r2, r3
 800352e:	d10b      	bne.n	8003548 <ADC_DeInit+0x6c>
  {
    /* Enable ADC3/ADC4 reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, ENABLE);
 8003530:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003534:	f04f 0101 	mov.w	r1, #1
 8003538:	f003 f9f8 	bl	800692c <RCC_AHBPeriphResetCmd>
    /* Release ADC3/ADC4 from reset state */
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_ADC34, DISABLE);
 800353c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	f003 f9f2 	bl	800692c <RCC_AHBPeriphResetCmd>
  }
}
 8003548:	f107 0708 	add.w	r7, r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	f24c 0307 	movw	r3, #49159	; 0xc007
 800356c:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800357c:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
 8003582:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8003588:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 800358e:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
 8003594:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
  ADC_InitStruct->ADC_Resolution|                 
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
 800359a:	4313      	orrs	r3, r2
  tmpreg1 = ADCx->CFGR;
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  ADC_InitStruct->ADC_DataAlign|                 
  ADC_InitStruct->ADC_OverrunMode|        
  ADC_InitStruct->ADC_AutoInjMode;
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f023 030f 	bic.w	r3, r3, #15
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	7f1b      	ldrb	r3, [r3, #28]
 80035ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
   
}  
 80035ca:	f107 0714 	add.w	r7, r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f04f 0201 	mov.w	r2, #1
 800361a:	771a      	strb	r2, [r3, #28]
}
 800361c:	f107 070c 	add.w	r7, r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <ADC_InjectedInit>:
  * @param  ADC_InjectInitStruct: pointer to an ADC_InjecInitTypeDef structure that contains
  *         the configuration information for the specified ADC injected channel.
  * @retval None
  */
void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence3));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedInitStruct->ADC_InjecSequence4));
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  /* Get the ADCx JSQR value */
  tmpreg1 = ADCx->JSQR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	7a1b      	ldrb	r3, [r3, #8]
 8003648:	f103 33ff 	add.w	r3, r3, #4294967295
 800364c:	461a      	mov	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003652:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
 8003658:	431a      	orrs	r2, r3
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
 8003662:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	ea4f 3383 	mov.w	r3, r3, lsl #14
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
 800366c:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	ea4f 5303 	mov.w	r3, r3, lsl #20
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent |         
                         ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
 8003676:	431a      	orrs	r2, r3
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	ea4f 6383 	mov.w	r3, r3, lsl #26
  /* Clear L bits */
  tmpreg1 &= JSQR_CLEAR_Mask;
  /* Configure ADCx: Injected channel sequence length, external trigger, 
     external trigger edge and sequences
  */
  tmpreg1 = (uint32_t) ((ADC_InjectedInitStruct->ADC_NbrOfInjecChannel - (uint8_t)1) |
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence1) << 8) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence2) << 14) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence3) << 20) |
                         (uint32_t)((ADC_InjectedInitStruct->ADC_InjecSequence4) << 26));
  /* Write to ADCx SQR1 */
  ADCx->JSQR = tmpreg1;  
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800368a:	f107 0714 	add.w	r7, r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <ADC_InjectedStructInit>:
  * @brief  Fills each ADC_InjectedInitStruct member with its default value.
  * @param  ADC_InjectedInitStruct : pointer to an ADC_InjectedInitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecConvEvent = ADC_ExternalTrigInjecConvEvent_0;    
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  ADC_InjectedInitStruct->ADC_ExternalTrigInjecEventEdge = ADC_ExternalTrigInjecEventEdge_None;     
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
  ADC_InjectedInitStruct->ADC_NbrOfInjecChannel = 1;                                                             
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f04f 0201 	mov.w	r2, #1
 80036b2:	721a      	strb	r2, [r3, #8]
  ADC_InjectedInitStruct->ADC_InjecSequence1 = ADC_InjectedChannel_1; 
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f04f 0201 	mov.w	r2, #1
 80036ba:	60da      	str	r2, [r3, #12]
  ADC_InjectedInitStruct->ADC_InjecSequence2 = ADC_InjectedChannel_1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f04f 0201 	mov.w	r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
  ADC_InjectedInitStruct->ADC_InjecSequence3 = ADC_InjectedChannel_1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f04f 0201 	mov.w	r2, #1
 80036ca:	615a      	str	r2, [r3, #20]
  ADC_InjectedInitStruct->ADC_InjecSequence4 = ADC_InjectedChannel_1; 
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f04f 0201 	mov.w	r2, #1
 80036d2:	619a      	str	r2, [r3, #24]
}
 80036d4:	f107 070c 	add.w	r7, r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f6:	d006      	beq.n	8003706 <ADC_CommonInit+0x26>
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fe:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003702:	429a      	cmp	r2, r3
 8003704:	d10d      	bne.n	8003722 <ADC_CommonInit+0x42>
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
 8003706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800370a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8003718:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e00c      	b.n	800373c <ADC_CommonInit+0x5c>
  }
  else
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
 8003722:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003726:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8003734:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Clock | 
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003744:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
 800374a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	ea4f 3303 	mov.w	r3, r3, lsl #12
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003754:	431a      	orrs	r2, r3
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	7c1b      	ldrb	r3, [r3, #16]
 800375a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800375e:	4313      	orrs	r3, r2
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Clock | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376c:	d006      	beq.n	800377c <ADC_CommonInit+0x9c>
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003774:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003778:	429a      	cmp	r2, r3
 800377a:	d106      	bne.n	800378a <ADC_CommonInit+0xaa>
  {                        
    /* Write to ADC CCR */
    ADC1_2->CCR = tmpreg1;
 800377c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003780:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e005      	b.n	8003796 <ADC_CommonInit+0xb6>
  }
  else
  {
    /* Write to ADC CCR */
    ADC3_4->CCR = tmpreg1;
 800378a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800378e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	609a      	str	r2, [r3, #8]
  }
}
 8003796:	f107 0714 	add.w	r7, r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Clock member */
  ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_DMAMode member */
  ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	741a      	strb	r2, [r3, #16]

}
 80037d0:	f107 070c 	add.w	r7, r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	e005      	b.n	8003808 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f043 0202 	orr.w	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	609a      	str	r2, [r3, #8]
  }
}
 8003808:	f107 070c 	add.w	r7, r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop

08003814 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	f107 070c 	add.w	r7, r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <ADC_GetCalibrationValue>:
  * @brief  Returns the ADCx calibration value.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
uint32_t ADC_GetCalibrationValue(ADC_TypeDef* ADCx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC calibration value */
  return (uint32_t)ADCx->CALFACT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
}
 8003842:	4618      	mov	r0, r3
 8003844:	f107 070c 	add.w	r7, r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop

08003850 <ADC_SetCalibrationValue>:
  * @brief  Sets the ADCx calibration register.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_SetCalibrationValue(ADC_TypeDef* ADCx, uint32_t ADC_Calibration)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADC calibration register value */
  ADCx->CALFACT = ADC_Calibration;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003862:	f107 070c 	add.w	r7, r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]

}
 800388e:	f107 070c 	add.w	r7, r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da03      	bge.n	80038b6 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80038ae:	f04f 0301 	mov.w	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e002      	b.n	80038bc <ADC_GetCalibrationStatus+0x24>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	f107 0714 	add.w	r7, r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop

080038cc <ADC_DisableCmd>:
  * @brief  ADC Disable Command.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_DisableCmd(ADC_TypeDef* ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADDIS bit */
  ADCx->CR |= ADC_CR_ADDIS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f043 0202 	orr.w	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	f107 070c 	add.w	r7, r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <ADC_GetDisableCmdStatus+0x22>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8003906:	f04f 0301 	mov.w	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e002      	b.n	8003914 <ADC_GetDisableCmdStatus+0x28>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	f107 0714 	add.w	r7, r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	e005      	b.n	800395c <ADC_VoltageRegulatorCmd+0x38>
  }
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]
  }
}
 800395c:	f107 070c 	add.w	r7, r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop

08003968 <ADC_SelectDifferentialMode>:
  *     @arg ADC_Channel_14: ADC Channel14 selected
  * @note : Channel 15, 16 and 17 are fixed to single-ended inputs mode.
  * @retval None
  */
void ADC_SelectDifferentialMode(ADC_TypeDef* ADCx, uint8_t ADC_Channel, FunctionalState NewState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	460a      	mov	r2, r1
 8003974:	70fa      	strb	r2, [r7, #3]
 8003976:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_ADC_DIFFCHANNEL(ADC_Channel)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003978:	78bb      	ldrb	r3, [r7, #2]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <ADC_SelectDifferentialMode+0x30>
  {
    /* Set the DIFSEL bit */
   ADCx->DIFSEL |= (uint32_t)(1 << ADC_Channel );
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f04f 0101 	mov.w	r1, #1
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003996:	e00d      	b.n	80039b4 <ADC_SelectDifferentialMode+0x4c>
  }
  else
  {
    /* Reset the DIFSEL bit */
   ADCx->DIFSEL &= ~(uint32_t)(1 << ADC_Channel);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f04f 0101 	mov.w	r1, #1
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	ea6f 0303 	mvn.w	r3, r3
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
}
 80039b4:	f107 070c 	add.w	r7, r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <ADC_SelectQueueOfContextMode>:
  * @param  NewState: new state of the Queue Of Context Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SelectQueueOfContextMode(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <ADC_SelectQueueOfContextMode+0x20>
  {
    /* Set the JQM bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_JQM );
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e005      	b.n	80039ec <ADC_SelectQueueOfContextMode+0x2c>
  }
  else
  {
    /* Reset the JQM bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_JQM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
  }
}
 80039ec:	f107 070c 	add.w	r7, r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop

080039f8 <ADC_AutoDelayCmd>:
  * @param  NewState: new state of the ADC Delayed Conversion Mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoDelayCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <ADC_AutoDelayCmd+0x20>
  {
    /* Set the AUTDLY bit */
    ADCx->CFGR |= (uint32_t)(ADC_CFGR_AUTDLY );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e005      	b.n	8003a24 <ADC_AutoDelayCmd+0x2c>
  }
  else
  {
    /* Reset the AUTDLY bit */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_AUTDLY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
  }
}
 8003a24:	f107 070c 	add.w	r7, r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= ~(uint32_t)(ADC_CFGR_AWD1SGL|ADC_CFGR_AWD1EN|ADC_CFGR_JAWD1EN);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	60da      	str	r2, [r3, #12]
}
 8003a5c:	f107 0714 	add.w	r7, r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <ADC_AnalogWatchdog1ThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                         uint16_t LowThreshold)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	460a      	mov	r2, r1
 8003a74:	807a      	strh	r2, [r7, #2]
 8003a76:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_HT1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8003a80:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Set the ADCx low threshold */
  ADCx->TR1 &= ~(uint32_t)ADC_TR1_LT1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003aa0:	f023 030f 	bic.w	r3, r3, #15
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6213      	str	r3, [r2, #32]
  ADCx->TR1 |= LowThreshold;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	883b      	ldrh	r3, [r7, #0]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	f107 070c 	add.w	r7, r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop

08003ac0 <ADC_AnalogWatchdog2ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	460a      	mov	r2, r1
 8003acc:	70fa      	strb	r2, [r7, #3]
 8003ace:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADCx high threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_HT2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the ADCx low threshold */
  ADCx->TR2 &= ~(uint32_t)ADC_TR2_LT2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
  ADCx->TR2 |= LowThreshold;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b04:	f107 070c 	add.w	r7, r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <ADC_AnalogWatchdog3ThresholdsConfig>:
  *   This parameter must be a 8bit value.
  * @retval None
  */
void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold,
                                         uint8_t LowThreshold)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	70fa      	strb	r2, [r7, #3]
 8003b1e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCx high threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_HT3;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= (uint32_t)((uint32_t)HighThreshold << 16);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the ADCx low threshold */
  ADCx->TR3 &= ~(uint32_t)ADC_TR3_LT3;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
  ADCx->TR3 |= LowThreshold;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4c:	78bb      	ldrb	r3, [r7, #2]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b54:	f107 070c 	add.w	r7, r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <ADC_AnalogWatchdog1SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog1SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CFGR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_CFGR_AWD1CH;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)((uint32_t)ADC_Channel << 26);
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	60da      	str	r2, [r3, #12]
}
 8003b92:	f107 0714 	add.w	r7, r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <ADC_AnalogWatchdog2SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD2CR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD2CR_AWD2CH;
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	f04f 0301 	mov.w	r3, #1
 8003bbc:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f04f 0201 	mov.w	r2, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD2CR |= tmpreg;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8003be4:	f107 0714 	add.w	r7, r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <ADC_AnalogWatchdog3SingleChannelConfig>:
  *     @arg ADC_Channel_17: ADC Channel17 selected
  *     @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->AWD3CR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~(uint32_t)ADC_AWD3CR_AWD3CH;
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f04f 0301 	mov.w	r3, #1
 8003c10:	f6cf 73f8 	movt	r3, #65528	; 0xfff8
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= (uint32_t)1 << (ADC_Channel);
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f04f 0201 	mov.w	r2, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->AWD3CR |= tmpreg;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003c38:	f107 0714 	add.w	r7, r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop

08003c44 <ADC_TempSensorCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c56:	d006      	beq.n	8003c66 <ADC_TempSensorCmd+0x22>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d11c      	bne.n	8003ca0 <ADC_TempSensorCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00c      	beq.n	8003c86 <ADC_TempSensorCmd+0x42>
    {
      /* Enable the temperature sensor channel*/
      ADC1_2->CCR |= ADC12_CCR_TSEN;
 8003c6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c70:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003c74:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c78:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c82:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003c84:	e028      	b.n	8003cd8 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_TSEN;
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
 8003c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c8a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003c8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c92:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003c9c:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003c9e:	e01b      	b.n	8003cd8 <ADC_TempSensorCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_TSEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <ADC_TempSensorCmd+0x7c>
    {
      /* Enable the temperature sensor channel*/
      ADC3_4->CCR |= ADC34_CCR_TSEN;
 8003ca6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003caa:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003cae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cb2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003cb6:	6892      	ldr	r2, [r2, #8]
 8003cb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	e00b      	b.n	8003cd8 <ADC_TempSensorCmd+0x94>
    }
    else
    {
      /* Disable the temperature sensor channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_TSEN;
 8003cc0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003cc4:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003cc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ccc:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003cd6:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003cd8:	f107 070c 	add.w	r7, r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop

08003ce4 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf6:	d006      	beq.n	8003d06 <ADC_VrefintCmd+0x22>
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfe:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d11c      	bne.n	8003d40 <ADC_VrefintCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <ADC_VrefintCmd+0x42>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8003d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d10:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d14:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d18:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d22:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003d24:	e028      	b.n	8003d78 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8003d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d2a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d32:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003d36:	6892      	ldr	r2, [r2, #8]
 8003d38:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003d3c:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003d3e:	e01b      	b.n	8003d78 <ADC_VrefintCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <ADC_VrefintCmd+0x7c>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8003d46:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d4a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d52:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003d56:	6892      	ldr	r2, [r2, #8]
 8003d58:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	e00b      	b.n	8003d78 <ADC_VrefintCmd+0x94>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8003d60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d64:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003d68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d6c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003d76:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003d78:	f107 070c 	add.w	r7, r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <ADC_VbatCmd>:
  * @param  NewState: new state of the Vbat.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VbatCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d96:	d006      	beq.n	8003da6 <ADC_VbatCmd+0x22>
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d11c      	bne.n	8003de0 <ADC_VbatCmd+0x5c>
  {
    if (NewState != DISABLE)
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <ADC_VbatCmd+0x42>
    {
      /* Enable the Vbat channel*/
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
 8003dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003db0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003db4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003db8:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003dc2:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003dc4:	e028      	b.n	8003e18 <ADC_VbatCmd+0x94>
      ADC1_2->CCR |= ADC12_CCR_VBATEN;
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
 8003dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dca:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003dce:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003dd2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003ddc:	609a      	str	r2, [r3, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
  {
    if (NewState != DISABLE)
 8003dde:	e01b      	b.n	8003e18 <ADC_VbatCmd+0x94>
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VBATEN;
    }
  }
  else
  {
    if (NewState != DISABLE)
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <ADC_VbatCmd+0x7c>
    {
      /* Enable the Vbat channel*/
      ADC3_4->CCR |= ADC34_CCR_VBATEN;
 8003de6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003dea:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003dee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003df2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003df6:	6892      	ldr	r2, [r2, #8]
 8003df8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	e00b      	b.n	8003e18 <ADC_VbatCmd+0x94>
    }
    else
    {
      /* Disable the Vbat channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VBATEN;
 8003e00:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e04:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8003e08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e0c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e16:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003e18:	f107 070c 	add.w	r7, r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop

08003e24 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	70f9      	strb	r1, [r7, #3]
 8003e2e:	70ba      	strb	r2, [r7, #2]
 8003e30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8003e3e:	78bb      	ldrb	r3, [r7, #2]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d827      	bhi.n	8003e94 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8003e4a:	78ba      	ldrb	r2, [r7, #2]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e58:	f04f 021f 	mov.w	r2, #31
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	ea6f 0303 	mvn.w	r3, r3
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8003e6e:	78f9      	ldrb	r1, [r7, #3]
 8003e70:	78ba      	ldrb	r2, [r7, #2]
 8003e72:	4613      	mov	r3, r2
 8003e74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
 8003e92:	e088      	b.n	8003fa6 <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8003e94:	78bb      	ldrb	r3, [r7, #2]
 8003e96:	2b09      	cmp	r3, #9
 8003e98:	d82b      	bhi.n	8003ef2 <ADC_RegularChannelConfig+0xce>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8003ea0:	78ba      	ldrb	r2, [r7, #2]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003eae:	f1a3 031e 	sub.w	r3, r3, #30
 8003eb2:	f04f 021f 	mov.w	r2, #31
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	ea6f 0303 	mvn.w	r3, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8003ec8:	78f9      	ldrb	r1, [r7, #3]
 8003eca:	78ba      	ldrb	r2, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ed8:	f1a3 031e 	sub.w	r3, r3, #30
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef0:	e059      	b.n	8003fa6 <ADC_RegularChannelConfig+0x182>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8003ef2:	78bb      	ldrb	r3, [r7, #2]
 8003ef4:	2b0e      	cmp	r3, #14
 8003ef6:	d82b      	bhi.n	8003f50 <ADC_RegularChannelConfig+0x12c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8003efe:	78ba      	ldrb	r2, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f0c:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 8003f10:	f04f 021f 	mov.w	r2, #31
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	ea6f 0303 	mvn.w	r3, r3
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8003f26:	78f9      	ldrb	r1, [r7, #3]
 8003f28:	78ba      	ldrb	r2, [r7, #2]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f36:	f1a3 033c 	sub.w	r3, r3, #60	; 0x3c
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f4e:	e02a      	b.n	8003fa6 <ADC_RegularChannelConfig+0x182>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8003f56:	78ba      	ldrb	r2, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f64:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 8003f68:	f04f 021f 	mov.w	r2, #31
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	ea6f 0303 	mvn.w	r3, r3
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8003f7e:	78f9      	ldrb	r1, [r7, #3]
 8003f80:	78ba      	ldrb	r2, [r7, #2]
 8003f82:	4613      	mov	r3, r2
 8003f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f8e:	f1a3 035a 	sub.w	r3, r3, #90	; 0x5a
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d927      	bls.n	8003ffc <ADC_RegularChannelConfig+0x1d8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	f1a3 031e 	sub.w	r3, r3, #30
 8003fc0:	f04f 0207 	mov.w	r2, #7
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	ea6f 0303 	mvn.w	r3, r3
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	7878      	ldrb	r0, [r7, #1]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	f1a3 031e 	sub.w	r3, r3, #30
 8003fee:	fa00 f303 	lsl.w	r3, r0, r3
 8003ff2:	ea41 0203 	orr.w	r2, r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e024      	b.n	8004046 <ADC_RegularChannelConfig+0x222>

  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f103 32ff 	add.w	r2, r3, #4294967295
 8004008:	4613      	mov	r3, r2
 800400a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800400e:	189b      	adds	r3, r3, r2
 8004010:	f04f 0238 	mov.w	r2, #56	; 0x38
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	ea6f 0303 	mvn.w	r3, r3
 8004024:	401a      	ands	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6959      	ldr	r1, [r3, #20]
 800402e:	7878      	ldrb	r0, [r7, #1]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	4613      	mov	r3, r2
 8004034:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004038:	189b      	adds	r3, r3, r2
 800403a:	fa00 f303 	lsl.w	r3, r0, r3
 800403e:	ea41 0203 	orr.w	r2, r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	615a      	str	r2, [r3, #20]
  }
}
 8004046:	f107 0714 	add.w	r7, r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <ADC_RegularChannelSequencerLengthConfig>:
  * @param  SequenceLength: The Regular sequence length. This parameter must be between 1 to 16.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_RegularChannelSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t SequencerLength)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Configure the ADC sequence lenght */  
  ADCx->SQR1 &= ~(uint32_t)ADC_SQR1_L;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f023 020f 	bic.w	r2, r3, #15
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  ADCx->SQR1 |= (uint32_t)(SequencerLength - 1);   
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004078:	f107 070c 	add.w	r7, r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <ADC_ExternalTriggerConfig>:
  *     @arg ADC_ExternalTrigEventEdge_FallingEdge: Hardware trigger detection on the falling edge
  *     @arg ADC_ExternalTrigEventEdge_BothEdge: Hardware trigger detection on both the rising and falling edges	
  * @retval None
  */
void ADC_ExternalTriggerConfig(ADC_TypeDef* ADCx, uint16_t ADC_ExternalTrigConvEvent, uint16_t ADC_ExternalTrigEventEdge)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	460a      	mov	r2, r1
 8004090:	807a      	strh	r2, [r7, #2]
 8004092:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_TRIG(ADC_ExternalTrigConvEvent));
  assert_param(IS_EXTERNALTRIG_EDGE(ADC_ExternalTrigEventEdge));

  /* Disable the selected ADC conversion on external event */
  ADCx->CFGR &= ~(ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
  ADCx->CFGR |= (uint32_t)(ADC_ExternalTrigEventEdge | ADC_ExternalTrigConvEvent);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	8839      	ldrh	r1, [r7, #0]
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
}
 80040b2:	f107 070c 	add.w	r7, r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f043 0204 	orr.w	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	f107 070c 	add.w	r7, r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop

080040dc <ADC_GetStartConversionStatus>:
  * @brief  Gets the selected ADC start conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start conversion (SET or RESET).
  */
FlagStatus ADC_GetStartConversionStatus(ADC_TypeDef* ADCx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of ADSTART bit */
  if ((ADCx->CR & ADC_CR_ADSTART) != (uint32_t)RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <ADC_GetStartConversionStatus+0x22>
  {
    /* ADSTART bit is set */
    bitstatus = SET;
 80040f6:	f04f 0301 	mov.w	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e002      	b.n	8004104 <ADC_GetStartConversionStatus+0x28>
  }
  else
  {
    /* ADSTART bit is reset */
    bitstatus = RESET;
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADSTART bit status */
  return  bitstatus;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	f107 0714 	add.w	r7, r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop

08004114 <ADC_StopConversion>:
  * @brief  Stops the selected ADC ongoing conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopConversion(ADC_TypeDef* ADCx)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTP bit */
   ADCx->CR |= ADC_CR_ADSTP;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f043 0210 	orr.w	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	f107 070c 	add.w	r7, r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CFGR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= ~(uint32_t)(ADC_CFGR_DISCNUM);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004158:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004160:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 17;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CFGR = tmpreg1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	60da      	str	r2, [r3, #12]
}
 8004174:	f107 0714 	add.w	r7, r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_DISCEN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	e005      	b.n	80041ac <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CFGR &= ~(uint32_t)(ADC_CFGR_DISCEN);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]
  }
}
 80041ac:	f107 070c 	add.w	r7, r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	b29b      	uxth	r3, r3
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	f107 070c 	add.w	r7, r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <ADC_GetDualModeConversionValue>:
  * @note   In dual mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain the regular data of the Master ADC.
  *           Data[31:16]: these bits contain the regular data of the Slave ADC.           
  */
uint32_t ADC_GetDualModeConversionValue(ADC_TypeDef* ADCx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if((ADCx == ADC1) || (ADCx== ADC2))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e8:	d006      	beq.n	80041f8 <ADC_GetDualModeConversionValue+0x24>
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d106      	bne.n	8004206 <ADC_GetDualModeConversionValue+0x32>
  {
    /* Get the dual mode conversion value */
    tmpreg1 = ADC1_2->CDR;
 80041f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041fc:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e005      	b.n	8004212 <ADC_GetDualModeConversionValue+0x3e>
  }
  else
  {	
    /* Get the dual mode conversion value */
    tmpreg1 = ADC3_4->CDR;
 8004206:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800420a:	f2c5 0300 	movt	r3, #20480	; 0x5000
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	60fb      	str	r3, [r7, #12]
  }
  /* Return the dual mode conversion value */
  return (uint32_t) tmpreg1;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	f107 0714 	add.w	r7, r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <ADC_SetChannelOffset1>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset1(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	460a      	mov	r2, r1
 800422c:	70fa      	strb	r2, [r7, #3]
 800422e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1_CH;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004234:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
  ADCx->OFR1 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the data offset */
  ADCx->OFR1 &= ~ (uint32_t) ADC_OFR1_OFFSET1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004254:	f023 030f 	bic.w	r3, r3, #15
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6613      	str	r3, [r2, #96]	; 0x60
  ADCx->OFR1 |= (uint32_t)Offset;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004268:	f107 070c 	add.w	r7, r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <ADC_SetChannelOffset2>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset2(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	460a      	mov	r2, r1
 8004280:	70fa      	strb	r2, [r7, #3]
 8004282:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2_CH;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004288:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	665a      	str	r2, [r3, #100]	; 0x64
  ADCx->OFR2 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	ea4f 6383 	mov.w	r3, r3, lsl #26
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the data offset */
  ADCx->OFR2 &= ~ (uint32_t) ADC_OFR2_OFFSET2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042a8:	f023 030f 	bic.w	r3, r3, #15
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6653      	str	r3, [r2, #100]	; 0x64
  ADCx->OFR2 |= (uint32_t)Offset;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042b4:	883b      	ldrh	r3, [r7, #0]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042bc:	f107 070c 	add.w	r7, r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <ADC_SetChannelOffset3>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset3(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	460a      	mov	r2, r1
 80042d4:	70fa      	strb	r2, [r7, #3]
 80042d6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3_CH;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	669a      	str	r2, [r3, #104]	; 0x68
  ADCx->OFR3 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	ea4f 6383 	mov.w	r3, r3, lsl #26
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the data offset */
  ADCx->OFR3 &= ~ (uint32_t) ADC_OFR3_OFFSET3;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042fc:	f023 030f 	bic.w	r3, r3, #15
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6693      	str	r3, [r2, #104]	; 0x68
  ADCx->OFR3 |= (uint32_t)Offset;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004308:	883b      	ldrh	r3, [r7, #0]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004310:	f107 070c 	add.w	r7, r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <ADC_SetChannelOffset4>:
  * @param  Offset: the offset value for the selected ADC Channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetChannelOffset4(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	460a      	mov	r2, r1
 8004328:	70fa      	strb	r2, [r7, #3]
 800432a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_OFFSET(Offset));
    
  /* Select the Channel */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4_CH;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004330:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	66da      	str	r2, [r3, #108]	; 0x6c
  ADCx->OFR4 |=	(uint32_t)((uint32_t)ADC_Channel << 26);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	ea4f 6383 	mov.w	r3, r3, lsl #26
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Set the data offset */
  ADCx->OFR4 &= ~ (uint32_t) ADC_OFR4_OFFSET4;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004350:	f023 030f 	bic.w	r3, r3, #15
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	66d3      	str	r3, [r2, #108]	; 0x6c
  ADCx->OFR4 |= (uint32_t)Offset;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800435c:	883b      	ldrh	r3, [r7, #0]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004364:	f107 070c 	add.w	r7, r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <ADC_ChannelOffset1Cmd>:
  * @param  NewState: new state of the ADCx offset1.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset1Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d006      	beq.n	8004390 <ADC_ChannelOffset1Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR1 |= ADC_OFR1_OFFSET1_EN;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004386:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	661a      	str	r2, [r3, #96]	; 0x60
 800438e:	e005      	b.n	800439c <ADC_ChannelOffset1Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR1 &= ~(ADC_OFR1_OFFSET1_EN);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800439c:	f107 070c 	add.w	r7, r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop

080043a8 <ADC_ChannelOffset2Cmd>:
  * @param  NewState: new state of the ADCx offset2.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset2Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <ADC_ChannelOffset2Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR2 |= ADC_OFR2_OFFSET2_EN;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	665a      	str	r2, [r3, #100]	; 0x64
 80043c6:	e005      	b.n	80043d4 <ADC_ChannelOffset2Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR2 &= ~(ADC_OFR2_OFFSET2_EN);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80043d4:	f107 070c 	add.w	r7, r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <ADC_ChannelOffset3Cmd>:
  * @param  NewState: new state of the ADCx offset3.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset3Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <ADC_ChannelOffset3Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR3 |= ADC_OFR3_OFFSET3_EN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	669a      	str	r2, [r3, #104]	; 0x68
 80043fe:	e005      	b.n	800440c <ADC_ChannelOffset3Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR3 &= ~(ADC_OFR3_OFFSET3_EN);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800440c:	f107 070c 	add.w	r7, r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <ADC_ChannelOffset4Cmd>:
  * @param  NewState: new state of the ADCx offset4.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ChannelOffset4Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <ADC_ChannelOffset4Cmd+0x20>
  {
    /* Set the OFFSET1_EN bit */
    ADCx->OFR4 |= ADC_OFR4_OFFSET4_EN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	66da      	str	r2, [r3, #108]	; 0x6c
 8004436:	e005      	b.n	8004444 <ADC_ChannelOffset4Cmd+0x2c>
  }
  else
  {
    /* Reset the OFFSET1_EN bit */
    ADCx->OFR4 &= ~(ADC_OFR4_OFFSET4_EN);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004444:	f107 070c 	add.w	r7, r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 0201 	orr.w	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	e005      	b.n	800447c <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f023 0201 	bic.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
  }
}
 800447c:	f107 070c 	add.w	r7, r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <ADC_DMAConfig>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMAConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMAMode)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));

  /* Set or reset the DMACFG bit */
   ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 0202 	bic.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
   ADCx->CFGR |= ADC_DMAMode;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
}
 80044aa:	f107 070c 	add.w	r7, r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <ADC_InjectedChannelSampleTimeConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelSampleTimeConfig(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint8_t ADC_SampleTime)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	460a      	mov	r2, r1
 80044c0:	70fa      	strb	r2, [r7, #3]
 80044c2:	70bb      	strb	r3, [r7, #2]
  uint32_t tmpreg1 = 0;
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Channel sampling configuration */
  /* if ADC_InjectedChannel_10 ... ADC_InjectedChannel_18 is selected */
  if (ADC_InjectedChannel > ADC_InjectedChannel_9)
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d924      	bls.n	800451a <ADC_InjectedChannelSampleTimeConfig+0x66>
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR2_SMP10 << (3 * (ADC_InjectedChannel - 10));
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4613      	mov	r3, r2
 80044d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	f1a3 031e 	sub.w	r3, r3, #30
 80044de:	f04f 0207 	mov.w	r2, #7
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	ea6f 0303 	mvn.w	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel - 10));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6999      	ldr	r1, [r3, #24]
 80044fc:	78b8      	ldrb	r0, [r7, #2]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4613      	mov	r3, r2
 8004502:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f1a3 031e 	sub.w	r3, r3, #30
 800450c:	fa00 f303 	lsl.w	r3, r0, r3
 8004510:	ea41 0203 	orr.w	r2, r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	619a      	str	r2, [r3, #24]
 8004518:	e021      	b.n	800455e <ADC_InjectedChannelSampleTimeConfig+0xaa>

  }
  else /* ADC_InjectedChannel include in ADC_InjectedChannel_[0..9] */
  {
    /* Calculate the mask to clear */
    tmpreg1 = ADC_SMPR1_SMP1 << (3 * (ADC_InjectedChannel - 1));
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004520:	4613      	mov	r3, r2
 8004522:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f04f 0238 	mov.w	r2, #56	; 0x38
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	ea6f 0303 	mvn.w	r3, r3
 800453c:	401a      	ands	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	615a      	str	r2, [r3, #20]
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_InjectedChannel));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6959      	ldr	r1, [r3, #20]
 8004546:	78b8      	ldrb	r0, [r7, #2]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	4613      	mov	r3, r2
 800454c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004550:	189b      	adds	r3, r3, r2
 8004552:	fa00 f303 	lsl.w	r3, r0, r3
 8004556:	ea41 0203 	orr.w	r2, r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	615a      	str	r2, [r3, #20]
  }  
}
 800455e:	f107 0714 	add.w	r7, r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <ADC_StartInjectedConversion>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_StartInjectedConversion(ADC_TypeDef* ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for injected group on external event and start the selected
     ADC injected conversion */
  ADCx->CR |= ADC_CR_JADSTART;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f043 0208 	orr.w	r2, r3, #8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	f107 070c 	add.w	r7, r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop

08004588 <ADC_StopInjectedConversion>:
  * @brief  Stops the selected ADC ongoing injected conversion.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StopInjectedConversion(ADC_TypeDef* ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the JADSTP bit */
   ADCx->CR |= ADC_CR_JADSTP;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	f107 070c 	add.w	r7, r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <ADC_GetStartInjectedConversionStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetStartInjectedConversionStatus(ADC_TypeDef* ADCx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JADSTART bit */
  if ((ADCx->CR & ADC_CR_JADSTART) != (uint32_t)RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <ADC_GetStartInjectedConversionStatus+0x22>
  {
    /* JADSTART bit is set */
    bitstatus = SET;
 80045c2:	f04f 0301 	mov.w	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e002      	b.n	80045d0 <ADC_GetStartInjectedConversionStatus+0x28>
  }
  else
  {
    /* JADSTART bit is reset */
    bitstatus = RESET;
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JADSTART bit status */
  return  bitstatus;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	f107 0714 	add.w	r7, r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CFGR |= ADC_CFGR_JAUTO;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e005      	b.n	800460c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CFGR &= ~ADC_CFGR_JAUTO;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
  }
}
 800460c:	f107 070c 	add.w	r7, r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CFGR |= ADC_CFGR_JDISCEN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	e005      	b.n	8004644 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CFGR &= ~ADC_CFGR_JDISCEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
  }
}
 8004644:	f107 070c 	add.w	r7, r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop

08004650 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedSequence_3: Injected Sequence3 selected
  *     @arg ADC_InjectedSequence_4: Injected Sequence4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedSequence)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_SEQUENCE(ADC_InjectedSequence));

  tmp = (uint32_t)ADCx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]
  tmp += ((ADC_InjectedSequence - 1 )<< 2) + JDR_Offset;
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	f103 33ff 	add.w	r3, r3, #4294967295
 800466c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004670:	461a      	mov	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800467a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
}
 8004682:	4618      	mov	r0, r3
 8004684:	f107 0714 	add.w	r7, r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  if (NewState != DISABLE)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <ADC_ITConfig+0x22>
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e007      	b.n	80046c2 <ADC_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	ea6f 0303 	mvn.w	r3, r3
 80046bc:	401a      	ands	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]
  }
}
 80046c2:	f107 0714 	add.w	r7, r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <ADC_GetFlagStatus+0x24>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80046e8:	f04f 0301 	mov.w	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	e002      	b.n	80046f6 <ADC_GetFlagStatus+0x2a>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	f107 0714 	add.w	r7, r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	f107 070c 	add.w	r7, r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop

08004720 <ADC_GetCommonFlagStatus>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetCommonFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  FlagStatus bitstatus = RESET;
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473c:	d006      	beq.n	800474c <ADC_GetCommonFlagStatus+0x2c>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004744:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004748:	429a      	cmp	r2, r3
 800474a:	d106      	bne.n	800475a <ADC_GetCommonFlagStatus+0x3a>
  {
    tmpreg1 = ADC1_2->CSR;
 800474c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004750:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e005      	b.n	8004766 <ADC_GetCommonFlagStatus+0x46>
  }
  else
  {
    tmpreg1 = ADC3_4->CSR;
 800475a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800475e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
  }  
  /* Check the status of the specified ADC flag */
  if ((tmpreg1 & ADC_FLAG) != (uint32_t)RESET)
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <ADC_GetCommonFlagStatus+0x58>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8004770:	f04f 0301 	mov.w	r3, #1
 8004774:	72fb      	strb	r3, [r7, #11]
 8004776:	e002      	b.n	800477e <ADC_GetCommonFlagStatus+0x5e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800477e:	7afb      	ldrb	r3, [r7, #11]
}
 8004780:	4618      	mov	r0, r3
 8004782:	f107 0714 	add.w	r7, r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <ADC_ClearCommonFlag>:
  *     @arg ADC_FLAG_SLVAWD3: ADC slave Analog watchdog 3 flag 
  *     @arg ADC_FLAG_SLVJQOVF: ADC slave Injected Context Queue Overflow flag 
  * @retval None
  */
void ADC_ClearCommonFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_COMMONFLAG(ADC_FLAG));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800479c:	d006      	beq.n	80047ac <ADC_ClearCommonFlag+0x20>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a4:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d10c      	bne.n	80047c6 <ADC_ClearCommonFlag+0x3a>
  {
    /* Clear the selected ADC flags */
    ADC1_2->CSR |= (uint32_t)ADC_FLAG;
 80047ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047b0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80047b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80047b8:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80047bc:	6811      	ldr	r1, [r2, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e00b      	b.n	80047de <ADC_ClearCommonFlag+0x52>
  }
  else
  {
    /* Clear the selected ADC flags */
    ADC3_4->CSR |= (uint32_t)ADC_FLAG;
 80047c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80047ca:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80047ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80047d2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80047d6:	6811      	ldr	r1, [r2, #0]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
  }  
}
 80047de:	f107 070c 	add.w	r7, r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source 
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	81bb      	strh	r3, [r7, #12]
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
   
  itstatus = ADCx->ISR & ADC_IT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	b29a      	uxth	r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	4013      	ands	r3, r2
 8004810:	81bb      	strh	r3, [r7, #12]
  
  itenable = ADCx->IER & ADC_IT;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b29a      	uxth	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	4013      	ands	r3, r2
 800481e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint32_t)RESET) && (itenable != (uint32_t)RESET))
 8004820:	89bb      	ldrh	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <ADC_GetITStatus+0x4c>
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <ADC_GetITStatus+0x4c>
  {
    bitstatus = SET;
 800482c:	f04f 0301 	mov.w	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e002      	b.n	800483a <ADC_GetITStatus+0x52>
  }
  else
  {
    bitstatus = RESET;
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	f107 0714 	add.w	r7, r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD3: ADC Analog watchdog 3 interrupt source 
  *     @arg ADC_IT_JQOVF: ADC Injected Context Queue Overflow interrupt source
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Clear the selected ADC interrupt pending bit */
  ADCx->ISR |= (uint32_t)ADC_IT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
}
 800485e:	f107 070c 	add.w	r7, r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <COMP_DeInit>:
  *          to select the COMP peripheral.
  * @param  None
  * @retval None
  */
void COMP_DeInit(uint32_t COMP_Selection)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /*!< Set COMP_CSR register to reset value */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) = ((uint32_t)0x00000000);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f04f 031c 	mov.w	r3, #28
 8004876:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	f107 070c 	add.w	r7, r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <COMP_Init>:
  *           - COMP_Hysteresis configures COMP hysteresis value
  *           - COMP_Mode configures COMP power mode
  * @retval None
  */
void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_COMP_OUTPUT_POL(COMP_InitStruct->COMP_OutputPol));
  assert_param(IS_COMP_HYSTERESIS(COMP_InitStruct->COMP_Hysteresis));
  assert_param(IS_COMP_MODE(COMP_InitStruct->COMP_Mode));

  /*!< Get the COMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (COMP_BASE + COMP_Selection);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	f04f 031c 	mov.w	r3, #28
 80048a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048a6:	18d3      	adds	r3, r2, r3
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /*!< Clear the COMP1SW1, COMPxINSEL, COMPxOUTSEL, COMPxPOL, COMPxHYST and COMPxMODE bits */
  tmpreg &= (uint32_t) (COMP_CSR_CLEAR_MASK);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	60fb      	str	r3, [r7, #12]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80048c2:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
 80048d4:	431a      	orrs	r2, r3
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
  /*!< Set COMPxBLANKING bits according to COMP_InitStruct->COMP_BlankingSrce value */
  /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
  /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
  /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
  /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */
  tmpreg |= (uint32_t)(COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_NonInvertingInput |
 80048da:	4313      	orrs	r3, r2
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
                        COMP_InitStruct->COMP_Output | COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_BlankingSrce |
                        COMP_InitStruct->COMP_Hysteresis | COMP_InitStruct->COMP_Mode);

  /*!< Write to COMPx_CSR register */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) = tmpreg;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	f04f 031c 	mov.w	r3, #28
 80048e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	f107 0714 	add.w	r7, r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <COMP_StructInit>:
  * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
  COMP_InitStruct->COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
  COMP_InitStruct->COMP_Output = COMP_Output_None;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  COMP_InitStruct->COMP_BlankingSrce = COMP_BlankingSrce_None;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	60da      	str	r2, [r3, #12]
  COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	615a      	str	r2, [r3, #20]
  COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f04f 020c 	mov.w	r2, #12
 800493a:	619a      	str	r2, [r3, #24]
}
 800493c:	f107 070c 	add.w	r7, r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop

08004948 <COMP_Cmd>:
  *         When disabled, the comparator doesn't perform comparison and the 
  *                        output level is low.
  * @retval None
  */
void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <COMP_Cmd+0x36>
  {
    /* Enable the selected COMPx peripheral */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMPxEN);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	f04f 031c 	mov.w	r3, #28
 8004960:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004964:	18d3      	adds	r3, r2, r3
 8004966:	461a      	mov	r2, r3
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	f04f 031c 	mov.w	r3, #28
 800496e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004972:	18cb      	adds	r3, r1, r3
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e010      	b.n	80049a0 <COMP_Cmd+0x58>
  }
  else
  {
    /* Disable the selected COMP peripheral  */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMPxEN);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	f04f 031c 	mov.w	r3, #28
 8004984:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004988:	18d3      	adds	r3, r2, r3
 800498a:	461a      	mov	r2, r3
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	f04f 031c 	mov.w	r3, #28
 8004992:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004996:	18cb      	adds	r3, r1, r3
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]
  }
}
 80049a0:	f107 070c 	add.w	r7, r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <COMP_SwitchCmd>:
  *     ENABLE so the SW1 is closed; PA1 is connected to PA4
  *     or DISABLE so the SW1 switch is open; PA1 is disconnected from PA4
  * @retval None
  */
void COMP_SwitchCmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d011      	beq.n	80049e2 <COMP_SwitchCmd+0x36>
  {
    /* Close SW1 switch */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMP1SW1);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	f04f 031c 	mov.w	r3, #28
 80049c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	f04f 031c 	mov.w	r3, #28
 80049d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049d6:	18cb      	adds	r3, r1, r3
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e010      	b.n	8004a04 <COMP_SwitchCmd+0x58>
  }
  else
  {
    /* Open SW1 switch */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMP1SW1);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	f04f 031c 	mov.w	r3, #28
 80049e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	f04f 031c 	mov.w	r3, #28
 80049f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049fa:	18cb      	adds	r3, r1, r3
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 0302 	bic.w	r3, r3, #2
 8004a02:	6013      	str	r3, [r2, #0]
  }
}
 8004a04:	f107 070c 	add.w	r7, r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <COMP_GetOutputLevel>:
  *          to select the COMP peripheral.
  * @retval Returns the selected comparator output level: low or high.
  *       
  */
uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t compout = 0x0;
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Check if selected comparator output is high */
  if ((*(__IO uint32_t *) (COMP_BASE + COMP_Selection) & (COMP_CSR_COMPxOUT)) != 0)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	f04f 031c 	mov.w	r3, #28
 8004a24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <COMP_GetOutputLevel+0x2c>
  {
    compout = COMP_OutputLevel_High;
 8004a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e002      	b.n	8004a42 <COMP_GetOutputLevel+0x32>
  }
  else
  {
    compout = COMP_OutputLevel_Low;
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  }

  /* Return the comparator output level */
  return (uint32_t)(compout);
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	f107 0714 	add.w	r7, r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <COMP_WindowCmd>:
  *        When enbaled, COMPx and COMPx-1 non inverting inputs are connected together.
  *        When disabled, COMPx and COMPx-1 non inverting inputs are disconnected.
  * @retval None
  */
void COMP_WindowCmd(uint32_t COMP_Selection, FunctionalState NewState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_COMP_WINDOW(COMP_Selection));
  
  if (NewState != DISABLE)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <COMP_WindowCmd+0x36>
  {
    /* Enable the window mode */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) COMP_CSR_COMPxWNDWEN;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	f04f 031c 	mov.w	r3, #28
 8004a68:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	f04f 031c 	mov.w	r3, #28
 8004a76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a7a:	18cb      	adds	r3, r1, r3
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e010      	b.n	8004aa8 <COMP_WindowCmd+0x58>
  }
  else
  {
    /* Disable the window mode */
    *(__IO uint32_t *) (COMP_BASE + COMP_Selection) &= (uint32_t)(~COMP_CSR_COMPxWNDWEN);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	f04f 031c 	mov.w	r3, #28
 8004a8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	f04f 031c 	mov.w	r3, #28
 8004a9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a9e:	18cb      	adds	r3, r1, r3
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa6:	6013      	str	r3, [r2, #0]
  }
}
 8004aa8:	f107 070c 	add.w	r7, r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop

08004ab4 <COMP_LockConfig>:
  *          This parameter can be COMP_Selection_COMPx where x can be 1 to 7
  *          to select the COMP peripheral.
  * @retval None
  */
void COMP_LockConfig(uint32_t COMP_Selection)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));

  /* Set the lock bit corresponding to selected comparator */
  *(__IO uint32_t *) (COMP_BASE + COMP_Selection) |= (uint32_t) (COMP_CSR_COMPxLOCK);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	f04f 031c 	mov.w	r3, #28
 8004ac2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 031c 	mov.w	r3, #28
 8004ad0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ad4:	18cb      	adds	r3, r1, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	f107 070c 	add.w	r7, r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	f04f 0308 	mov.w	r3, #8
 8004b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d10c      	bne.n	8004b46 <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b3c:	6852      	ldr	r2, [r2, #4]
 8004b3e:	f042 020f 	orr.w	r2, r2, #15
 8004b42:	605a      	str	r2, [r3, #4]
 8004b44:	e0da      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	f04f 031c 	mov.w	r3, #28
 8004b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10c      	bne.n	8004b6e <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b64:	6852      	ldr	r2, [r2, #4]
 8004b66:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	e0c6      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d10c      	bne.n	8004b96 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b8c:	6852      	ldr	r2, [r2, #4]
 8004b8e:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	e0b2      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	f04f 0344 	mov.w	r3, #68	; 0x44
 8004b9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d10c      	bne.n	8004bbe <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004bb4:	6852      	ldr	r2, [r2, #4]
 8004bb6:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	e09e      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	f04f 0358 	mov.w	r3, #88	; 0x58
 8004bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d10c      	bne.n	8004be6 <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	e08a      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	f04f 036c 	mov.w	r3, #108	; 0x6c
 8004bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d10c      	bne.n	8004c0e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c04:	6852      	ldr	r2, [r2, #4]
 8004c06:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e076      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d10c      	bne.n	8004c36 <DMA_DeInit+0x14e>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	e062      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004c3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d10c      	bne.n	8004c5e <DMA_DeInit+0x176>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	f042 020f 	orr.w	r2, r2, #15
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	e04e      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	f240 431c 	movw	r3, #1052	; 0x41c
 8004c64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10c      	bne.n	8004c86 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c7c:	6852      	ldr	r2, [r2, #4]
 8004c7e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	e03a      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004c8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d10c      	bne.n	8004cae <DMA_DeInit+0x1c6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8004c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ca4:	6852      	ldr	r2, [r2, #4]
 8004ca6:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	e026      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	f240 4344 	movw	r3, #1092	; 0x444
 8004cb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10c      	bne.n	8004cd6 <DMA_DeInit+0x1ee>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8004cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ccc:	6852      	ldr	r2, [r2, #4]
 8004cce:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	e012      	b.n	8004cfc <DMA_DeInit+0x214>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8004cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d10b      	bne.n	8004cfc <DMA_DeInit+0x214>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8004ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004cf4:	6852      	ldr	r2, [r2, #4]
 8004cf6:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8004cfa:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004cfc:	f107 070c 	add.w	r7, r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004d38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004d44:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004d50:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]
}
 8004d7e:	f107 0714 	add.w	r7, r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <DMA_StructInit>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	819a      	strh	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004de8:	f107 070c 	add.w	r7, r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e006      	b.n	8004e22 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
  }
}
 8004e22:	f107 070c 	add.w	r7, r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8004e38:	887a      	ldrh	r2, [r7, #2]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]
}
 8004e3e:	f107 070c 	add.w	r7, r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	b29b      	uxth	r3, r3
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	f107 070c 	add.w	r7, r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop

08004e64 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d006      	beq.n	8004e86 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e007      	b.n	8004e96 <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	ea6f 0303 	mvn.w	r3, r3
 8004e90:	401a      	ands	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]
  }
}
 8004e96:	f107 0714 	add.w	r7, r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8004ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	e005      	b.n	8004ed8 <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8004ee2:	f04f 0301 	mov.w	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
 8004ee8:	e002      	b.n	8004ef0 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f107 0714 	add.w	r7, r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8004f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	e005      	b.n	8004f2c <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	f107 070c 	add.w	r7, r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <DMA_GetITStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8004f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	e005      	b.n	8004f70 <DMA_GetITStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <DMA_GetITStatus+0x4a>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8004f7a:	f04f 0301 	mov.w	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e002      	b.n	8004f88 <DMA_GetITStatus+0x50>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f107 0714 	add.w	r7, r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
  
  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <DMA_ClearITPendingBit+0x20>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	e005      	b.n	8004fc4 <DMA_ClearITPendingBit+0x2c>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
  }
}
 8004fc4:	f107 070c 	add.w	r7, r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <EXTI_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  EXTI->IMR    = 0x1F800000;
 8004fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004fdc:	f04f 52fc 	mov.w	r2, #528482304	; 0x1f800000
 8004fe0:	601a      	str	r2, [r3, #0]
  EXTI->EMR    = 0x00000000;
 8004fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 8004ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005002:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 800500c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005010:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005022:	f06f 52fc 	mvn.w	r2, #528482304	; 0x1f800000
 8005026:	615a      	str	r2, [r3, #20]
  EXTI->IMR2   = 0x0000000C;
 8005028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005030:	f04f 020c 	mov.w	r2, #12
 8005034:	621a      	str	r2, [r3, #32]
  EXTI->EMR2   = 0x00000000;
 8005036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800503a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
  EXTI->RTSR2  = 0x00000000;
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	629a      	str	r2, [r3, #40]	; 0x28
  EXTI->FTSR2  = 0x00000000;
 8005052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005056:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c
  EXTI->SWIER2 = 0x00000000;
 8005060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005064:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
  EXTI->PR2    = 0x00000003;
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005076:	f04f 0203 	mov.w	r2, #3
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8005092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005096:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800509a:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	799b      	ldrb	r3, [r3, #6]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8111 	beq.w	80052c8 <EXTI_Init+0x244>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80050ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80050b2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80050b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80050c4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80050c8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80050cc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	f04f 0001 	mov.w	r0, #1
 80050de:	fa00 f303 	lsl.w	r3, r0, r3
 80050e2:	ea6f 0303 	mvn.w	r3, r3
 80050e6:	400b      	ands	r3, r1
 80050e8:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80050f2:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80050f6:	f240 4304 	movw	r3, #1028	; 0x404
 80050fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050fe:	18d3      	adds	r3, r2, r3
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800510a:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800510e:	f240 4304 	movw	r3, #1028	; 0x404
 8005112:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005116:	18cb      	adds	r3, r1, r3
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	f04f 0001 	mov.w	r0, #1
 8005126:	fa00 f303 	lsl.w	r3, r0, r3
 800512a:	ea6f 0303 	mvn.w	r3, r3
 800512e:	400b      	ands	r3, r1
 8005130:	6013      	str	r3, [r2, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	791b      	ldrb	r3, [r3, #4]
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005140:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	18d3      	adds	r3, r2, r3
 800514a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	f002 021f 	and.w	r2, r2, #31
 800515a:	f04f 0001 	mov.w	r0, #1
 800515e:	fa00 f202 	lsl.w	r2, r0, r2
 8005162:	430a      	orrs	r2, r1
 8005164:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800516e:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005178:	ea4f 1243 	mov.w	r2, r3, lsl #5
 800517c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005180:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005190:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8005194:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005198:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800519c:	18cb      	adds	r3, r1, r3
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	f04f 0001 	mov.w	r0, #1
 80051ac:	fa00 f303 	lsl.w	r3, r0, r3
 80051b0:	ea6f 0303 	mvn.w	r3, r3
 80051b4:	400b      	ands	r3, r1
 80051b6:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80051c0:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80051c4:	f240 430c 	movw	r3, #1036	; 0x40c
 80051c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80051d8:	ea4f 1143 	mov.w	r1, r3, lsl #5
 80051dc:	f240 430c 	movw	r3, #1036	; 0x40c
 80051e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051e4:	18cb      	adds	r3, r1, r3
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	f04f 0001 	mov.w	r0, #1
 80051f4:	fa00 f303 	lsl.w	r3, r0, r3
 80051f8:	ea6f 0303 	mvn.w	r3, r3
 80051fc:	400b      	ands	r3, r1
 80051fe:	6013      	str	r3, [r2, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	795b      	ldrb	r3, [r3, #5]
 8005204:	2b10      	cmp	r3, #16
 8005206:	d144      	bne.n	8005292 <EXTI_Init+0x20e>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005210:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005214:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005218:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005228:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800522c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8005230:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005234:	18cb      	adds	r3, r1, r3
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	f04f 0001 	mov.w	r0, #1
 8005244:	fa00 f303 	lsl.w	r3, r0, r3
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005254:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005258:	f240 430c 	movw	r3, #1036	; 0x40c
 800525c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005260:	18d3      	adds	r3, r2, r3
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800526c:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8005270:	f240 430c 	movw	r3, #1036	; 0x40c
 8005274:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005278:	18cb      	adds	r3, r1, r3
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	f04f 0001 	mov.w	r0, #1
 8005288:	fa00 f303 	lsl.w	r3, r0, r3
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e036      	b.n	8005300 <EXTI_Init+0x27c>
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	795b      	ldrb	r3, [r3, #5]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80052a0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	f002 021f 	and.w	r2, r2, #31
 80052ba:	f04f 0001 	mov.w	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e01b      	b.n	8005300 <EXTI_Init+0x27c>
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80052d6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	18d3      	adds	r3, r2, r3
 80052e0:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6811      	ldr	r1, [r2, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	f002 021f 	and.w	r2, r2, #31
 80052f0:	f04f 0001 	mov.w	r0, #1
 80052f4:	fa00 f202 	lsl.w	r2, r0, r2
 80052f8:	ea6f 0202 	mvn.w	r2, r2
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
  }
         
}
 8005300:	f107 0714 	add.w	r7, r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f04f 0210 	mov.w	r2, #16
 800532a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	719a      	strb	r2, [r3, #6]
}
 8005334:	f107 070c 	add.w	r7, r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800534e:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005352:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8005356:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005364:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8005368:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800536c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005370:	18cb      	adds	r3, r1, r3
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	f04f 0001 	mov.w	r0, #1
 800537e:	fa00 f303 	lsl.w	r3, r0, r3
 8005382:	430b      	orrs	r3, r1
 8005384:	6013      	str	r3, [r2, #0]

}
 8005386:	f107 070c 	add.w	r7, r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).                  
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80053a4:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80053a8:	f240 4314 	movw	r3, #1044	; 0x414
 80053ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053b0:	18d3      	adds	r3, r2, r3
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	f04f 0101 	mov.w	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <EXTI_GetFlagStatus+0x40>
  {
    bitstatus = SET;
 80053c8:	f04f 0301 	mov.w	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e002      	b.n	80053d6 <EXTI_GetFlagStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	f107 0714 	add.w	r7, r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80053f2:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80053f6:	f240 4314 	movw	r3, #1044	; 0x414
 80053fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f002 021f 	and.w	r2, r2, #31
 8005406:	f04f 0101 	mov.w	r1, #1
 800540a:	fa01 f202 	lsl.w	r2, r1, r2
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	f107 070c 	add.w	r7, r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005436:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800543a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800543e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	f04f 0101 	mov.w	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	4013      	ands	r3, r2
 8005454:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800545c:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8005460:	f240 4314 	movw	r3, #1044	; 0x414
 8005464:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005468:	18d3      	adds	r3, r2, r3
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	f04f 0101 	mov.w	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <EXTI_GetITStatus+0x72>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <EXTI_GetITStatus+0x72>
  {
    bitstatus = SET;
 8005486:	f04f 0301 	mov.w	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e002      	b.n	8005494 <EXTI_GetITStatus+0x78>
  }
  else
  {
    bitstatus = RESET;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8005496:	4618      	mov	r0, r3
 8005498:	f107 0714 	add.w	r7, r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop

080054a4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80054b2:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80054b6:	f240 4314 	movw	r3, #1044	; 0x414
 80054ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	f002 021f 	and.w	r2, r2, #31
 80054c6:	f04f 0101 	mov.w	r1, #1
 80054ca:	fa01 f202 	lsl.w	r2, r1, r2
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	f107 070c 	add.w	r7, r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop

080054dc <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054ea:	d10c      	bne.n	8005506 <GPIO_DeInit+0x2a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80054ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80054f0:	f04f 0101 	mov.w	r1, #1
 80054f4:	f001 fa1a 	bl	800692c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80054f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	f001 fa14 	bl	800692c <RCC_AHBPeriphResetCmd>
 8005504:	e062      	b.n	80055cc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOB)
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005510:	429a      	cmp	r2, r3
 8005512:	d10c      	bne.n	800552e <GPIO_DeInit+0x52>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8005514:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005518:	f04f 0101 	mov.w	r1, #1
 800551c:	f001 fa06 	bl	800692c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8005520:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	f001 fa00 	bl	800692c <RCC_AHBPeriphResetCmd>
 800552c:	e04e      	b.n	80055cc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOC)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005534:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005538:	429a      	cmp	r2, r3
 800553a:	d10c      	bne.n	8005556 <GPIO_DeInit+0x7a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800553c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005540:	f04f 0101 	mov.w	r1, #1
 8005544:	f001 f9f2 	bl	800692c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8005548:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	f001 f9ec 	bl	800692c <RCC_AHBPeriphResetCmd>
 8005554:	e03a      	b.n	80055cc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOD)
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800555c:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005560:	429a      	cmp	r2, r3
 8005562:	d10c      	bne.n	800557e <GPIO_DeInit+0xa2>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8005564:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005568:	f04f 0101 	mov.w	r1, #1
 800556c:	f001 f9de 	bl	800692c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8005570:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f001 f9d8 	bl	800692c <RCC_AHBPeriphResetCmd>
 800557c:	e026      	b.n	80055cc <GPIO_DeInit+0xf0>
  }
  else if(GPIOx == GPIOE)
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005584:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005588:	429a      	cmp	r2, r3
 800558a:	d10c      	bne.n	80055a6 <GPIO_DeInit+0xca>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800558c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005590:	f04f 0101 	mov.w	r1, #1
 8005594:	f001 f9ca 	bl	800692c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8005598:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	f001 f9c4 	bl	800692c <RCC_AHBPeriphResetCmd>
 80055a4:	e012      	b.n	80055cc <GPIO_DeInit+0xf0>
  }
  else
  {
    if(GPIOx == GPIOF)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80055ac:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10b      	bne.n	80055cc <GPIO_DeInit+0xf0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80055b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80055b8:	f04f 0101 	mov.w	r1, #1
 80055bc:	f001 f9b6 	bl	800692c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80055c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	f001 f9b0 	bl	800692c <RCC_AHBPeriphResetCmd>
    }
  }
}
 80055cc:	f107 0708 	add.w	r7, r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e08c      	b.n	8005712 <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f04f 0201 	mov.w	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4013      	ands	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d179      	bne.n	800570a <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d003      	beq.n	8005626 <GPIO_Init+0x52>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	791b      	ldrb	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d13a      	bne.n	800569c <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005630:	f04f 0103 	mov.w	r1, #3
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	ea6f 0303 	mvn.w	r3, r3
 800563c:	401a      	ands	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	795b      	ldrb	r3, [r3, #5]
 800564a:	4619      	mov	r1, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	889b      	ldrh	r3, [r3, #4]
 8005660:	b29a      	uxth	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f04f 0101 	mov.w	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 0303 	mvn.w	r3, r3
 8005674:	b29b      	uxth	r3, r3
 8005676:	4013      	ands	r3, r2
 8005678:	b29a      	uxth	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	889b      	ldrh	r3, [r3, #4]
 8005682:	b29a      	uxth	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	799b      	ldrb	r3, [r3, #6]
 8005688:	4619      	mov	r1, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	b29b      	uxth	r3, r3
 800568e:	fa01 f303 	lsl.w	r3, r1, r3
 8005692:	b29b      	uxth	r3, r3
 8005694:	4313      	orrs	r3, r2
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056a6:	f04f 0103 	mov.w	r1, #3
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	ea6f 0303 	mvn.w	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	791b      	ldrb	r3, [r3, #4]
 80056c0:	4619      	mov	r1, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056de:	f04f 0103 	mov.w	r1, #3
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	ea6f 0303 	mvn.w	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	79db      	ldrb	r3, [r3, #7]
 80056f8:	4619      	mov	r1, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f103 0301 	add.w	r3, r3, #1
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b0f      	cmp	r3, #15
 8005716:	f67f af6f 	bls.w	80055f8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800571a:	f107 071c 	add.w	r7, r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f04f 0202 	mov.w	r2, #2
 8005742:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	71da      	strb	r2, [r3, #7]
}
 8005754:	f107 070c 	add.w	r7, r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 800576c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005770:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005780:	887a      	ldrh	r2, [r7, #2]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	f107 0714 	add.w	r7, r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8a1b      	ldrh	r3, [r3, #16]
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	4013      	ands	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 80057c6:	f04f 0301 	mov.w	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e002      	b.n	80057d4 <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	f107 0714 	add.w	r7, r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8a1b      	ldrh	r3, [r3, #16]
 80057f0:	b29b      	uxth	r3, r3
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	f107 070c 	add.w	r7, r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8a9b      	ldrh	r3, [r3, #20]
 8005816:	b29a      	uxth	r2, r3
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	4013      	ands	r3, r2
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8005822:	f04f 0301 	mov.w	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e002      	b.n	8005830 <GPIO_ReadOutputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	f107 0714 	add.w	r7, r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop

08005840 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8a9b      	ldrh	r3, [r3, #20]
 800584c:	b29b      	uxth	r3, r3
}
 800584e:	4618      	mov	r0, r3
 8005850:	f107 070c 	add.w	r7, r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop

0800585c <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005868:	887a      	ldrh	r2, [r7, #2]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
}
 800586e:	f107 070c 	add.w	r7, r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800588a:	f107 070c 	add.w	r7, r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	460a      	mov	r2, r1
 80058a0:	807a      	strh	r2, [r7, #2]
 80058a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80058a4:	787b      	ldrb	r3, [r7, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
 80058b0:	e002      	b.n	80058b8 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	887a      	ldrh	r2, [r7, #2]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 80058b8:	f107 070c 	add.w	r7, r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	887a      	ldrh	r2, [r7, #2]
 80058d4:	829a      	strh	r2, [r3, #20]
}
 80058d6:	f107 070c 	add.w	r7, r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	460a      	mov	r2, r1
 80058ec:	807a      	strh	r2, [r7, #2]
 80058ee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80058fc:	787a      	ldrb	r2, [r7, #1]
 80058fe:	887b      	ldrh	r3, [r7, #2]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800590e:	887b      	ldrh	r3, [r7, #2]
 8005910:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800591e:	b29b      	uxth	r3, r3
 8005920:	4619      	mov	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f101 0108 	add.w	r1, r1, #8
 8005928:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800592c:	887b      	ldrh	r3, [r7, #2]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005936:	f04f 000f 	mov.w	r0, #15
 800593a:	fa00 f303 	lsl.w	r3, r0, r3
 800593e:	ea6f 0303 	mvn.w	r3, r3
 8005942:	4019      	ands	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f102 0208 	add.w	r2, r2, #8
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800594e:	887b      	ldrh	r3, [r7, #2]
 8005950:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f102 0208 	add.w	r2, r2, #8
 800595e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f102 0208 	add.w	r2, r2, #8
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800597e:	f107 0714 	add.w	r7, r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005990:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005994:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 800599e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80059a2:	60da      	str	r2, [r3, #12]
}
 80059a4:	f107 070c 	add.w	r7, r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	f04f 030f 	mov.w	r3, #15
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d047      	beq.n	8005a62 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80059d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80059d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	ea6f 0303 	mvn.w	r3, r3
 80059e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059e4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80059e8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f1c3 0304 	rsb	r3, r3, #4
 80059f0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	461a      	mov	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	789b      	ldrb	r3, [r3, #2]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4013      	ands	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a20:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005a22:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005a26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	185b      	adds	r3, r3, r1
 8005a36:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a3a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005a3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005a4a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	7809      	ldrb	r1, [r1, #0]
 8005a50:	f001 011f 	and.w	r1, r1, #31
 8005a54:	f04f 0001 	mov.w	r0, #1
 8005a58:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a60:	e014      	b.n	8005a8c <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a62:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005a66:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005a72:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	7809      	ldrb	r1, [r1, #0]
 8005a78:	f001 011f 	and.w	r1, r1, #31
 8005a7c:	f04f 0001 	mov.w	r0, #1
 8005a80:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a84:	f102 0220 	add.w	r2, r2, #32
 8005a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005a8c:	f107 071c 	add.w	r7, r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005aa2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005aa6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005ab0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
}
 8005aba:	f107 070c 	add.w	r7, r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	71fa      	strb	r2, [r7, #7]
 8005ad0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005ad2:	79bb      	ldrb	r3, [r7, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00c      	beq.n	8005af2 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8005ad8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005adc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005ae0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005ae4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005ae8:	6911      	ldr	r1, [r2, #16]
 8005aea:	79fa      	ldrb	r2, [r7, #7]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	611a      	str	r2, [r3, #16]
 8005af0:	e00d      	b.n	8005b0e <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005af2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005af6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005afa:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005afe:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005b02:	6911      	ldr	r1, [r2, #16]
 8005b04:	79fa      	ldrb	r2, [r7, #7]
 8005b06:	ea6f 0202 	mvn.w	r2, r2
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	611a      	str	r2, [r3, #16]
  }
}
 8005b0e:	f107 070c 	add.w	r7, r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d10c      	bne.n	8005b40 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005b26:	f24e 0310 	movw	r3, #57360	; 0xe010
 8005b2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005b2e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8005b32:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f042 0204 	orr.w	r2, r2, #4
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e00b      	b.n	8005b58 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005b40:	f24e 0310 	movw	r3, #57360	; 0xe010
 8005b44:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005b48:	f24e 0210 	movw	r2, #57360	; 0xe010
 8005b4c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	601a      	str	r2, [r3, #0]
  }
}
 8005b58:	f107 070c 	add.w	r7, r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop

08005b64 <RCC_DeInit>:
  * @note     LSI, LSE and RTC clocks                  
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8005b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005b96:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005baa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005be2:	6852      	ldr	r2, [r2, #4]
 8005be4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005be8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8005bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bf6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bfc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005c00:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8005c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c18:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 8005c1c:	f6c0 7300 	movt	r3, #3840	; 0xf00
 8005c20:	400b      	ands	r3, r1
 8005c22:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
}
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8005c42:	f241 0302 	movw	r3, #4098	; 0x1002
 8005c46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8005c50:	f241 0302 	movw	r3, #4098	; 0x1002
 8005c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	701a      	strb	r2, [r3, #0]

}
 8005c5c:	f107 070c 	add.w	r7, r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop

08005c68 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8005c80:	f04f 0011 	mov.w	r0, #17
 8005c84:	f000 ff00 	bl	8006a88 <RCC_GetFlagStatus>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f103 0301 	add.w	r3, r3, #1
 8005c92:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005c9a:	d002      	beq.n	8005ca2 <RCC_WaitForHSEStartUp+0x3a>
 8005c9c:	79bb      	ldrb	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ee      	beq.n	8005c80 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8005ca2:	f04f 0011 	mov.w	r0, #17
 8005ca6:	f000 feef 	bl	8006a88 <RCC_GetFlagStatus>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8005cb0:	f04f 0301 	mov.w	r3, #1
 8005cb4:	71fb      	strb	r3, [r7, #7]
 8005cb6:	e002      	b.n	8005cbe <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f107 0708 	add.w	r7, r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop

08005ccc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8005cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8005cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]
}
 8005d08:	f107 0714 	add.w	r7, r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop

08005d14 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005d26:	79fa      	ldrb	r2, [r7, #7]
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	f107 070c 	add.w	r7, r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8005d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d4c:	6a12      	ldr	r2, [r2, #32]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8005d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d64:	6a12      	ldr	r2, [r2, #32]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8005d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d7c:	6a11      	ldr	r1, [r2, #32]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	f107 070c 	add.w	r7, r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop

08005d90 <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8005d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005da4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005da8:	6a12      	ldr	r2, [r2, #32]
 8005daa:	f022 0218 	bic.w	r2, r2, #24
 8005dae:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8005db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005dbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005dc0:	6a11      	ldr	r1, [r2, #32]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	f107 070c 	add.w	r7, r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8005dde:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8005de2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005de6:	79fa      	ldrb	r2, [r7, #7]
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	f107 070c 	add.w	r7, r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8005dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005e14:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8005e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e26:	6851      	ldr	r1, [r2, #4]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4302      	orrs	r2, r0
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
}
 8005e32:	f107 070c 	add.w	r7, r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8005e46:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005e4a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005e4e:	79fa      	ldrb	r2, [r7, #7]
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	f107 070c 	add.w	r7, r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8005e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 030f 	bic.w	r3, r3, #15
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8005e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e92:	f107 0714 	add.w	r7, r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8005ea6:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8005eaa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8005eae:	79fa      	ldrb	r2, [r7, #7]
 8005eb0:	601a      	str	r2, [r3, #0]
}
 8005eb2:	f107 070c 	add.w	r7, r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <RCC_MCOConfig>:
  *     @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
  *     @arg RCC_MCOSource_PLLCLK_Div2: PLL clock selected.
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 8005ec6:	f241 0307 	movw	r3, #4103	; 0x1007
 8005eca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ece:	79fa      	ldrb	r2, [r7, #7]
 8005ed0:	701a      	strb	r2, [r3, #0]
}
 8005ed2:	f107 070c 	add.w	r7, r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8005eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
}
 8005f12:	f107 0714 	add.w	r7, r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8005f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 030c 	and.w	r3, r3, #12
 8005f30:	b2db      	uxtb	r3, r3
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop

08005f3c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8005f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5c:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]
}
 8005f72:	f107 0714 	add.w	r7, r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8005f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f9c:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
}
 8005fb2:	f107 0714 	add.w	r7, r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8005fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]
}
 8005ff6:	f107 0714 	add.w	r7, r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006000:	b480      	push	{r7}
 8006002:	b08b      	sub	sp, #44	; 0x2c
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800603c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b04      	cmp	r3, #4
 800604c:	d00a      	beq.n	8006064 <RCC_GetClocksFreq+0x64>
 800604e:	2b08      	cmp	r3, #8
 8006050:	d00f      	beq.n	8006072 <RCC_GetClocksFreq+0x72>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d148      	bne.n	80060e8 <RCC_GetClocksFreq+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800605c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006060:	6013      	str	r3, [r2, #0]
      break;
 8006062:	e048      	b.n	80060f6 <RCC_GetClocksFreq+0xf6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800606a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800606e:	6013      	str	r3, [r2, #0]
      break;
 8006070:	e041      	b.n	80060f6 <RCC_GetClocksFreq+0xf6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8006072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006080:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8006082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8006098:	f103 0302 	add.w	r3, r3, #2
 800609c:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <RCC_GetClocksFreq+0xb6>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80060aa:	f2c0 033d 	movt	r3, #61	; 0x3d
 80060ae:	fb03 f302 	mul.w	r3, r3, r2
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	e014      	b.n	80060e0 <RCC_GetClocksFreq+0xe0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80060b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	f103 0301 	add.w	r3, r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80060ca:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80060ce:	f2c0 037a 	movt	r3, #122	; 0x7a
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	601a      	str	r2, [r3, #0]
      break;
 80060e6:	e006      	b.n	80060f6 <RCC_GetClocksFreq+0xf6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80060ee:	f2c0 037a 	movt	r3, #122	; 0x7a
 80060f2:	6013      	str	r3, [r2, #0]
      break;
 80060f4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80060f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006104:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800610c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800610e:	f240 031c 	movw	r3, #28
 8006112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	189b      	adds	r3, r3, r2
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	fa22 f203 	lsr.w	r2, r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800612e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800613c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8006144:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8006146:	f240 031c 	movw	r3, #28
 800614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	189b      	adds	r3, r3, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	fa22 f203 	lsr.w	r2, r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006174:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800617c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800617e:	f240 031c 	movw	r3, #28
 8006182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006186:	6a3a      	ldr	r2, [r7, #32]
 8006188:	189b      	adds	r3, r3, r2
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	fa22 f203 	lsr.w	r2, r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800619e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ac:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80061b4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80061b6:	f240 032c 	movw	r3, #44	; 0x2c
 80061ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <RCC_GetClocksFreq+0x1e0>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]
 80061de:	e003      	b.n	80061e8 <RCC_GetClocksFreq+0x1e8>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80061e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80061f6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	ea4f 2353 	mov.w	r3, r3, lsr #9
 80061fe:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8006200:	f240 032c 	movw	r3, #44	; 0x2c
 8006204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800620e:	b29b      	uxth	r3, r3
 8006210:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d006      	beq.n	800622a <RCC_GetClocksFreq+0x22a>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	fbb2 f2f3 	udiv	r2, r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	615a      	str	r2, [r3, #20]
 8006228:	e003      	b.n	8006232 <RCC_GetClocksFreq+0x232>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8006232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <RCC_GetClocksFreq+0x252>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800624a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800624e:	6193      	str	r3, [r2, #24]
 8006250:	e003      	b.n	800625a <RCC_GetClocksFreq+0x25a>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800625a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800625e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <RCC_GetClocksFreq+0x27a>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006272:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006276:	61d3      	str	r3, [r2, #28]
 8006278:	e003      	b.n	8006282 <RCC_GetClocksFreq+0x282>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8006282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <RCC_GetClocksFreq+0x2b2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	429a      	cmp	r2, r3
 800629c:	d109      	bne.n	80062b2 <RCC_GetClocksFreq+0x2b2>
  && (apb2presc == ahbpresc)) 
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d105      	bne.n	80062b2 <RCC_GetClocksFreq+0x2b2>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	621a      	str	r2, [r3, #32]
 80062b0:	e003      	b.n	80062ba <RCC_GetClocksFreq+0x2ba>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80062ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <RCC_GetClocksFreq+0x2ea>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d109      	bne.n	80062ea <RCC_GetClocksFreq+0x2ea>
  && (apb2presc == ahbpresc))
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d105      	bne.n	80062ea <RCC_GetClocksFreq+0x2ea>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
 80062e8:	e003      	b.n	80062f2 <RCC_GetClocksFreq+0x2f2>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80062f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <RCC_GetClocksFreq+0x30e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
 800630c:	e02a      	b.n	8006364 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800630e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006312:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d104      	bne.n	800632a <RCC_GetClocksFreq+0x32a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28
 8006328:	e01c      	b.n	8006364 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800632a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800632e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d104      	bne.n	8006346 <RCC_GetClocksFreq+0x346>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006342:	629a      	str	r2, [r3, #40]	; 0x28
 8006344:	e00e      	b.n	8006364 <RCC_GetClocksFreq+0x364>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8006346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d105      	bne.n	8006364 <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800635e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006362:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8006364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006368:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <RCC_GetClocksFreq+0x380>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c
 800637e:	e02d      	b.n	80063dc <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8006380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d104      	bne.n	800639e <RCC_GetClocksFreq+0x39e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c
 800639c:	e01e      	b.n	80063dc <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800639e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b0:	d104      	bne.n	80063bc <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80063b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80063ba:	e00f      	b.n	80063dc <RCC_GetClocksFreq+0x3dc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80063bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063ce:	d105      	bne.n	80063dc <RCC_GetClocksFreq+0x3dc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80063d6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80063dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
 80063f6:	e02d      	b.n	8006454 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80063f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800640a:	d104      	bne.n	8006416 <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
 8006414:	e01e      	b.n	8006454 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8006416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800641a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006428:	d104      	bne.n	8006434 <RCC_GetClocksFreq+0x434>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
 8006432:	e00f      	b.n	8006454 <RCC_GetClocksFreq+0x454>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8006434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006438:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006442:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006446:	d105      	bne.n	8006454 <RCC_GetClocksFreq+0x454>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800644e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006452:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8006454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	635a      	str	r2, [r3, #52]	; 0x34
 800646e:	e02d      	b.n	80064cc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006482:	d104      	bne.n	800648e <RCC_GetClocksFreq+0x48e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	635a      	str	r2, [r3, #52]	; 0x34
 800648c:	e01e      	b.n	80064cc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800648e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006492:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800649c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064a0:	d104      	bne.n	80064ac <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80064a8:	635a      	str	r2, [r3, #52]	; 0x34
 80064aa:	e00f      	b.n	80064cc <RCC_GetClocksFreq+0x4cc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80064ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064be:	d105      	bne.n	80064cc <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80064c6:	f2c0 037a 	movt	r3, #122	; 0x7a
 80064ca:	6353      	str	r3, [r2, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80064cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <RCC_GetClocksFreq+0x4e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
 80064e6:	e02d      	b.n	8006544 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80064e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fa:	d104      	bne.n	8006506 <RCC_GetClocksFreq+0x506>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
 8006504:	e01e      	b.n	8006544 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8006506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800650a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006518:	d104      	bne.n	8006524 <RCC_GetClocksFreq+0x524>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
 8006522:	e00f      	b.n	8006544 <RCC_GetClocksFreq+0x544>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8006524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006536:	d105      	bne.n	8006544 <RCC_GetClocksFreq+0x544>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800653e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006542:	6393      	str	r3, [r2, #56]	; 0x38
  } 
}
 8006544:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8006564:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <RCC_ADCCLKConfig+0x36>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 800656c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006570:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006578:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800657c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800657e:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c
 8006584:	e00b      	b.n	800659e <RCC_ADCCLKConfig+0x4e>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8006586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800658a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800658e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006592:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006596:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006598:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800659e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80065b6:	f107 0714 	add.w	r7, r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80065d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <RCC_I2CCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80065dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065ee:	f022 0220 	bic.w	r2, r2, #32
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
 80065f4:	e00b      	b.n	800660e <RCC_I2CCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80065f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006602:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006608:	f022 0210 	bic.w	r2, r2, #16
 800660c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800660e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800661a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800661e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	430a      	orrs	r2, r1
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006626:	f107 0714 	add.w	r7, r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <RCC_TIMCLKConfig>:
  *     @arg RCC_TIMxCLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8006644:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00c      	beq.n	8006666 <RCC_TIMCLKConfig+0x36>
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 800664c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006650:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006658:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800665c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800665e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
 8006664:	e00b      	b.n	800667e <RCC_TIMCLKConfig+0x4e>
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8006666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800666a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800666e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006672:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006676:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 800667e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006682:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800668a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800668e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	430a      	orrs	r2, r1
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006696:	f107 0714 	add.w	r7, r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d84e      	bhi.n	800675e <RCC_USARTCLKConfig+0xbe>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <RCC_USARTCLKConfig+0x28>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066dd 	.word	0x080066dd
 80066cc:	080066f7 	.word	0x080066f7
 80066d0:	08006711 	.word	0x08006711
 80066d4:	0800672b 	.word	0x0800672b
 80066d8:	08006745 	.word	0x08006745
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80066dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066ee:	f022 0203 	bic.w	r2, r2, #3
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80066f4:	e034      	b.n	8006760 <RCC_USARTCLKConfig+0xc0>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 80066f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006702:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006708:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800670e:	e027      	b.n	8006760 <RCC_USARTCLKConfig+0xc0>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8006710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006714:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800671c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006722:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8006728:	e01a      	b.n	8006760 <RCC_USARTCLKConfig+0xc0>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 800672a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800672e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006732:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006736:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800673a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800673c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 8006742:	e00d      	b.n	8006760 <RCC_USARTCLKConfig+0xc0>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8006744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800674c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006750:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006756:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 800675c:	e000      	b.n	8006760 <RCC_USARTCLKConfig+0xc0>
    default:
      break;
 800675e:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8006760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800676c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006770:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	430a      	orrs	r2, r1
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006778:	f107 0714 	add.w	r7, r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800678c:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 8006790:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	f107 070c 	add.w	r7, r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80067ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067bc:	6a11      	ldr	r1, [r2, #32]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	f107 070c 	add.w	r7, r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80067d8:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 80067dc:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	f107 070c 	add.w	r7, r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop

080067f0 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80067fa:	f240 433c 	movw	r3, #1084	; 0x43c
 80067fe:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	601a      	str	r2, [r3, #0]
}
 8006806:	f107 070c 	add.w	r7, r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800681a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800681e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006822:	79fa      	ldrb	r2, [r7, #7]
 8006824:	601a      	str	r2, [r3, #0]
}
 8006826:	f107 070c 	add.w	r7, r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00c      	beq.n	800685c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8006842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006846:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800684e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006852:	6951      	ldr	r1, [r2, #20]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	430a      	orrs	r2, r1
 8006858:	615a      	str	r2, [r3, #20]
 800685a:	e00d      	b.n	8006878 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800685c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006860:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006868:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800686c:	6951      	ldr	r1, [r2, #20]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	ea6f 0202 	mvn.w	r2, r2
 8006874:	400a      	ands	r2, r1
 8006876:	615a      	str	r2, [r3, #20]
  }
}
 8006878:	f107 070c 	add.w	r7, r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8006896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800689a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800689e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80068a6:	6991      	ldr	r1, [r2, #24]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	619a      	str	r2, [r3, #24]
 80068ae:	e00d      	b.n	80068cc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80068b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80068c0:	6991      	ldr	r1, [r2, #24]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	ea6f 0202 	mvn.w	r2, r2
 80068c8:	400a      	ands	r2, r1
 80068ca:	619a      	str	r2, [r3, #24]
  }
}
 80068cc:	f107 070c 	add.w	r7, r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop

080068d8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00c      	beq.n	8006904 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80068ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80068fa:	69d1      	ldr	r1, [r2, #28]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	430a      	orrs	r2, r1
 8006900:	61da      	str	r2, [r3, #28]
 8006902:	e00d      	b.n	8006920 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800690c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006910:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006914:	69d1      	ldr	r1, [r2, #28]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	ea6f 0202 	mvn.w	r2, r2
 800691c:	400a      	ands	r2, r1
 800691e:	61da      	str	r2, [r3, #28]
  }
}
 8006920:	f107 070c 	add.w	r7, r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop

0800692c <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <RCC_AHBPeriphResetCmd+0x2c>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800693e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800694a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800694e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	430a      	orrs	r2, r1
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
 8006956:	e00d      	b.n	8006974 <RCC_AHBPeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8006958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800695c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006964:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006968:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	ea6f 0202 	mvn.w	r2, r2
 8006970:	400a      	ands	r2, r1
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006974:	f107 070c 	add.w	r7, r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop

08006980 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00c      	beq.n	80069ac <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8006992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800699a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800699e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069a2:	68d1      	ldr	r1, [r2, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e00d      	b.n	80069c8 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80069ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069bc:	68d1      	ldr	r1, [r2, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	ea6f 0202 	mvn.w	r2, r2
 80069c4:	400a      	ands	r2, r1
 80069c6:	60da      	str	r2, [r3, #12]
  }
}
 80069c8:	f107 070c 	add.w	r7, r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop

080069d4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80069e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069f6:	6911      	ldr	r1, [r2, #16]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	611a      	str	r2, [r3, #16]
 80069fe:	e00d      	b.n	8006a1c <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8006a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a10:	6911      	ldr	r1, [r2, #16]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	ea6f 0202 	mvn.w	r2, r2
 8006a18:	400a      	ands	r2, r1
 8006a1a:	611a      	str	r2, [r3, #16]
  }
}
 8006a1c:	f107 070c 	add.w	r7, r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	71fa      	strb	r2, [r7, #7]
 8006a34:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006a36:	79bb      	ldrb	r3, [r7, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8006a3c:	f241 0309 	movw	r3, #4105	; 0x1009
 8006a40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a44:	f241 0209 	movw	r2, #4105	; 0x1009
 8006a48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	b2d1      	uxtb	r1, r2
 8006a50:	79fa      	ldrb	r2, [r7, #7]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e010      	b.n	8006a7c <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8006a5a:	f241 0309 	movw	r3, #4105	; 0x1009
 8006a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a62:	f241 0209 	movw	r2, #4105	; 0x1009
 8006a66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a6a:	7812      	ldrb	r2, [r2, #0]
 8006a6c:	b2d1      	uxtb	r1, r2
 8006a6e:	79fa      	ldrb	r2, [r7, #7]
 8006a70:	ea6f 0202 	mvn.w	r2, r2
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	400a      	ands	r2, r1
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
  }
}
 8006a7c:	f107 070c 	add.w	r7, r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop

08006a88 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006a92:	f04f 0300 	mov.w	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8006ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e019      	b.n	8006af6 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8006ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006acc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e00f      	b.n	8006af6 <RCC_GetFlagStatus+0x6e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d106      	bne.n	8006aea <RCC_GetFlagStatus+0x62>
  {
    statusreg = RCC->CFGR;
 8006adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e005      	b.n	8006af6 <RCC_GetFlagStatus+0x6e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8006aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	fa22 f303 	lsr.w	r3, r2, r3
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <RCC_GetFlagStatus+0x8e>
  {
    bitstatus = SET;
 8006b0e:	f04f 0301 	mov.w	r3, #1
 8006b12:	74fb      	strb	r3, [r7, #19]
 8006b14:	e002      	b.n	8006b1c <RCC_GetFlagStatus+0x94>
  }
  else
  {
    bitstatus = RESET;
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f107 071c 	add.w	r7, r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop

08006b2c <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8006b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop

08006b50 <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8006b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8006b72:	f04f 0301 	mov.w	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	e002      	b.n	8006b80 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	f107 0714 	add.w	r7, r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8006b9a:	f241 030a 	movw	r3, #4106	; 0x100a
 8006b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ba2:	79fa      	ldrb	r2, [r7, #7]
 8006ba4:	701a      	strb	r2, [r3, #0]
}
 8006ba6:	f107 070c 	add.w	r7, r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006bbe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d10c      	bne.n	8006be0 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8006bc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006bca:	f04f 0101 	mov.w	r1, #1
 8006bce:	f7ff fed7 	bl	8006980 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8006bd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f7ff fed1 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8006bde:	e026      	b.n	8006c2e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006be6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d10c      	bne.n	8006c08 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8006bee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006bf2:	f04f 0101 	mov.w	r1, #1
 8006bf6:	f7ff feed 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8006bfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006bfe:	f04f 0100 	mov.w	r1, #0
 8006c02:	f7ff fee7 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8006c06:	e012      	b.n	8006c2e <SPI_I2S_DeInit+0x7e>
  }
  else
  {
    if (SPIx == SPI3)
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d10b      	bne.n	8006c2e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8006c16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006c1a:	f04f 0101 	mov.w	r1, #1
 8006c1e:	f7ff fed9 	bl	80069d4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8006c22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006c26:	f04f 0100 	mov.w	r1, #0
 8006c2a:	f7ff fed3 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8006c2e:	f107 0708 	add.w	r7, r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	801a      	strh	r2, [r3, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	805a      	strh	r2, [r3, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006c56:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f04f 0207 	mov.w	r2, #7
 8006c86:	821a      	strh	r2, [r3, #16]
}
 8006c88:	f107 070c 	add.w	r7, r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	885b      	ldrh	r3, [r3, #2]
 8006ca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cac:	d136      	bne.n	8006d1c <SPI_Init+0x88>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8006cb4:	89fb      	ldrh	r3, [r7, #14]
 8006cb6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006cba:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	881a      	ldrh	r2, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	88d9      	ldrh	r1, [r3, #6]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	891b      	ldrh	r3, [r3, #8]
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	8958      	ldrh	r0, [r3, #10]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	899b      	ldrh	r3, [r3, #12]
 8006cdc:	4303      	orrs	r3, r0
 8006cde:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006ce4:	4303      	orrs	r3, r0
 8006ce6:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	89fa      	ldrh	r2, [r7, #14]
 8006cfa:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	889b      	ldrh	r3, [r3, #4]
 8006d00:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8006d02:	89fb      	ldrh	r3, [r7, #14]
 8006d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d08:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	889a      	ldrh	r2, [r3, #4]
 8006d0e:	89fb      	ldrh	r3, [r7, #14]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	89fa      	ldrh	r2, [r7, #14]
 8006d18:	809a      	strh	r2, [r3, #4]
 8006d1a:	e035      	b.n	8006d88 <SPI_Init+0xf4>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	889b      	ldrh	r3, [r3, #4]
 8006d20:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8006d22:	89fb      	ldrh	r3, [r7, #14]
 8006d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d28:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	889a      	ldrh	r2, [r3, #4]
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	89fa      	ldrh	r2, [r7, #14]
 8006d38:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8006d46:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	88d9      	ldrh	r1, [r3, #6]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	891b      	ldrh	r3, [r3, #8]
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	8958      	ldrh	r0, [r3, #10]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	899b      	ldrh	r3, [r3, #12]
 8006d68:	4303      	orrs	r3, r0
 8006d6a:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8006d70:	4303      	orrs	r3, r0
 8006d72:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8006d74:	430b      	orrs	r3, r1
 8006d76:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	89fa      	ldrh	r2, [r7, #14]
 8006d86:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8b9b      	ldrh	r3, [r3, #28]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	8a1a      	ldrh	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	821a      	strh	r2, [r3, #16]
}
 8006da0:	f107 0714 	add.w	r7, r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	801a      	strh	r2, [r3, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	805a      	strh	r2, [r3, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	809a      	strh	r2, [r3, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	80da      	strh	r2, [r3, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f04f 0202 	mov.w	r2, #2
 8006dda:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	819a      	strh	r2, [r3, #12]
}
 8006de4:	f107 070c 	add.w	r7, r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop

08006df0 <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.     
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b096      	sub	sp, #88	; 0x58
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e02:	f04f 0302 	mov.w	r3, #2
 8006e06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8006e12:	f04f 0301 	mov.w	r3, #1
 8006e16:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  uint32_t tmp = 0;
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8b9b      	ldrh	r3, [r3, #28]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e30:	f023 030f 	bic.w	r3, r3, #15
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f04f 0202 	mov.w	r2, #2
 8006e40:	841a      	strh	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8b9b      	ldrh	r3, [r3, #28]
 8006e46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d108      	bne.n	8006e64 <I2S_Init+0x74>
  {
    i2sodd = (uint16_t)0;
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    i2sdiv = (uint16_t)2;   
 8006e5a:	f04f 0302 	mov.w	r3, #2
 8006e5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e62:	e061      	b.n	8006f28 <I2S_Init+0x138>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	889b      	ldrh	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <I2S_Init+0x86>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8006e6c:	f04f 0301 	mov.w	r3, #1
 8006e70:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006e74:	e003      	b.n	8006e7e <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8006e76:	f04f 0302 	mov.w	r3, #2
 8006e7a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8006e7e:	f107 0308 	add.w	r3, r7, #8
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff f8bc 	bl	8006000 <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	88db      	ldrh	r3, [r3, #6]
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e94:	d113      	bne.n	8006ebe <I2S_Init+0xce>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8006e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e98:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f103 0305 	add.w	r3, r3, #5
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	e016      	b.n	8006eec <I2S_Init+0xfc>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8006ebe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ec2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8006ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ecc:	4613      	mov	r3, r2
 8006ece:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006ed2:	189b      	adds	r3, r3, r2
 8006ed4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ed8:	461a      	mov	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f103 0305 	add.w	r3, r3, #5
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8006eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eee:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8006ef2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8006ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8006efa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8006f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8006f0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006f18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8006f1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f20:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006f24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8006f28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d903      	bls.n	8006f38 <I2S_Init+0x148>
 8006f30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f34:	2bff      	cmp	r3, #255	; 0xff
 8006f36:	d907      	bls.n	8006f48 <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 8006f38:	f04f 0302 	mov.w	r3, #2
 8006f3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    i2sodd = 0;
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	88da      	ldrh	r2, [r3, #6]
 8006f4c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f50:	4313      	orrs	r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	841a      	strh	r2, [r3, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	881a      	ldrh	r2, [r3, #0]
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	8859      	ldrh	r1, [r3, #2]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	889b      	ldrh	r3, [r3, #4]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	b299      	uxth	r1, r3
                       I2S_InitStruct->I2S_CPOL)));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
 8006f74:	430b      	orrs	r3, r1
 8006f76:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)(SPI_I2SCFGR_I2SMOD | I2S_InitStruct->I2S_Mode) | \
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                       (uint16_t)((uint16_t)((uint16_t)(I2S_InitStruct->I2S_Standard |I2S_InitStruct->I2S_DataFormat) |\
                       I2S_InitStruct->I2S_CPOL)));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006f92:	839a      	strh	r2, [r3, #28]
}
 8006f94:	f107 0758 	add.w	r7, r7, #88	; 0x58
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e007      	b.n	8006fd0 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	801a      	strh	r2, [r3, #0]
  }
}
 8006fd0:	f107 070c 	add.w	r7, r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop

08006fdc <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d008      	beq.n	8007000 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f043 0310 	orr.w	r3, r3, #16
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	809a      	strh	r2, [r3, #4]
 8006ffe:	e007      	b.n	8007010 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	889b      	ldrh	r3, [r3, #4]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f023 0310 	bic.w	r3, r3, #16
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	809a      	strh	r2, [r3, #4]
  }
}
 8007010:	f107 070c 	add.w	r7, r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop

0800701c <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8b9b      	ldrh	r3, [r3, #28]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	839a      	strh	r2, [r3, #28]
 800703e:	e007      	b.n	8007050 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8b9b      	ldrh	r3, [r3, #28]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	839a      	strh	r2, [r3, #28]
  }
}
 8007050:	f107 070c 	add.w	r7, r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop

0800705c <SPI_DataSizeConfig>:
  *     @arg SPI_DataSize_15b: Set data size to 15 bits
  *     @arg SPI_DataSize_16b: Set data size to 16 bits
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	81fb      	strh	r3, [r7, #14]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800707a:	81fb      	strh	r3, [r7, #14]
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 800707c:	89fa      	ldrh	r2, [r7, #14]
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	4313      	orrs	r3, r2
 8007082:	81fb      	strh	r3, [r7, #14]
  SPIx->CR2 = tmpreg;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	89fa      	ldrh	r2, [r7, #14]
 8007088:	809a      	strh	r2, [r3, #4]
}
 800708a:	f107 0714 	add.w	r7, r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <SPI_RxFIFOThresholdConfig>:
  *     @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
  *          level is greater or equal to 1/4. 
  * @retval None
  */
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	889b      	ldrh	r3, [r3, #4]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	809a      	strh	r2, [r3, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	889b      	ldrh	r3, [r3, #4]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	809a      	strh	r2, [r3, #4]
}
 80070c0:	f107 070c 	add.w	r7, r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop

080070cc <SPI_BiDirectionalLineConfig>:
  *     @arg SPI_Direction_Tx: Selects Tx transmission direction
  *     @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070de:	d108      	bne.n	80070f2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	e007      	b.n	8007102 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	801a      	strh	r2, [r3, #0]
  }
}
 8007102:	f107 070c 	add.w	r7, r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <SPI_NSSInternalSoftwareConfig>:
  *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800711e:	429a      	cmp	r2, r3
 8007120:	d008      	beq.n	8007134 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	e007      	b.n	8007144 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	801a      	strh	r2, [r3, #0]
  }
}
 8007144:	f107 070c 	add.w	r7, r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop

08007150 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	81bb      	strh	r3, [r7, #12]
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8b9b      	ldrh	r3, [r3, #28]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007170:	f023 030f 	bic.w	r3, r3, #15
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f04f 0202 	mov.w	r2, #2
 8007180:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8b9b      	ldrh	r3, [r3, #28]
 8007186:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007190:	d003      	beq.n	800719a <I2S_FullDuplexConfig+0x4a>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	81fb      	strh	r3, [r7, #14]
 80071a0:	e00c      	b.n	80071bc <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071aa:	d004      	beq.n	80071b6 <I2S_FullDuplexConfig+0x66>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b4:	d102      	bne.n	80071bc <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	885a      	ldrh	r2, [r3, #2]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80071c8:	430b      	orrs	r3, r1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	89bb      	ldrh	r3, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071e0:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	89ba      	ldrh	r2, [r7, #12]
 80071e6:	839a      	strh	r2, [r3, #28]
}
 80071e8:	f107 0714 	add.w	r7, r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d008      	beq.n	8007218 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	889b      	ldrh	r3, [r3, #4]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f043 0304 	orr.w	r3, r3, #4
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	809a      	strh	r2, [r3, #4]
 8007216:	e007      	b.n	8007228 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	889b      	ldrh	r3, [r3, #4]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f023 0304 	bic.w	r3, r3, #4
 8007222:	b29a      	uxth	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	809a      	strh	r2, [r3, #4]
  }
}
 8007228:	f107 070c 	add.w	r7, r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop

08007234 <SPI_NSSPulseModeCmd>:
  * @param  NewState: new state of the NSS pulse management mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <SPI_NSSPulseModeCmd+0x24>
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	889b      	ldrh	r3, [r3, #4]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	809a      	strh	r2, [r3, #4]
 8007256:	e007      	b.n	8007268 <SPI_NSSPulseModeCmd+0x34>
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	889b      	ldrh	r3, [r3, #4]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f023 0308 	bic.w	r3, r3, #8
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	809a      	strh	r2, [r3, #4]
  }
}
 8007268:	f107 070c 	add.w	r7, r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop

08007274 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f103 030c 	add.w	r3, r3, #12
 8007290:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	701a      	strb	r2, [r3, #0]
}
 8007298:	f107 0714 	add.w	r7, r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	887a      	ldrh	r2, [r7, #2]
 80072b4:	819a      	strh	r2, [r3, #12]
}
 80072b6:	f107 070c 	add.w	r7, r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f103 030c 	add.w	r3, r3, #12
 80072d8:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b2db      	uxtb	r3, r3
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	f107 0714 	add.w	r7, r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	899b      	ldrh	r3, [r3, #12]
 80072f8:	b29b      	uxth	r3, r3
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	f107 070c 	add.w	r7, r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop

08007308 <SPI_CRCLengthConfig>:
  *     @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
  *     @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
  * @retval None
  */
void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800731e:	b29a      	uxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	801a      	strh	r2, [r3, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	887b      	ldrh	r3, [r7, #2]
 800732c:	4313      	orrs	r3, r2
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	801a      	strh	r2, [r3, #0]
}
 8007334:	f107 070c 	add.w	r7, r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop

08007340 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e007      	b.n	8007374 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	801a      	strh	r2, [r3, #0]
  }
}
 8007374:	f107 070c 	add.w	r7, r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop

08007380 <SPI_TransmitCRC>:
  * @brief  Transmits the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	801a      	strh	r2, [r3, #0]
}
 8007398:	f107 070c 	add.w	r7, r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d003      	beq.n	80073c4 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8b1b      	ldrh	r3, [r3, #24]
 80073c0:	81fb      	strh	r3, [r7, #14]
 80073c2:	e002      	b.n	80073ca <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8a9b      	ldrh	r3, [r3, #20]
 80073c8:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80073ca:	89fb      	ldrh	r3, [r7, #14]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	f107 0714 	add.w	r7, r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8a1b      	ldrh	r3, [r3, #16]
 80073e4:	b29b      	uxth	r3, r3
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	f107 070c 	add.w	r7, r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop

080073f4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	460a      	mov	r2, r1
 8007400:	807a      	strh	r2, [r7, #2]
 8007402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8007404:	787b      	ldrb	r3, [r7, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	889b      	ldrh	r3, [r3, #4]
 800740e:	b29a      	uxth	r2, r3
 8007410:	887b      	ldrh	r3, [r7, #2]
 8007412:	4313      	orrs	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	809a      	strh	r2, [r3, #4]
 800741a:	e00a      	b.n	8007432 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	889b      	ldrh	r3, [r3, #4]
 8007420:	b29a      	uxth	r2, r3
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	ea6f 0303 	mvn.w	r3, r3
 8007428:	b29b      	uxth	r3, r3
 800742a:	4013      	ands	r3, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	809a      	strh	r2, [r3, #4]
  }
}
 8007432:	f107 070c 	add.w	r7, r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <SPI_LastDMATransferCmd>:
  *     @arg SPI_LastDMATransfer_TxOddRxOdd: RNumber of data for transmission Odd
  *          and number of data for reception Odd.
  * @retval None
  */
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	889b      	ldrh	r3, [r3, #4]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	809a      	strh	r2, [r3, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	889b      	ldrh	r3, [r3, #4]
 800745c:	b29a      	uxth	r2, r3
 800745e:	887b      	ldrh	r3, [r7, #2]
 8007460:	4313      	orrs	r3, r2
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	809a      	strh	r2, [r3, #4]
}
 8007468:	f107 070c 	add.w	r7, r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	4613      	mov	r3, r2
 800747e:	460a      	mov	r2, r1
 8007480:	70fa      	strb	r2, [r7, #3]
 8007482:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	81fb      	strh	r3, [r7, #14]
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8007496:	b2db      	uxtb	r3, r3
 8007498:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	f04f 0201 	mov.w	r2, #1
 80074a0:	fa02 f303 	lsl.w	r3, r2, r3
 80074a4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80074a6:	78bb      	ldrb	r3, [r7, #2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	889b      	ldrh	r3, [r3, #4]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	89bb      	ldrh	r3, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	809a      	strh	r2, [r3, #4]
 80074bc:	e00a      	b.n	80074d4 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	889b      	ldrh	r3, [r3, #4]
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	89bb      	ldrh	r3, [r7, #12]
 80074c6:	ea6f 0303 	mvn.w	r3, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4013      	ands	r3, r2
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	809a      	strh	r2, [r3, #4]
  }
}
 80074d4:	f107 0714 	add.w	r7, r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <SPI_GetTransmissionFIFOStatus>:
  *   - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	891b      	ldrh	r3, [r3, #8]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80074f2:	b29b      	uxth	r3, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	f107 070c 	add.w	r7, r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <SPI_GetReceptionFIFOStatus>:
  *   - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
  *   - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
  *   - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	891b      	ldrh	r3, [r3, #8]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007512:	b29b      	uxth	r3, r3
}
 8007514:	4618      	mov	r0, r3
 8007516:	f107 070c 	add.w	r7, r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	891b      	ldrh	r3, [r3, #8]
 8007536:	b29a      	uxth	r2, r3
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	4013      	ands	r3, r2
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8007542:	f04f 0301 	mov.w	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e002      	b.n	8007550 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	f107 0714 	add.w	r7, r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop

08007560 <SPI_I2S_ClearFlag>:
  *       operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *       write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800756c:	887b      	ldrh	r3, [r7, #2]
 800756e:	ea6f 0303 	mvn.w	r3, r3
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	811a      	strh	r2, [r3, #8]
}
 8007578:	f107 070c 	add.w	r7, r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <SPI_I2S_GetITStatus>:
  *     @arg I2S_IT_UDR: Underrun interrupt.  
  *     @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	81bb      	strh	r3, [r7, #12]
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	817b      	strh	r3, [r7, #10]
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	f04f 0201 	mov.w	r2, #1
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80075c2:	897b      	ldrh	r3, [r7, #10]
 80075c4:	f04f 0201 	mov.w	r2, #1
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	889b      	ldrh	r3, [r3, #4]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	897b      	ldrh	r3, [r7, #10]
 80075d6:	4013      	ands	r3, r2
 80075d8:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	891b      	ldrh	r3, [r3, #8]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	89bb      	ldrh	r3, [r7, #12]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <SPI_I2S_GetITStatus+0x74>
 80075ea:	893b      	ldrh	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80075f0:	f04f 0301 	mov.w	r3, #1
 80075f4:	73fb      	strb	r3, [r7, #15]
 80075f6:	e002      	b.n	80075fe <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	f107 0714 	add.w	r7, r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <SYSCFG_DeInit>:
  * @retval None
  * @note   MEM_MODE bits are not affected by APB reset.
  *         MEM_MODE bits took the value from the user option bytes.
  */
void SYSCFG_DeInit(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	f002 0203 	and.w	r2, r2, #3
 8007626:	601a      	str	r2, [r3, #0]
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	f042 42f8 	orr.w	r2, r2, #2080374784	; 0x7c000000
 800763e:	601a      	str	r2, [r3, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value */
  SYSCFG->CFGR2 = 0;
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
}
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <SYSCFG_MemoryRemapConfig>:
  *     @arg SYSCFG_MemoryRemap_SystemMemory: System Flash memory mapped at 0x00000000
  *     @arg SYSCFG_MemoryRemap_SRAM: Embedded SRAM mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr1 = 0;
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpcfgr1 = SYSCFG->CFGR1;
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Clear MEM_MODE bits */
  tmpcfgr1 &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Set the new MEM_MODE bits value */
  tmpcfgr1 |= (uint32_t) SYSCFG_MemoryRemap;
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpcfgr1;
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
}
 80076d2:	f107 0714 	add.w	r7, r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <SYSCFG_DMAChannelRemapConfig>:
  *           use SYSCFG_DMAChannelRemapConfig(SYSCFG_DMARemap_TIM17, Disable)
  *           to map TIM17 DMA requests to DMA1 channel 1 (default mapping)
  * @retval None
  */
void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <SYSCFG_DMAChannelRemapConfig+0x2c>
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80076fe:	6811      	ldr	r1, [r2, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	430a      	orrs	r2, r1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	e00d      	b.n	8007724 <SYSCFG_DMAChannelRemapConfig+0x48>
  }
  else
  {
    /* use the default DMA channel mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	ea6f 0202 	mvn.w	r2, r2
 8007720:	400a      	ands	r2, r1
 8007722:	601a      	str	r2, [r3, #0]
  }
}
 8007724:	f107 070c 	add.w	r7, r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop

08007730 <SYSCFG_TriggerRemapConfig>:
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_TriggerRemapConfig(uint32_t SYSCFG_TriggerRemap, FunctionalState NewState)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_TRIGGER_REMAP(SYSCFG_TriggerRemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <SYSCFG_TriggerRemapConfig+0x2c>
  {
    /* Remap the trigger */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007752:	6811      	ldr	r1, [r2, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	430a      	orrs	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e00d      	b.n	8007778 <SYSCFG_TriggerRemapConfig+0x48>
  }
  else
  {
    /* Use the default trigger mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_TriggerRemap);
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	ea6f 0202 	mvn.w	r2, r2
 8007774:	400a      	ands	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
  }
}
 8007778:	f107 070c 	add.w	r7, r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <SYSCFG_EncoderRemapConfig>:
  *     @arg SYSCFG_EncoderRemap_TIM3: Timer 3 IC1 and IC2 connected to TIM15 IC1 and IC2
  *     @arg SYSCFG_EncoderRemap_TIM4: Timer 4 IC1 and IC2 connected to TIM15 IC1 and IC2
  * @retval None
  */
void SYSCFG_EncoderRemapConfig(uint32_t SYSCFG_EncoderRemap)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ENCODER_REMAP(SYSCFG_EncoderRemap));

  /* Reset the encoder mode remapping bits */
  SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_CFGR1_ENCODER_MODE);
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80077a2:	601a      	str	r2, [r3, #0]

  /* Set the selected configuration */
  SYSCFG->CFGR1 |= (uint32_t)(SYSCFG_EncoderRemap);
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]
}
 80077bc:	f107 070c 	add.w	r7, r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop

080077c8 <SYSCFG_USBInterruptLineRemapCmd>:
  *         @arg  USB Device Low Priority (USB_LP) interrupt mapped to line 20.
  *         @arg  USB Wakeup Interrupt (USB_WKUP) interrupt mapped to line 42.
  * @retval None
  */
void SYSCFG_USBInterruptLineRemapCmd(FunctionalState NewState)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Remap the USB interupt lines */
  *(__IO uint32_t *) CFGR1_USBITRMP_BB = (uint32_t)NewState;
 80077d2:	f04f 0314 	mov.w	r3, #20
 80077d6:	f2c4 2320 	movt	r3, #16928	; 0x4220
 80077da:	79fa      	ldrb	r2, [r7, #7]
 80077dc:	601a      	str	r2, [r3, #0]
}
 80077de:	f107 070c 	add.w	r7, r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <SYSCFG_I2CFastModePlusConfig>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using SYSCFG_I2CFastModePlus_I2C2 parameter.
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <SYSCFG_I2CFastModePlusConfig+0x2c>
  {
    /* Enable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 80077fa:	f04f 0300 	mov.w	r3, #0
 80077fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800780a:	6811      	ldr	r1, [r2, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	430a      	orrs	r2, r1
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e00d      	b.n	8007830 <SYSCFG_I2CFastModePlusConfig+0x48>
  }
  else
  {
    /* Disable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	ea6f 0202 	mvn.w	r2, r2
 800782c:	400a      	ands	r2, r1
 800782e:	601a      	str	r2, [r3, #0]
  }
}
 8007830:	f107 070c 	add.w	r7, r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop

0800783c <SYSCFG_ITConfig>:
  * @param  NewState: new state of the specified SYSCFG interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState)  
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <SYSCFG_ITConfig+0x2c>
  {
    /* Enable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 |= SYSCFG_IT;
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800785e:	6811      	ldr	r1, [r2, #0]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	430a      	orrs	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e00d      	b.n	8007884 <SYSCFG_ITConfig+0x48>
  }
  else
  {
    /* Disable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007878:	6811      	ldr	r1, [r2, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	ea6f 0202 	mvn.w	r2, r2
 8007880:	400a      	ands	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
  }
}
 8007884:	f107 070c 	add.w	r7, r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop

08007890 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8007890:	b490      	push	{r4, r7}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	71fa      	strb	r2, [r7, #7]
 800789c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80078a4:	79bb      	ldrb	r3, [r7, #6]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80078ae:	f04f 020f 	mov.w	r2, #15
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80078c0:	79ba      	ldrb	r2, [r7, #6]
 80078c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	4610      	mov	r0, r2
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80078d2:	79b9      	ldrb	r1, [r7, #6]
 80078d4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80078d8:	b2c9      	uxtb	r1, r1
 80078da:	f101 0102 	add.w	r1, r1, #2
 80078de:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	ea6f 0202 	mvn.w	r2, r2
 80078e8:	4011      	ands	r1, r2
 80078ea:	f100 0202 	add.w	r2, r0, #2
 80078ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80078fa:	79ba      	ldrb	r2, [r7, #6]
 80078fc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	4610      	mov	r0, r2
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800790c:	79b9      	ldrb	r1, [r7, #6]
 800790e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8007912:	b2c9      	uxtb	r1, r1
 8007914:	f101 0102 	add.w	r1, r1, #2
 8007918:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800791c:	79fc      	ldrb	r4, [r7, #7]
 800791e:	79ba      	ldrb	r2, [r7, #6]
 8007920:	f002 0203 	and.w	r2, r2, #3
 8007924:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007928:	fa04 f202 	lsl.w	r2, r4, r2
 800792c:	4311      	orrs	r1, r2
 800792e:	f100 0202 	add.w	r2, r0, #2
 8007932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007936:	f107 0710 	add.w	r7, r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bc90      	pop	{r4, r7}
 800793e:	4770      	bx	lr

08007940 <SYSCFG_BreakConfig>:
  *     @arg SYSCFG_Break_SRAMParity: SRAM Parity error is connected to the break input of TIM1.
  *     @arg SYSCFG_Break_HardFault: Lockup output of CortexM4 is connected to the break input of TIM1.
  * @retval None
  */
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007958:	6991      	ldr	r1, [r2, #24]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	430a      	orrs	r2, r1
 800795e:	619a      	str	r2, [r3, #24]
}
 8007960:	f107 070c 	add.w	r7, r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop

0800796c <SYSCFG_BypassParityCheckDisable>:
  *         To re-enable the parity check on RAM perform a system reset.  
  * @param  None
  * @retval None
  */
void SYSCFG_BypassParityCheckDisable(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  /* Disable the adddress parity check on RAM */
  *(__IO uint32_t *) CFGR1_BYPADDRPAR_BB = (uint32_t)0x00000001;
 8007970:	f44f 7344 	mov.w	r3, #784	; 0x310
 8007974:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8007978:	f04f 0201 	mov.w	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
}
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <SYSCFG_SRAMWRPEnable>:
  *         To disable the ICODE SRAM write protection perform a system reset.
  * @param  None
  * @retval None
  */
void SYSCFG_SRAMWRPEnable(uint32_t SYSCFG_SRAMWRP)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_PAGE(SYSCFG_SRAMWRP));

  /* Enable the write-protection on the selected ICODE SRAM page */
  SYSCFG->RCR |= (uint32_t)SYSCFG_SRAMWRP;
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800799c:	6851      	ldr	r1, [r2, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
}
 80079a4:	f107 070c 	add.w	r7, r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop

080079b0 <SYSCFG_GetFlagStatus>:
  *   This parameter can be one of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval The new state of SYSCFG_Flag (SET or RESET).
  */
FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <SYSCFG_GetFlagStatus+0x28>
  {
    /* SYSCFG_Flag is set */
    bitstatus = SET;
 80079d0:	f04f 0301 	mov.w	r3, #1
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	e002      	b.n	80079de <SYSCFG_GetFlagStatus+0x2e>
  }
  else
  {
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	f107 0714 	add.w	r7, r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <SYSCFG_ClearFlag>:
  *   This parameter can be any combination of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval None
  */
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007a04:	6991      	ldr	r1, [r2, #24]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	619a      	str	r2, [r3, #24]
}
 8007a0c:	f107 070c 	add.w	r7, r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop

08007a18 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007a26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d10c      	bne.n	8007a48 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007a2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a32:	f04f 0101 	mov.w	r1, #1
 8007a36:	f7fe ffa3 	bl	8006980 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8007a3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a3e:	f04f 0100 	mov.w	r1, #0
 8007a42:	f7fe ff9d 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8007a46:	e0af      	b.n	8007ba8 <TIM_DeInit+0x190>
  } 
  else if (TIMx == TIM2) 
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4e:	d10c      	bne.n	8007a6a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8007a50:	f04f 0001 	mov.w	r0, #1
 8007a54:	f04f 0101 	mov.w	r1, #1
 8007a58:	f7fe ffbc 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8007a5c:	f04f 0001 	mov.w	r0, #1
 8007a60:	f04f 0100 	mov.w	r1, #0
 8007a64:	f7fe ffb6 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8007a68:	e09e      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM3)
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d10c      	bne.n	8007a92 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8007a78:	f04f 0002 	mov.w	r0, #2
 8007a7c:	f04f 0101 	mov.w	r1, #1
 8007a80:	f7fe ffa8 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8007a84:	f04f 0002 	mov.w	r0, #2
 8007a88:	f04f 0100 	mov.w	r1, #0
 8007a8c:	f7fe ffa2 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8007a90:	e08a      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM4)
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d10c      	bne.n	8007aba <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8007aa0:	f04f 0004 	mov.w	r0, #4
 8007aa4:	f04f 0101 	mov.w	r1, #1
 8007aa8:	f7fe ff94 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8007aac:	f04f 0004 	mov.w	r0, #4
 8007ab0:	f04f 0100 	mov.w	r1, #0
 8007ab4:	f7fe ff8e 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8007ab8:	e076      	b.n	8007ba8 <TIM_DeInit+0x190>
  }   
  else if (TIMx == TIM6)  
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ac0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d10c      	bne.n	8007ae2 <TIM_DeInit+0xca>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8007ac8:	f04f 0010 	mov.w	r0, #16
 8007acc:	f04f 0101 	mov.w	r1, #1
 8007ad0:	f7fe ff80 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8007ad4:	f04f 0010 	mov.w	r0, #16
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	f7fe ff7a 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8007ae0:	e062      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM7)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007ae8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d10c      	bne.n	8007b0a <TIM_DeInit+0xf2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8007af0:	f04f 0020 	mov.w	r0, #32
 8007af4:	f04f 0101 	mov.w	r1, #1
 8007af8:	f7fe ff6c 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8007afc:	f04f 0020 	mov.w	r0, #32
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	f7fe ff66 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8007b08:	e04e      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM8)
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007b10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d10c      	bne.n	8007b32 <TIM_DeInit+0x11a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8007b18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b1c:	f04f 0101 	mov.w	r1, #1
 8007b20:	f7fe ff2e 	bl	8006980 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8007b24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b28:	f04f 0100 	mov.w	r1, #0
 8007b2c:	f7fe ff28 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8007b30:	e03a      	b.n	8007ba8 <TIM_DeInit+0x190>
  }    
  else if (TIMx == TIM15)
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b38:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d10c      	bne.n	8007b5a <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8007b40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007b44:	f04f 0101 	mov.w	r1, #1
 8007b48:	f7fe ff1a 	bl	8006980 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8007b4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007b50:	f04f 0100 	mov.w	r1, #0
 8007b54:	f7fe ff14 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8007b58:	e026      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else if (TIMx == TIM16) 
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8007b60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d10c      	bne.n	8007b82 <TIM_DeInit+0x16a>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8007b68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007b6c:	f04f 0101 	mov.w	r1, #1
 8007b70:	f7fe ff06 	bl	8006980 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8007b74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	f7fe ff00 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8007b80:	e012      	b.n	8007ba8 <TIM_DeInit+0x190>
  }  
  else
  { 
    if (TIMx == TIM17) 
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8007b88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d10b      	bne.n	8007ba8 <TIM_DeInit+0x190>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8007b90:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007b94:	f04f 0101 	mov.w	r1, #1
 8007b98:	f7fe fef2 	bl	8006980 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8007b9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007ba0:	f04f 0100 	mov.w	r1, #0
 8007ba4:	f7fe feec 	bl	8006980 <RCC_APB2PeriphResetCmd>
    }   
  }
}
 8007ba8:	f107 0708 	add.w	r7, r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007bcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d018      	beq.n	8007c06 <TIM_TimeBaseInit+0x56>
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007bda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d011      	beq.n	8007c06 <TIM_TimeBaseInit+0x56>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be8:	d00d      	beq.n	8007c06 <TIM_TimeBaseInit+0x56>
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d006      	beq.n	8007c06 <TIM_TimeBaseInit+0x56>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bfe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d108      	bne.n	8007c18 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	885a      	ldrh	r2, [r3, #2]
 8007c12:	89fb      	ldrh	r3, [r7, #14]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d00f      	beq.n	8007c46 <TIM_TimeBaseInit+0x96>
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d008      	beq.n	8007c46 <TIM_TimeBaseInit+0x96>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8007c34:	89fb      	ldrh	r3, [r7, #14]
 8007c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	891a      	ldrh	r2, [r3, #8]
 8007c40:	89fb      	ldrh	r3, [r7, #14]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	89fa      	ldrh	r2, [r7, #14]
 8007c4a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007c62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d01b      	beq.n	8007ca2 <TIM_TimeBaseInit+0xf2>
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007c70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d014      	beq.n	8007ca2 <TIM_TimeBaseInit+0xf2>
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d00d      	beq.n	8007ca2 <TIM_TimeBaseInit+0xf2>
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8007c8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d006      	beq.n	8007ca2 <TIM_TimeBaseInit+0xf2>
      (TIMx == TIM16) || (TIMx == TIM17))  
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8007c9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d104      	bne.n	8007cac <TIM_TimeBaseInit+0xfc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	7a9b      	ldrb	r3, [r3, #10]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f04f 0201 	mov.w	r2, #1
 8007cb2:	615a      	str	r2, [r3, #20]
}
 8007cb4:	f107 0714 	add.w	r7, r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	729a      	strb	r2, [r3, #10]
}
 8007cf0:	f107 070c 	add.w	r7, r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop

08007cfc <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	460a      	mov	r2, r1
 8007d08:	807a      	strh	r2, [r7, #2]
 8007d0a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	887a      	ldrh	r2, [r7, #2]
 8007d10:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8007d12:	883a      	ldrh	r2, [r7, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	615a      	str	r2, [r3, #20]
}
 8007d18:	f107 070c 	add.w	r7, r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop

08007d24 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8007d44:	89fa      	ldrh	r2, [r7, #14]
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	89fa      	ldrh	r2, [r7, #14]
 8007d50:	801a      	strh	r2, [r3, #0]
}
 8007d52:	f107 0714 	add.w	r7, r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007d6c:	f107 070c 	add.w	r7, r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop

08007d78 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007d88:	f107 070c 	add.w	r7, r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	f107 070c 	add.w	r7, r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db8:	b29b      	uxth	r3, r3
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f107 070c 	add.w	r7, r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop

08007dc8 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e007      	b.n	8007dfc <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f023 0302 	bic.w	r3, r3, #2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	801a      	strh	r2, [r3, #0]
  }
}
 8007dfc:	f107 070c 	add.w	r7, r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop

08007e08 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8007e14:	887b      	ldrh	r3, [r7, #2]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f043 0304 	orr.w	r3, r3, #4
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e007      	b.n	8007e3c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f023 0304 	bic.w	r3, r3, #4
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	801a      	strh	r2, [r3, #0]
  }
}
 8007e3c:	f107 070c 	add.w	r7, r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e007      	b.n	8007e7c <TIM_UIFRemap+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	801a      	strh	r2, [r3, #0]
  }  
}
 8007e7c:	f107 070c 	add.w	r7, r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop

08007e88 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d008      	beq.n	8007eac <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e007      	b.n	8007ebc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	801a      	strh	r2, [r3, #0]
  }
}
 8007ebc:	f107 070c 	add.w	r7, r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop

08007ec8 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f023 0308 	bic.w	r3, r3, #8
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	801a      	strh	r2, [r3, #0]
}
 8007ef4:	f107 070c 	add.w	r7, r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	887b      	ldrh	r3, [r7, #2]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	801a      	strh	r2, [r3, #0]
}
 8007f2c:	f107 070c 	add.w	r7, r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e007      	b.n	8007f6c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	801a      	strh	r2, [r3, #0]
  }
}
 8007f6c:	f107 070c 	add.w	r7, r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop

08007f78 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f023 0201 	bic.w	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f023 0302 	bic.w	r3, r3, #2
 8007fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	899b      	ldrh	r3, [r3, #12]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	889b      	ldrh	r3, [r3, #4]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007ff2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d01b      	beq.n	8008032 <TIM_OC1Init+0xba>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008000:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008004:	429a      	cmp	r2, r3
 8008006:	d014      	beq.n	8008032 <TIM_OC1Init+0xba>
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800800e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008012:	429a      	cmp	r2, r3
 8008014:	d00d      	beq.n	8008032 <TIM_OC1Init+0xba>
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800801c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008020:	429a      	cmp	r2, r3
 8008022:	d006      	beq.n	8008032 <TIM_OC1Init+0xba>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800802a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800802e:	429a      	cmp	r2, r3
 8008030:	d123      	bne.n	800807a <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0308 	bic.w	r3, r3, #8
 8008038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	89db      	ldrh	r3, [r3, #14]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0304 	bic.w	r3, r3, #4
 800804a:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	88db      	ldrh	r3, [r3, #6]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800805c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	8a1b      	ldrh	r3, [r3, #16]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	8a5b      	ldrh	r3, [r3, #18]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	f107 071c 	add.w	r7, r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	f023 0210 	bic.w	r2, r3, #16
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ec:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0320 	bic.w	r3, r3, #32
 8008102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	899b      	ldrh	r3, [r3, #12]
 8008108:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	889b      	ldrh	r3, [r3, #4]
 8008116:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008126:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800812a:	429a      	cmp	r2, r3
 800812c:	d006      	beq.n	800813c <TIM_OC2Init+0x9c>
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008134:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008138:	429a      	cmp	r2, r3
 800813a:	d12b      	bne.n	8008194 <TIM_OC2Init+0xf4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	89db      	ldrh	r3, [r3, #14]
 8008148:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008158:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88db      	ldrh	r3, [r3, #6]
 800815e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800816e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	8a1b      	ldrh	r3, [r3, #16]
 800817c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	8a5b      	ldrh	r3, [r3, #18]
 800818a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	f107 071c 	add.w	r7, r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	899b      	ldrh	r3, [r3, #12]
 8008218:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	889b      	ldrh	r3, [r3, #4]
 8008226:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008236:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800823a:	429a      	cmp	r2, r3
 800823c:	d006      	beq.n	800824c <TIM_OC3Init+0x94>
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008244:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008248:	429a      	cmp	r2, r3
 800824a:	d12b      	bne.n	80082a4 <TIM_OC3Init+0xec>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	89db      	ldrh	r3, [r3, #14]
 8008258:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	4313      	orrs	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008268:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88db      	ldrh	r3, [r3, #6]
 800826e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	8a1b      	ldrh	r3, [r3, #16]
 800828c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	8a5b      	ldrh	r3, [r3, #18]
 800829a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	f107 071c 	add.w	r7, r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008308:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008310:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008326:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	899b      	ldrh	r3, [r3, #12]
 800832c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	889b      	ldrh	r3, [r3, #4]
 800833a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800834a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800834e:	429a      	cmp	r2, r3
 8008350:	d006      	beq.n	8008360 <TIM_OC4Init+0x98>
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008358:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800835c:	429a      	cmp	r2, r3
 800835e:	d10a      	bne.n	8008376 <TIM_OC4Init+0xae>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	8a1b      	ldrh	r3, [r3, #16]
 800836c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	621a      	str	r2, [r3, #32]
}
 8008390:	f107 071c 	add.w	r7, r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083dc:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083ee:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008412:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008416:	429a      	cmp	r2, r3
 8008418:	d006      	beq.n	8008428 <TIM_OC5Init+0x8c>
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008420:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008424:	429a      	cmp	r2, r3
 8008426:	d10a      	bne.n	800843e <TIM_OC5Init+0xa2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	8a1b      	ldrh	r3, [r3, #16]
 8008434:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	621a      	str	r2, [r3, #32]
}
 8008458:	f107 071c 	add.w	r7, r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop

08008464 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a4:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	899b      	ldrh	r3, [r3, #12]
 80084c0:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	889b      	ldrh	r3, [r3, #4]
 80084ce:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80084de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d006      	beq.n	80084f4 <TIM_OC6Init+0x90>
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80084ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d103      	bne.n	80084fc <TIM_OC6Init+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	f107 071c 	add.w	r7, r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	659a      	str	r2, [r3, #88]	; 0x58
 800853e:	e005      	b.n	800854c <TIM_SelectGC5C1+0x2c>
  }
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008544:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800854c:	f107 070c 	add.w	r7, r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d006      	beq.n	8008578 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	659a      	str	r2, [r3, #88]	; 0x58
 8008576:	e005      	b.n	8008584 <TIM_SelectGC5C2+0x2c>
  }
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008584:	f107 070c 	add.w	r7, r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop

08008590 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d006      	beq.n	80085b0 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	659a      	str	r2, [r3, #88]	; 0x58
 80085ae:	e005      	b.n	80085bc <TIM_SelectGC5C3+0x2c>
  }
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80085bc:	f107 070c 	add.w	r7, r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop

080085c8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	825a      	strh	r2, [r3, #18]
}
 8008610:	f107 070c 	add.w	r7, r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop

0800861c <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode) /* to be updated*/
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	460b      	mov	r3, r1
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f103 0318 	add.w	r3, r3, #24
 8008640:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8008642:	897b      	ldrh	r3, [r7, #10]
 8008644:	f04f 0201 	mov.w	r2, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1a      	ldr	r2, [r3, #32]
 8008652:	8a7b      	ldrh	r3, [r7, #18]
 8008654:	ea6f 0303 	mvn.w	r3, r3
 8008658:	b29b      	uxth	r3, r3
 800865a:	401a      	ands	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8008660:	897b      	ldrh	r3, [r7, #10]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <TIM_SelectOCxM+0x50>
 8008666:	897b      	ldrh	r3, [r7, #10]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d115      	bne.n	8008698 <TIM_SelectOCxM+0x7c>
  {
    tmp += (TIM_Channel>>1);
 800866c:	897b      	ldrh	r3, [r7, #10]
 800866e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	18d3      	adds	r3, r2, r3
 8008678:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	6811      	ldr	r1, [r2, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	430a      	orrs	r2, r1
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e019      	b.n	80086cc <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 8008698:	897b      	ldrh	r3, [r7, #10]
 800869a:	f1a3 0304 	sub.w	r3, r3, #4
 800869e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b6:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	b292      	uxth	r2, r2
 80086c2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086c6:	b292      	uxth	r2, r2
 80086c8:	430a      	orrs	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]
  }
}
 80086cc:	f107 071c 	add.w	r7, r7, #28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80086e8:	f107 070c 	add.w	r7, r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop

080086f4 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008704:	f107 070c 	add.w	r7, r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop

08008710 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008720:	f107 070c 	add.w	r7, r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop

0800872c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800873c:	f107 070c 	add.w	r7, r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop

08008748 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008758:	f107 070c 	add.w	r7, r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop

08008764 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008774:	f107 070c 	add.w	r7, r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80087a4:	887b      	ldrh	r3, [r7, #2]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	619a      	str	r2, [r3, #24]
}
 80087b2:	f107 0714 	add.w	r7, r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr

080087bc <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087de:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	619a      	str	r2, [r3, #24]
}
 80087f2:	f107 0714 	add.w	r7, r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881a:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800881c:	887b      	ldrh	r3, [r7, #2]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	61da      	str	r2, [r3, #28]
}
 800882a:	f107 0714 	add.w	r7, r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008852:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 8008854:	887b      	ldrh	r3, [r7, #2]
 8008856:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	61da      	str	r2, [r3, #28]
}
 8008866:	f107 0714 	add.w	r7, r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888e:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800889e:	f107 0714 	add.w	r7, r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 80088c8:	887b      	ldrh	r3, [r7, #2]
 80088ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80088da:	f107 0714 	add.w	r7, r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr

080088e4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0308 	bic.w	r3, r3, #8
 8008902:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8008904:	887b      	ldrh	r3, [r7, #2]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	619a      	str	r2, [r3, #24]
}
 8008912:	f107 0714 	add.w	r7, r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr

0800891c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 800893c:	887b      	ldrh	r3, [r7, #2]
 800893e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	619a      	str	r2, [r3, #24]
}
 800894e:	f107 0714 	add.w	r7, r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr

08008958 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0308 	bic.w	r3, r3, #8
 8008976:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8008978:	887b      	ldrh	r3, [r7, #2]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	61da      	str	r2, [r3, #28]
}
 8008986:	f107 0714 	add.w	r7, r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 800899c:	f04f 0300 	mov.w	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	61da      	str	r2, [r3, #28]
}
 80089c2:	f107 0714 	add.w	r7, r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr

080089cc <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f023 0308 	bic.w	r3, r3, #8
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 80089ec:	887b      	ldrh	r3, [r7, #2]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80089fa:	f107 0714 	add.w	r7, r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr

08008a04 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008a10:	f04f 0300 	mov.w	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 8008a24:	887b      	ldrh	r3, [r7, #2]
 8008a26:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008a36:	f107 0714 	add.w	r7, r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0304 	bic.w	r3, r3, #4
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8008a60:	887b      	ldrh	r3, [r7, #2]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	619a      	str	r2, [r3, #24]
}
 8008a6e:	f107 0714 	add.w	r7, r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	619a      	str	r2, [r3, #24]
}
 8008aaa:	f107 0714 	add.w	r7, r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0304 	bic.w	r3, r3, #4
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8008ad4:	887b      	ldrh	r3, [r7, #2]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	61da      	str	r2, [r3, #28]
}
 8008ae2:	f107 0714 	add.w	r7, r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 8008b0c:	887b      	ldrh	r3, [r7, #2]
 8008b0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	61da      	str	r2, [r3, #28]
}
 8008b1e:	f107 0714 	add.w	r7, r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr

08008b28 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8008b48:	887b      	ldrh	r3, [r7, #2]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	619a      	str	r2, [r3, #24]
}
 8008b56:	f107 0714 	add.w	r7, r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8008b80:	887b      	ldrh	r3, [r7, #2]
 8008b82:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	619a      	str	r2, [r3, #24]
}
 8008b92:	f107 0714 	add.w	r7, r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8008bbc:	887b      	ldrh	r3, [r7, #2]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	61da      	str	r2, [r3, #28]
}
 8008bca:	f107 0714 	add.w	r7, r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8008bf4:	887b      	ldrh	r3, [r7, #2]
 8008bf6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	61da      	str	r2, [r3, #28]
}
 8008c06:	f107 0714 	add.w	r7, r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008c3e:	f107 0714 	add.w	r7, r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr

08008c48 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 8008c68:	887b      	ldrh	r3, [r7, #2]
 8008c6a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008c7a:	f107 0714 	add.w	r7, r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8008c98:	4013      	ands	r3, r2
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	609a      	str	r2, [r3, #8]
}
 8008caa:	f107 070c 	add.w	r7, r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0302 	bic.w	r3, r3, #2
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	621a      	str	r2, [r3, #32]
}
 8008ce2:	f107 0714 	add.w	r7, r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr

08008cec <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0308 	bic.w	r3, r3, #8
 8008d0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 8008d0c:	887b      	ldrh	r3, [r7, #2]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	f107 0714 	add.w	r7, r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0320 	bic.w	r3, r3, #32
 8008d42:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 8008d44:	887b      	ldrh	r3, [r7, #2]
 8008d46:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	f107 0714 	add.w	r7, r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr

08008d60 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 8008d80:	887b      	ldrh	r3, [r7, #2]
 8008d82:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]
}
 8008d92:	f107 0714 	add.w	r7, r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 8008dbc:	887b      	ldrh	r3, [r7, #2]
 8008dbe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	f107 0714 	add.w	r7, r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr

08008dd8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008df6:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 8008df8:	887b      	ldrh	r3, [r7, #2]
 8008dfa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	f107 0714 	add.w	r7, r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr

08008e14 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e32:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 8008e34:	887b      	ldrh	r3, [r7, #2]
 8008e36:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	f107 0714 	add.w	r7, r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr

08008e50 <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 8008e70:	887b      	ldrh	r3, [r7, #2]
 8008e72:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	f107 0714 	add.w	r7, r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr

08008e8c <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 8008eac:	887b      	ldrh	r3, [r7, #2]
 8008eae:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	f107 0714 	add.w	r7, r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	807a      	strh	r2, [r7, #2]
 8008ed6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8008ed8:	f04f 0300 	mov.w	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	f04f 0201 	mov.w	r2, #1
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1a      	ldr	r2, [r3, #32]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	ea6f 0303 	mvn.w	r3, r3
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1a      	ldr	r2, [r3, #32]
 8008efe:	8839      	ldrh	r1, [r7, #0]
 8008f00:	887b      	ldrh	r3, [r7, #2]
 8008f02:	fa01 f303 	lsl.w	r3, r1, r3
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	621a      	str	r2, [r3, #32]
}
 8008f0c:	f107 0714 	add.w	r7, r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop

08008f18 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	460a      	mov	r2, r1
 8008f24:	807a      	strh	r2, [r7, #2]
 8008f26:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 8008f2e:	887b      	ldrh	r3, [r7, #2]
 8008f30:	f04f 0204 	mov.w	r2, #4
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1a      	ldr	r2, [r3, #32]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	ea6f 0303 	mvn.w	r3, r3
 8008f44:	401a      	ands	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1a      	ldr	r2, [r3, #32]
 8008f4e:	8839      	ldrh	r1, [r7, #0]
 8008f50:	887b      	ldrh	r3, [r7, #2]
 8008f52:	fa01 f303 	lsl.w	r3, r1, r3
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	621a      	str	r2, [r3, #32]
}
 8008f5c:	f107 0714 	add.w	r7, r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop

08008f68 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10f      	bne.n	8008f9a <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8008f7e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008f80:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8008f82:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008f84:	891b      	ldrh	r3, [r3, #8]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fd02 	bl	8009990 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	88db      	ldrh	r3, [r3, #6]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4619      	mov	r1, r3
 8008f94:	f000 f8ec 	bl	8009170 <TIM_SetIC1Prescaler>
 8008f98:	e036      	b.n	8009008 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d10f      	bne.n	8008fc2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8008fa6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008fa8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8008faa:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008fac:	891b      	ldrh	r3, [r3, #8]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fd2a 	bl	8009a08 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	88db      	ldrh	r3, [r3, #6]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	f000 f8f0 	bl	80091a0 <TIM_SetIC2Prescaler>
 8008fc0:	e022      	b.n	8009008 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	d10f      	bne.n	8008fea <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8008fce:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8008fd0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8008fd2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8008fd4:	891b      	ldrh	r3, [r3, #8]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fd60 	bl	8009a9c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	88db      	ldrh	r3, [r3, #6]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f000 f8f6 	bl	80091d4 <TIM_SetIC3Prescaler>
 8008fe8:	e00e      	b.n	8009008 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8008fee:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008ff0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8008ff2:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008ff4:	891b      	ldrh	r3, [r3, #8]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fd96 	bl	8009b28 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	88db      	ldrh	r3, [r3, #6]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4619      	mov	r1, r3
 8009004:	f000 f8fe 	bl	8009204 <TIM_SetIC4Prescaler>
  }
}
 8009008:	f107 0708 	add.w	r7, r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f04f 0201 	mov.w	r2, #1
 800902e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	811a      	strh	r2, [r3, #8]
}
 8009040:	f107 070c 	add.w	r7, r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop

0800904c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800905c:	f04f 0301 	mov.w	r3, #1
 8009060:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d103      	bne.n	8009072 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800906a:	f04f 0302 	mov.w	r3, #2
 800906e:	81fb      	strh	r3, [r7, #14]
 8009070:	e002      	b.n	8009078 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	889b      	ldrh	r3, [r3, #4]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d103      	bne.n	8009088 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8009080:	f04f 0302 	mov.w	r3, #2
 8009084:	81bb      	strh	r3, [r7, #12]
 8009086:	e002      	b.n	800908e <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8009088:	f04f 0301 	mov.w	r3, #1
 800908c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d11c      	bne.n	80090d0 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	8859      	ldrh	r1, [r3, #2]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800909e:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80090a0:	891b      	ldrh	r3, [r3, #8]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fc74 	bl	8009990 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	88db      	ldrh	r3, [r3, #6]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4619      	mov	r1, r3
 80090b0:	f000 f85e 	bl	8009170 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	891b      	ldrh	r3, [r3, #8]
 80090b8:	89f9      	ldrh	r1, [r7, #14]
 80090ba:	89ba      	ldrh	r2, [r7, #12]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fca3 	bl	8009a08 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4619      	mov	r1, r3
 80090ca:	f000 f869 	bl	80091a0 <TIM_SetIC2Prescaler>
 80090ce:	e01b      	b.n	8009108 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	8859      	ldrh	r1, [r3, #2]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80090d8:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80090da:	891b      	ldrh	r3, [r3, #8]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fc93 	bl	8009a08 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	88db      	ldrh	r3, [r3, #6]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4619      	mov	r1, r3
 80090ea:	f000 f859 	bl	80091a0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	891b      	ldrh	r3, [r3, #8]
 80090f2:	89f9      	ldrh	r1, [r7, #14]
 80090f4:	89ba      	ldrh	r2, [r7, #12]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fc4a 	bl	8009990 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	88db      	ldrh	r3, [r3, #6]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4619      	mov	r1, r3
 8009104:	f000 f834 	bl	8009170 <TIM_SetIC1Prescaler>
  }
}
 8009108:	f107 0710 	add.w	r7, r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800911c:	4618      	mov	r0, r3
 800911e:	f107 070c 	add.w	r7, r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr

08009128 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8009134:	4618      	mov	r0, r3
 8009136:	f107 070c 	add.w	r7, r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr

08009140 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800914c:	4618      	mov	r0, r3
 800914e:	f107 070c 	add.w	r7, r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr

08009158 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009164:	4618      	mov	r0, r3
 8009166:	f107 070c 	add.w	r7, r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f023 020c 	bic.w	r2, r3, #12
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	887b      	ldrh	r3, [r7, #2]
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	619a      	str	r2, [r3, #24]
}
 8009194:	f107 070c 	add.w	r7, r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop

080091a0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699a      	ldr	r2, [r3, #24]
 80091bc:	887b      	ldrh	r3, [r7, #2]
 80091be:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	619a      	str	r2, [r3, #24]
}
 80091c8:	f107 070c 	add.w	r7, r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop

080091d4 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80091e8:	4013      	ands	r3, r2
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69da      	ldr	r2, [r3, #28]
 80091f2:	887b      	ldrh	r3, [r7, #2]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	61da      	str	r2, [r3, #28]
}
 80091fa:	f107 070c 	add.w	r7, r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr

08009204 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69da      	ldr	r2, [r3, #28]
 8009214:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8009218:	4013      	ands	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	887b      	ldrh	r3, [r7, #2]
 8009224:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009228:	b29b      	uxth	r3, r3
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	61da      	str	r2, [r3, #28]
}
 8009230:	f107 070c 	add.w	r7, r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800924e:	4313      	orrs	r3, r2
 8009250:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8009256:	4313      	orrs	r3, r2
 8009258:	b29a      	uxth	r2, r3
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800925e:	4313      	orrs	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	891b      	ldrh	r3, [r3, #8]
 8009266:	4313      	orrs	r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	895b      	ldrh	r3, [r3, #10]
 800926e:	4313      	orrs	r3, r2
 8009270:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	899b      	ldrh	r3, [r3, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8009276:	4313      	orrs	r3, r2
 8009278:	b29b      	uxth	r3, r3
 800927a:	461a      	mov	r2, r3
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	645a      	str	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8009280:	f107 070c 	add.w	r7, r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop

0800928c <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929e:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	ea4f 4103 	mov.w	r1, r3, lsl #16
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	430b      	orrs	r3, r1
 80092b4:	431a      	orrs	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	645a      	str	r2, [r3, #68]	; 0x44
}
 80092ba:	f107 0714 	add.w	r7, r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr

080092c4 <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d6:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	ea4f 5103 	mov.w	r1, r3, lsl #20
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	430b      	orrs	r3, r1
 80092ec:	431a      	orrs	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80092f2:	f107 0714 	add.w	r7, r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d006      	beq.n	800931c <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	645a      	str	r2, [r3, #68]	; 0x44
 800931a:	e005      	b.n	8009328 <TIM_Break1Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	645a      	str	r2, [r3, #68]	; 0x44
  } 
}
 8009328:	f107 070c 	add.w	r7, r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	645a      	str	r2, [r3, #68]	; 0x44
 8009352:	e005      	b.n	8009360 <TIM_Break2Cmd+0x2c>
  }
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009358:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009360:	f107 070c 	add.w	r7, r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop

0800936c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	819a      	strh	r2, [r3, #12]
}
 80093ac:	f107 070c 	add.w	r7, r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop

080093b8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	645a      	str	r2, [r3, #68]	; 0x44
 80093d6:	e007      	b.n	80093e8 <TIM_CtrlPWMOutputs+0x30>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093dc:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80093e0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6453      	str	r3, [r2, #68]	; 0x44
  }  
}
 80093e8:	f107 070c 	add.w	r7, r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d006      	beq.n	8009414 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f043 0204 	orr.w	r2, r3, #4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	e006      	b.n	8009422 <TIM_SelectCOM+0x2e>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800941c:	4013      	ands	r3, r2
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	6053      	str	r3, [r2, #4]
  }
}
 8009422:	f107 070c 	add.w	r7, r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr

0800942c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f043 0201 	orr.w	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]
 800944a:	e006      	b.n	800945a <TIM_CCPreloadControl+0x2e>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009454:	4013      	ands	r3, r2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6053      	str	r3, [r2, #4]
  }
}
 800945a:	f107 070c 	add.w	r7, r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr

08009464 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	460a      	mov	r2, r1
 8009470:	807a      	strh	r2, [r7, #2]
 8009472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009474:	787b      	ldrb	r3, [r7, #1]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60da      	str	r2, [r3, #12]
 8009486:	e008      	b.n	800949a <TIM_ITConfig+0x36>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	887b      	ldrh	r3, [r7, #2]
 800948e:	ea6f 0303 	mvn.w	r3, r3
 8009492:	b29b      	uxth	r3, r3
 8009494:	401a      	ands	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60da      	str	r2, [r3, #12]
  }
}
 800949a:	f107 070c 	add.w	r7, r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr

080094a4 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80094b0:	887a      	ldrh	r2, [r7, #2]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	615a      	str	r2, [r3, #20]
}
 80094b6:	f107 070c 	add.w	r7, r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr

080094c0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 80094ca:	f04f 0300 	mov.w	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <TIM_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 80094dc:	f04f 0301 	mov.w	r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]
 80094e2:	e002      	b.n	80094ea <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	f107 0714 	add.w	r7, r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bc80      	pop	{r7}
 80094f6:	4770      	bx	lr

080094f8 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	ea6f 0303 	mvn.w	r3, r3
 800950a:	b29b      	uxth	r3, r3
 800950c:	461a      	mov	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	611a      	str	r2, [r3, #16]
}
 8009512:	f107 070c 	add.w	r7, r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	bc80      	pop	{r7}
 800951a:	4770      	bx	lr

0800951c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	81bb      	strh	r3, [r7, #12]
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	b29a      	uxth	r2, r3
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	4013      	ands	r3, r2
 8009544:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	b29a      	uxth	r2, r3
 800954c:	887b      	ldrh	r3, [r7, #2]
 800954e:	4013      	ands	r3, r2
 8009550:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8009552:	89bb      	ldrh	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <TIM_GetITStatus+0x4a>
 8009558:	897b      	ldrh	r3, [r7, #10]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800955e:	f04f 0301 	mov.w	r3, #1
 8009562:	73fb      	strb	r3, [r7, #15]
 8009564:	e002      	b.n	800956c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	f107 0714 	add.w	r7, r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop

0800957c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8009588:	887b      	ldrh	r3, [r7, #2]
 800958a:	ea6f 0303 	mvn.w	r3, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	461a      	mov	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	611a      	str	r2, [r3, #16]
}
 8009596:	f107 070c 	add.w	r7, r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr

080095a0 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	460a      	mov	r2, r1
 80095ac:	807a      	strh	r2, [r7, #2]
 80095ae:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80095b0:	887a      	ldrh	r2, [r7, #2]
 80095b2:	883b      	ldrh	r3, [r7, #0]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80095be:	f107 070c 	add.w	r7, r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	460a      	mov	r2, r1
 80095d4:	807a      	strh	r2, [r7, #2]
 80095d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80095d8:	787b      	ldrb	r3, [r7, #1]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d006      	beq.n	80095ec <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	431a      	orrs	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e008      	b.n	80095fe <TIM_DMACmd+0x36>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	887b      	ldrh	r3, [r7, #2]
 80095f2:	ea6f 0303 	mvn.w	r3, r3
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	401a      	ands	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60da      	str	r2, [r3, #12]
  }
}
 80095fe:	f107 070c 	add.w	r7, r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f043 0208 	orr.w	r2, r3, #8
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	e006      	b.n	8009636 <TIM_SelectCCDMA+0x2e>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8009630:	4013      	ands	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6053      	str	r3, [r2, #4]
  }
}
 8009636:	f107 070c 	add.w	r7, r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8009650:	4013      	ands	r3, r2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6093      	str	r3, [r2, #8]
}
 8009656:	f107 070c 	add.w	r7, r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	bc80      	pop	{r7}
 800965e:	4770      	bx	lr

08009660 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800966c:	887b      	ldrh	r3, [r7, #2]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	f000 f877 	bl	8009764 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f043 0207 	orr.w	r2, r3, #7
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	609a      	str	r2, [r3, #8]
}
 8009682:	f107 0708 	add.w	r7, r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop

0800968c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	8179      	strh	r1, [r7, #10]
 8009696:	813a      	strh	r2, [r7, #8]
 8009698:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800969a:	897b      	ldrh	r3, [r7, #10]
 800969c:	2b60      	cmp	r3, #96	; 0x60
 800969e:	d108      	bne.n	80096b2 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80096a0:	893a      	ldrh	r2, [r7, #8]
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	4611      	mov	r1, r2
 80096a8:	f04f 0201 	mov.w	r2, #1
 80096ac:	f000 f9ac 	bl	8009a08 <TI2_Config>
 80096b0:	e007      	b.n	80096c2 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80096b2:	893a      	ldrh	r2, [r7, #8]
 80096b4:	88fb      	ldrh	r3, [r7, #6]
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	4611      	mov	r1, r2
 80096ba:	f04f 0201 	mov.w	r2, #1
 80096be:	f000 f967 	bl	8009990 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80096c2:	897b      	ldrh	r3, [r7, #10]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	4619      	mov	r1, r3
 80096c8:	f000 f84c 	bl	8009764 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f043 0207 	orr.w	r2, r3, #7
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
}
 80096d8:	f107 0710 	add.w	r7, r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	8179      	strh	r1, [r7, #10]
 80096ea:	813a      	strh	r2, [r7, #8]
 80096ec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80096f4:	8979      	ldrh	r1, [r7, #10]
 80096f6:	893a      	ldrh	r2, [r7, #8]
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f8ac 	bl	8009858 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8009706:	8afb      	ldrh	r3, [r7, #22]
 8009708:	f023 0307 	bic.w	r3, r3, #7
 800970c:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800970e:	8afb      	ldrh	r3, [r7, #22]
 8009710:	f043 0307 	orr.w	r3, r3, #7
 8009714:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8009716:	8afb      	ldrh	r3, [r7, #22]
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800971e:	8afb      	ldrh	r3, [r7, #22]
 8009720:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009724:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009726:	8afa      	ldrh	r2, [r7, #22]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	609a      	str	r2, [r3, #8]
}
 800972c:	f107 0718 	add.w	r7, r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	8179      	strh	r1, [r7, #10]
 800973e:	813a      	strh	r2, [r7, #8]
 8009740:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8009742:	8979      	ldrh	r1, [r7, #10]
 8009744:	893a      	ldrh	r2, [r7, #8]
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f885 	bl	8009858 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	609a      	str	r2, [r3, #8]
}
 800975a:	f107 0710 	add.w	r7, r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop

08009764 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800977c:	89fb      	ldrh	r3, [r7, #14]
 800977e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009782:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8009784:	89fa      	ldrh	r2, [r7, #14]
 8009786:	887b      	ldrh	r3, [r7, #2]
 8009788:	4313      	orrs	r3, r2
 800978a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800978c:	89fa      	ldrh	r2, [r7, #14]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	609a      	str	r2, [r3, #8]
}
 8009792:	f107 0714 	add.w	r7, r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	bc80      	pop	{r7}
 800979a:	4770      	bx	lr

0800979c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80097b0:	4013      	ands	r3, r2
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	605a      	str	r2, [r3, #4]
}
 80097c2:	f107 070c 	add.w	r7, r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	605a      	str	r2, [r3, #4]
}
 80097ee:	f107 070c 	add.w	r7, r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr

080097f8 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	609a      	str	r2, [r3, #8]
}
 800981e:	f107 070c 	add.w	r7, r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr

08009828 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800983c:	4013      	ands	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689a      	ldr	r2, [r3, #8]
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	609a      	str	r2, [r3, #8]
}
 800984e:	f107 070c 	add.w	r7, r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	8179      	strh	r1, [r7, #10]
 8009862:	813a      	strh	r2, [r7, #8]
 8009864:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8009872:	8afb      	ldrh	r3, [r7, #22]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800987e:	b29a      	uxth	r2, r3
 8009880:	893b      	ldrh	r3, [r7, #8]
 8009882:	4313      	orrs	r3, r2
 8009884:	b29a      	uxth	r2, r3
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	4313      	orrs	r3, r2
 800988a:	b29a      	uxth	r2, r3
 800988c:	8afb      	ldrh	r3, [r7, #22]
 800988e:	4313      	orrs	r3, r2
 8009890:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009892:	8afa      	ldrh	r2, [r7, #22]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	609a      	str	r2, [r3, #8]
}
 8009898:	f107 071c 	add.w	r7, r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop

080098a4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	8179      	strh	r1, [r7, #10]
 80098ae:	813a      	strh	r2, [r7, #8]
 80098b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80098d6:	8afb      	ldrh	r3, [r7, #22]
 80098d8:	f023 0307 	bic.w	r3, r3, #7
 80098dc:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80098de:	8afa      	ldrh	r2, [r7, #22]
 80098e0:	897b      	ldrh	r3, [r7, #10]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80098e6:	8abb      	ldrh	r3, [r7, #20]
 80098e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80098f2:	8abb      	ldrh	r3, [r7, #20]
 80098f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098f8:	f043 0301 	orr.w	r3, r3, #1
 80098fc:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80098fe:	8a7b      	ldrh	r3, [r7, #18]
 8009900:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009904:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800990c:	b29a      	uxth	r2, r3
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	4313      	orrs	r3, r2
 8009912:	b29a      	uxth	r2, r3
 8009914:	8a7b      	ldrh	r3, [r7, #18]
 8009916:	4313      	orrs	r3, r2
 8009918:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991a:	8afa      	ldrh	r2, [r7, #22]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8009920:	8aba      	ldrh	r2, [r7, #20]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009926:	8a7a      	ldrh	r2, [r7, #18]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	621a      	str	r2, [r3, #32]
}
 800992c:	f107 071c 	add.w	r7, r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	bc80      	pop	{r7}
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop

08009938 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	e006      	b.n	8009966 <TIM_SelectHallSensor+0x2e>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8009960:	4013      	ands	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6053      	str	r3, [r2, #4]
  }
}
 8009966:	f107 070c 	add.w	r7, r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <TIM_RemapConfig>:
  *            @arg TIM8_ADC4_AWDG2: TIM8 ETR is connected to ADC4 AWDG2.
  *            @arg TIM8_ADC4_AWDG3: TIM8 ETR is connected to ADC4 AWDG3.  
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	887a      	ldrh	r2, [r7, #2]
 8009980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8009984:	f107 070c 	add.w	r7, r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	8179      	strh	r1, [r7, #10]
 800999a:	813a      	strh	r2, [r7, #8]
 800999c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0201 	bic.w	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 80099ca:	893a      	ldrh	r2, [r7, #8]
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80099d2:	4313      	orrs	r3, r2
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f023 030a 	bic.w	r3, r3, #10
 80099e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 80099e2:	897b      	ldrh	r3, [r7, #10]
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	621a      	str	r2, [r3, #32]
}
 80099fc:	f107 071c 	add.w	r7, r7, #28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop

08009a08 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b089      	sub	sp, #36	; 0x24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	8179      	strh	r1, [r7, #10]
 8009a12:	813a      	strh	r2, [r7, #8]
 8009a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8009a16:	f04f 0300 	mov.w	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	f04f 0300 	mov.w	r3, #0
 8009a20:	61bb      	str	r3, [r7, #24]
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a1a      	ldr	r2, [r3, #32]
 8009a2c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009a30:	4013      	ands	r3, r2
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8009a42:	897b      	ldrh	r3, [r7, #10]
 8009a44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8009a52:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8009a60:	893b      	ldrh	r3, [r7, #8]
 8009a62:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8009a72:	4013      	ands	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f043 0310 	orr.w	r3, r3, #16
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	69fa      	ldr	r2, [r7, #28]
 8009a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	621a      	str	r2, [r3, #32]
}
 8009a92:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bc80      	pop	{r7}
 8009a9a:	4770      	bx	lr

08009a9c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	8179      	strh	r1, [r7, #10]
 8009aa6:	813a      	strh	r2, [r7, #8]
 8009aa8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8009aaa:	f04f 0300 	mov.w	r3, #0
 8009aae:	82fb      	strh	r3, [r7, #22]
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	82bb      	strh	r3, [r7, #20]
 8009ab6:	f04f 0300 	mov.w	r3, #0
 8009aba:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a1a      	ldr	r2, [r3, #32]
 8009ac0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8009ad6:	897b      	ldrh	r3, [r7, #10]
 8009ad8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009adc:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8009ade:	8afb      	ldrh	r3, [r7, #22]
 8009ae0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8009ae4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	893b      	ldrh	r3, [r7, #8]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	8afb      	ldrh	r3, [r7, #22]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009afa:	8abb      	ldrh	r3, [r7, #20]
 8009afc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b00:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8009b02:	8a7a      	ldrh	r2, [r7, #18]
 8009b04:	8abb      	ldrh	r3, [r7, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b0e:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b10:	8afa      	ldrh	r2, [r7, #22]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b16:	8aba      	ldrh	r2, [r7, #20]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	621a      	str	r2, [r3, #32]
}
 8009b1c:	f107 071c 	add.w	r7, r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop

08009b28 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	8179      	strh	r1, [r7, #10]
 8009b32:	813a      	strh	r2, [r7, #8]
 8009b34:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	82fb      	strh	r3, [r7, #22]
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	82bb      	strh	r3, [r7, #20]
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a1a      	ldr	r2, [r3, #32]
 8009b4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009b50:	4013      	ands	r3, r2
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8009b62:	897b      	ldrh	r3, [r7, #10]
 8009b64:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009b68:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8009b6a:	8afb      	ldrh	r3, [r7, #22]
 8009b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b70:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8009b74:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8009b78:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8009b7a:	893b      	ldrh	r3, [r7, #8]
 8009b7c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	8afb      	ldrh	r3, [r7, #22]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8009b88:	88fb      	ldrh	r3, [r7, #6]
 8009b8a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	8afb      	ldrh	r3, [r7, #22]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b96:	8abb      	ldrh	r3, [r7, #20]
 8009b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b9c:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8009ba0:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8009ba4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8009ba6:	8a7a      	ldrh	r2, [r7, #18]
 8009ba8:	8abb      	ldrh	r3, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bb2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bb4:	8afa      	ldrh	r2, [r7, #22]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bba:	8aba      	ldrh	r2, [r7, #20]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	621a      	str	r2, [r3, #32]
}
 8009bc0:	f107 071c 	add.w	r7, r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bc80      	pop	{r7}
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop

08009bcc <USART_DeInit>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bda:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d10c      	bne.n	8009bfc <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8009be2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009be6:	f04f 0101 	mov.w	r1, #1
 8009bea:	f7fc fec9 	bl	8006980 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8009bee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	f7fc fec3 	bl	8006980 <RCC_APB2PeriphResetCmd>
 8009bfa:	e04e      	b.n	8009c9a <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009c02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d10c      	bne.n	8009c24 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8009c0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009c0e:	f04f 0101 	mov.w	r1, #1
 8009c12:	f7fc fedf 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8009c16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009c1a:	f04f 0100 	mov.w	r1, #0
 8009c1e:	f7fc fed9 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8009c22:	e03a      	b.n	8009c9a <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8009c2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d10c      	bne.n	8009c4c <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8009c32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009c36:	f04f 0101 	mov.w	r1, #1
 8009c3a:	f7fc fecb 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8009c3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009c42:	f04f 0100 	mov.w	r1, #0
 8009c46:	f7fc fec5 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8009c4a:	e026      	b.n	8009c9a <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8009c52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d10c      	bne.n	8009c74 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8009c5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009c5e:	f04f 0101 	mov.w	r1, #1
 8009c62:	f7fc feb7 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8009c66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009c6a:	f04f 0100 	mov.w	r1, #0
 8009c6e:	f7fc feb1 	bl	80069d4 <RCC_APB1PeriphResetCmd>
 8009c72:	e012      	b.n	8009c9a <USART_DeInit+0xce>
  }
  else
  {
    if  (USARTx == UART5)
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009c7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d10b      	bne.n	8009c9a <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8009c82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009c86:	f04f 0101 	mov.w	r1, #1
 8009c8a:	f7fc fea3 	bl	80069d4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8009c8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009c92:	f04f 0100 	mov.w	r1, #0
 8009c96:	f7fc fe9d 	bl	80069d4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8009c9a:	f107 0708 	add.w	r7, r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop

08009ca4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b094      	sub	sp, #80	; 0x50
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cba:	f04f 0300 	mov.w	r3, #0
 8009cbe:	647b      	str	r3, [r7, #68]	; 0x44
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f023 0201 	bic.w	r2, r3, #1
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009cd8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ce8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009cf6:	f023 030c 	bic.w	r3, r3, #12
 8009cfa:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	647b      	str	r3, [r7, #68]	; 0x44
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d16:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8009d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d24:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d34:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fc f960 	bl	8006000 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d102      	bne.n	8009d54 <USART_Init+0xb0>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d52:	e01f      	b.n	8009d94 <USART_Init+0xf0>
  }
  else if (USARTx == USART2)
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009d5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d102      	bne.n	8009d68 <USART_Init+0xc4>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8009d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d66:	e015      	b.n	8009d94 <USART_Init+0xf0>
  }
  else if (USARTx == USART3)
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8009d6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d102      	bne.n	8009d7c <USART_Init+0xd8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d7a:	e00b      	b.n	8009d94 <USART_Init+0xf0>
  }
  else if (USARTx == UART4)
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8009d82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d102      	bne.n	8009d90 <USART_Init+0xec>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d8e:	e001      	b.n	8009d94 <USART_Init+0xf0>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 8009d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d92:	64bb      	str	r3, [r7, #72]	; 0x48
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d013      	beq.n	8009dc8 <USART_Init+0x124>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8009da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da2:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dae:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8009db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	6812      	ldr	r2, [r2, #0]
 8009dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dbe:	fb02 f201 	mul.w	r2, r2, r1
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc6:	e00e      	b.n	8009de6 <USART_Init+0x142>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dda:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dde:	fb02 f201 	mul.w	r2, r2, r1
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8009dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d803      	bhi.n	8009dfc <USART_Init+0x158>
  {
    divider++;
 8009df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df6:	f103 0301 	add.w	r3, r3, #1
 8009dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00c      	beq.n	8009e22 <USART_Init+0x17e>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8009e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e0a:	f003 030f 	and.w	r3, r3, #15
 8009e0e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e16:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8009e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	819a      	strh	r2, [r3, #12]
}
 8009e2a:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop

08009e34 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009e42:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f04f 0200 	mov.w	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	609a      	str	r2, [r3, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	60da      	str	r2, [r3, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f04f 020c 	mov.w	r2, #12
 8009e62:	611a      	str	r2, [r3, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f04f 0200 	mov.w	r2, #0
 8009e6a:	615a      	str	r2, [r3, #20]
}
 8009e6c:	f107 070c 	add.w	r7, r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bc80      	pop	{r7}
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop

08009e78 <USART_ClockInit>:
  *         structure that contains the configuration information for the specified
  *         USART peripheral.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e94:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009ea4:	431a      	orrs	r2, r3
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	605a      	str	r2, [r3, #4]
}
 8009eb8:	f107 0714 	add.w	r7, r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop

08009ec4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	605a      	str	r2, [r3, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	609a      	str	r2, [r3, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	60da      	str	r2, [r3, #12]
}
 8009eec:	f107 070c 	add.w	r7, r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bc80      	pop	{r7}
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop

08009ef8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f043 0201 	orr.w	r2, r3, #1
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e005      	b.n	8009f24 <USART_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f023 0201 	bic.w	r2, r3, #1
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
  }
}
 8009f24:	f107 070c 	add.w	r7, r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop

08009f30 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <USART_DirectionModeCmd+0x22>
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e007      	b.n	8009f62 <USART_DirectionModeCmd+0x32>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	ea6f 0303 	mvn.w	r3, r3
 8009f5c:	401a      	ands	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]
  }
}
 8009f62:	f107 0714 	add.w	r7, r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <USART_OverSampling8Cmd>:
  *   This function has to be called before calling USART_Init()
  *   function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d006      	beq.n	8009f8c <USART_OverSampling8Cmd+0x20>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e005      	b.n	8009f98 <USART_OverSampling8Cmd+0x2c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]
  }
}
 8009f98:	f107 070c 	add.w	r7, r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop

08009fa4 <USART_OneBitMethodCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <USART_OneBitMethodCmd+0x20>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	609a      	str	r2, [r3, #8]
 8009fc2:	e005      	b.n	8009fd0 <USART_OneBitMethodCmd+0x2c>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	609a      	str	r2, [r3, #8]
  }
}
 8009fd0:	f107 070c 	add.w	r7, r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <USART_MSBFirstCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d006      	beq.n	8009ffc <USART_MSBFirstCmd+0x20>
  {
    /* Enable the most significant bit first transmitted/received following the
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]
 8009ffa:	e005      	b.n	800a008 <USART_MSBFirstCmd+0x2c>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	605a      	str	r2, [r3, #4]
  }
}
 800a008:	f107 070c 	add.w	r7, r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bc80      	pop	{r7}
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop

0800a014 <USART_DataInvCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d006      	beq.n	800a034 <USART_DataInvCmd+0x20>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	605a      	str	r2, [r3, #4]
 800a032:	e005      	b.n	800a040 <USART_DataInvCmd+0x2c>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	605a      	str	r2, [r3, #4]
  }
}
 800a040:	f107 070c 	add.w	r7, r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	bc80      	pop	{r7}
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop

0800a04c <USART_InvPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <USART_InvPinCmd+0x22>
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	431a      	orrs	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	605a      	str	r2, [r3, #4]
 800a06c:	e007      	b.n	800a07e <USART_InvPinCmd+0x32>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	ea6f 0303 	mvn.w	r3, r3
 800a078:	401a      	ands	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	605a      	str	r2, [r3, #4]
  }
}
 800a07e:	f107 0714 	add.w	r7, r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	bc80      	pop	{r7}
 800a086:	4770      	bx	lr

0800a088 <USART_SWAPPinCmd>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <USART_SWAPPinCmd+0x20>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	605a      	str	r2, [r3, #4]
 800a0a6:	e005      	b.n	800a0b4 <USART_SWAPPinCmd+0x2c>
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	605a      	str	r2, [r3, #4]
  }
}
 800a0b4:	f107 070c 	add.w	r7, r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop

0800a0c0 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d006      	beq.n	800a0e0 <USART_ReceiverTimeOutCmd+0x20>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	605a      	str	r2, [r3, #4]
 800a0de:	e005      	b.n	800a0ec <USART_ReceiverTimeOutCmd+0x2c>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
  }
}
 800a0ec:	f107 070c 	add.w	r7, r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc80      	pop	{r7}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop

0800a0f8 <USART_SetReceiverTimeOut>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
  * @retval None
  */
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
{    
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	615a      	str	r2, [r3, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	615a      	str	r2, [r3, #20]
}
 800a11a:	f107 070c 	add.w	r7, r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	bc80      	pop	{r7}
 800a122:	4770      	bx	lr

0800a124 <USART_SetPrescaler>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	8a1b      	ldrh	r3, [r3, #16]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	821a      	strh	r2, [r3, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8a1b      	ldrh	r3, [r3, #16]
 800a144:	b29a      	uxth	r2, r3
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	4313      	orrs	r3, r2
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	821a      	strh	r2, [r3, #16]
}
 800a152:	f107 070c 	add.w	r7, r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	bc80      	pop	{r7}
 800a15a:	4770      	bx	lr

0800a15c <USART_STOPModeCmd>:
  * @note
  *   This function has to be called when USART clock is set to HSI or LSE.
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d006      	beq.n	800a17c <USART_STOPModeCmd+0x20>
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f043 0202 	orr.w	r2, r3, #2
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e005      	b.n	800a188 <USART_STOPModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f023 0202 	bic.w	r2, r3, #2
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	601a      	str	r2, [r3, #0]
  }
}
 800a188:	f107 070c 	add.w	r7, r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop

0800a194 <USART_StopModeWakeUpSourceConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689a      	ldr	r2, [r3, #8]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	609a      	str	r2, [r3, #8]
}
 800a1b6:	f107 070c 	add.w	r7, r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <USART_AutoBaudRateCmd+0x20>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	e005      	b.n	800a1ec <USART_AutoBaudRateCmd+0x2c>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	605a      	str	r2, [r3, #4]
  }
}
 800a1ec:	f107 070c 	add.w	r7, r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bc80      	pop	{r7}
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop

0800a1f8 <USART_AutoBaudRateConfig>:
  * @note
  *   This function has to be called before calling USART_Cmd() function. 
  * @retval None
  */
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	605a      	str	r2, [r3, #4]
}
 800a21a:	f107 070c 	add.w	r7, r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800a230:	887b      	ldrh	r3, [r7, #2]
 800a232:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a236:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800a240:	f107 070c 	add.w	r7, r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	bc80      	pop	{r7}
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop

0800a24c <USART_ReceiveData>:
  * @param  USARTx: Select the USART peripheral. This parameter can be one of the 
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a258:	b29b      	uxth	r3, r3
 800a25a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800a25e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800a262:	b29b      	uxth	r3, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	f107 070c 	add.w	r7, r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <USART_SetAddress>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	605a      	str	r2, [r3, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
}
 800a298:	f107 070c 	add.w	r7, r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bc80      	pop	{r7}
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop

0800a2a4 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d006      	beq.n	800a2c4 <USART_MuteModeCmd+0x20>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	e005      	b.n	800a2d0 <USART_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
  }
}
 800a2d0:	f107 070c 	add.w	r7, r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop

0800a2dc <USART_MuteModeWakeUpConfig>:
  *         @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *         @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	601a      	str	r2, [r3, #0]
  USARTx->CR1 |= USART_WakeUp;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
}
 800a2fe:	f107 070c 	add.w	r7, r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	bc80      	pop	{r7}
 800a306:	4770      	bx	lr

0800a308 <USART_AddressDetectionConfig>:
  *         @arg USART_AddressLength_4b: 4-bit address length detection 
  *         @arg USART_AddressLength_7b: 7-bit address length detection 
  * @retval None
  */
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f023 0210 	bic.w	r2, r3, #16
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_AddressLength;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	605a      	str	r2, [r3, #4]
}
 800a32a:	f107 070c 	add.w	r7, r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	bc80      	pop	{r7}
 800a332:	4770      	bx	lr

0800a334 <USART_LINBreakDetectLengthConfig>:
  *         @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *         @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f023 0220 	bic.w	r2, r3, #32
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	605a      	str	r2, [r3, #4]
}
 800a356:	f107 070c 	add.w	r7, r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bc80      	pop	{r7}
 800a35e:	4770      	bx	lr

0800a360 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d006      	beq.n	800a380 <USART_LINCmd+0x20>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	605a      	str	r2, [r3, #4]
 800a37e:	e005      	b.n	800a38c <USART_LINCmd+0x2c>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	605a      	str	r2, [r3, #4]
  }
}
 800a38c:	f107 070c 	add.w	r7, r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop

0800a398 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d006      	beq.n	800a3b8 <USART_HalfDuplexCmd+0x20>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f043 0208 	orr.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	609a      	str	r2, [r3, #8]
 800a3b6:	e005      	b.n	800a3c4 <USART_HalfDuplexCmd+0x2c>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f023 0208 	bic.w	r2, r3, #8
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	609a      	str	r2, [r3, #8]
  }
}
 800a3c4:	f107 070c 	add.w	r7, r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop

0800a3d0 <USART_SetGuardTime>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_GuardTime: specifies the guard time.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	8a1b      	ldrh	r3, [r3, #16]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	821a      	strh	r2, [r3, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8a1b      	ldrh	r3, [r3, #16]
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	821a      	strh	r2, [r3, #16]
}
 800a402:	f107 070c 	add.w	r7, r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr

0800a40c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d006      	beq.n	800a42c <USART_SmartCardCmd+0x20>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f043 0220 	orr.w	r2, r3, #32
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	609a      	str	r2, [r3, #8]
 800a42a:	e005      	b.n	800a438 <USART_SmartCardCmd+0x2c>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f023 0220 	bic.w	r2, r3, #32
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	609a      	str	r2, [r3, #8]
  }
}
 800a438:	f107 070c 	add.w	r7, r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop

0800a444 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <USART_SmartCardNACKCmd+0x20>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f043 0210 	orr.w	r2, r3, #16
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	609a      	str	r2, [r3, #8]
 800a462:	e005      	b.n	800a470 <USART_SmartCardNACKCmd+0x2c>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f023 0210 	bic.w	r2, r3, #16
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	609a      	str	r2, [r3, #8]
  }
}
 800a470:	f107 070c 	add.w	r7, r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <USART_SetAutoRetryCount>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_AutoCount: specifies the Smart Card auto retry count.
  * @retval None
  */
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
{    
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	609a      	str	r2, [r3, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
}
 800a4a4:	f107 070c 	add.w	r7, r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop

0800a4b0 <USART_SetBlockLength>:
  *         following values: USART1 or USART2 or USART3.
  * @param  USART_BlockLength: specifies the Smart Card block length.
  * @retval None
  */
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
{    
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	615a      	str	r2, [r3, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	695a      	ldr	r2, [r3, #20]
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	615a      	str	r2, [r3, #20]
}
 800a4d8:	f107 070c 	add.w	r7, r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop

0800a4e4 <USART_IrDAConfig>:
  *         @arg USART_IrDAMode_LowPower
  *         @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f023 0204 	bic.w	r2, r3, #4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_IrDAMode;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	431a      	orrs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	609a      	str	r2, [r3, #8]
}
 800a506:	f107 070c 	add.w	r7, r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d006      	beq.n	800a530 <USART_IrDACmd+0x20>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f043 0202 	orr.w	r2, r3, #2
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	609a      	str	r2, [r3, #8]
 800a52e:	e005      	b.n	800a53c <USART_IrDACmd+0x2c>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f023 0202 	bic.w	r2, r3, #2
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	609a      	str	r2, [r3, #8]
  }
}
 800a53c:	f107 070c 	add.w	r7, r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	bc80      	pop	{r7}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop

0800a548 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *         This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d006      	beq.n	800a568 <USART_DECmd+0x20>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	609a      	str	r2, [r3, #8]
 800a566:	e005      	b.n	800a574 <USART_DECmd+0x2c>
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	609a      	str	r2, [r3, #8]
  }
}
 800a574:	f107 070c 	add.w	r7, r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop

0800a580 <USART_DEPolarityConfig>:
  *         @arg USART_DEPolarity_Low
  *         @arg USART_DEPolarity_High
  * @retval None
  */
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	609a      	str	r2, [r3, #8]
  USARTx->CR3 |= USART_DEPolarity;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	609a      	str	r2, [r3, #8]
}
 800a5a2:	f107 070c 	add.w	r7, r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bc80      	pop	{r7}
 800a5aa:	4770      	bx	lr

0800a5ac <USART_SetDEAssertionTime>:
  * @param  USART_AssertionTime: specifies the time between the activation of the DE
  *          signal and the beginning of the start bit
  * @retval None
  */
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	ea4f 5343 	mov.w	r3, r3, lsl #21
 800a5cc:	431a      	orrs	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	601a      	str	r2, [r3, #0]
}
 800a5d2:	f107 070c 	add.w	r7, r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bc80      	pop	{r7}
 800a5da:	4770      	bx	lr

0800a5dc <USART_SetDEDeassertionTime>:
  * @param  USART_DeassertionTime: specifies the time between the middle of the last 
  *         stop bit in a transmitted message and the de-activation of the DE signal
  * @retval None
  */
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
}
 800a602:	f107 070c 	add.w	r7, r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr

0800a60c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	431a      	orrs	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	609a      	str	r2, [r3, #8]
 800a62c:	e007      	b.n	800a63e <USART_DMACmd+0x32>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	ea6f 0303 	mvn.w	r3, r3
 800a638:	401a      	ands	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	609a      	str	r2, [r3, #8]
  }
}
 800a63e:	f107 0714 	add.w	r7, r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	bc80      	pop	{r7}
 800a646:	4770      	bx	lr

0800a648 <USART_DMAReceptionErrorConfig>:
  *         @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
  *          reception error is asserted.
  * @retval None
  */
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	609a      	str	r2, [r3, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689a      	ldr	r2, [r3, #8]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	609a      	str	r2, [r3, #8]
}
 800a66a:	f107 070c 	add.w	r7, r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	bc80      	pop	{r7}
 800a672:	4770      	bx	lr

0800a674 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800a674:	b480      	push	{r7}
 800a676:	b089      	sub	sp, #36	; 0x24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4613      	mov	r3, r2
 800a680:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	61bb      	str	r3, [r7, #24]
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f04f 0201 	mov.w	r2, #1
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d104      	bne.n	800a6cc <USART_ITConfig+0x58>
  {
    usartxbase += 0x04;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	f103 0304 	add.w	r3, r3, #4
 800a6c8:	61fb      	str	r3, [r7, #28]
 800a6ca:	e006      	b.n	800a6da <USART_ITConfig+0x66>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d103      	bne.n	800a6da <USART_ITConfig+0x66>
  {
    usartxbase += 0x08;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	f103 0308 	add.w	r3, r3, #8
 800a6d8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d006      	beq.n	800a6ee <USART_ITConfig+0x7a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	6811      	ldr	r1, [r2, #0]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	e007      	b.n	800a6fe <USART_ITConfig+0x8a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	69fa      	ldr	r2, [r7, #28]
 800a6f2:	6811      	ldr	r1, [r2, #0]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	ea6f 0202 	mvn.w	r2, r2
 800a6fa:	400a      	ands	r2, r1
 800a6fc:	601a      	str	r2, [r3, #0]
  }
}
 800a6fe:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr

0800a708 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d009      	beq.n	800a730 <USART_RequestCmd+0x28>
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8b1b      	ldrh	r3, [r3, #24]
 800a720:	b29a      	uxth	r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	b29b      	uxth	r3, r3
 800a726:	4313      	orrs	r3, r2
 800a728:	b29a      	uxth	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	831a      	strh	r2, [r3, #24]
 800a72e:	e00b      	b.n	800a748 <USART_RequestCmd+0x40>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8b1b      	ldrh	r3, [r3, #24]
 800a734:	b29a      	uxth	r2, r3
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	ea6f 0303 	mvn.w	r3, r3
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4013      	ands	r3, r2
 800a742:	b29a      	uxth	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	831a      	strh	r2, [r3, #24]
  }
}
 800a748:	f107 0714 	add.w	r7, r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop

0800a754 <USART_OverrunDetectionConfig>:
  *         @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
  *          is asserted.
  * @retval None
  */
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	609a      	str	r2, [r3, #8]
}
 800a776:	f107 070c 	add.w	r7, r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <USART_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 800a79c:	f04f 0301 	mov.w	r3, #1
 800a7a0:	73fb      	strb	r3, [r7, #15]
 800a7a2:	e002      	b.n	800a7aa <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800a7a4:	f04f 0300 	mov.w	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f107 0714 	add.w	r7, r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bc80      	pop	{r7}
 800a7b6:	4770      	bx	lr

0800a7b8 <USART_ClearFlag>:
  *   - SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	621a      	str	r2, [r3, #32]
}
 800a7c8:	f107 070c 	add.w	r7, r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop

0800a7d4 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800a7de:	f04f 0300 	mov.w	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	f04f 0300 	mov.w	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	f04f 0300 	mov.w	r3, #0
 800a7ee:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800a7f0:	f04f 0300 	mov.w	r3, #0
 800a7f4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f04f 0201 	mov.w	r2, #1
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d105      	bne.n	800a826 <USART_GetITStatus+0x52>
  {
    itmask &= USARTx->CR1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	4013      	ands	r3, r2
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	e00d      	b.n	800a842 <USART_GetITStatus+0x6e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d105      	bne.n	800a838 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	4013      	ands	r3, r2
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	e004      	b.n	800a842 <USART_GetITStatus+0x6e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	4013      	ands	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a848:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f04f 0201 	mov.w	r2, #1
 800a850:	fa02 f303 	lsl.w	r3, r2, r3
 800a854:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	4013      	ands	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <USART_GetITStatus+0xa0>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <USART_GetITStatus+0xa0>
  {
    bitstatus = SET;
 800a86c:	f04f 0301 	mov.w	r3, #1
 800a870:	74fb      	strb	r3, [r7, #19]
 800a872:	e002      	b.n	800a87a <USART_GetITStatus+0xa6>
  }
  else
  {
    bitstatus = RESET;
 800a874:	f04f 0300 	mov.w	r3, #0
 800a878:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800a87a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	f107 071c 	add.w	r7, r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	bc80      	pop	{r7}
 800a886:	4770      	bx	lr

0800a888 <USART_ClearITPendingBit>:
  *     (USART_SendData()) or by writing 1 to the TXFRQ in the register USART_RQR
  *     (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	f04f 0300 	mov.w	r3, #0
 800a89c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a8a4:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f04f 0201 	mov.w	r2, #1
 800a8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b0:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	621a      	str	r2, [r3, #32]
}
 800a8b8:	f107 0714 	add.w	r7, r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bc80      	pop	{r7}
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop

0800a8c4 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 800a8d8:	f000 f9c6 	bl	800ac68 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	781a      	ldrb	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	791a      	ldrb	r2, [r3, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	795b      	ldrb	r3, [r3, #5]
 800a908:	4313      	orrs	r3, r2
 800a90a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 800a910:	4313      	orrs	r3, r2
 800a912:	b2da      	uxtb	r2, r3
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	4313      	orrs	r3, r2
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 800a91c:	f107 030f 	add.w	r3, r7, #15
 800a920:	4618      	mov	r0, r3
 800a922:	f04f 0120 	mov.w	r1, #32
 800a926:	f04f 0201 	mov.w	r2, #1
 800a92a:	f000 f925 	bl	800ab78 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800a92e:	f107 030e 	add.w	r3, r7, #14
 800a932:	4618      	mov	r0, r3
 800a934:	f04f 0123 	mov.w	r1, #35	; 0x23
 800a938:	f04f 0201 	mov.w	r2, #1
 800a93c:	f000 f91c 	bl	800ab78 <L3GD20_Write>
}
 800a940:	f107 0710 	add.w	r7, r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800a94e:	f107 0307 	add.w	r3, r7, #7
 800a952:	4618      	mov	r0, r3
 800a954:	f04f 0124 	mov.w	r1, #36	; 0x24
 800a958:	f04f 0201 	mov.w	r2, #1
 800a95c:	f000 f944 	bl	800abe8 <L3GD20_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a966:	b2db      	uxtb	r3, r3
 800a968:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800a96a:	f107 0307 	add.w	r3, r7, #7
 800a96e:	4618      	mov	r0, r3
 800a970:	f04f 0124 	mov.w	r1, #36	; 0x24
 800a974:	f04f 0201 	mov.w	r2, #1
 800a978:	f000 f8fe 	bl	800ab78 <L3GD20_Write>
}
 800a97c:	f107 0708 	add.w	r7, r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800a998:	f107 030f 	add.w	r3, r7, #15
 800a99c:	4618      	mov	r0, r3
 800a99e:	f04f 0130 	mov.w	r1, #48	; 0x30
 800a9a2:	f04f 0201 	mov.w	r2, #1
 800a9a6:	f000 f91f 	bl	800abe8 <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800a9aa:	f107 030e 	add.w	r3, r7, #14
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f04f 0122 	mov.w	r1, #34	; 0x22
 800a9b4:	f04f 0201 	mov.w	r2, #1
 800a9b8:	f000 f916 	bl	800abe8 <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	f023 0320 	bic.w	r3, r3, #32
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	789a      	ldrb	r2, [r3, #2]
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800a9f0:	f107 030f 	add.w	r3, r7, #15
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f04f 0130 	mov.w	r1, #48	; 0x30
 800a9fa:	f04f 0201 	mov.w	r2, #1
 800a9fe:	f000 f8bb 	bl	800ab78 <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800aa02:	f107 030e 	add.w	r3, r7, #14
 800aa06:	4618      	mov	r0, r3
 800aa08:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aa0c:	f04f 0201 	mov.w	r2, #1
 800aa10:	f000 f8b2 	bl	800ab78 <L3GD20_Write>
}
 800aa14:	f107 0710 	add.w	r7, r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800aa26:	f107 030f 	add.w	r3, r7, #15
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aa30:	f04f 0201 	mov.w	r2, #1
 800aa34:	f000 f8d8 	bl	800abe8 <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800aa4c:	f107 030f 	add.w	r3, r7, #15
 800aa50:	4618      	mov	r0, r3
 800aa52:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aa56:	f04f 0201 	mov.w	r2, #1
 800aa5a:	f000 f88d 	bl	800ab78 <L3GD20_Write>
}
 800aa5e:	f107 0710 	add.w	r7, r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop

0800aa68 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800aa72:	f107 030f 	add.w	r3, r7, #15
 800aa76:	4618      	mov	r0, r3
 800aa78:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aa7c:	f04f 0201 	mov.w	r2, #1
 800aa80:	f000 f8b2 	bl	800abe8 <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	f023 0308 	bic.w	r3, r3, #8
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800aa8e:	7bfa      	ldrb	r2, [r7, #15]
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800aa98:	f107 030f 	add.w	r3, r7, #15
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f04f 0122 	mov.w	r1, #34	; 0x22
 800aaa2:	f04f 0201 	mov.w	r2, #1
 800aaa6:	f000 f867 	bl	800ab78 <L3GD20_Write>
}
 800aaaa:	f107 0710 	add.w	r7, r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop

0800aab4 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800aabc:	f107 030f 	add.w	r3, r7, #15
 800aac0:	4618      	mov	r0, r3
 800aac2:	f04f 0121 	mov.w	r1, #33	; 0x21
 800aac6:	f04f 0201 	mov.w	r2, #1
 800aaca:	f000 f88d 	bl	800abe8 <L3GD20_Read>
  
  tmpreg &= 0xC0;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
 800aad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 800aae0:	4313      	orrs	r3, r2
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800aaec:	f107 030f 	add.w	r3, r7, #15
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f04f 0121 	mov.w	r1, #33	; 0x21
 800aaf6:	f04f 0201 	mov.w	r2, #1
 800aafa:	f000 f83d 	bl	800ab78 <L3GD20_Write>
}
 800aafe:	f107 0710 	add.w	r7, r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop

0800ab08 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ab12:	f107 030f 	add.w	r3, r7, #15
 800ab16:	4618      	mov	r0, r3
 800ab18:	f04f 0124 	mov.w	r1, #36	; 0x24
 800ab1c:	f04f 0201 	mov.w	r2, #1
 800ab20:	f000 f862 	bl	800abe8 <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	f023 0310 	bic.w	r3, r3, #16
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800ab2e:	7bfa      	ldrb	r2, [r7, #15]
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800ab38:	f107 030f 	add.w	r3, r7, #15
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f04f 0124 	mov.w	r1, #36	; 0x24
 800ab42:	f04f 0201 	mov.w	r2, #1
 800ab46:	f000 f817 	bl	800ab78 <L3GD20_Write>
}
 800ab4a:	f107 0710 	add.w	r7, r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop

0800ab54 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval Data status in a L3GD20 Data
  */
uint8_t L3GD20_GetDataStatus(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 800ab5a:	f107 0307 	add.w	r3, r7, #7
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f04f 0127 	mov.w	r1, #39	; 0x27
 800ab64:	f04f 0201 	mov.w	r2, #1
 800ab68:	f000 f83e 	bl	800abe8 <L3GD20_Read>
                  
  return tmpreg;
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f107 0708 	add.w	r7, r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	4613      	mov	r3, r2
 800ab82:	460a      	mov	r2, r1
 800ab84:	70fa      	strb	r2, [r7, #3]
 800ab86:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800ab88:	883b      	ldrh	r3, [r7, #0]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d903      	bls.n	800ab96 <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab94:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800ab96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ab9a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ab9e:	f04f 0108 	mov.w	r1, #8
 800aba2:	f7fa fe69 	bl	8005878 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 f93f 	bl	800ae2c <L3GD20_SendByte>
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800abae:	e00c      	b.n	800abca <L3GD20_Write+0x52>
  {
    L3GD20_SendByte(*pBuffer);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f939 	bl	800ae2c <L3GD20_SendByte>
    NumByteToWrite--;
 800abba:	883b      	ldrh	r3, [r7, #0]
 800abbc:	f103 33ff 	add.w	r3, r3, #4294967295
 800abc0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f103 0301 	add.w	r3, r3, #1
 800abc8:	607b      	str	r3, [r7, #4]
  L3GD20_CS_LOW();
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800abca:	883b      	ldrh	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1ef      	bne.n	800abb0 <L3GD20_Write+0x38>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 800abd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800abd4:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800abd8:	f04f 0108 	mov.w	r1, #8
 800abdc:	f7fa fe3e 	bl	800585c <GPIO_SetBits>
}
 800abe0:	f107 0708 	add.w	r7, r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	460a      	mov	r2, r1
 800abf4:	70fa      	strb	r2, [r7, #3]
 800abf6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800abf8:	883b      	ldrh	r3, [r7, #0]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d904      	bls.n	800ac08 <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800ac04:	70fb      	strb	r3, [r7, #3]
 800ac06:	e003      	b.n	800ac10 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac0e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800ac10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ac14:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ac18:	f04f 0108 	mov.w	r1, #8
 800ac1c:	f7fa fe2c 	bl	8005878 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f902 	bl	800ae2c <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800ac28:	e00f      	b.n	800ac4a <L3GD20_Read+0x62>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 800ac2a:	f04f 0000 	mov.w	r0, #0
 800ac2e:	f000 f8fd 	bl	800ae2c <L3GD20_SendByte>
 800ac32:	4603      	mov	r3, r0
 800ac34:	461a      	mov	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800ac3a:	883b      	ldrh	r3, [r7, #0]
 800ac3c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac40:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f103 0301 	add.w	r3, r3, #1
 800ac48:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800ac4a:	883b      	ldrh	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ec      	bne.n	800ac2a <L3GD20_Read+0x42>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 800ac50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ac54:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ac58:	f04f 0108 	mov.w	r1, #8
 800ac5c:	f7fa fdfe 	bl	800585c <GPIO_SetBits>
}  
 800ac60:	f107 0708 	add.w	r7, r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 800ac6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ac72:	f04f 0101 	mov.w	r1, #1
 800ac76:	f7fb fe05 	bl	8006884 <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 800ac7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ac7e:	f04f 0101 	mov.w	r1, #1
 800ac82:	f7fb fdd5 	bl	8006830 <RCC_AHBPeriphClockCmd>

  /* Enable CS  GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 800ac86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ac8a:	f04f 0101 	mov.w	r1, #1
 800ac8e:	f7fb fdcf 	bl	8006830 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 800ac92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ac96:	f04f 0101 	mov.w	r1, #1
 800ac9a:	f7fb fdc9 	bl	8006830 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHBPeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 800ac9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800aca2:	f04f 0101 	mov.w	r1, #1
 800aca6:	f7fb fdc3 	bl	8006830 <RCC_AHBPeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 800acaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acae:	f04f 0105 	mov.w	r1, #5
 800acb2:	f04f 0205 	mov.w	r2, #5
 800acb6:	f7fa fe13 	bl	80058e0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 800acba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acbe:	f04f 0106 	mov.w	r1, #6
 800acc2:	f04f 0205 	mov.w	r2, #5
 800acc6:	f7fa fe0b 	bl	80058e0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 800acca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acce:	f04f 0107 	mov.w	r1, #7
 800acd2:	f04f 0205 	mov.w	r2, #5
 800acd6:	f7fa fe03 	bl	80058e0 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800acda:	f04f 0302 	mov.w	r3, #2
 800acde:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;//GPIO_PuPd_DOWN;
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800acec:	f04f 0303 	mov.w	r3, #3
 800acf0:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 800acf2:	f04f 0320 	mov.w	r3, #32
 800acf6:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800acf8:	f107 0318 	add.w	r3, r7, #24
 800acfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad00:	4619      	mov	r1, r3
 800ad02:	f7fa fc67 	bl	80055d4 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 800ad06:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad0a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800ad0c:	f107 0318 	add.w	r3, r7, #24
 800ad10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7fa fc5d 	bl	80055d4 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 800ad1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad1e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800ad20:	f107 0318 	add.w	r3, r7, #24
 800ad24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f7fa fc53 	bl	80055d4 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 800ad2e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ad32:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad36:	f7fb ff3b 	bl	8006bb0 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800ad40:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800ad44:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800ad52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad56:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800ad58:	f04f 0310 	mov.w	r3, #16
 800ad5c:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 800ad64:	f04f 0307 	mov.w	r3, #7
 800ad68:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800ad6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ad6e:	80fb      	strh	r3, [r7, #6]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 800ad70:	f107 0304 	add.w	r3, r7, #4
 800ad74:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ad78:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f7fb ff89 	bl	8006c94 <SPI_Init>

  /* Configure the RX FIFO Threshold */
  SPI_RxFIFOThresholdConfig(L3GD20_SPI, SPI_RxFIFOThreshold_QF);
 800ad82:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ad86:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad8e:	f7fc f981 	bl	8007094 <SPI_RxFIFOThresholdConfig>
  /* Enable SPI1  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 800ad92:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ad96:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad9a:	f04f 0101 	mov.w	r1, #1
 800ad9e:	f7fc f8fd 	bl	8006f9c <SPI_Cmd>

  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 800ada2:	f04f 0308 	mov.w	r3, #8
 800ada6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800ada8:	f04f 0301 	mov.w	r3, #1
 800adac:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800adb4:	f04f 0303 	mov.w	r3, #3
 800adb8:	777b      	strb	r3, [r7, #29]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 800adba:	f107 0318 	add.w	r3, r7, #24
 800adbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800adc2:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800adc6:	4619      	mov	r1, r3
 800adc8:	f7fa fc04 	bl	80055d4 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 800adcc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800add0:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800add4:	f04f 0108 	mov.w	r1, #8
 800add8:	f7fa fd40 	bl	800585c <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 800addc:	f04f 0301 	mov.w	r3, #1
 800ade0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800ade2:	f04f 0300 	mov.w	r3, #0
 800ade6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800adee:	f04f 0303 	mov.w	r3, #3
 800adf2:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 800adfa:	f107 0318 	add.w	r3, r7, #24
 800adfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ae02:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ae06:	4619      	mov	r1, r3
 800ae08:	f7fa fbe4 	bl	80055d4 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 800ae0c:	f04f 0302 	mov.w	r3, #2
 800ae10:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 800ae12:	f107 0318 	add.w	r3, r7, #24
 800ae16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ae1a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f7fa fbd8 	bl	80055d4 <GPIO_Init>
}  
 800ae24:	f107 0720 	add.w	r7, r7, #32
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 800ae36:	f240 0348 	movw	r3, #72	; 0x48
 800ae3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae42:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800ae44:	e017      	b.n	800ae76 <L3GD20_SendByte+0x4a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 800ae46:	f240 0348 	movw	r3, #72	; 0x48
 800ae4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bf14      	ite	ne
 800ae54:	2200      	movne	r2, #0
 800ae56:	2201      	moveq	r2, #1
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	f103 31ff 	add.w	r1, r3, #4294967295
 800ae5e:	f240 0348 	movw	r3, #72	; 0x48
 800ae62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae66:	6019      	str	r1, [r3, #0]
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	d004      	beq.n	800ae76 <L3GD20_SendByte+0x4a>
 800ae6c:	f7f6 fde6 	bl	8001a3c <L3GD20_TIMEOUT_UserCallback>
 800ae70:	4603      	mov	r3, r0
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	e044      	b.n	800af00 <L3GD20_SendByte+0xd4>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800ae76:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ae7a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae7e:	f04f 0102 	mov.w	r1, #2
 800ae82:	f7fc fb4d 	bl	8007520 <SPI_I2S_GetFlagStatus>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d0dc      	beq.n	800ae46 <L3GD20_SendByte+0x1a>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800ae92:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ae96:	4619      	mov	r1, r3
 800ae98:	f7fc f9ec 	bl	8007274 <SPI_SendData8>
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 800ae9c:	f240 0348 	movw	r3, #72	; 0x48
 800aea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aea8:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800aeaa:	e017      	b.n	800aedc <L3GD20_SendByte+0xb0>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 800aeac:	f240 0348 	movw	r3, #72	; 0x48
 800aeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bf14      	ite	ne
 800aeba:	2200      	movne	r2, #0
 800aebc:	2201      	moveq	r2, #1
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	f103 31ff 	add.w	r1, r3, #4294967295
 800aec4:	f240 0348 	movw	r3, #72	; 0x48
 800aec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aecc:	6019      	str	r1, [r3, #0]
 800aece:	2a00      	cmp	r2, #0
 800aed0:	d004      	beq.n	800aedc <L3GD20_SendByte+0xb0>
 800aed2:	f7f6 fdb3 	bl	8001a3c <L3GD20_TIMEOUT_UserCallback>
 800aed6:	4603      	mov	r3, r0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	e011      	b.n	800af00 <L3GD20_SendByte+0xd4>
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800aedc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800aee0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800aee4:	f04f 0101 	mov.w	r1, #1
 800aee8:	f7fc fb1a 	bl	8007520 <SPI_I2S_GetFlagStatus>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0dc      	beq.n	800aeac <L3GD20_SendByte+0x80>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_ReceiveData8(L3GD20_SPI);
 800aef2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800aef6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800aefa:	f7fc f9e1 	bl	80072c0 <SPI_ReceiveData8>
 800aefe:	4603      	mov	r3, r0
}
 800af00:	4618      	mov	r0, r3
 800af02:	f107 0708 	add.w	r7, r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop

0800af0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af10:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800af14:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800af18:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800af1c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800af20:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800af24:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800af28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800af2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	f042 0201 	orr.w	r2, r2, #1
 800af42:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800af44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800af4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af54:	6859      	ldr	r1, [r3, #4]
 800af56:	f24c 030c 	movw	r3, #49164	; 0xc00c
 800af5a:	f6cf 037f 	movt	r3, #63615	; 0xf87f
 800af5e:	400b      	ands	r3, r1
 800af60:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800af62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800af72:	6812      	ldr	r2, [r2, #0]
 800af74:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800af78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af7c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800af7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af94:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800af96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800af9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afa2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800afa6:	6852      	ldr	r2, [r2, #4]
 800afa8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800afac:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800afae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800afb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800afbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800afc0:	f022 020f 	bic.w	r2, r2, #15
 800afc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800afc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800afce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800afd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800afd8:	f64f 43cc 	movw	r3, #64716	; 0xfccc
 800afdc:	f6cf 7300 	movt	r3, #65280	; 0xff00
 800afe0:	400b      	ands	r3, r1
 800afe2:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800afe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800aff2:	f000 f8a7 	bl	800b144 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800aff6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800affa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800affe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b002:	609a      	str	r2, [r3, #8]
#endif  
}
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop

0800b008 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	f04f 0300 	mov.w	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	f04f 0300 	mov.w	r3, #0
 800b024:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b02a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f003 030c 	and.w	r3, r3, #12
 800b034:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d00d      	beq.n	800b058 <SystemCoreClockUpdate+0x50>
 800b03c:	2b08      	cmp	r3, #8
 800b03e:	d015      	beq.n	800b06c <SystemCoreClockUpdate+0x64>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d153      	bne.n	800b0ec <SystemCoreClockUpdate+0xe4>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800b044:	f240 034c 	movw	r3, #76	; 0x4c
 800b048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b04c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b050:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b054:	601a      	str	r2, [r3, #0]
      break;
 800b056:	e053      	b.n	800b100 <SystemCoreClockUpdate+0xf8>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800b058:	f240 034c 	movw	r3, #76	; 0x4c
 800b05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b060:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b064:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b068:	601a      	str	r2, [r3, #0]
      break;
 800b06a:	e049      	b.n	800b100 <SystemCoreClockUpdate+0xf8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800b06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b070:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800b07a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800b07c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b080:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b08a:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800b092:	f103 0302 	add.w	r3, r3, #2
 800b096:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10c      	bne.n	800b0b8 <SystemCoreClockUpdate+0xb0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b0a4:	f2c0 033d 	movt	r3, #61	; 0x3d
 800b0a8:	fb03 f202 	mul.w	r2, r3, r2
 800b0ac:	f240 034c 	movw	r3, #76	; 0x4c
 800b0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0b4:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 800b0b6:	e023      	b.n	800b100 <SystemCoreClockUpdate+0xf8>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800b0b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	f103 0301 	add.w	r3, r3, #1
 800b0ca:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800b0cc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b0d0:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	fb02 f203 	mul.w	r2, r2, r3
 800b0e0:	f240 034c 	movw	r3, #76	; 0x4c
 800b0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0e8:	601a      	str	r2, [r3, #0]
      }      
      break;
 800b0ea:	e009      	b.n	800b100 <SystemCoreClockUpdate+0xf8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800b0ec:	f240 034c 	movw	r3, #76	; 0x4c
 800b0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0f4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800b0f8:	f2c0 027a 	movt	r2, #122	; 0x7a
 800b0fc:	601a      	str	r2, [r3, #0]
      break;
 800b0fe:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b104:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b10e:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800b112:	f240 0350 	movw	r3, #80	; 0x50
 800b116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b11a:	5c9b      	ldrb	r3, [r3, r2]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800b120:	f240 034c 	movw	r3, #76	; 0x4c
 800b124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	fa22 f203 	lsr.w	r2, r2, r3
 800b130:	f240 034c 	movw	r3, #76	; 0x4c
 800b134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b138:	601a      	str	r2, [r3, #0]
}
 800b13a:	f107 0714 	add.w	r7, r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	bc80      	pop	{r7}
 800b142:	4770      	bx	lr

0800b144 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	f04f 0300 	mov.w	r3, #0
 800b154:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800b156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b15a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b15e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b162:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b166:	6812      	ldr	r2, [r2, #0]
 800b168:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b16c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800b16e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b172:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b17c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f103 0301 	add.w	r3, r3, #1
 800b184:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <SetSysClock+0x50>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b192:	d1ec      	bne.n	800b16e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800b194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b198:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800b1a6:	f04f 0301 	mov.w	r3, #1
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	e002      	b.n	800b1b4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d176      	bne.n	800b2a8 <SetSysClock+0x164>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800b1ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1c2:	f04f 0212 	mov.w	r2, #18
 800b1c6:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800b1c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b1d8:	6852      	ldr	r2, [r2, #4]
 800b1da:	605a      	str	r2, [r3, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800b1dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b1ec:	6852      	ldr	r2, [r2, #4]
 800b1ee:	605a      	str	r2, [r3, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800b1f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b200:	6852      	ldr	r2, [r2, #4]
 800b202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b206:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800b208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b20c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b214:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b218:	6852      	ldr	r2, [r2, #4]
 800b21a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800b21e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 800b220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b22c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b230:	6852      	ldr	r2, [r2, #4]
 800b232:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800b236:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800b238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b23c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b244:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b248:	6812      	ldr	r2, [r2, #0]
 800b24a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b24e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800b250:	bf00      	nop
 800b252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b256:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0f6      	beq.n	800b252 <SetSysClock+0x10e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800b264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b268:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b26c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b270:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b274:	6852      	ldr	r2, [r2, #4]
 800b276:	f022 0203 	bic.w	r2, r2, #3
 800b27a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800b27c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b280:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b288:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b28c:	6852      	ldr	r2, [r2, #4]
 800b28e:	f042 0202 	orr.w	r2, r2, #2
 800b292:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800b294:	bf00      	nop
 800b296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b29a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f003 030c 	and.w	r3, r3, #12
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	d1f6      	bne.n	800b296 <SetSysClock+0x152>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 800b2a8:	f107 070c 	add.w	r7, r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop

0800b2b4 <__aeabi_drsub>:
 800b2b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b2b8:	e002      	b.n	800b2c0 <__adddf3>
 800b2ba:	bf00      	nop

0800b2bc <__aeabi_dsub>:
 800b2bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b2c0 <__adddf3>:
 800b2c0:	b530      	push	{r4, r5, lr}
 800b2c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b2c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b2ca:	ea94 0f05 	teq	r4, r5
 800b2ce:	bf08      	it	eq
 800b2d0:	ea90 0f02 	teqeq	r0, r2
 800b2d4:	bf1f      	itttt	ne
 800b2d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b2da:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b2de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b2e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b2e6:	f000 80e2 	beq.w	800b4ae <__adddf3+0x1ee>
 800b2ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b2ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b2f2:	bfb8      	it	lt
 800b2f4:	426d      	neglt	r5, r5
 800b2f6:	dd0c      	ble.n	800b312 <__adddf3+0x52>
 800b2f8:	442c      	add	r4, r5
 800b2fa:	ea80 0202 	eor.w	r2, r0, r2
 800b2fe:	ea81 0303 	eor.w	r3, r1, r3
 800b302:	ea82 0000 	eor.w	r0, r2, r0
 800b306:	ea83 0101 	eor.w	r1, r3, r1
 800b30a:	ea80 0202 	eor.w	r2, r0, r2
 800b30e:	ea81 0303 	eor.w	r3, r1, r3
 800b312:	2d36      	cmp	r5, #54	; 0x36
 800b314:	bf88      	it	hi
 800b316:	bd30      	pophi	{r4, r5, pc}
 800b318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b31c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b328:	d002      	beq.n	800b330 <__adddf3+0x70>
 800b32a:	4240      	negs	r0, r0
 800b32c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b33c:	d002      	beq.n	800b344 <__adddf3+0x84>
 800b33e:	4252      	negs	r2, r2
 800b340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b344:	ea94 0f05 	teq	r4, r5
 800b348:	f000 80a7 	beq.w	800b49a <__adddf3+0x1da>
 800b34c:	f1a4 0401 	sub.w	r4, r4, #1
 800b350:	f1d5 0e20 	rsbs	lr, r5, #32
 800b354:	db0d      	blt.n	800b372 <__adddf3+0xb2>
 800b356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b35a:	fa22 f205 	lsr.w	r2, r2, r5
 800b35e:	1880      	adds	r0, r0, r2
 800b360:	f141 0100 	adc.w	r1, r1, #0
 800b364:	fa03 f20e 	lsl.w	r2, r3, lr
 800b368:	1880      	adds	r0, r0, r2
 800b36a:	fa43 f305 	asr.w	r3, r3, r5
 800b36e:	4159      	adcs	r1, r3
 800b370:	e00e      	b.n	800b390 <__adddf3+0xd0>
 800b372:	f1a5 0520 	sub.w	r5, r5, #32
 800b376:	f10e 0e20 	add.w	lr, lr, #32
 800b37a:	2a01      	cmp	r2, #1
 800b37c:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b380:	bf28      	it	cs
 800b382:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b386:	fa43 f305 	asr.w	r3, r3, r5
 800b38a:	18c0      	adds	r0, r0, r3
 800b38c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b394:	d507      	bpl.n	800b3a6 <__adddf3+0xe6>
 800b396:	f04f 0e00 	mov.w	lr, #0
 800b39a:	f1dc 0c00 	rsbs	ip, ip, #0
 800b39e:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b3a2:	eb6e 0101 	sbc.w	r1, lr, r1
 800b3a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b3aa:	d31b      	bcc.n	800b3e4 <__adddf3+0x124>
 800b3ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b3b0:	d30c      	bcc.n	800b3cc <__adddf3+0x10c>
 800b3b2:	0849      	lsrs	r1, r1, #1
 800b3b4:	ea5f 0030 	movs.w	r0, r0, rrx
 800b3b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b3bc:	f104 0401 	add.w	r4, r4, #1
 800b3c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b3c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b3c8:	f080 809a 	bcs.w	800b500 <__adddf3+0x240>
 800b3cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b3d0:	bf08      	it	eq
 800b3d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b3d6:	f150 0000 	adcs.w	r0, r0, #0
 800b3da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b3de:	ea41 0105 	orr.w	r1, r1, r5
 800b3e2:	bd30      	pop	{r4, r5, pc}
 800b3e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b3e8:	4140      	adcs	r0, r0
 800b3ea:	eb41 0101 	adc.w	r1, r1, r1
 800b3ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b3f2:	f1a4 0401 	sub.w	r4, r4, #1
 800b3f6:	d1e9      	bne.n	800b3cc <__adddf3+0x10c>
 800b3f8:	f091 0f00 	teq	r1, #0
 800b3fc:	bf04      	itt	eq
 800b3fe:	4601      	moveq	r1, r0
 800b400:	2000      	moveq	r0, #0
 800b402:	fab1 f381 	clz	r3, r1
 800b406:	bf08      	it	eq
 800b408:	3320      	addeq	r3, #32
 800b40a:	f1a3 030b 	sub.w	r3, r3, #11
 800b40e:	f1b3 0220 	subs.w	r2, r3, #32
 800b412:	da0c      	bge.n	800b42e <__adddf3+0x16e>
 800b414:	320c      	adds	r2, #12
 800b416:	dd08      	ble.n	800b42a <__adddf3+0x16a>
 800b418:	f102 0c14 	add.w	ip, r2, #20
 800b41c:	f1c2 020c 	rsb	r2, r2, #12
 800b420:	fa01 f00c 	lsl.w	r0, r1, ip
 800b424:	fa21 f102 	lsr.w	r1, r1, r2
 800b428:	e00c      	b.n	800b444 <__adddf3+0x184>
 800b42a:	f102 0214 	add.w	r2, r2, #20
 800b42e:	bfd8      	it	le
 800b430:	f1c2 0c20 	rsble	ip, r2, #32
 800b434:	fa01 f102 	lsl.w	r1, r1, r2
 800b438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b43c:	bfdc      	itt	le
 800b43e:	ea41 010c 	orrle.w	r1, r1, ip
 800b442:	4090      	lslle	r0, r2
 800b444:	1ae4      	subs	r4, r4, r3
 800b446:	bfa2      	ittt	ge
 800b448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b44c:	4329      	orrge	r1, r5
 800b44e:	bd30      	popge	{r4, r5, pc}
 800b450:	ea6f 0404 	mvn.w	r4, r4
 800b454:	3c1f      	subs	r4, #31
 800b456:	da1c      	bge.n	800b492 <__adddf3+0x1d2>
 800b458:	340c      	adds	r4, #12
 800b45a:	dc0e      	bgt.n	800b47a <__adddf3+0x1ba>
 800b45c:	f104 0414 	add.w	r4, r4, #20
 800b460:	f1c4 0220 	rsb	r2, r4, #32
 800b464:	fa20 f004 	lsr.w	r0, r0, r4
 800b468:	fa01 f302 	lsl.w	r3, r1, r2
 800b46c:	ea40 0003 	orr.w	r0, r0, r3
 800b470:	fa21 f304 	lsr.w	r3, r1, r4
 800b474:	ea45 0103 	orr.w	r1, r5, r3
 800b478:	bd30      	pop	{r4, r5, pc}
 800b47a:	f1c4 040c 	rsb	r4, r4, #12
 800b47e:	f1c4 0220 	rsb	r2, r4, #32
 800b482:	fa20 f002 	lsr.w	r0, r0, r2
 800b486:	fa01 f304 	lsl.w	r3, r1, r4
 800b48a:	ea40 0003 	orr.w	r0, r0, r3
 800b48e:	4629      	mov	r1, r5
 800b490:	bd30      	pop	{r4, r5, pc}
 800b492:	fa21 f004 	lsr.w	r0, r1, r4
 800b496:	4629      	mov	r1, r5
 800b498:	bd30      	pop	{r4, r5, pc}
 800b49a:	f094 0f00 	teq	r4, #0
 800b49e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b4a2:	bf06      	itte	eq
 800b4a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b4a8:	3401      	addeq	r4, #1
 800b4aa:	3d01      	subne	r5, #1
 800b4ac:	e74e      	b.n	800b34c <__adddf3+0x8c>
 800b4ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b4b2:	bf18      	it	ne
 800b4b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b4b8:	d029      	beq.n	800b50e <__adddf3+0x24e>
 800b4ba:	ea94 0f05 	teq	r4, r5
 800b4be:	bf08      	it	eq
 800b4c0:	ea90 0f02 	teqeq	r0, r2
 800b4c4:	d005      	beq.n	800b4d2 <__adddf3+0x212>
 800b4c6:	ea54 0c00 	orrs.w	ip, r4, r0
 800b4ca:	bf04      	itt	eq
 800b4cc:	4619      	moveq	r1, r3
 800b4ce:	4610      	moveq	r0, r2
 800b4d0:	bd30      	pop	{r4, r5, pc}
 800b4d2:	ea91 0f03 	teq	r1, r3
 800b4d6:	bf1e      	ittt	ne
 800b4d8:	2100      	movne	r1, #0
 800b4da:	2000      	movne	r0, #0
 800b4dc:	bd30      	popne	{r4, r5, pc}
 800b4de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b4e2:	d105      	bne.n	800b4f0 <__adddf3+0x230>
 800b4e4:	0040      	lsls	r0, r0, #1
 800b4e6:	4149      	adcs	r1, r1
 800b4e8:	bf28      	it	cs
 800b4ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b4ee:	bd30      	pop	{r4, r5, pc}
 800b4f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b4f4:	bf3c      	itt	cc
 800b4f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b4fa:	bd30      	popcc	{r4, r5, pc}
 800b4fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b508:	f04f 0000 	mov.w	r0, #0
 800b50c:	bd30      	pop	{r4, r5, pc}
 800b50e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b512:	bf1a      	itte	ne
 800b514:	4619      	movne	r1, r3
 800b516:	4610      	movne	r0, r2
 800b518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b51c:	bf1c      	itt	ne
 800b51e:	460b      	movne	r3, r1
 800b520:	4602      	movne	r2, r0
 800b522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b526:	bf06      	itte	eq
 800b528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b52c:	ea91 0f03 	teqeq	r1, r3
 800b530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b534:	bd30      	pop	{r4, r5, pc}
 800b536:	bf00      	nop

0800b538 <__aeabi_ui2d>:
 800b538:	f090 0f00 	teq	r0, #0
 800b53c:	bf04      	itt	eq
 800b53e:	2100      	moveq	r1, #0
 800b540:	4770      	bxeq	lr
 800b542:	b530      	push	{r4, r5, lr}
 800b544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b54c:	f04f 0500 	mov.w	r5, #0
 800b550:	f04f 0100 	mov.w	r1, #0
 800b554:	e750      	b.n	800b3f8 <__adddf3+0x138>
 800b556:	bf00      	nop

0800b558 <__aeabi_i2d>:
 800b558:	f090 0f00 	teq	r0, #0
 800b55c:	bf04      	itt	eq
 800b55e:	2100      	moveq	r1, #0
 800b560:	4770      	bxeq	lr
 800b562:	b530      	push	{r4, r5, lr}
 800b564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b56c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b570:	bf48      	it	mi
 800b572:	4240      	negmi	r0, r0
 800b574:	f04f 0100 	mov.w	r1, #0
 800b578:	e73e      	b.n	800b3f8 <__adddf3+0x138>
 800b57a:	bf00      	nop

0800b57c <__aeabi_f2d>:
 800b57c:	0042      	lsls	r2, r0, #1
 800b57e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b582:	ea4f 0131 	mov.w	r1, r1, rrx
 800b586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b58a:	bf1f      	itttt	ne
 800b58c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b598:	4770      	bxne	lr
 800b59a:	f092 0f00 	teq	r2, #0
 800b59e:	bf14      	ite	ne
 800b5a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b5a4:	4770      	bxeq	lr
 800b5a6:	b530      	push	{r4, r5, lr}
 800b5a8:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b5ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b5b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b5b4:	e720      	b.n	800b3f8 <__adddf3+0x138>
 800b5b6:	bf00      	nop

0800b5b8 <__aeabi_ul2d>:
 800b5b8:	ea50 0201 	orrs.w	r2, r0, r1
 800b5bc:	bf08      	it	eq
 800b5be:	4770      	bxeq	lr
 800b5c0:	b530      	push	{r4, r5, lr}
 800b5c2:	f04f 0500 	mov.w	r5, #0
 800b5c6:	e00a      	b.n	800b5de <__aeabi_l2d+0x16>

0800b5c8 <__aeabi_l2d>:
 800b5c8:	ea50 0201 	orrs.w	r2, r0, r1
 800b5cc:	bf08      	it	eq
 800b5ce:	4770      	bxeq	lr
 800b5d0:	b530      	push	{r4, r5, lr}
 800b5d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b5d6:	d502      	bpl.n	800b5de <__aeabi_l2d+0x16>
 800b5d8:	4240      	negs	r0, r0
 800b5da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b5de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b5e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b5e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b5ea:	f43f aedc 	beq.w	800b3a6 <__adddf3+0xe6>
 800b5ee:	f04f 0203 	mov.w	r2, #3
 800b5f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b5f6:	bf18      	it	ne
 800b5f8:	3203      	addne	r2, #3
 800b5fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b5fe:	bf18      	it	ne
 800b600:	3203      	addne	r2, #3
 800b602:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b606:	f1c2 0320 	rsb	r3, r2, #32
 800b60a:	fa00 fc03 	lsl.w	ip, r0, r3
 800b60e:	fa20 f002 	lsr.w	r0, r0, r2
 800b612:	fa01 fe03 	lsl.w	lr, r1, r3
 800b616:	ea40 000e 	orr.w	r0, r0, lr
 800b61a:	fa21 f102 	lsr.w	r1, r1, r2
 800b61e:	4414      	add	r4, r2
 800b620:	e6c1      	b.n	800b3a6 <__adddf3+0xe6>
 800b622:	bf00      	nop

0800b624 <__aeabi_dmul>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b62a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b62e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b632:	bf1d      	ittte	ne
 800b634:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b638:	ea94 0f0c 	teqne	r4, ip
 800b63c:	ea95 0f0c 	teqne	r5, ip
 800b640:	f000 f8de 	bleq	800b800 <__aeabi_dmul+0x1dc>
 800b644:	442c      	add	r4, r5
 800b646:	ea81 0603 	eor.w	r6, r1, r3
 800b64a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800b64e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800b652:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800b656:	bf18      	it	ne
 800b658:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800b65c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b664:	d038      	beq.n	800b6d8 <__aeabi_dmul+0xb4>
 800b666:	fba0 ce02 	umull	ip, lr, r0, r2
 800b66a:	f04f 0500 	mov.w	r5, #0
 800b66e:	fbe1 e502 	umlal	lr, r5, r1, r2
 800b672:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800b676:	fbe0 e503 	umlal	lr, r5, r0, r3
 800b67a:	f04f 0600 	mov.w	r6, #0
 800b67e:	fbe1 5603 	umlal	r5, r6, r1, r3
 800b682:	f09c 0f00 	teq	ip, #0
 800b686:	bf18      	it	ne
 800b688:	f04e 0e01 	orrne.w	lr, lr, #1
 800b68c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800b690:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800b694:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800b698:	d204      	bcs.n	800b6a4 <__aeabi_dmul+0x80>
 800b69a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800b69e:	416d      	adcs	r5, r5
 800b6a0:	eb46 0606 	adc.w	r6, r6, r6
 800b6a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800b6a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800b6ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800b6b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800b6b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800b6b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b6bc:	bf88      	it	hi
 800b6be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b6c2:	d81e      	bhi.n	800b702 <__aeabi_dmul+0xde>
 800b6c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800b6c8:	bf08      	it	eq
 800b6ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800b6ce:	f150 0000 	adcs.w	r0, r0, #0
 800b6d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800b6dc:	ea46 0101 	orr.w	r1, r6, r1
 800b6e0:	ea40 0002 	orr.w	r0, r0, r2
 800b6e4:	ea81 0103 	eor.w	r1, r1, r3
 800b6e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800b6ec:	bfc2      	ittt	gt
 800b6ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b6f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b6f6:	bd70      	popgt	{r4, r5, r6, pc}
 800b6f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b6fc:	f04f 0e00 	mov.w	lr, #0
 800b700:	3c01      	subs	r4, #1
 800b702:	f300 80ab 	bgt.w	800b85c <__aeabi_dmul+0x238>
 800b706:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800b70a:	bfde      	ittt	le
 800b70c:	2000      	movle	r0, #0
 800b70e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800b712:	bd70      	pople	{r4, r5, r6, pc}
 800b714:	f1c4 0400 	rsb	r4, r4, #0
 800b718:	3c20      	subs	r4, #32
 800b71a:	da35      	bge.n	800b788 <__aeabi_dmul+0x164>
 800b71c:	340c      	adds	r4, #12
 800b71e:	dc1b      	bgt.n	800b758 <__aeabi_dmul+0x134>
 800b720:	f104 0414 	add.w	r4, r4, #20
 800b724:	f1c4 0520 	rsb	r5, r4, #32
 800b728:	fa00 f305 	lsl.w	r3, r0, r5
 800b72c:	fa20 f004 	lsr.w	r0, r0, r4
 800b730:	fa01 f205 	lsl.w	r2, r1, r5
 800b734:	ea40 0002 	orr.w	r0, r0, r2
 800b738:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800b73c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b744:	fa21 f604 	lsr.w	r6, r1, r4
 800b748:	eb42 0106 	adc.w	r1, r2, r6
 800b74c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b750:	bf08      	it	eq
 800b752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	f1c4 040c 	rsb	r4, r4, #12
 800b75c:	f1c4 0520 	rsb	r5, r4, #32
 800b760:	fa00 f304 	lsl.w	r3, r0, r4
 800b764:	fa20 f005 	lsr.w	r0, r0, r5
 800b768:	fa01 f204 	lsl.w	r2, r1, r4
 800b76c:	ea40 0002 	orr.w	r0, r0, r2
 800b770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b778:	f141 0100 	adc.w	r1, r1, #0
 800b77c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b780:	bf08      	it	eq
 800b782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	f1c4 0520 	rsb	r5, r4, #32
 800b78c:	fa00 f205 	lsl.w	r2, r0, r5
 800b790:	ea4e 0e02 	orr.w	lr, lr, r2
 800b794:	fa20 f304 	lsr.w	r3, r0, r4
 800b798:	fa01 f205 	lsl.w	r2, r1, r5
 800b79c:	ea43 0302 	orr.w	r3, r3, r2
 800b7a0:	fa21 f004 	lsr.w	r0, r1, r4
 800b7a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b7a8:	fa21 f204 	lsr.w	r2, r1, r4
 800b7ac:	ea20 0002 	bic.w	r0, r0, r2
 800b7b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800b7b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b7b8:	bf08      	it	eq
 800b7ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	f094 0f00 	teq	r4, #0
 800b7c4:	d10f      	bne.n	800b7e6 <__aeabi_dmul+0x1c2>
 800b7c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800b7ca:	0040      	lsls	r0, r0, #1
 800b7cc:	eb41 0101 	adc.w	r1, r1, r1
 800b7d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b7d4:	bf08      	it	eq
 800b7d6:	3c01      	subeq	r4, #1
 800b7d8:	d0f7      	beq.n	800b7ca <__aeabi_dmul+0x1a6>
 800b7da:	ea41 0106 	orr.w	r1, r1, r6
 800b7de:	f095 0f00 	teq	r5, #0
 800b7e2:	bf18      	it	ne
 800b7e4:	4770      	bxne	lr
 800b7e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800b7ea:	0052      	lsls	r2, r2, #1
 800b7ec:	eb43 0303 	adc.w	r3, r3, r3
 800b7f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b7f4:	bf08      	it	eq
 800b7f6:	3d01      	subeq	r5, #1
 800b7f8:	d0f7      	beq.n	800b7ea <__aeabi_dmul+0x1c6>
 800b7fa:	ea43 0306 	orr.w	r3, r3, r6
 800b7fe:	4770      	bx	lr
 800b800:	ea94 0f0c 	teq	r4, ip
 800b804:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b808:	bf18      	it	ne
 800b80a:	ea95 0f0c 	teqne	r5, ip
 800b80e:	d00c      	beq.n	800b82a <__aeabi_dmul+0x206>
 800b810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b814:	bf18      	it	ne
 800b816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b81a:	d1d1      	bne.n	800b7c0 <__aeabi_dmul+0x19c>
 800b81c:	ea81 0103 	eor.w	r1, r1, r3
 800b820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b824:	f04f 0000 	mov.w	r0, #0
 800b828:	bd70      	pop	{r4, r5, r6, pc}
 800b82a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b82e:	bf06      	itte	eq
 800b830:	4610      	moveq	r0, r2
 800b832:	4619      	moveq	r1, r3
 800b834:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b838:	d019      	beq.n	800b86e <__aeabi_dmul+0x24a>
 800b83a:	ea94 0f0c 	teq	r4, ip
 800b83e:	d102      	bne.n	800b846 <__aeabi_dmul+0x222>
 800b840:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800b844:	d113      	bne.n	800b86e <__aeabi_dmul+0x24a>
 800b846:	ea95 0f0c 	teq	r5, ip
 800b84a:	d105      	bne.n	800b858 <__aeabi_dmul+0x234>
 800b84c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800b850:	bf1c      	itt	ne
 800b852:	4610      	movne	r0, r2
 800b854:	4619      	movne	r1, r3
 800b856:	d10a      	bne.n	800b86e <__aeabi_dmul+0x24a>
 800b858:	ea81 0103 	eor.w	r1, r1, r3
 800b85c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b860:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b864:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b868:	f04f 0000 	mov.w	r0, #0
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b872:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800b876:	bd70      	pop	{r4, r5, r6, pc}

0800b878 <__aeabi_ddiv>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b87e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b886:	bf1d      	ittte	ne
 800b888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b88c:	ea94 0f0c 	teqne	r4, ip
 800b890:	ea95 0f0c 	teqne	r5, ip
 800b894:	f000 f8a7 	bleq	800b9e6 <__aeabi_ddiv+0x16e>
 800b898:	eba4 0405 	sub.w	r4, r4, r5
 800b89c:	ea81 0e03 	eor.w	lr, r1, r3
 800b8a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b8a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b8a8:	f000 8088 	beq.w	800b9bc <__aeabi_ddiv+0x144>
 800b8ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b8b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800b8b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800b8b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800b8bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800b8c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800b8c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800b8c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800b8cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800b8d0:	429d      	cmp	r5, r3
 800b8d2:	bf08      	it	eq
 800b8d4:	4296      	cmpeq	r6, r2
 800b8d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800b8da:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800b8de:	d202      	bcs.n	800b8e6 <__aeabi_ddiv+0x6e>
 800b8e0:	085b      	lsrs	r3, r3, #1
 800b8e2:	ea4f 0232 	mov.w	r2, r2, rrx
 800b8e6:	1ab6      	subs	r6, r6, r2
 800b8e8:	eb65 0503 	sbc.w	r5, r5, r3
 800b8ec:	085b      	lsrs	r3, r3, #1
 800b8ee:	ea4f 0232 	mov.w	r2, r2, rrx
 800b8f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b8f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800b8fa:	ebb6 0e02 	subs.w	lr, r6, r2
 800b8fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b902:	bf22      	ittt	cs
 800b904:	1ab6      	subcs	r6, r6, r2
 800b906:	4675      	movcs	r5, lr
 800b908:	ea40 000c 	orrcs.w	r0, r0, ip
 800b90c:	085b      	lsrs	r3, r3, #1
 800b90e:	ea4f 0232 	mov.w	r2, r2, rrx
 800b912:	ebb6 0e02 	subs.w	lr, r6, r2
 800b916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b91a:	bf22      	ittt	cs
 800b91c:	1ab6      	subcs	r6, r6, r2
 800b91e:	4675      	movcs	r5, lr
 800b920:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	ea4f 0232 	mov.w	r2, r2, rrx
 800b92a:	ebb6 0e02 	subs.w	lr, r6, r2
 800b92e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b932:	bf22      	ittt	cs
 800b934:	1ab6      	subcs	r6, r6, r2
 800b936:	4675      	movcs	r5, lr
 800b938:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800b93c:	085b      	lsrs	r3, r3, #1
 800b93e:	ea4f 0232 	mov.w	r2, r2, rrx
 800b942:	ebb6 0e02 	subs.w	lr, r6, r2
 800b946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b94a:	bf22      	ittt	cs
 800b94c:	1ab6      	subcs	r6, r6, r2
 800b94e:	4675      	movcs	r5, lr
 800b950:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800b954:	ea55 0e06 	orrs.w	lr, r5, r6
 800b958:	d018      	beq.n	800b98c <__aeabi_ddiv+0x114>
 800b95a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800b95e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800b962:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800b966:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b96a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800b96e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b972:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800b976:	d1c0      	bne.n	800b8fa <__aeabi_ddiv+0x82>
 800b978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b97c:	d10b      	bne.n	800b996 <__aeabi_ddiv+0x11e>
 800b97e:	ea41 0100 	orr.w	r1, r1, r0
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b98a:	e7b6      	b.n	800b8fa <__aeabi_ddiv+0x82>
 800b98c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b990:	bf04      	itt	eq
 800b992:	4301      	orreq	r1, r0
 800b994:	2000      	moveq	r0, #0
 800b996:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b99a:	bf88      	it	hi
 800b99c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b9a0:	f63f aeaf 	bhi.w	800b702 <__aeabi_dmul+0xde>
 800b9a4:	ebb5 0c03 	subs.w	ip, r5, r3
 800b9a8:	bf04      	itt	eq
 800b9aa:	ebb6 0c02 	subseq.w	ip, r6, r2
 800b9ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b9b2:	f150 0000 	adcs.w	r0, r0, #0
 800b9b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800b9c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800b9c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800b9c8:	bfc2      	ittt	gt
 800b9ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b9ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b9d2:	bd70      	popgt	{r4, r5, r6, pc}
 800b9d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b9d8:	f04f 0e00 	mov.w	lr, #0
 800b9dc:	3c01      	subs	r4, #1
 800b9de:	e690      	b.n	800b702 <__aeabi_dmul+0xde>
 800b9e0:	ea45 0e06 	orr.w	lr, r5, r6
 800b9e4:	e68d      	b.n	800b702 <__aeabi_dmul+0xde>
 800b9e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b9ea:	ea94 0f0c 	teq	r4, ip
 800b9ee:	bf08      	it	eq
 800b9f0:	ea95 0f0c 	teqeq	r5, ip
 800b9f4:	f43f af3b 	beq.w	800b86e <__aeabi_dmul+0x24a>
 800b9f8:	ea94 0f0c 	teq	r4, ip
 800b9fc:	d10a      	bne.n	800ba14 <__aeabi_ddiv+0x19c>
 800b9fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ba02:	f47f af34 	bne.w	800b86e <__aeabi_dmul+0x24a>
 800ba06:	ea95 0f0c 	teq	r5, ip
 800ba0a:	f47f af25 	bne.w	800b858 <__aeabi_dmul+0x234>
 800ba0e:	4610      	mov	r0, r2
 800ba10:	4619      	mov	r1, r3
 800ba12:	e72c      	b.n	800b86e <__aeabi_dmul+0x24a>
 800ba14:	ea95 0f0c 	teq	r5, ip
 800ba18:	d106      	bne.n	800ba28 <__aeabi_ddiv+0x1b0>
 800ba1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ba1e:	f43f aefd 	beq.w	800b81c <__aeabi_dmul+0x1f8>
 800ba22:	4610      	mov	r0, r2
 800ba24:	4619      	mov	r1, r3
 800ba26:	e722      	b.n	800b86e <__aeabi_dmul+0x24a>
 800ba28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ba2c:	bf18      	it	ne
 800ba2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ba32:	f47f aec5 	bne.w	800b7c0 <__aeabi_dmul+0x19c>
 800ba36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800ba3a:	f47f af0d 	bne.w	800b858 <__aeabi_dmul+0x234>
 800ba3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800ba42:	f47f aeeb 	bne.w	800b81c <__aeabi_dmul+0x1f8>
 800ba46:	e712      	b.n	800b86e <__aeabi_dmul+0x24a>

0800ba48 <__gedf2>:
 800ba48:	f04f 3cff 	mov.w	ip, #4294967295
 800ba4c:	e006      	b.n	800ba5c <__cmpdf2+0x4>
 800ba4e:	bf00      	nop

0800ba50 <__ledf2>:
 800ba50:	f04f 0c01 	mov.w	ip, #1
 800ba54:	e002      	b.n	800ba5c <__cmpdf2+0x4>
 800ba56:	bf00      	nop

0800ba58 <__cmpdf2>:
 800ba58:	f04f 0c01 	mov.w	ip, #1
 800ba5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ba60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ba64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ba68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ba6c:	bf18      	it	ne
 800ba6e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800ba72:	d01b      	beq.n	800baac <__cmpdf2+0x54>
 800ba74:	b001      	add	sp, #4
 800ba76:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ba7a:	bf0c      	ite	eq
 800ba7c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ba80:	ea91 0f03 	teqne	r1, r3
 800ba84:	bf02      	ittt	eq
 800ba86:	ea90 0f02 	teqeq	r0, r2
 800ba8a:	2000      	moveq	r0, #0
 800ba8c:	4770      	bxeq	lr
 800ba8e:	f110 0f00 	cmn.w	r0, #0
 800ba92:	ea91 0f03 	teq	r1, r3
 800ba96:	bf58      	it	pl
 800ba98:	4299      	cmppl	r1, r3
 800ba9a:	bf08      	it	eq
 800ba9c:	4290      	cmpeq	r0, r2
 800ba9e:	bf2c      	ite	cs
 800baa0:	17d8      	asrcs	r0, r3, #31
 800baa2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800baa6:	f040 0001 	orr.w	r0, r0, #1
 800baaa:	4770      	bx	lr
 800baac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800bab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bab4:	d102      	bne.n	800babc <__cmpdf2+0x64>
 800bab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800baba:	d107      	bne.n	800bacc <__cmpdf2+0x74>
 800babc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bac4:	d1d6      	bne.n	800ba74 <__cmpdf2+0x1c>
 800bac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800baca:	d0d3      	beq.n	800ba74 <__cmpdf2+0x1c>
 800bacc:	f85d 0b04 	ldr.w	r0, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop

0800bad4 <__aeabi_cdrcmple>:
 800bad4:	4684      	mov	ip, r0
 800bad6:	4610      	mov	r0, r2
 800bad8:	4662      	mov	r2, ip
 800bada:	468c      	mov	ip, r1
 800badc:	4619      	mov	r1, r3
 800bade:	4663      	mov	r3, ip
 800bae0:	e000      	b.n	800bae4 <__aeabi_cdcmpeq>
 800bae2:	bf00      	nop

0800bae4 <__aeabi_cdcmpeq>:
 800bae4:	b501      	push	{r0, lr}
 800bae6:	f7ff ffb7 	bl	800ba58 <__cmpdf2>
 800baea:	2800      	cmp	r0, #0
 800baec:	bf48      	it	mi
 800baee:	f110 0f00 	cmnmi.w	r0, #0
 800baf2:	bd01      	pop	{r0, pc}

0800baf4 <__aeabi_dcmpeq>:
 800baf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800baf8:	f7ff fff4 	bl	800bae4 <__aeabi_cdcmpeq>
 800bafc:	bf0c      	ite	eq
 800bafe:	2001      	moveq	r0, #1
 800bb00:	2000      	movne	r0, #0
 800bb02:	f85d fb08 	ldr.w	pc, [sp], #8
 800bb06:	bf00      	nop

0800bb08 <__aeabi_dcmplt>:
 800bb08:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bb0c:	f7ff ffea 	bl	800bae4 <__aeabi_cdcmpeq>
 800bb10:	bf34      	ite	cc
 800bb12:	2001      	movcc	r0, #1
 800bb14:	2000      	movcs	r0, #0
 800bb16:	f85d fb08 	ldr.w	pc, [sp], #8
 800bb1a:	bf00      	nop

0800bb1c <__aeabi_dcmple>:
 800bb1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bb20:	f7ff ffe0 	bl	800bae4 <__aeabi_cdcmpeq>
 800bb24:	bf94      	ite	ls
 800bb26:	2001      	movls	r0, #1
 800bb28:	2000      	movhi	r0, #0
 800bb2a:	f85d fb08 	ldr.w	pc, [sp], #8
 800bb2e:	bf00      	nop

0800bb30 <__aeabi_dcmpge>:
 800bb30:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bb34:	f7ff ffce 	bl	800bad4 <__aeabi_cdrcmple>
 800bb38:	bf94      	ite	ls
 800bb3a:	2001      	movls	r0, #1
 800bb3c:	2000      	movhi	r0, #0
 800bb3e:	f85d fb08 	ldr.w	pc, [sp], #8
 800bb42:	bf00      	nop

0800bb44 <__aeabi_dcmpgt>:
 800bb44:	f84d ed08 	str.w	lr, [sp, #-8]!
 800bb48:	f7ff ffc4 	bl	800bad4 <__aeabi_cdrcmple>
 800bb4c:	bf34      	ite	cc
 800bb4e:	2001      	movcc	r0, #1
 800bb50:	2000      	movcs	r0, #0
 800bb52:	f85d fb08 	ldr.w	pc, [sp], #8
 800bb56:	bf00      	nop

0800bb58 <__aeabi_d2iz>:
 800bb58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800bb5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800bb60:	d215      	bcs.n	800bb8e <__aeabi_d2iz+0x36>
 800bb62:	d511      	bpl.n	800bb88 <__aeabi_d2iz+0x30>
 800bb64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800bb68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800bb6c:	d912      	bls.n	800bb94 <__aeabi_d2iz+0x3c>
 800bb6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bb72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bb7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800bb7e:	fa23 f002 	lsr.w	r0, r3, r2
 800bb82:	bf18      	it	ne
 800bb84:	4240      	negne	r0, r0
 800bb86:	4770      	bx	lr
 800bb88:	f04f 0000 	mov.w	r0, #0
 800bb8c:	4770      	bx	lr
 800bb8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800bb92:	d105      	bne.n	800bba0 <__aeabi_d2iz+0x48>
 800bb94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800bb98:	bf08      	it	eq
 800bb9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800bb9e:	4770      	bx	lr
 800bba0:	f04f 0000 	mov.w	r0, #0
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop

0800bba8 <__aeabi_d2f>:
 800bba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800bbac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800bbb0:	bf24      	itt	cs
 800bbb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800bbb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800bbba:	d90d      	bls.n	800bbd8 <__aeabi_d2f+0x30>
 800bbbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800bbc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800bbc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800bbc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800bbcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800bbd0:	bf08      	it	eq
 800bbd2:	f020 0001 	biceq.w	r0, r0, #1
 800bbd6:	4770      	bx	lr
 800bbd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800bbdc:	d121      	bne.n	800bc22 <__aeabi_d2f+0x7a>
 800bbde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800bbe2:	bfbc      	itt	lt
 800bbe4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800bbe8:	4770      	bxlt	lr
 800bbea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bbee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800bbf2:	f1c2 0218 	rsb	r2, r2, #24
 800bbf6:	f1c2 0c20 	rsb	ip, r2, #32
 800bbfa:	fa10 f30c 	lsls.w	r3, r0, ip
 800bbfe:	fa20 f002 	lsr.w	r0, r0, r2
 800bc02:	bf18      	it	ne
 800bc04:	f040 0001 	orrne.w	r0, r0, #1
 800bc08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bc0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800bc10:	fa03 fc0c 	lsl.w	ip, r3, ip
 800bc14:	ea40 000c 	orr.w	r0, r0, ip
 800bc18:	fa23 f302 	lsr.w	r3, r3, r2
 800bc1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc20:	e7cc      	b.n	800bbbc <__aeabi_d2f+0x14>
 800bc22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800bc26:	d107      	bne.n	800bc38 <__aeabi_d2f+0x90>
 800bc28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800bc2c:	bf1e      	ittt	ne
 800bc2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800bc32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800bc36:	4770      	bxne	lr
 800bc38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800bc3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800bc40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop

0800bc48 <__aeabi_uldivmod>:
 800bc48:	b94b      	cbnz	r3, 800bc5e <__aeabi_uldivmod+0x16>
 800bc4a:	b942      	cbnz	r2, 800bc5e <__aeabi_uldivmod+0x16>
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	bf08      	it	eq
 800bc50:	2800      	cmpeq	r0, #0
 800bc52:	d002      	beq.n	800bc5a <__aeabi_uldivmod+0x12>
 800bc54:	f04f 31ff 	mov.w	r1, #4294967295
 800bc58:	4608      	mov	r0, r1
 800bc5a:	f000 b837 	b.w	800bccc <__aeabi_idiv0>
 800bc5e:	b082      	sub	sp, #8
 800bc60:	46ec      	mov	ip, sp
 800bc62:	e92d 5000 	stmdb	sp!, {ip, lr}
 800bc66:	f000 f81b 	bl	800bca0 <__gnu_uldivmod_helper>
 800bc6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bc6e:	b002      	add	sp, #8
 800bc70:	bc0c      	pop	{r2, r3}
 800bc72:	4770      	bx	lr

0800bc74 <__gnu_ldivmod_helper>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	4616      	mov	r6, r2
 800bc78:	4604      	mov	r4, r0
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	461f      	mov	r7, r3
 800bc7e:	f000 f827 	bl	800bcd0 <__divdi3>
 800bc82:	fb06 f301 	mul.w	r3, r6, r1
 800bc86:	fb00 3707 	mla	r7, r0, r7, r3
 800bc8a:	fba6 2300 	umull	r2, r3, r6, r0
 800bc8e:	18fb      	adds	r3, r7, r3
 800bc90:	1aa2      	subs	r2, r4, r2
 800bc92:	eb65 0303 	sbc.w	r3, r5, r3
 800bc96:	9c06      	ldr	r4, [sp, #24]
 800bc98:	e9c4 2300 	strd	r2, r3, [r4]
 800bc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc9e:	bf00      	nop

0800bca0 <__gnu_uldivmod_helper>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	4616      	mov	r6, r2
 800bca4:	4604      	mov	r4, r0
 800bca6:	460d      	mov	r5, r1
 800bca8:	461f      	mov	r7, r3
 800bcaa:	f000 f96f 	bl	800bf8c <__udivdi3>
 800bcae:	fb00 f707 	mul.w	r7, r0, r7
 800bcb2:	fba0 2306 	umull	r2, r3, r0, r6
 800bcb6:	fb06 7701 	mla	r7, r6, r1, r7
 800bcba:	18fb      	adds	r3, r7, r3
 800bcbc:	1aa2      	subs	r2, r4, r2
 800bcbe:	eb65 0303 	sbc.w	r3, r5, r3
 800bcc2:	9c06      	ldr	r4, [sp, #24]
 800bcc4:	e9c4 2300 	strd	r2, r3, [r4]
 800bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcca:	bf00      	nop

0800bccc <__aeabi_idiv0>:
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop

0800bcd0 <__divdi3>:
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	f2c0 809d 	blt.w	800be16 <__divdi3+0x146>
 800bcdc:	2400      	movs	r4, #0
 800bcde:	2d00      	cmp	r5, #0
 800bce0:	f2c0 8094 	blt.w	800be0c <__divdi3+0x13c>
 800bce4:	4680      	mov	r8, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	4694      	mov	ip, r2
 800bcea:	461e      	mov	r6, r3
 800bcec:	bbe3      	cbnz	r3, 800bd68 <__divdi3+0x98>
 800bcee:	428a      	cmp	r2, r1
 800bcf0:	d955      	bls.n	800bd9e <__divdi3+0xce>
 800bcf2:	fab2 f782 	clz	r7, r2
 800bcf6:	b147      	cbz	r7, 800bd0a <__divdi3+0x3a>
 800bcf8:	f1c7 0520 	rsb	r5, r7, #32
 800bcfc:	fa20 f605 	lsr.w	r6, r0, r5
 800bd00:	fa01 f107 	lsl.w	r1, r1, r7
 800bd04:	40ba      	lsls	r2, r7
 800bd06:	4331      	orrs	r1, r6
 800bd08:	40b8      	lsls	r0, r7
 800bd0a:	0c17      	lsrs	r7, r2, #16
 800bd0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd10:	0c03      	lsrs	r3, r0, #16
 800bd12:	fa1f fc82 	uxth.w	ip, r2
 800bd16:	fb07 1116 	mls	r1, r7, r6, r1
 800bd1a:	fb0c f506 	mul.w	r5, ip, r6
 800bd1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bd22:	429d      	cmp	r5, r3
 800bd24:	d908      	bls.n	800bd38 <__divdi3+0x68>
 800bd26:	1e71      	subs	r1, r6, #1
 800bd28:	189b      	adds	r3, r3, r2
 800bd2a:	f080 8113 	bcs.w	800bf54 <__divdi3+0x284>
 800bd2e:	429d      	cmp	r5, r3
 800bd30:	f240 8110 	bls.w	800bf54 <__divdi3+0x284>
 800bd34:	3e02      	subs	r6, #2
 800bd36:	189b      	adds	r3, r3, r2
 800bd38:	1b59      	subs	r1, r3, r5
 800bd3a:	fbb1 f5f7 	udiv	r5, r1, r7
 800bd3e:	fb07 1315 	mls	r3, r7, r5, r1
 800bd42:	b280      	uxth	r0, r0
 800bd44:	fb0c fc05 	mul.w	ip, ip, r5
 800bd48:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 800bd4c:	458c      	cmp	ip, r1
 800bd4e:	d907      	bls.n	800bd60 <__divdi3+0x90>
 800bd50:	1e6b      	subs	r3, r5, #1
 800bd52:	188a      	adds	r2, r1, r2
 800bd54:	f080 8100 	bcs.w	800bf58 <__divdi3+0x288>
 800bd58:	4594      	cmp	ip, r2
 800bd5a:	f240 80fd 	bls.w	800bf58 <__divdi3+0x288>
 800bd5e:	3d02      	subs	r5, #2
 800bd60:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 800bd64:	2500      	movs	r5, #0
 800bd66:	e003      	b.n	800bd70 <__divdi3+0xa0>
 800bd68:	428b      	cmp	r3, r1
 800bd6a:	d90c      	bls.n	800bd86 <__divdi3+0xb6>
 800bd6c:	2500      	movs	r5, #0
 800bd6e:	4629      	mov	r1, r5
 800bd70:	460a      	mov	r2, r1
 800bd72:	462b      	mov	r3, r5
 800bd74:	b114      	cbz	r4, 800bd7c <__divdi3+0xac>
 800bd76:	4252      	negs	r2, r2
 800bd78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4619      	mov	r1, r3
 800bd80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bd84:	4770      	bx	lr
 800bd86:	fab3 f583 	clz	r5, r3
 800bd8a:	2d00      	cmp	r5, #0
 800bd8c:	f040 8087 	bne.w	800be9e <__divdi3+0x1ce>
 800bd90:	428b      	cmp	r3, r1
 800bd92:	d301      	bcc.n	800bd98 <__divdi3+0xc8>
 800bd94:	4282      	cmp	r2, r0
 800bd96:	d8ea      	bhi.n	800bd6e <__divdi3+0x9e>
 800bd98:	2500      	movs	r5, #0
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	e7e8      	b.n	800bd70 <__divdi3+0xa0>
 800bd9e:	b912      	cbnz	r2, 800bda6 <__divdi3+0xd6>
 800bda0:	2601      	movs	r6, #1
 800bda2:	fbb6 f2f2 	udiv	r2, r6, r2
 800bda6:	fab2 f682 	clz	r6, r2
 800bdaa:	2e00      	cmp	r6, #0
 800bdac:	d139      	bne.n	800be22 <__divdi3+0x152>
 800bdae:	1a8e      	subs	r6, r1, r2
 800bdb0:	0c13      	lsrs	r3, r2, #16
 800bdb2:	fa1f fc82 	uxth.w	ip, r2
 800bdb6:	2501      	movs	r5, #1
 800bdb8:	fbb6 f7f3 	udiv	r7, r6, r3
 800bdbc:	fb03 6117 	mls	r1, r3, r7, r6
 800bdc0:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800bdc4:	fb0c f807 	mul.w	r8, ip, r7
 800bdc8:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 800bdcc:	45b0      	cmp	r8, r6
 800bdce:	d906      	bls.n	800bdde <__divdi3+0x10e>
 800bdd0:	1e79      	subs	r1, r7, #1
 800bdd2:	18b6      	adds	r6, r6, r2
 800bdd4:	d202      	bcs.n	800bddc <__divdi3+0x10c>
 800bdd6:	45b0      	cmp	r8, r6
 800bdd8:	f200 80d3 	bhi.w	800bf82 <__divdi3+0x2b2>
 800bddc:	460f      	mov	r7, r1
 800bdde:	ebc8 0606 	rsb	r6, r8, r6
 800bde2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bde6:	fb03 6311 	mls	r3, r3, r1, r6
 800bdea:	b280      	uxth	r0, r0
 800bdec:	fb0c fc01 	mul.w	ip, ip, r1
 800bdf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800bdf4:	459c      	cmp	ip, r3
 800bdf6:	d906      	bls.n	800be06 <__divdi3+0x136>
 800bdf8:	1e4e      	subs	r6, r1, #1
 800bdfa:	189a      	adds	r2, r3, r2
 800bdfc:	d202      	bcs.n	800be04 <__divdi3+0x134>
 800bdfe:	4594      	cmp	ip, r2
 800be00:	f200 80c2 	bhi.w	800bf88 <__divdi3+0x2b8>
 800be04:	4631      	mov	r1, r6
 800be06:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800be0a:	e7b1      	b.n	800bd70 <__divdi3+0xa0>
 800be0c:	43e4      	mvns	r4, r4
 800be0e:	4252      	negs	r2, r2
 800be10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800be14:	e766      	b.n	800bce4 <__divdi3+0x14>
 800be16:	4240      	negs	r0, r0
 800be18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800be1c:	f04f 34ff 	mov.w	r4, #4294967295
 800be20:	e75d      	b.n	800bcde <__divdi3+0xe>
 800be22:	40b2      	lsls	r2, r6
 800be24:	f1c6 0920 	rsb	r9, r6, #32
 800be28:	fa21 f709 	lsr.w	r7, r1, r9
 800be2c:	fa20 f509 	lsr.w	r5, r0, r9
 800be30:	0c13      	lsrs	r3, r2, #16
 800be32:	fa01 f106 	lsl.w	r1, r1, r6
 800be36:	fbb7 f8f3 	udiv	r8, r7, r3
 800be3a:	ea45 0901 	orr.w	r9, r5, r1
 800be3e:	fa1f fc82 	uxth.w	ip, r2
 800be42:	fb03 7718 	mls	r7, r3, r8, r7
 800be46:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800be4a:	fb0c f508 	mul.w	r5, ip, r8
 800be4e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800be52:	40b0      	lsls	r0, r6
 800be54:	42bd      	cmp	r5, r7
 800be56:	d90a      	bls.n	800be6e <__divdi3+0x19e>
 800be58:	18bf      	adds	r7, r7, r2
 800be5a:	f108 36ff 	add.w	r6, r8, #4294967295
 800be5e:	f080 808e 	bcs.w	800bf7e <__divdi3+0x2ae>
 800be62:	42bd      	cmp	r5, r7
 800be64:	f240 808b 	bls.w	800bf7e <__divdi3+0x2ae>
 800be68:	f1a8 0802 	sub.w	r8, r8, #2
 800be6c:	18bf      	adds	r7, r7, r2
 800be6e:	1b79      	subs	r1, r7, r5
 800be70:	fbb1 f5f3 	udiv	r5, r1, r3
 800be74:	fb03 1715 	mls	r7, r3, r5, r1
 800be78:	fa1f f989 	uxth.w	r9, r9
 800be7c:	fb0c f605 	mul.w	r6, ip, r5
 800be80:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 800be84:	428e      	cmp	r6, r1
 800be86:	d906      	bls.n	800be96 <__divdi3+0x1c6>
 800be88:	1e6f      	subs	r7, r5, #1
 800be8a:	1889      	adds	r1, r1, r2
 800be8c:	d271      	bcs.n	800bf72 <__divdi3+0x2a2>
 800be8e:	428e      	cmp	r6, r1
 800be90:	d96f      	bls.n	800bf72 <__divdi3+0x2a2>
 800be92:	3d02      	subs	r5, #2
 800be94:	1889      	adds	r1, r1, r2
 800be96:	1b8e      	subs	r6, r1, r6
 800be98:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 800be9c:	e78c      	b.n	800bdb8 <__divdi3+0xe8>
 800be9e:	f1c5 0120 	rsb	r1, r5, #32
 800bea2:	fa22 f301 	lsr.w	r3, r2, r1
 800bea6:	fa06 f605 	lsl.w	r6, r6, r5
 800beaa:	431e      	orrs	r6, r3
 800beac:	fa27 f201 	lsr.w	r2, r7, r1
 800beb0:	ea4f 4916 	mov.w	r9, r6, lsr #16
 800beb4:	fa07 f705 	lsl.w	r7, r7, r5
 800beb8:	fa20 f101 	lsr.w	r1, r0, r1
 800bebc:	fbb2 f8f9 	udiv	r8, r2, r9
 800bec0:	430f      	orrs	r7, r1
 800bec2:	0c3b      	lsrs	r3, r7, #16
 800bec4:	fa1f fa86 	uxth.w	sl, r6
 800bec8:	fb09 2218 	mls	r2, r9, r8, r2
 800becc:	fb0a fb08 	mul.w	fp, sl, r8
 800bed0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bed4:	4593      	cmp	fp, r2
 800bed6:	fa0c fc05 	lsl.w	ip, ip, r5
 800beda:	d908      	bls.n	800beee <__divdi3+0x21e>
 800bedc:	1992      	adds	r2, r2, r6
 800bede:	f108 31ff 	add.w	r1, r8, #4294967295
 800bee2:	d24a      	bcs.n	800bf7a <__divdi3+0x2aa>
 800bee4:	4593      	cmp	fp, r2
 800bee6:	d948      	bls.n	800bf7a <__divdi3+0x2aa>
 800bee8:	f1a8 0802 	sub.w	r8, r8, #2
 800beec:	1992      	adds	r2, r2, r6
 800beee:	ebcb 0302 	rsb	r3, fp, r2
 800bef2:	fbb3 f1f9 	udiv	r1, r3, r9
 800bef6:	fb09 3211 	mls	r2, r9, r1, r3
 800befa:	b2bf      	uxth	r7, r7
 800befc:	fb0a fa01 	mul.w	sl, sl, r1
 800bf00:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 800bf04:	459a      	cmp	sl, r3
 800bf06:	d906      	bls.n	800bf16 <__divdi3+0x246>
 800bf08:	1e4a      	subs	r2, r1, #1
 800bf0a:	199b      	adds	r3, r3, r6
 800bf0c:	d233      	bcs.n	800bf76 <__divdi3+0x2a6>
 800bf0e:	459a      	cmp	sl, r3
 800bf10:	d931      	bls.n	800bf76 <__divdi3+0x2a6>
 800bf12:	3902      	subs	r1, #2
 800bf14:	199b      	adds	r3, r3, r6
 800bf16:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800bf1a:	0c0f      	lsrs	r7, r1, #16
 800bf1c:	fa1f f88c 	uxth.w	r8, ip
 800bf20:	fb08 f607 	mul.w	r6, r8, r7
 800bf24:	b28a      	uxth	r2, r1
 800bf26:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bf2a:	fb08 f802 	mul.w	r8, r8, r2
 800bf2e:	fb0c 6202 	mla	r2, ip, r2, r6
 800bf32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bf36:	fb0c fc07 	mul.w	ip, ip, r7
 800bf3a:	4296      	cmp	r6, r2
 800bf3c:	bf88      	it	hi
 800bf3e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 800bf42:	ebca 0303 	rsb	r3, sl, r3
 800bf46:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 800bf4a:	4563      	cmp	r3, ip
 800bf4c:	d30e      	bcc.n	800bf6c <__divdi3+0x29c>
 800bf4e:	d005      	beq.n	800bf5c <__divdi3+0x28c>
 800bf50:	2500      	movs	r5, #0
 800bf52:	e70d      	b.n	800bd70 <__divdi3+0xa0>
 800bf54:	460e      	mov	r6, r1
 800bf56:	e6ef      	b.n	800bd38 <__divdi3+0x68>
 800bf58:	461d      	mov	r5, r3
 800bf5a:	e701      	b.n	800bd60 <__divdi3+0x90>
 800bf5c:	fa1f f888 	uxth.w	r8, r8
 800bf60:	fa00 f005 	lsl.w	r0, r0, r5
 800bf64:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 800bf68:	42a8      	cmp	r0, r5
 800bf6a:	d2f1      	bcs.n	800bf50 <__divdi3+0x280>
 800bf6c:	3901      	subs	r1, #1
 800bf6e:	2500      	movs	r5, #0
 800bf70:	e6fe      	b.n	800bd70 <__divdi3+0xa0>
 800bf72:	463d      	mov	r5, r7
 800bf74:	e78f      	b.n	800be96 <__divdi3+0x1c6>
 800bf76:	4611      	mov	r1, r2
 800bf78:	e7cd      	b.n	800bf16 <__divdi3+0x246>
 800bf7a:	4688      	mov	r8, r1
 800bf7c:	e7b7      	b.n	800beee <__divdi3+0x21e>
 800bf7e:	46b0      	mov	r8, r6
 800bf80:	e775      	b.n	800be6e <__divdi3+0x19e>
 800bf82:	3f02      	subs	r7, #2
 800bf84:	18b6      	adds	r6, r6, r2
 800bf86:	e72a      	b.n	800bdde <__divdi3+0x10e>
 800bf88:	3902      	subs	r1, #2
 800bf8a:	e73c      	b.n	800be06 <__divdi3+0x136>

0800bf8c <__udivdi3>:
 800bf8c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800bf90:	4614      	mov	r4, r2
 800bf92:	4605      	mov	r5, r0
 800bf94:	460e      	mov	r6, r1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d13d      	bne.n	800c016 <__udivdi3+0x8a>
 800bf9a:	428a      	cmp	r2, r1
 800bf9c:	d949      	bls.n	800c032 <__udivdi3+0xa6>
 800bf9e:	fab2 f782 	clz	r7, r2
 800bfa2:	b147      	cbz	r7, 800bfb6 <__udivdi3+0x2a>
 800bfa4:	f1c7 0120 	rsb	r1, r7, #32
 800bfa8:	fa20 f201 	lsr.w	r2, r0, r1
 800bfac:	fa06 f607 	lsl.w	r6, r6, r7
 800bfb0:	40bc      	lsls	r4, r7
 800bfb2:	4316      	orrs	r6, r2
 800bfb4:	40bd      	lsls	r5, r7
 800bfb6:	0c22      	lsrs	r2, r4, #16
 800bfb8:	fbb6 f0f2 	udiv	r0, r6, r2
 800bfbc:	0c2f      	lsrs	r7, r5, #16
 800bfbe:	b2a1      	uxth	r1, r4
 800bfc0:	fb02 6610 	mls	r6, r2, r0, r6
 800bfc4:	fb01 f300 	mul.w	r3, r1, r0
 800bfc8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800bfcc:	42b3      	cmp	r3, r6
 800bfce:	d908      	bls.n	800bfe2 <__udivdi3+0x56>
 800bfd0:	1e47      	subs	r7, r0, #1
 800bfd2:	1936      	adds	r6, r6, r4
 800bfd4:	f080 80f8 	bcs.w	800c1c8 <__udivdi3+0x23c>
 800bfd8:	42b3      	cmp	r3, r6
 800bfda:	f240 80f5 	bls.w	800c1c8 <__udivdi3+0x23c>
 800bfde:	3802      	subs	r0, #2
 800bfe0:	1936      	adds	r6, r6, r4
 800bfe2:	1af6      	subs	r6, r6, r3
 800bfe4:	fbb6 f3f2 	udiv	r3, r6, r2
 800bfe8:	fb02 6213 	mls	r2, r2, r3, r6
 800bfec:	b2ad      	uxth	r5, r5
 800bfee:	fb01 f103 	mul.w	r1, r1, r3
 800bff2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800bff6:	4291      	cmp	r1, r2
 800bff8:	d907      	bls.n	800c00a <__udivdi3+0x7e>
 800bffa:	1e5e      	subs	r6, r3, #1
 800bffc:	1912      	adds	r2, r2, r4
 800bffe:	f080 80e5 	bcs.w	800c1cc <__udivdi3+0x240>
 800c002:	4291      	cmp	r1, r2
 800c004:	f240 80e2 	bls.w	800c1cc <__udivdi3+0x240>
 800c008:	3b02      	subs	r3, #2
 800c00a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800c00e:	2100      	movs	r1, #0
 800c010:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c014:	4770      	bx	lr
 800c016:	428b      	cmp	r3, r1
 800c018:	d843      	bhi.n	800c0a2 <__udivdi3+0x116>
 800c01a:	fab3 f483 	clz	r4, r3
 800c01e:	2c00      	cmp	r4, #0
 800c020:	d142      	bne.n	800c0a8 <__udivdi3+0x11c>
 800c022:	428b      	cmp	r3, r1
 800c024:	d302      	bcc.n	800c02c <__udivdi3+0xa0>
 800c026:	4282      	cmp	r2, r0
 800c028:	f200 80df 	bhi.w	800c1ea <__udivdi3+0x25e>
 800c02c:	2100      	movs	r1, #0
 800c02e:	2001      	movs	r0, #1
 800c030:	e7ee      	b.n	800c010 <__udivdi3+0x84>
 800c032:	b912      	cbnz	r2, 800c03a <__udivdi3+0xae>
 800c034:	2701      	movs	r7, #1
 800c036:	fbb7 f4f2 	udiv	r4, r7, r2
 800c03a:	fab4 f284 	clz	r2, r4
 800c03e:	2a00      	cmp	r2, #0
 800c040:	f040 8088 	bne.w	800c154 <__udivdi3+0x1c8>
 800c044:	1b0a      	subs	r2, r1, r4
 800c046:	0c23      	lsrs	r3, r4, #16
 800c048:	b2a7      	uxth	r7, r4
 800c04a:	2101      	movs	r1, #1
 800c04c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c050:	fb03 2216 	mls	r2, r3, r6, r2
 800c054:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 800c058:	fb07 f006 	mul.w	r0, r7, r6
 800c05c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 800c060:	4290      	cmp	r0, r2
 800c062:	d907      	bls.n	800c074 <__udivdi3+0xe8>
 800c064:	1912      	adds	r2, r2, r4
 800c066:	f106 3cff 	add.w	ip, r6, #4294967295
 800c06a:	d202      	bcs.n	800c072 <__udivdi3+0xe6>
 800c06c:	4290      	cmp	r0, r2
 800c06e:	f200 80ce 	bhi.w	800c20e <__udivdi3+0x282>
 800c072:	4666      	mov	r6, ip
 800c074:	1a12      	subs	r2, r2, r0
 800c076:	fbb2 f0f3 	udiv	r0, r2, r3
 800c07a:	fb03 2310 	mls	r3, r3, r0, r2
 800c07e:	b2ad      	uxth	r5, r5
 800c080:	fb07 f700 	mul.w	r7, r7, r0
 800c084:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c088:	429f      	cmp	r7, r3
 800c08a:	d907      	bls.n	800c09c <__udivdi3+0x110>
 800c08c:	1e42      	subs	r2, r0, #1
 800c08e:	191b      	adds	r3, r3, r4
 800c090:	f080 809e 	bcs.w	800c1d0 <__udivdi3+0x244>
 800c094:	429f      	cmp	r7, r3
 800c096:	f240 809b 	bls.w	800c1d0 <__udivdi3+0x244>
 800c09a:	3802      	subs	r0, #2
 800c09c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c0a0:	e7b6      	b.n	800c010 <__udivdi3+0x84>
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	e7b3      	b.n	800c010 <__udivdi3+0x84>
 800c0a8:	f1c4 0620 	rsb	r6, r4, #32
 800c0ac:	fa22 f506 	lsr.w	r5, r2, r6
 800c0b0:	fa03 f304 	lsl.w	r3, r3, r4
 800c0b4:	432b      	orrs	r3, r5
 800c0b6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800c0ba:	fa21 f506 	lsr.w	r5, r1, r6
 800c0be:	fa01 f104 	lsl.w	r1, r1, r4
 800c0c2:	fa20 f606 	lsr.w	r6, r0, r6
 800c0c6:	fbb5 f7fc 	udiv	r7, r5, ip
 800c0ca:	ea46 0a01 	orr.w	sl, r6, r1
 800c0ce:	fa1f f883 	uxth.w	r8, r3
 800c0d2:	fb0c 5517 	mls	r5, ip, r7, r5
 800c0d6:	ea4f 411a 	mov.w	r1, sl, lsr #16
 800c0da:	fb08 f907 	mul.w	r9, r8, r7
 800c0de:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800c0e2:	45a9      	cmp	r9, r5
 800c0e4:	fa02 f204 	lsl.w	r2, r2, r4
 800c0e8:	d903      	bls.n	800c0f2 <__udivdi3+0x166>
 800c0ea:	1e7e      	subs	r6, r7, #1
 800c0ec:	18ed      	adds	r5, r5, r3
 800c0ee:	d37f      	bcc.n	800c1f0 <__udivdi3+0x264>
 800c0f0:	4637      	mov	r7, r6
 800c0f2:	ebc9 0105 	rsb	r1, r9, r5
 800c0f6:	fbb1 f6fc 	udiv	r6, r1, ip
 800c0fa:	fb0c 1516 	mls	r5, ip, r6, r1
 800c0fe:	fa1f fa8a 	uxth.w	sl, sl
 800c102:	fb08 f806 	mul.w	r8, r8, r6
 800c106:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 800c10a:	4588      	cmp	r8, r1
 800c10c:	d903      	bls.n	800c116 <__udivdi3+0x18a>
 800c10e:	1e75      	subs	r5, r6, #1
 800c110:	18c9      	adds	r1, r1, r3
 800c112:	d373      	bcc.n	800c1fc <__udivdi3+0x270>
 800c114:	462e      	mov	r6, r5
 800c116:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800c11a:	0c37      	lsrs	r7, r6, #16
 800c11c:	fa1f fc82 	uxth.w	ip, r2
 800c120:	fb0c f507 	mul.w	r5, ip, r7
 800c124:	0c12      	lsrs	r2, r2, #16
 800c126:	b2b3      	uxth	r3, r6
 800c128:	fb0c fc03 	mul.w	ip, ip, r3
 800c12c:	fb02 5303 	mla	r3, r2, r3, r5
 800c130:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 800c134:	fb02 f207 	mul.w	r2, r2, r7
 800c138:	429d      	cmp	r5, r3
 800c13a:	bf88      	it	hi
 800c13c:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 800c140:	ebc8 0101 	rsb	r1, r8, r1
 800c144:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c148:	4291      	cmp	r1, r2
 800c14a:	d34b      	bcc.n	800c1e4 <__udivdi3+0x258>
 800c14c:	d042      	beq.n	800c1d4 <__udivdi3+0x248>
 800c14e:	4630      	mov	r0, r6
 800c150:	2100      	movs	r1, #0
 800c152:	e75d      	b.n	800c010 <__udivdi3+0x84>
 800c154:	4094      	lsls	r4, r2
 800c156:	f1c2 0520 	rsb	r5, r2, #32
 800c15a:	fa21 f605 	lsr.w	r6, r1, r5
 800c15e:	0c23      	lsrs	r3, r4, #16
 800c160:	fa20 f705 	lsr.w	r7, r0, r5
 800c164:	fa01 f102 	lsl.w	r1, r1, r2
 800c168:	fbb6 fcf3 	udiv	ip, r6, r3
 800c16c:	4339      	orrs	r1, r7
 800c16e:	0c0d      	lsrs	r5, r1, #16
 800c170:	b2a7      	uxth	r7, r4
 800c172:	fb03 661c 	mls	r6, r3, ip, r6
 800c176:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c17a:	fb07 f80c 	mul.w	r8, r7, ip
 800c17e:	45b0      	cmp	r8, r6
 800c180:	fa00 f502 	lsl.w	r5, r0, r2
 800c184:	d908      	bls.n	800c198 <__udivdi3+0x20c>
 800c186:	1936      	adds	r6, r6, r4
 800c188:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c18c:	d23d      	bcs.n	800c20a <__udivdi3+0x27e>
 800c18e:	45b0      	cmp	r8, r6
 800c190:	d93b      	bls.n	800c20a <__udivdi3+0x27e>
 800c192:	f1ac 0c02 	sub.w	ip, ip, #2
 800c196:	1936      	adds	r6, r6, r4
 800c198:	ebc8 0206 	rsb	r2, r8, r6
 800c19c:	fbb2 f0f3 	udiv	r0, r2, r3
 800c1a0:	fb03 2610 	mls	r6, r3, r0, r2
 800c1a4:	b28a      	uxth	r2, r1
 800c1a6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c1aa:	fb07 f100 	mul.w	r1, r7, r0
 800c1ae:	4291      	cmp	r1, r2
 800c1b0:	d906      	bls.n	800c1c0 <__udivdi3+0x234>
 800c1b2:	1e46      	subs	r6, r0, #1
 800c1b4:	1912      	adds	r2, r2, r4
 800c1b6:	d226      	bcs.n	800c206 <__udivdi3+0x27a>
 800c1b8:	4291      	cmp	r1, r2
 800c1ba:	d924      	bls.n	800c206 <__udivdi3+0x27a>
 800c1bc:	3802      	subs	r0, #2
 800c1be:	1912      	adds	r2, r2, r4
 800c1c0:	1a52      	subs	r2, r2, r1
 800c1c2:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 800c1c6:	e741      	b.n	800c04c <__udivdi3+0xc0>
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	e70a      	b.n	800bfe2 <__udivdi3+0x56>
 800c1cc:	4633      	mov	r3, r6
 800c1ce:	e71c      	b.n	800c00a <__udivdi3+0x7e>
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	e763      	b.n	800c09c <__udivdi3+0x110>
 800c1d4:	fa1f fc8c 	uxth.w	ip, ip
 800c1d8:	fa00 f004 	lsl.w	r0, r0, r4
 800c1dc:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 800c1e0:	4298      	cmp	r0, r3
 800c1e2:	d2b4      	bcs.n	800c14e <__udivdi3+0x1c2>
 800c1e4:	1e70      	subs	r0, r6, #1
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	e712      	b.n	800c010 <__udivdi3+0x84>
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	e70f      	b.n	800c010 <__udivdi3+0x84>
 800c1f0:	45a9      	cmp	r9, r5
 800c1f2:	f67f af7d 	bls.w	800c0f0 <__udivdi3+0x164>
 800c1f6:	3f02      	subs	r7, #2
 800c1f8:	18ed      	adds	r5, r5, r3
 800c1fa:	e77a      	b.n	800c0f2 <__udivdi3+0x166>
 800c1fc:	4588      	cmp	r8, r1
 800c1fe:	d989      	bls.n	800c114 <__udivdi3+0x188>
 800c200:	3e02      	subs	r6, #2
 800c202:	18c9      	adds	r1, r1, r3
 800c204:	e787      	b.n	800c116 <__udivdi3+0x18a>
 800c206:	4630      	mov	r0, r6
 800c208:	e7da      	b.n	800c1c0 <__udivdi3+0x234>
 800c20a:	4684      	mov	ip, r0
 800c20c:	e7c4      	b.n	800c198 <__udivdi3+0x20c>
 800c20e:	3e02      	subs	r6, #2
 800c210:	1912      	adds	r2, r2, r4
 800c212:	e72f      	b.n	800c074 <__udivdi3+0xe8>

0800c214 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c216:	f000 b804 	b.w	800c222 <LoopCopyDataInit>

0800c21a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c21a:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 800c21c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c21e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c220:	3104      	adds	r1, #4

0800c222 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c222:	480b      	ldr	r0, [pc, #44]	; (800c250 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 800c226:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c228:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c22a:	f4ff aff6 	bcc.w	800c21a <CopyDataInit>
  ldr  r2, =_sbss
 800c22e:	4a0a      	ldr	r2, [pc, #40]	; (800c258 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 800c230:	f000 b803 	b.w	800c23a <LoopFillZerobss>

0800c234 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c234:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c236:	f842 3b04 	str.w	r3, [r2], #4

0800c23a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c23a:	4b08      	ldr	r3, [pc, #32]	; (800c25c <LoopFillZerobss+0x22>)
  cmp  r2, r3
 800c23c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c23e:	f4ff aff9 	bcc.w	800c234 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c242:	f7fe fe63 	bl	800af0c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800c246:	f7f5 fa77 	bl	8001738 <main>
  bx  lr    
 800c24a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800c24c:	080136f8 	.word	0x080136f8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c254:	20000904 	.word	0x20000904
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800c258:	20000904 	.word	0x20000904
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c25c:	20000a1c 	.word	0x20000a1c

0800c260 <ADC4_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c260:	f7ff bffe 	b.w	800c260 <ADC4_IRQHandler>

0800c264 <pow>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 800c550 <pow+0x2ec>
 800c26c:	b08b      	sub	sp, #44	; 0x2c
 800c26e:	461f      	mov	r7, r3
 800c270:	4680      	mov	r8, r0
 800c272:	4689      	mov	r9, r1
 800c274:	4616      	mov	r6, r2
 800c276:	f000 f9df 	bl	800c638 <__ieee754_pow>
 800c27a:	f99a 3000 	ldrsb.w	r3, [sl]
 800c27e:	3301      	adds	r3, #1
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	d004      	beq.n	800c290 <pow+0x2c>
 800c286:	4630      	mov	r0, r6
 800c288:	4639      	mov	r1, r7
 800c28a:	f001 f87b 	bl	800d384 <__fpclassifyd>
 800c28e:	b920      	cbnz	r0, 800c29a <pow+0x36>
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	b00b      	add	sp, #44	; 0x2c
 800c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29a:	4640      	mov	r0, r8
 800c29c:	4649      	mov	r1, r9
 800c29e:	f001 f871 	bl	800d384 <__fpclassifyd>
 800c2a2:	4683      	mov	fp, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d12e      	bne.n	800c306 <pow+0xa2>
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f7ff fc20 	bl	800baf4 <__aeabi_dcmpeq>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d0eb      	beq.n	800c290 <pow+0x2c>
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	4aa4      	ldr	r2, [pc, #656]	; (800c54c <pow+0x2e8>)
 800c2bc:	f99a 3000 	ldrsb.w	r3, [sl]
 800c2c0:	9201      	str	r2, [sp, #4]
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c2c8:	ec41 0b10 	vmov	d0, r0, r1
 800c2cc:	2501      	movs	r5, #1
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	9500      	str	r5, [sp, #0]
 800c2d2:	f8cd b020 	str.w	fp, [sp, #32]
 800c2d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c2da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c2de:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c2e2:	d00d      	beq.n	800c300 <pow+0x9c>
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d00b      	beq.n	800c300 <pow+0x9c>
 800c2e8:	4668      	mov	r0, sp
 800c2ea:	f001 f87f 	bl	800d3ec <matherr>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f000 809b 	beq.w	800c42a <pow+0x1c6>
 800c2f4:	9808      	ldr	r0, [sp, #32]
 800c2f6:	b118      	cbz	r0, 800c300 <pow+0x9c>
 800c2f8:	f001 f9fc 	bl	800d6f4 <__errno>
 800c2fc:	9c08      	ldr	r4, [sp, #32]
 800c2fe:	6004      	str	r4, [r0, #0]
 800c300:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c304:	e7c4      	b.n	800c290 <pow+0x2c>
 800c306:	4640      	mov	r0, r8
 800c308:	4649      	mov	r1, r9
 800c30a:	2200      	movs	r2, #0
 800c30c:	2300      	movs	r3, #0
 800c30e:	f7ff fbf1 	bl	800baf4 <__aeabi_dcmpeq>
 800c312:	b320      	cbz	r0, 800c35e <pow+0xfa>
 800c314:	4630      	mov	r0, r6
 800c316:	4639      	mov	r1, r7
 800c318:	2200      	movs	r2, #0
 800c31a:	2300      	movs	r3, #0
 800c31c:	f7ff fbea 	bl	800baf4 <__aeabi_dcmpeq>
 800c320:	2800      	cmp	r0, #0
 800c322:	d055      	beq.n	800c3d0 <pow+0x16c>
 800c324:	4889      	ldr	r0, [pc, #548]	; (800c54c <pow+0x2e8>)
 800c326:	f99a 5000 	ldrsb.w	r5, [sl]
 800c32a:	9001      	str	r0, [sp, #4]
 800c32c:	2101      	movs	r1, #1
 800c32e:	9100      	str	r1, [sp, #0]
 800c330:	2000      	movs	r0, #0
 800c332:	2100      	movs	r1, #0
 800c334:	ec41 0b16 	vmov	d6, r0, r1
 800c338:	2400      	movs	r4, #0
 800c33a:	9408      	str	r4, [sp, #32]
 800c33c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c344:	ed8d 6b06 	vstr	d6, [sp, #24]
 800c348:	2d00      	cmp	r5, #0
 800c34a:	d0cd      	beq.n	800c2e8 <pow+0x84>
 800c34c:	2100      	movs	r1, #0
 800c34e:	2000      	movs	r0, #0
 800c350:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c354:	ec41 0b17 	vmov	d7, r0, r1
 800c358:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c35c:	e7d0      	b.n	800c300 <pow+0x9c>
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f001 f809 	bl	800d378 <finite>
 800c366:	4683      	mov	fp, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	d063      	beq.n	800c434 <pow+0x1d0>
 800c36c:	4620      	mov	r0, r4
 800c36e:	4629      	mov	r1, r5
 800c370:	2200      	movs	r2, #0
 800c372:	2300      	movs	r3, #0
 800c374:	f7ff fbbe 	bl	800baf4 <__aeabi_dcmpeq>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d089      	beq.n	800c290 <pow+0x2c>
 800c37c:	4640      	mov	r0, r8
 800c37e:	4649      	mov	r1, r9
 800c380:	f000 fffa 	bl	800d378 <finite>
 800c384:	2800      	cmp	r0, #0
 800c386:	d083      	beq.n	800c290 <pow+0x2c>
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f000 fff4 	bl	800d378 <finite>
 800c390:	2800      	cmp	r0, #0
 800c392:	f43f af7d 	beq.w	800c290 <pow+0x2c>
 800c396:	2004      	movs	r0, #4
 800c398:	2100      	movs	r1, #0
 800c39a:	f99a 4000 	ldrsb.w	r4, [sl]
 800c39e:	9000      	str	r0, [sp, #0]
 800c3a0:	9108      	str	r1, [sp, #32]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	4a69      	ldr	r2, [pc, #420]	; (800c54c <pow+0x2e8>)
 800c3a8:	ec41 0b17 	vmov	d7, r0, r1
 800c3ac:	2c02      	cmp	r4, #2
 800c3ae:	9201      	str	r2, [sp, #4]
 800c3b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c3b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c3b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3bc:	d06a      	beq.n	800c494 <pow+0x230>
 800c3be:	4668      	mov	r0, sp
 800c3c0:	f001 f814 	bl	800d3ec <matherr>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d065      	beq.n	800c494 <pow+0x230>
 800c3c8:	9a08      	ldr	r2, [sp, #32]
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	d098      	beq.n	800c300 <pow+0x9c>
 800c3ce:	e793      	b.n	800c2f8 <pow+0x94>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f000 ffd0 	bl	800d378 <finite>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	f43f af59 	beq.w	800c290 <pow+0x2c>
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f7ff fb8f 	bl	800bb08 <__aeabi_dcmplt>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f43f af50 	beq.w	800c290 <pow+0x2c>
 800c3f0:	4856      	ldr	r0, [pc, #344]	; (800c54c <pow+0x2e8>)
 800c3f2:	f89a 5000 	ldrb.w	r5, [sl]
 800c3f6:	9001      	str	r0, [sp, #4]
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	2400      	movs	r4, #0
 800c3fc:	9100      	str	r1, [sp, #0]
 800c3fe:	9408      	str	r4, [sp, #32]
 800c400:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c404:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c408:	2000      	movs	r0, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	2d00      	cmp	r5, #0
 800c40e:	d03e      	beq.n	800c48e <pow+0x22a>
 800c410:	f6cf 71f0 	movt	r1, #65520	; 0xfff0
 800c414:	ec41 0b14 	vmov	d4, r0, r1
 800c418:	2d02      	cmp	r5, #2
 800c41a:	ed8d 4b06 	vstr	d4, [sp, #24]
 800c41e:	d130      	bne.n	800c482 <pow+0x21e>
 800c420:	f001 f968 	bl	800d6f4 <__errno>
 800c424:	2321      	movs	r3, #33	; 0x21
 800c426:	6003      	str	r3, [r0, #0]
 800c428:	e7ce      	b.n	800c3c8 <pow+0x164>
 800c42a:	f001 f963 	bl	800d6f4 <__errno>
 800c42e:	2121      	movs	r1, #33	; 0x21
 800c430:	6001      	str	r1, [r0, #0]
 800c432:	e75f      	b.n	800c2f4 <pow+0x90>
 800c434:	4640      	mov	r0, r8
 800c436:	4649      	mov	r1, r9
 800c438:	f000 ff9e 	bl	800d378 <finite>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d095      	beq.n	800c36c <pow+0x108>
 800c440:	4630      	mov	r0, r6
 800c442:	4639      	mov	r1, r7
 800c444:	f000 ff98 	bl	800d378 <finite>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d08f      	beq.n	800c36c <pow+0x108>
 800c44c:	4620      	mov	r0, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	f000 ff98 	bl	800d384 <__fpclassifyd>
 800c454:	bb18      	cbnz	r0, 800c49e <pow+0x23a>
 800c456:	4b3d      	ldr	r3, [pc, #244]	; (800c54c <pow+0x2e8>)
 800c458:	f89a 4000 	ldrb.w	r4, [sl]
 800c45c:	9008      	str	r0, [sp, #32]
 800c45e:	2201      	movs	r2, #1
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	9200      	str	r2, [sp, #0]
 800c464:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c468:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c46c:	2000      	movs	r0, #0
 800c46e:	2100      	movs	r1, #0
 800c470:	b16c      	cbz	r4, 800c48e <pow+0x22a>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	f7ff f9ff 	bl	800b878 <__aeabi_ddiv>
 800c47a:	2c02      	cmp	r4, #2
 800c47c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c480:	d0ce      	beq.n	800c420 <pow+0x1bc>
 800c482:	4668      	mov	r0, sp
 800c484:	f000 ffb2 	bl	800d3ec <matherr>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d19d      	bne.n	800c3c8 <pow+0x164>
 800c48c:	e7c8      	b.n	800c420 <pow+0x1bc>
 800c48e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c492:	e7f6      	b.n	800c482 <pow+0x21e>
 800c494:	f001 f92e 	bl	800d6f4 <__errno>
 800c498:	2522      	movs	r5, #34	; 0x22
 800c49a:	6005      	str	r5, [r0, #0]
 800c49c:	e794      	b.n	800c3c8 <pow+0x164>
 800c49e:	4c2b      	ldr	r4, [pc, #172]	; (800c54c <pow+0x2e8>)
 800c4a0:	f99a 3000 	ldrsb.w	r3, [sl]
 800c4a4:	9401      	str	r4, [sp, #4]
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	9200      	str	r2, [sp, #0]
 800c4aa:	f8cd b020 	str.w	fp, [sp, #32]
 800c4ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c4b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	b9eb      	cbnz	r3, 800c4fa <pow+0x296>
 800c4be:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800c4c2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800c4c6:	f2c4 75ef 	movt	r5, #18415	; 0x47ef
 800c4ca:	ec45 4b12 	vmov	d2, r4, r5
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	ed8d 2b06 	vstr	d2, [sp, #24]
 800c4d4:	f7ff fb18 	bl	800bb08 <__aeabi_dcmplt>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d13b      	bne.n	800c554 <pow+0x2f0>
 800c4dc:	f99a 0000 	ldrsb.w	r0, [sl]
 800c4e0:	2802      	cmp	r0, #2
 800c4e2:	d005      	beq.n	800c4f0 <pow+0x28c>
 800c4e4:	4668      	mov	r0, sp
 800c4e6:	f000 ff81 	bl	800d3ec <matherr>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f47f af02 	bne.w	800c2f4 <pow+0x90>
 800c4f0:	f001 f900 	bl	800d6f4 <__errno>
 800c4f4:	2122      	movs	r1, #34	; 0x22
 800c4f6:	6001      	str	r1, [r0, #0]
 800c4f8:	e6fc      	b.n	800c2f4 <pow+0x90>
 800c4fa:	2500      	movs	r5, #0
 800c4fc:	2400      	movs	r4, #0
 800c4fe:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800c502:	ec45 4b10 	vmov	d0, r4, r5
 800c506:	2300      	movs	r3, #0
 800c508:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c50c:	f7ff fafc 	bl	800bb08 <__aeabi_dcmplt>
 800c510:	2800      	cmp	r0, #0
 800c512:	d0e3      	beq.n	800c4dc <pow+0x278>
 800c514:	2300      	movs	r3, #0
 800c516:	2200      	movs	r2, #0
 800c518:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c51c:	4630      	mov	r0, r6
 800c51e:	4639      	mov	r1, r7
 800c520:	f7ff f880 	bl	800b624 <__aeabi_dmul>
 800c524:	4604      	mov	r4, r0
 800c526:	460d      	mov	r5, r1
 800c528:	f000 ff68 	bl	800d3fc <rint>
 800c52c:	4622      	mov	r2, r4
 800c52e:	462b      	mov	r3, r5
 800c530:	f7ff fae0 	bl	800baf4 <__aeabi_dcmpeq>
 800c534:	2800      	cmp	r0, #0
 800c536:	d1d1      	bne.n	800c4dc <pow+0x278>
 800c538:	2100      	movs	r1, #0
 800c53a:	2000      	movs	r0, #0
 800c53c:	f6cf 71f0 	movt	r1, #65520	; 0xfff0
 800c540:	ec41 0b11 	vmov	d1, r0, r1
 800c544:	ed8d 1b06 	vstr	d1, [sp, #24]
 800c548:	e7c8      	b.n	800c4dc <pow+0x278>
 800c54a:	bf00      	nop
 800c54c:	080134f0 	.word	0x080134f0
 800c550:	20000060 	.word	0x20000060
 800c554:	2300      	movs	r3, #0
 800c556:	2200      	movs	r2, #0
 800c558:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c55c:	4630      	mov	r0, r6
 800c55e:	4639      	mov	r1, r7
 800c560:	f7ff f860 	bl	800b624 <__aeabi_dmul>
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f000 ff48 	bl	800d3fc <rint>
 800c56c:	4622      	mov	r2, r4
 800c56e:	462b      	mov	r3, r5
 800c570:	f7ff fac0 	bl	800baf4 <__aeabi_dcmpeq>
 800c574:	2800      	cmp	r0, #0
 800c576:	d1b1      	bne.n	800c4dc <pow+0x278>
 800c578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c57c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800c580:	f2cc 71ef 	movt	r1, #51183	; 0xc7ef
 800c584:	ec41 0b13 	vmov	d3, r0, r1
 800c588:	ed8d 3b06 	vstr	d3, [sp, #24]
 800c58c:	e7a6      	b.n	800c4dc <pow+0x278>
 800c58e:	bf00      	nop

0800c590 <sqrt>:
 800c590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c594:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800c634 <sqrt+0xa4>
 800c598:	b08a      	sub	sp, #40	; 0x28
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	f000 fde3 	bl	800d168 <__ieee754_sqrt>
 800c5a2:	f998 3000 	ldrsb.w	r3, [r8]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	d00b      	beq.n	800c5c6 <sqrt+0x36>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f000 fee7 	bl	800d384 <__fpclassifyd>
 800c5b6:	b130      	cbz	r0, 800c5c6 <sqrt+0x36>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f7ff faa2 	bl	800bb08 <__aeabi_dcmplt>
 800c5c4:	b920      	cbnz	r0, 800c5d0 <sqrt+0x40>
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	b00a      	add	sp, #40	; 0x28
 800c5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d0:	4817      	ldr	r0, [pc, #92]	; (800c630 <sqrt+0xa0>)
 800c5d2:	f898 6000 	ldrb.w	r6, [r8]
 800c5d6:	9001      	str	r0, [sp, #4]
 800c5d8:	2101      	movs	r1, #1
 800c5da:	2200      	movs	r2, #0
 800c5dc:	9100      	str	r1, [sp, #0]
 800c5de:	9208      	str	r2, [sp, #32]
 800c5e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c5e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c5e8:	b976      	cbnz	r6, 800c608 <sqrt+0x78>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	ec43 2b17 	vmov	d7, r2, r3
 800c5f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c5f6:	4668      	mov	r0, sp
 800c5f8:	f000 fef8 	bl	800d3ec <matherr>
 800c5fc:	b170      	cbz	r0, 800c61c <sqrt+0x8c>
 800c5fe:	9b08      	ldr	r3, [sp, #32]
 800c600:	b98b      	cbnz	r3, 800c626 <sqrt+0x96>
 800c602:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800c606:	e7de      	b.n	800c5c6 <sqrt+0x36>
 800c608:	2000      	movs	r0, #0
 800c60a:	2100      	movs	r1, #0
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	f7ff f932 	bl	800b878 <__aeabi_ddiv>
 800c614:	2e02      	cmp	r6, #2
 800c616:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c61a:	d1ec      	bne.n	800c5f6 <sqrt+0x66>
 800c61c:	f001 f86a 	bl	800d6f4 <__errno>
 800c620:	2721      	movs	r7, #33	; 0x21
 800c622:	6007      	str	r7, [r0, #0]
 800c624:	e7eb      	b.n	800c5fe <sqrt+0x6e>
 800c626:	f001 f865 	bl	800d6f4 <__errno>
 800c62a:	9e08      	ldr	r6, [sp, #32]
 800c62c:	6006      	str	r6, [r0, #0]
 800c62e:	e7e8      	b.n	800c602 <sqrt+0x72>
 800c630:	080134f4 	.word	0x080134f4
 800c634:	20000060 	.word	0x20000060

0800c638 <__ieee754_pow>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	469a      	mov	sl, r3
 800c63e:	4693      	mov	fp, r2
 800c640:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
 800c644:	4688      	mov	r8, r1
 800c646:	4614      	mov	r4, r2
 800c648:	4607      	mov	r7, r0
 800c64a:	4602      	mov	r2, r0
 800c64c:	ea55 000b 	orrs.w	r0, r5, fp
 800c650:	b091      	sub	sp, #68	; 0x44
 800c652:	46d1      	mov	r9, sl
 800c654:	4659      	mov	r1, fp
 800c656:	46c4      	mov	ip, r8
 800c658:	d044      	beq.n	800c6e4 <__ieee754_pow+0xac>
 800c65a:	2300      	movs	r3, #0
 800c65c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c660:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800c664:	429c      	cmp	r4, r3
 800c666:	dd0f      	ble.n	800c688 <__ieee754_pow+0x50>
 800c668:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c66c:	f504 1b80 	add.w	fp, r4, #1048576	; 0x100000
 800c670:	ea5b 0b02 	orrs.w	fp, fp, r2
 800c674:	d13c      	bne.n	800c6f0 <__ieee754_pow+0xb8>
 800c676:	f04f 0a00 	mov.w	sl, #0
 800c67a:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800c67e:	4658      	mov	r0, fp
 800c680:	4651      	mov	r1, sl
 800c682:	b011      	add	sp, #68	; 0x44
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	d038      	beq.n	800c6fc <__ieee754_pow+0xc4>
 800c68a:	2000      	movs	r0, #0
 800c68c:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c690:	4285      	cmp	r5, r0
 800c692:	dce9      	bgt.n	800c668 <__ieee754_pow+0x30>
 800c694:	f000 80b9 	beq.w	800c80a <__ieee754_pow+0x1d2>
 800c698:	f1bc 0f00 	cmp.w	ip, #0
 800c69c:	f2c0 808c 	blt.w	800c7b8 <__ieee754_pow+0x180>
 800c6a0:	2600      	movs	r6, #0
 800c6a2:	2900      	cmp	r1, #0
 800c6a4:	d12e      	bne.n	800c704 <__ieee754_pow+0xcc>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800c6ac:	4285      	cmp	r5, r0
 800c6ae:	f000 80b0 	beq.w	800c812 <__ieee754_pow+0x1da>
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c6b8:	428d      	cmp	r5, r1
 800c6ba:	f000 809f 	beq.w	800c7fc <__ieee754_pow+0x1c4>
 800c6be:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c6c2:	f000 83ed 	beq.w	800cea0 <__ieee754_pow+0x868>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c6cc:	4599      	cmp	r9, r3
 800c6ce:	d119      	bne.n	800c704 <__ieee754_pow+0xcc>
 800c6d0:	f1bc 0f00 	cmp.w	ip, #0
 800c6d4:	db16      	blt.n	800c704 <__ieee754_pow+0xcc>
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	4641      	mov	r1, r8
 800c6da:	b011      	add	sp, #68	; 0x44
 800c6dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	f000 bd42 	b.w	800d168 <__ieee754_sqrt>
 800c6e4:	f04f 0a00 	mov.w	sl, #0
 800c6e8:	4683      	mov	fp, r0
 800c6ea:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800c6ee:	e7c6      	b.n	800c67e <__ieee754_pow+0x46>
 800c6f0:	4859      	ldr	r0, [pc, #356]	; (800c858 <__ieee754_pow+0x220>)
 800c6f2:	b011      	add	sp, #68	; 0x44
 800c6f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f8:	f000 be7a 	b.w	800d3f0 <nan>
 800c6fc:	2f00      	cmp	r7, #0
 800c6fe:	d1b3      	bne.n	800c668 <__ieee754_pow+0x30>
 800c700:	e7c3      	b.n	800c68a <__ieee754_pow+0x52>
 800c702:	2600      	movs	r6, #0
 800c704:	4638      	mov	r0, r7
 800c706:	4641      	mov	r1, r8
 800c708:	9201      	str	r2, [sp, #4]
 800c70a:	f8cd c000 	str.w	ip, [sp]
 800c70e:	f000 fe2f 	bl	800d370 <fabs>
 800c712:	9a01      	ldr	r2, [sp, #4]
 800c714:	f8dd c000 	ldr.w	ip, [sp]
 800c718:	bb42      	cbnz	r2, 800c76c <__ieee754_pow+0x134>
 800c71a:	2300      	movs	r3, #0
 800c71c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800c720:	429c      	cmp	r4, r3
 800c722:	d005      	beq.n	800c730 <__ieee754_pow+0xf8>
 800c724:	b124      	cbz	r4, 800c730 <__ieee754_pow+0xf8>
 800c726:	2200      	movs	r2, #0
 800c728:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
 800c72c:	4294      	cmp	r4, r2
 800c72e:	d11d      	bne.n	800c76c <__ieee754_pow+0x134>
 800c730:	f1b9 0f00 	cmp.w	r9, #0
 800c734:	f2c0 841f 	blt.w	800cf76 <__ieee754_pow+0x93e>
 800c738:	4683      	mov	fp, r0
 800c73a:	468a      	mov	sl, r1
 800c73c:	f1bc 0f00 	cmp.w	ip, #0
 800c740:	da9d      	bge.n	800c67e <__ieee754_pow+0x46>
 800c742:	f104 4040 	add.w	r0, r4, #3221225472	; 0xc0000000
 800c746:	f500 1280 	add.w	r2, r0, #1048576	; 0x100000
 800c74a:	ea56 0302 	orrs.w	r3, r6, r2
 800c74e:	f040 84b7 	bne.w	800d0c0 <__ieee754_pow+0xa88>
 800c752:	4658      	mov	r0, fp
 800c754:	465a      	mov	r2, fp
 800c756:	4651      	mov	r1, sl
 800c758:	4653      	mov	r3, sl
 800c75a:	f7fe fdaf 	bl	800b2bc <__aeabi_dsub>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	f7ff f889 	bl	800b878 <__aeabi_ddiv>
 800c766:	4683      	mov	fp, r0
 800c768:	468a      	mov	sl, r1
 800c76a:	e788      	b.n	800c67e <__ieee754_pow+0x46>
 800c76c:	ea4f 7edc 	mov.w	lr, ip, lsr #31
 800c770:	f10e 3cff 	add.w	ip, lr, #4294967295
 800c774:	ea56 030c 	orrs.w	r3, r6, ip
 800c778:	d064      	beq.n	800c844 <__ieee754_pow+0x20c>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f2c4 13e0 	movt	r3, #16864	; 0x41e0
 800c780:	429d      	cmp	r5, r3
 800c782:	dd6b      	ble.n	800c85c <__ieee754_pow+0x224>
 800c784:	2300      	movs	r3, #0
 800c786:	f2c4 33f0 	movt	r3, #17392	; 0x43f0
 800c78a:	429d      	cmp	r5, r3
 800c78c:	f340 8408 	ble.w	800cfa0 <__ieee754_pow+0x968>
 800c790:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c794:	f6c3 71ef 	movt	r1, #16367	; 0x3fef
 800c798:	428c      	cmp	r4, r1
 800c79a:	f340 83e7 	ble.w	800cf6c <__ieee754_pow+0x934>
 800c79e:	f1b9 0f00 	cmp.w	r9, #0
 800c7a2:	dd49      	ble.n	800c838 <__ieee754_pow+0x200>
 800c7a4:	a12a      	add	r1, pc, #168	; (adr r1, 800c850 <__ieee754_pow+0x218>)
 800c7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	f7fe ff39 	bl	800b624 <__aeabi_dmul>
 800c7b2:	4683      	mov	fp, r0
 800c7b4:	468a      	mov	sl, r1
 800c7b6:	e762      	b.n	800c67e <__ieee754_pow+0x46>
 800c7b8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800c7bc:	f2c4 363f 	movt	r6, #17215	; 0x433f
 800c7c0:	42b5      	cmp	r5, r6
 800c7c2:	dc3d      	bgt.n	800c840 <__ieee754_pow+0x208>
 800c7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7c8:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 800c7cc:	429d      	cmp	r5, r3
 800c7ce:	f77f af67 	ble.w	800c6a0 <__ieee754_pow+0x68>
 800c7d2:	152e      	asrs	r6, r5, #20
 800c7d4:	f240 4013 	movw	r0, #1043	; 0x413
 800c7d8:	4286      	cmp	r6, r0
 800c7da:	f340 8475 	ble.w	800d0c8 <__ieee754_pow+0xa90>
 800c7de:	f5c6 6686 	rsb	r6, r6, #1072	; 0x430
 800c7e2:	1cf3      	adds	r3, r6, #3
 800c7e4:	fa21 f003 	lsr.w	r0, r1, r3
 800c7e8:	fa00 f603 	lsl.w	r6, r0, r3
 800c7ec:	428e      	cmp	r6, r1
 800c7ee:	f47f af57 	bne.w	800c6a0 <__ieee754_pow+0x68>
 800c7f2:	f000 0301 	and.w	r3, r0, #1
 800c7f6:	f1c3 0602 	rsb	r6, r3, #2
 800c7fa:	e752      	b.n	800c6a2 <__ieee754_pow+0x6a>
 800c7fc:	f1b9 0f00 	cmp.w	r9, #0
 800c800:	f2c0 8442 	blt.w	800d088 <__ieee754_pow+0xa50>
 800c804:	46bb      	mov	fp, r7
 800c806:	46c2      	mov	sl, r8
 800c808:	e739      	b.n	800c67e <__ieee754_pow+0x46>
 800c80a:	2900      	cmp	r1, #0
 800c80c:	f43f af44 	beq.w	800c698 <__ieee754_pow+0x60>
 800c810:	e72a      	b.n	800c668 <__ieee754_pow+0x30>
 800c812:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c816:	f503 1080 	add.w	r0, r3, #1048576	; 0x100000
 800c81a:	ea50 0302 	orrs.w	r3, r0, r2
 800c81e:	f000 8338 	beq.w	800ce92 <__ieee754_pow+0x85a>
 800c822:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c826:	f6c3 71ef 	movt	r1, #16367	; 0x3fef
 800c82a:	428c      	cmp	r4, r1
 800c82c:	f340 8396 	ble.w	800cf5c <__ieee754_pow+0x924>
 800c830:	f1b9 0f00 	cmp.w	r9, #0
 800c834:	f6bf af23 	bge.w	800c67e <__ieee754_pow+0x46>
 800c838:	f04f 0b00 	mov.w	fp, #0
 800c83c:	46da      	mov	sl, fp
 800c83e:	e71e      	b.n	800c67e <__ieee754_pow+0x46>
 800c840:	2602      	movs	r6, #2
 800c842:	e72e      	b.n	800c6a2 <__ieee754_pow+0x6a>
 800c844:	4638      	mov	r0, r7
 800c846:	4641      	mov	r1, r8
 800c848:	463a      	mov	r2, r7
 800c84a:	4643      	mov	r3, r8
 800c84c:	e785      	b.n	800c75a <__ieee754_pow+0x122>
 800c84e:	bf00      	nop
 800c850:	8800759c 	.word	0x8800759c
 800c854:	7e37e43c 	.word	0x7e37e43c
 800c858:	08013578 	.word	0x08013578
 800c85c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c860:	f280 839c 	bge.w	800cf9c <__ieee754_pow+0x964>
 800c864:	2300      	movs	r3, #0
 800c866:	2200      	movs	r2, #0
 800c868:	f2c4 3340 	movt	r3, #17216	; 0x4340
 800c86c:	f8cd c000 	str.w	ip, [sp]
 800c870:	f7fe fed8 	bl	800b624 <__aeabi_dmul>
 800c874:	f8dd c000 	ldr.w	ip, [sp]
 800c878:	f06f 0734 	mvn.w	r7, #52	; 0x34
 800c87c:	460c      	mov	r4, r1
 800c87e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
 800c882:	f649 018e 	movw	r1, #39054	; 0x988e
 800c886:	1524      	asrs	r4, r4, #20
 800c888:	f422 0370 	bic.w	r3, r2, #15728640	; 0xf00000
 800c88c:	f2c0 0103 	movt	r1, #3
 800c890:	f2a4 32ff 	subw	r2, r4, #1023	; 0x3ff
 800c894:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800c898:	19d7      	adds	r7, r2, r7
 800c89a:	428b      	cmp	r3, r1
 800c89c:	970f      	str	r7, [sp, #60]	; 0x3c
 800c89e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c8a2:	f340 8378 	ble.w	800cf96 <__ieee754_pow+0x95e>
 800c8a6:	f24b 6479 	movw	r4, #46713	; 0xb679
 800c8aa:	f2c0 040b 	movt	r4, #11
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	f340 8419 	ble.w	800d0e6 <__ieee754_pow+0xaae>
 800c8b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8b6:	2400      	movs	r4, #0
 800c8b8:	1c59      	adds	r1, r3, #1
 800c8ba:	910f      	str	r1, [sp, #60]	; 0x3c
 800c8bc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c8c0:	4627      	mov	r7, r4
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	48aa      	ldr	r0, [pc, #680]	; (800cb70 <__ieee754_pow+0x538>)
 800c8c6:	f8cd c000 	str.w	ip, [sp]
 800c8ca:	00ff      	lsls	r7, r7, #3
 800c8cc:	19c1      	adds	r1, r0, r7
 800c8ce:	e9d1 8900 	ldrd	r8, r9, [r1]
 800c8d2:	462b      	mov	r3, r5
 800c8d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8dc:	4642      	mov	r2, r8
 800c8de:	464b      	mov	r3, r9
 800c8e0:	f7fe fcec 	bl	800b2bc <__aeabi_dsub>
 800c8e4:	4642      	mov	r2, r8
 800c8e6:	464b      	mov	r3, r9
 800c8e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c8ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f0:	f7fe fce6 	bl	800b2c0 <__adddf3>
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7fe ffba 	bl	800b878 <__aeabi_ddiv>
 800c904:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c908:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c90c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c910:	f7fe fe88 	bl	800b624 <__aeabi_dmul>
 800c914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c918:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c91c:	2000      	movs	r0, #0
 800c91e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c922:	106d      	asrs	r5, r5, #1
 800c924:	9008      	str	r0, [sp, #32]
 800c926:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c92a:	f045 5300 	orr.w	r3, r5, #536870912	; 0x20000000
 800c92e:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 800c932:	190d      	adds	r5, r1, r4
 800c934:	2200      	movs	r2, #0
 800c936:	ec51 0b10 	vmov	r0, r1, d0
 800c93a:	462b      	mov	r3, r5
 800c93c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c940:	4614      	mov	r4, r2
 800c942:	f7fe fe6f 	bl	800b624 <__aeabi_dmul>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c94e:	f7fe fcb5 	bl	800b2bc <__aeabi_dsub>
 800c952:	4642      	mov	r2, r8
 800c954:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c958:	464b      	mov	r3, r9
 800c95a:	4620      	mov	r0, r4
 800c95c:	4629      	mov	r1, r5
 800c95e:	f7fe fcad 	bl	800b2bc <__aeabi_dsub>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c96a:	f7fe fca7 	bl	800b2bc <__aeabi_dsub>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c976:	f7fe fe55 	bl	800b624 <__aeabi_dmul>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c982:	f7fe fc9b 	bl	800b2bc <__aeabi_dsub>
 800c986:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c98a:	f7fe fe4b 	bl	800b624 <__aeabi_dmul>
 800c98e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	f7fe fe43 	bl	800b624 <__aeabi_dmul>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	f7fe fe3d 	bl	800b624 <__aeabi_dmul>
 800c9aa:	a35f      	add	r3, pc, #380	; (adr r3, 800cb28 <__ieee754_pow+0x4f0>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	4680      	mov	r8, r0
 800c9b2:	4689      	mov	r9, r1
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	f7fe fe34 	bl	800b624 <__aeabi_dmul>
 800c9bc:	a35c      	add	r3, pc, #368	; (adr r3, 800cb30 <__ieee754_pow+0x4f8>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7fe fc7d 	bl	800b2c0 <__adddf3>
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	f7fe fe2b 	bl	800b624 <__aeabi_dmul>
 800c9ce:	a35a      	add	r3, pc, #360	; (adr r3, 800cb38 <__ieee754_pow+0x500>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7fe fc74 	bl	800b2c0 <__adddf3>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7fe fe22 	bl	800b624 <__aeabi_dmul>
 800c9e0:	a357      	add	r3, pc, #348	; (adr r3, 800cb40 <__ieee754_pow+0x508>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7fe fc6b 	bl	800b2c0 <__adddf3>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7fe fe19 	bl	800b624 <__aeabi_dmul>
 800c9f2:	a355      	add	r3, pc, #340	; (adr r3, 800cb48 <__ieee754_pow+0x510>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	f7fe fc62 	bl	800b2c0 <__adddf3>
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	462b      	mov	r3, r5
 800ca00:	f7fe fe10 	bl	800b624 <__aeabi_dmul>
 800ca04:	a352      	add	r3, pc, #328	; (adr r3, 800cb50 <__ieee754_pow+0x518>)
 800ca06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0a:	f7fe fc59 	bl	800b2c0 <__adddf3>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	460b      	mov	r3, r1
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7fe fe05 	bl	800b624 <__aeabi_dmul>
 800ca1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca26:	f7fe fc4b 	bl	800b2c0 <__adddf3>
 800ca2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca2e:	f7fe fdf9 	bl	800b624 <__aeabi_dmul>
 800ca32:	4622      	mov	r2, r4
 800ca34:	462b      	mov	r3, r5
 800ca36:	f7fe fc43 	bl	800b2c0 <__adddf3>
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4689      	mov	r9, r1
 800ca3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	f7fe fded 	bl	800b624 <__aeabi_dmul>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800ca52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca56:	f7fe fc33 	bl	800b2c0 <__adddf3>
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	f7fe fc2f 	bl	800b2c0 <__adddf3>
 800ca62:	9a08      	ldr	r2, [sp, #32]
 800ca64:	460d      	mov	r5, r1
 800ca66:	462b      	mov	r3, r5
 800ca68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6c:	4614      	mov	r4, r2
 800ca6e:	f7fe fdd9 	bl	800b624 <__aeabi_dmul>
 800ca72:	4622      	mov	r2, r4
 800ca74:	462b      	mov	r3, r5
 800ca76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca7e:	f7fe fdd1 	bl	800b624 <__aeabi_dmul>
 800ca82:	2300      	movs	r3, #0
 800ca84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f2c4 0308 	movt	r3, #16392	; 0x4008
 800ca92:	f7fe fc13 	bl	800b2bc <__aeabi_dsub>
 800ca96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca9a:	f7fe fc0f 	bl	800b2bc <__aeabi_dsub>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7fe fc09 	bl	800b2bc <__aeabi_dsub>
 800caaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caae:	f7fe fdb9 	bl	800b624 <__aeabi_dmul>
 800cab2:	4602      	mov	r2, r0
 800cab4:	460b      	mov	r3, r1
 800cab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caba:	f7fe fc01 	bl	800b2c0 <__adddf3>
 800cabe:	4680      	mov	r8, r0
 800cac0:	4689      	mov	r9, r1
 800cac2:	4642      	mov	r2, r8
 800cac4:	464b      	mov	r3, r9
 800cac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caca:	f7fe fbf9 	bl	800b2c0 <__adddf3>
 800cace:	9808      	ldr	r0, [sp, #32]
 800cad0:	a321      	add	r3, pc, #132	; (adr r3, 800cb58 <__ieee754_pow+0x520>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	f7fe fda3 	bl	800b624 <__aeabi_dmul>
 800cade:	a320      	add	r3, pc, #128	; (adr r3, 800cb60 <__ieee754_pow+0x528>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	f7fe fd9a 	bl	800b624 <__aeabi_dmul>
 800caf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7fe fbde 	bl	800b2bc <__aeabi_dsub>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7fe fbd8 	bl	800b2bc <__aeabi_dsub>
 800cb0c:	a316      	add	r3, pc, #88	; (adr r3, 800cb68 <__ieee754_pow+0x530>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7fe fd87 	bl	800b624 <__aeabi_dmul>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb1e:	f7fe fbcf 	bl	800b2c0 <__adddf3>
 800cb22:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <__ieee754_pow+0x53c>)
 800cb24:	19da      	adds	r2, r3, r7
 800cb26:	e027      	b.n	800cb78 <__ieee754_pow+0x540>
 800cb28:	4a454eef 	.word	0x4a454eef
 800cb2c:	3fca7e28 	.word	0x3fca7e28
 800cb30:	93c9db65 	.word	0x93c9db65
 800cb34:	3fcd864a 	.word	0x3fcd864a
 800cb38:	a91d4101 	.word	0xa91d4101
 800cb3c:	3fd17460 	.word	0x3fd17460
 800cb40:	518f264d 	.word	0x518f264d
 800cb44:	3fd55555 	.word	0x3fd55555
 800cb48:	db6fabff 	.word	0xdb6fabff
 800cb4c:	3fdb6db6 	.word	0x3fdb6db6
 800cb50:	33333303 	.word	0x33333303
 800cb54:	3fe33333 	.word	0x3fe33333
 800cb58:	e0000000 	.word	0xe0000000
 800cb5c:	3feec709 	.word	0x3feec709
 800cb60:	145b01f5 	.word	0x145b01f5
 800cb64:	be3e2fe0 	.word	0xbe3e2fe0
 800cb68:	dc3a03fd 	.word	0xdc3a03fd
 800cb6c:	3feec709 	.word	0x3feec709
 800cb70:	08013520 	.word	0x08013520
 800cb74:	08013510 	.word	0x08013510
 800cb78:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cb7c:	f7fe fba0 	bl	800b2c0 <__adddf3>
 800cb80:	4680      	mov	r8, r0
 800cb82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cb84:	4689      	mov	r9, r1
 800cb86:	f7fe fce7 	bl	800b558 <__aeabi_i2d>
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	49ae      	ldr	r1, [pc, #696]	; (800ce48 <__ieee754_pow+0x810>)
 800cb8e:	19cf      	adds	r7, r1, r7
 800cb90:	ed97 1b00 	vldr	d1, [r7]
 800cb94:	4604      	mov	r4, r0
 800cb96:	4642      	mov	r2, r8
 800cb98:	464b      	mov	r3, r9
 800cb9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb9e:	ed8d 1b06 	vstr	d1, [sp, #24]
 800cba2:	f7fe fb8d 	bl	800b2c0 <__adddf3>
 800cba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbaa:	f7fe fb89 	bl	800b2c0 <__adddf3>
 800cbae:	4622      	mov	r2, r4
 800cbb0:	462b      	mov	r3, r5
 800cbb2:	f7fe fb85 	bl	800b2c0 <__adddf3>
 800cbb6:	9808      	ldr	r0, [sp, #32]
 800cbb8:	4622      	mov	r2, r4
 800cbba:	462b      	mov	r3, r5
 800cbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbc0:	f7fe fb7c 	bl	800b2bc <__aeabi_dsub>
 800cbc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbc8:	f7fe fb78 	bl	800b2bc <__aeabi_dsub>
 800cbcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbd0:	f7fe fb74 	bl	800b2bc <__aeabi_dsub>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4640      	mov	r0, r8
 800cbda:	4649      	mov	r1, r9
 800cbdc:	f7fe fb6e 	bl	800b2bc <__aeabi_dsub>
 800cbe0:	f8dd c000 	ldr.w	ip, [sp]
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	4689      	mov	r9, r1
 800cbe8:	3e01      	subs	r6, #1
 800cbea:	ea56 060c 	orrs.w	r6, r6, ip
 800cbee:	f040 81b0 	bne.w	800cf52 <__ieee754_pow+0x91a>
 800cbf2:	ed9f 3b81 	vldr	d3, [pc, #516]	; 800cdf8 <__ieee754_pow+0x7c0>
 800cbf6:	ed8d 3b08 	vstr	d3, [sp, #32]
 800cbfa:	2400      	movs	r4, #0
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4653      	mov	r3, sl
 800cc00:	4658      	mov	r0, fp
 800cc02:	4651      	mov	r1, sl
 800cc04:	f7fe fb5a 	bl	800b2bc <__aeabi_dsub>
 800cc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc0c:	f7fe fd0a 	bl	800b624 <__aeabi_dmul>
 800cc10:	4655      	mov	r5, sl
 800cc12:	4606      	mov	r6, r0
 800cc14:	460f      	mov	r7, r1
 800cc16:	4642      	mov	r2, r8
 800cc18:	464b      	mov	r3, r9
 800cc1a:	4658      	mov	r0, fp
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	f7fe fd01 	bl	800b624 <__aeabi_dmul>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7fe fb49 	bl	800b2c0 <__adddf3>
 800cc2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc32:	4682      	mov	sl, r0
 800cc34:	468b      	mov	fp, r1
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7fe fcf3 	bl	800b624 <__aeabi_dmul>
 800cc3e:	4604      	mov	r4, r0
 800cc40:	460d      	mov	r5, r1
 800cc42:	4650      	mov	r0, sl
 800cc44:	4659      	mov	r1, fp
 800cc46:	4622      	mov	r2, r4
 800cc48:	462b      	mov	r3, r5
 800cc4a:	f7fe fb39 	bl	800b2c0 <__adddf3>
 800cc4e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800cc52:	f2c4 088f 	movt	r8, #16527	; 0x408f
 800cc56:	4541      	cmp	r1, r8
 800cc58:	4606      	mov	r6, r0
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	4689      	mov	r9, r1
 800cc5e:	f340 8122 	ble.w	800cea6 <__ieee754_pow+0x86e>
 800cc62:	f101 403f 	add.w	r0, r1, #3204448256	; 0xbf000000
 800cc66:	f500 01e0 	add.w	r1, r0, #7340032	; 0x700000
 800cc6a:	ea51 0306 	orrs.w	r3, r1, r6
 800cc6e:	f040 8217 	bne.w	800d0a0 <__ieee754_pow+0xa68>
 800cc72:	a363      	add	r3, pc, #396	; (adr r3, 800ce00 <__ieee754_pow+0x7c8>)
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	4650      	mov	r0, sl
 800cc7a:	4659      	mov	r1, fp
 800cc7c:	f7fe fb20 	bl	800b2c0 <__adddf3>
 800cc80:	4622      	mov	r2, r4
 800cc82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc86:	462b      	mov	r3, r5
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f7fe fb16 	bl	800b2bc <__aeabi_dsub>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc98:	f7fe ff54 	bl	800bb44 <__aeabi_dcmpgt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f040 81ff 	bne.w	800d0a0 <__ieee754_pow+0xa68>
 800cca2:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cca6:	2600      	movs	r6, #0
 800cca8:	f6c3 76e0 	movt	r6, #16352	; 0x3fe0
 800ccac:	45b0      	cmp	r8, r6
 800ccae:	f300 8118 	bgt.w	800cee2 <__ieee754_pow+0x8aa>
 800ccb2:	f04f 0c00 	mov.w	ip, #0
 800ccb6:	f8cd c008 	str.w	ip, [sp, #8]
 800ccba:	2600      	movs	r6, #0
 800ccbc:	a352      	add	r3, pc, #328	; (adr r3, 800ce08 <__ieee754_pow+0x7d0>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	4639      	mov	r1, r7
 800ccc6:	f8cd c000 	str.w	ip, [sp]
 800ccca:	f7fe fcab 	bl	800b624 <__aeabi_dmul>
 800ccce:	4622      	mov	r2, r4
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	4689      	mov	r9, r1
 800ccd4:	462b      	mov	r3, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7fe faef 	bl	800b2bc <__aeabi_dsub>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7fe fae9 	bl	800b2bc <__aeabi_dsub>
 800ccea:	a349      	add	r3, pc, #292	; (adr r3, 800ce10 <__ieee754_pow+0x7d8>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7fe fc98 	bl	800b624 <__aeabi_dmul>
 800ccf4:	a348      	add	r3, pc, #288	; (adr r3, 800ce18 <__ieee754_pow+0x7e0>)
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	4630      	mov	r0, r6
 800cd00:	4639      	mov	r1, r7
 800cd02:	f7fe fc8f 	bl	800b624 <__aeabi_dmul>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	f7fe fad7 	bl	800b2c0 <__adddf3>
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	4632      	mov	r2, r6
 800cd18:	463b      	mov	r3, r7
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	f7fe facf 	bl	800b2c0 <__adddf3>
 800cd22:	4642      	mov	r2, r8
 800cd24:	464b      	mov	r3, r9
 800cd26:	4604      	mov	r4, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	f7fe fac7 	bl	800b2bc <__aeabi_dsub>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4630      	mov	r0, r6
 800cd34:	4639      	mov	r1, r7
 800cd36:	f7fe fac1 	bl	800b2bc <__aeabi_dsub>
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	468b      	mov	fp, r1
 800cd40:	462b      	mov	r3, r5
 800cd42:	4620      	mov	r0, r4
 800cd44:	4629      	mov	r1, r5
 800cd46:	f7fe fc6d 	bl	800b624 <__aeabi_dmul>
 800cd4a:	a335      	add	r3, pc, #212	; (adr r3, 800ce20 <__ieee754_pow+0x7e8>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	f7fe fc66 	bl	800b624 <__aeabi_dmul>
 800cd58:	a333      	add	r3, pc, #204	; (adr r3, 800ce28 <__ieee754_pow+0x7f0>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	f7fe faad 	bl	800b2bc <__aeabi_dsub>
 800cd62:	4632      	mov	r2, r6
 800cd64:	463b      	mov	r3, r7
 800cd66:	f7fe fc5d 	bl	800b624 <__aeabi_dmul>
 800cd6a:	a331      	add	r3, pc, #196	; (adr r3, 800ce30 <__ieee754_pow+0x7f8>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7fe faa6 	bl	800b2c0 <__adddf3>
 800cd74:	4632      	mov	r2, r6
 800cd76:	463b      	mov	r3, r7
 800cd78:	f7fe fc54 	bl	800b624 <__aeabi_dmul>
 800cd7c:	a32e      	add	r3, pc, #184	; (adr r3, 800ce38 <__ieee754_pow+0x800>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	f7fe fa9b 	bl	800b2bc <__aeabi_dsub>
 800cd86:	4632      	mov	r2, r6
 800cd88:	463b      	mov	r3, r7
 800cd8a:	f7fe fc4b 	bl	800b624 <__aeabi_dmul>
 800cd8e:	a32c      	add	r3, pc, #176	; (adr r3, 800ce40 <__ieee754_pow+0x808>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	f7fe fa94 	bl	800b2c0 <__adddf3>
 800cd98:	4632      	mov	r2, r6
 800cd9a:	463b      	mov	r3, r7
 800cd9c:	f7fe fc42 	bl	800b624 <__aeabi_dmul>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4620      	mov	r0, r4
 800cda6:	4629      	mov	r1, r5
 800cda8:	f7fe fa88 	bl	800b2bc <__aeabi_dsub>
 800cdac:	4606      	mov	r6, r0
 800cdae:	460f      	mov	r7, r1
 800cdb0:	4632      	mov	r2, r6
 800cdb2:	463b      	mov	r3, r7
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7fe fc34 	bl	800b624 <__aeabi_dmul>
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	4689      	mov	r9, r1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdca:	f7fe fa77 	bl	800b2bc <__aeabi_dsub>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	f7fe fd4f 	bl	800b878 <__aeabi_ddiv>
 800cdda:	4652      	mov	r2, sl
 800cddc:	4606      	mov	r6, r0
 800cdde:	460f      	mov	r7, r1
 800cde0:	4620      	mov	r0, r4
 800cde2:	4629      	mov	r1, r5
 800cde4:	465b      	mov	r3, fp
 800cde6:	f7fe fc1d 	bl	800b624 <__aeabi_dmul>
 800cdea:	4652      	mov	r2, sl
 800cdec:	465b      	mov	r3, fp
 800cdee:	f7fe fa67 	bl	800b2c0 <__adddf3>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	e029      	b.n	800ce4c <__ieee754_pow+0x814>
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	bff00000 	.word	0xbff00000
 800ce00:	652b82fe 	.word	0x652b82fe
 800ce04:	3c971547 	.word	0x3c971547
 800ce08:	00000000 	.word	0x00000000
 800ce0c:	3fe62e43 	.word	0x3fe62e43
 800ce10:	fefa39ef 	.word	0xfefa39ef
 800ce14:	3fe62e42 	.word	0x3fe62e42
 800ce18:	0ca86c39 	.word	0x0ca86c39
 800ce1c:	be205c61 	.word	0xbe205c61
 800ce20:	72bea4d0 	.word	0x72bea4d0
 800ce24:	3e663769 	.word	0x3e663769
 800ce28:	c5d26bf1 	.word	0xc5d26bf1
 800ce2c:	3ebbbd41 	.word	0x3ebbbd41
 800ce30:	af25de2c 	.word	0xaf25de2c
 800ce34:	3f11566a 	.word	0x3f11566a
 800ce38:	16bebd93 	.word	0x16bebd93
 800ce3c:	3f66c16c 	.word	0x3f66c16c
 800ce40:	5555553e 	.word	0x5555553e
 800ce44:	3fc55555 	.word	0x3fc55555
 800ce48:	08013500 	.word	0x08013500
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	4639      	mov	r1, r7
 800ce50:	f7fe fa34 	bl	800b2bc <__aeabi_dsub>
 800ce54:	4622      	mov	r2, r4
 800ce56:	462b      	mov	r3, r5
 800ce58:	f7fe fa30 	bl	800b2bc <__aeabi_dsub>
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	2100      	movs	r1, #0
 800ce60:	4602      	mov	r2, r0
 800ce62:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800ce66:	2000      	movs	r0, #0
 800ce68:	f7fe fa28 	bl	800b2bc <__aeabi_dsub>
 800ce6c:	f8dd c000 	ldr.w	ip, [sp]
 800ce70:	eb0c 0301 	add.w	r3, ip, r1
 800ce74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce78:	4602      	mov	r2, r0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	f2c0 814a 	blt.w	800d116 <__ieee754_pow+0xade>
 800ce82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce86:	f7fe fbcd 	bl	800b624 <__aeabi_dmul>
 800ce8a:	4683      	mov	fp, r0
 800ce8c:	468a      	mov	sl, r1
 800ce8e:	f7ff bbf6 	b.w	800c67e <__ieee754_pow+0x46>
 800ce92:	f04f 0a00 	mov.w	sl, #0
 800ce96:	468b      	mov	fp, r1
 800ce98:	f6c3 7af0 	movt	sl, #16368	; 0x3ff0
 800ce9c:	f7ff bbef 	b.w	800c67e <__ieee754_pow+0x46>
 800cea0:	4638      	mov	r0, r7
 800cea2:	4641      	mov	r1, r8
 800cea4:	e481      	b.n	800c7aa <__ieee754_pow+0x172>
 800cea6:	f64c 33ff 	movw	r3, #52223	; 0xcbff
 800ceaa:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ceae:	f2c4 0390 	movt	r3, #16528	; 0x4090
 800ceb2:	4598      	cmp	r8, r3
 800ceb4:	f77f aef7 	ble.w	800cca6 <__ieee754_pow+0x66e>
 800ceb8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800cebc:	f6c3 736f 	movt	r3, #16239	; 0x3f6f
 800cec0:	18cb      	adds	r3, r1, r3
 800cec2:	4303      	orrs	r3, r0
 800cec4:	f040 8114 	bne.w	800d0f0 <__ieee754_pow+0xab8>
 800cec8:	4622      	mov	r2, r4
 800ceca:	462b      	mov	r3, r5
 800cecc:	f7fe f9f6 	bl	800b2bc <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4650      	mov	r0, sl
 800ced6:	4659      	mov	r1, fp
 800ced8:	f7fe fe20 	bl	800bb1c <__aeabi_dcmple>
 800cedc:	2800      	cmp	r0, #0
 800cede:	f040 8107 	bne.w	800d0f0 <__ieee754_pow+0xab8>
 800cee2:	ea4f 5728 	mov.w	r7, r8, asr #20
 800cee6:	f2a7 32fe 	subw	r2, r7, #1022	; 0x3fe
 800ceea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ceee:	fa43 f302 	asr.w	r3, r3, r2
 800cef2:	eb03 0109 	add.w	r1, r3, r9
 800cef6:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800cefa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800cefe:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 800cf02:	f2c0 060f 	movt	r6, #15
 800cf06:	f021 487f 	bic.w	r8, r1, #4278190080	; 0xff000000
 800cf0a:	fa46 f307 	asr.w	r3, r6, r7
 800cf0e:	f5c0 6082 	rsb	r0, r0, #1040	; 0x410
 800cf12:	f428 0670 	bic.w	r6, r8, #15728640	; 0xf00000
 800cf16:	ea21 0303 	bic.w	r3, r1, r3
 800cf1a:	f446 1780 	orr.w	r7, r6, #1048576	; 0x100000
 800cf1e:	1cc1      	adds	r1, r0, #3
 800cf20:	2200      	movs	r2, #0
 800cf22:	fa47 f601 	asr.w	r6, r7, r1
 800cf26:	f1b9 0f00 	cmp.w	r9, #0
 800cf2a:	9602      	str	r6, [sp, #8]
 800cf2c:	f2c0 80f0 	blt.w	800d110 <__ieee754_pow+0xad8>
 800cf30:	4620      	mov	r0, r4
 800cf32:	4629      	mov	r1, r5
 800cf34:	f7fe f9c2 	bl	800b2bc <__aeabi_dsub>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	4650      	mov	r0, sl
 800cf40:	4659      	mov	r1, fp
 800cf42:	462b      	mov	r3, r5
 800cf44:	f7fe f9bc 	bl	800b2c0 <__adddf3>
 800cf48:	9a02      	ldr	r2, [sp, #8]
 800cf4a:	460f      	mov	r7, r1
 800cf4c:	ea4f 5c02 	mov.w	ip, r2, lsl #20
 800cf50:	e6b3      	b.n	800ccba <__ieee754_pow+0x682>
 800cf52:	ed9f 2b77 	vldr	d2, [pc, #476]	; 800d130 <__ieee754_pow+0xaf8>
 800cf56:	ed8d 2b08 	vstr	d2, [sp, #32]
 800cf5a:	e64e      	b.n	800cbfa <__ieee754_pow+0x5c2>
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	f6bf ac6a 	bge.w	800c838 <__ieee754_pow+0x200>
 800cf64:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 800cf68:	f7ff bb89 	b.w	800c67e <__ieee754_pow+0x46>
 800cf6c:	f1b9 0f00 	cmp.w	r9, #0
 800cf70:	f6bf ac62 	bge.w	800c838 <__ieee754_pow+0x200>
 800cf74:	e416      	b.n	800c7a4 <__ieee754_pow+0x16c>
 800cf76:	460b      	mov	r3, r1
 800cf78:	2100      	movs	r1, #0
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800cf80:	2000      	movs	r0, #0
 800cf82:	f8cd c000 	str.w	ip, [sp]
 800cf86:	f7fe fc77 	bl	800b878 <__aeabi_ddiv>
 800cf8a:	f8dd c000 	ldr.w	ip, [sp]
 800cf8e:	4683      	mov	fp, r0
 800cf90:	468a      	mov	sl, r1
 800cf92:	f7ff bbd3 	b.w	800c73c <__ieee754_pow+0x104>
 800cf96:	2400      	movs	r4, #0
 800cf98:	4627      	mov	r7, r4
 800cf9a:	e492      	b.n	800c8c2 <__ieee754_pow+0x28a>
 800cf9c:	2700      	movs	r7, #0
 800cf9e:	e46e      	b.n	800c87e <__ieee754_pow+0x246>
 800cfa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cfa4:	f6c3 72ef 	movt	r2, #16367	; 0x3fef
 800cfa8:	4294      	cmp	r4, r2
 800cfaa:	dddf      	ble.n	800cf6c <__ieee754_pow+0x934>
 800cfac:	2300      	movs	r3, #0
 800cfae:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800cfb2:	429c      	cmp	r4, r3
 800cfb4:	f73f abf3 	bgt.w	800c79e <__ieee754_pow+0x166>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800cfc0:	f8cd c000 	str.w	ip, [sp]
 800cfc4:	f7fe f97a 	bl	800b2bc <__aeabi_dsub>
 800cfc8:	a35b      	add	r3, pc, #364	; (adr r3, 800d138 <__ieee754_pow+0xb00>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	4607      	mov	r7, r0
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	f7fe fb27 	bl	800b624 <__aeabi_dmul>
 800cfd6:	a35a      	add	r3, pc, #360	; (adr r3, 800d140 <__ieee754_pow+0xb08>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	4680      	mov	r8, r0
 800cfde:	4689      	mov	r9, r1
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	f7fe fb1e 	bl	800b624 <__aeabi_dmul>
 800cfe8:	463a      	mov	r2, r7
 800cfea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfee:	4623      	mov	r3, r4
 800cff0:	4638      	mov	r0, r7
 800cff2:	4621      	mov	r1, r4
 800cff4:	f7fe fb16 	bl	800b624 <__aeabi_dmul>
 800cff8:	2300      	movs	r3, #0
 800cffa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cffe:	2200      	movs	r2, #0
 800d000:	4638      	mov	r0, r7
 800d002:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
 800d006:	4621      	mov	r1, r4
 800d008:	f7fe fb0c 	bl	800b624 <__aeabi_dmul>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	a14d      	add	r1, pc, #308	; (adr r1, 800d148 <__ieee754_pow+0xb10>)
 800d012:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d016:	f7fe f951 	bl	800b2bc <__aeabi_dsub>
 800d01a:	463a      	mov	r2, r7
 800d01c:	4623      	mov	r3, r4
 800d01e:	f7fe fb01 	bl	800b624 <__aeabi_dmul>
 800d022:	460b      	mov	r3, r1
 800d024:	2100      	movs	r1, #0
 800d026:	4602      	mov	r2, r0
 800d028:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800d02c:	2000      	movs	r0, #0
 800d02e:	f7fe f945 	bl	800b2bc <__aeabi_dsub>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d03a:	f7fe faf3 	bl	800b624 <__aeabi_dmul>
 800d03e:	a344      	add	r3, pc, #272	; (adr r3, 800d150 <__ieee754_pow+0xb18>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7fe faee 	bl	800b624 <__aeabi_dmul>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d050:	f7fe f934 	bl	800b2bc <__aeabi_dsub>
 800d054:	4607      	mov	r7, r0
 800d056:	460d      	mov	r5, r1
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	463a      	mov	r2, r7
 800d05e:	462b      	mov	r3, r5
 800d060:	f7fe f92e 	bl	800b2c0 <__adddf3>
 800d064:	4642      	mov	r2, r8
 800d066:	464b      	mov	r3, r9
 800d068:	2000      	movs	r0, #0
 800d06a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d06e:	f7fe f925 	bl	800b2bc <__aeabi_dsub>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4638      	mov	r0, r7
 800d078:	4629      	mov	r1, r5
 800d07a:	f7fe f91f 	bl	800b2bc <__aeabi_dsub>
 800d07e:	f8dd c000 	ldr.w	ip, [sp]
 800d082:	4680      	mov	r8, r0
 800d084:	4689      	mov	r9, r1
 800d086:	e5af      	b.n	800cbe8 <__ieee754_pow+0x5b0>
 800d088:	2100      	movs	r1, #0
 800d08a:	463a      	mov	r2, r7
 800d08c:	4643      	mov	r3, r8
 800d08e:	2000      	movs	r0, #0
 800d090:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800d094:	f7fe fbf0 	bl	800b878 <__aeabi_ddiv>
 800d098:	4683      	mov	fp, r0
 800d09a:	468a      	mov	sl, r1
 800d09c:	f7ff baef 	b.w	800c67e <__ieee754_pow+0x46>
 800d0a0:	a32d      	add	r3, pc, #180	; (adr r3, 800d158 <__ieee754_pow+0xb20>)
 800d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0aa:	f7fe fabb 	bl	800b624 <__aeabi_dmul>
 800d0ae:	a32a      	add	r3, pc, #168	; (adr r3, 800d158 <__ieee754_pow+0xb20>)
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f7fe fab6 	bl	800b624 <__aeabi_dmul>
 800d0b8:	4683      	mov	fp, r0
 800d0ba:	468a      	mov	sl, r1
 800d0bc:	f7ff badf 	b.w	800c67e <__ieee754_pow+0x46>
 800d0c0:	2e01      	cmp	r6, #1
 800d0c2:	f47f aadc 	bne.w	800c67e <__ieee754_pow+0x46>
 800d0c6:	e74d      	b.n	800cf64 <__ieee754_pow+0x92c>
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	f47f ab1a 	bne.w	800c702 <__ieee754_pow+0xca>
 800d0ce:	f5c6 6382 	rsb	r3, r6, #1040	; 0x410
 800d0d2:	1cde      	adds	r6, r3, #3
 800d0d4:	fa45 f306 	asr.w	r3, r5, r6
 800d0d8:	fa03 f006 	lsl.w	r0, r3, r6
 800d0dc:	42a8      	cmp	r0, r5
 800d0de:	d020      	beq.n	800d122 <__ieee754_pow+0xaea>
 800d0e0:	460e      	mov	r6, r1
 800d0e2:	f7ff bae6 	b.w	800c6b2 <__ieee754_pow+0x7a>
 800d0e6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d0ea:	2701      	movs	r7, #1
 800d0ec:	f7ff bbe9 	b.w	800c8c2 <__ieee754_pow+0x28a>
 800d0f0:	a31b      	add	r3, pc, #108	; (adr r3, 800d160 <__ieee754_pow+0xb28>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0fa:	f7fe fa93 	bl	800b624 <__aeabi_dmul>
 800d0fe:	a318      	add	r3, pc, #96	; (adr r3, 800d160 <__ieee754_pow+0xb28>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7fe fa8e 	bl	800b624 <__aeabi_dmul>
 800d108:	4683      	mov	fp, r0
 800d10a:	468a      	mov	sl, r1
 800d10c:	f7ff bab7 	b.w	800c67e <__ieee754_pow+0x46>
 800d110:	4270      	negs	r0, r6
 800d112:	9002      	str	r0, [sp, #8]
 800d114:	e70c      	b.n	800cf30 <__ieee754_pow+0x8f8>
 800d116:	9a02      	ldr	r2, [sp, #8]
 800d118:	f000 fa06 	bl	800d528 <scalbn>
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	e6af      	b.n	800ce82 <__ieee754_pow+0x84a>
 800d122:	f003 0101 	and.w	r1, r3, #1
 800d126:	f1c1 0602 	rsb	r6, r1, #2
 800d12a:	f7ff bac2 	b.w	800c6b2 <__ieee754_pow+0x7a>
 800d12e:	bf00      	nop
 800d130:	00000000 	.word	0x00000000
 800d134:	3ff00000 	.word	0x3ff00000
 800d138:	60000000 	.word	0x60000000
 800d13c:	3ff71547 	.word	0x3ff71547
 800d140:	f85ddf44 	.word	0xf85ddf44
 800d144:	3e54ae0b 	.word	0x3e54ae0b
 800d148:	55555555 	.word	0x55555555
 800d14c:	3fd55555 	.word	0x3fd55555
 800d150:	652b82fe 	.word	0x652b82fe
 800d154:	3ff71547 	.word	0x3ff71547
 800d158:	8800759c 	.word	0x8800759c
 800d15c:	7e37e43c 	.word	0x7e37e43c
 800d160:	c2f8f359 	.word	0xc2f8f359
 800d164:	01a56e1f 	.word	0x01a56e1f

0800d168 <__ieee754_sqrt>:
 800d168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	2700      	movs	r7, #0
 800d16e:	46b9      	mov	r9, r7
 800d170:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 800d174:	f6c7 79f0 	movt	r9, #32752	; 0x7ff0
 800d178:	400f      	ands	r7, r1
 800d17a:	454f      	cmp	r7, r9
 800d17c:	4604      	mov	r4, r0
 800d17e:	460d      	mov	r5, r1
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	460e      	mov	r6, r1
 800d186:	4680      	mov	r8, r0
 800d188:	f000 80d4 	beq.w	800d334 <__ieee754_sqrt+0x1cc>
 800d18c:	2900      	cmp	r1, #0
 800d18e:	f340 80ae 	ble.w	800d2ee <__ieee754_sqrt+0x186>
 800d192:	150c      	asrs	r4, r1, #20
 800d194:	f000 80b8 	beq.w	800d308 <__ieee754_sqrt+0x1a0>
 800d198:	f026 457f 	bic.w	r5, r6, #4278190080	; 0xff000000
 800d19c:	f2a4 37ff 	subw	r7, r4, #1023	; 0x3ff
 800d1a0:	f425 0670 	bic.w	r6, r5, #15728640	; 0xf00000
 800d1a4:	07fa      	lsls	r2, r7, #31
 800d1a6:	f446 1180 	orr.w	r1, r6, #1048576	; 0x100000
 800d1aa:	f100 8093 	bmi.w	800d2d4 <__ieee754_sqrt+0x16c>
 800d1ae:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800d1b2:	f04f 0c00 	mov.w	ip, #0
 800d1b6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d1ba:	107f      	asrs	r7, r7, #1
 800d1bc:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800d1c0:	2516      	movs	r5, #22
 800d1c2:	4662      	mov	r2, ip
 800d1c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d1c8:	1816      	adds	r6, r2, r0
 800d1ca:	0844      	lsrs	r4, r0, #1
 800d1cc:	429e      	cmp	r6, r3
 800d1ce:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800d1d2:	f105 35ff 	add.w	r5, r5, #4294967295
 800d1d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d1da:	dc02      	bgt.n	800d1e2 <__ieee754_sqrt+0x7a>
 800d1dc:	1832      	adds	r2, r6, r0
 800d1de:	1b9b      	subs	r3, r3, r6
 800d1e0:	4484      	add	ip, r0
 800d1e2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 800d1e6:	1910      	adds	r0, r2, r4
 800d1e8:	4298      	cmp	r0, r3
 800d1ea:	dc02      	bgt.n	800d1f2 <__ieee754_sqrt+0x8a>
 800d1ec:	1a1b      	subs	r3, r3, r0
 800d1ee:	1902      	adds	r2, r0, r4
 800d1f0:	44a4      	add	ip, r4
 800d1f2:	0fce      	lsrs	r6, r1, #31
 800d1f4:	0860      	lsrs	r0, r4, #1
 800d1f6:	0049      	lsls	r1, r1, #1
 800d1f8:	3d01      	subs	r5, #1
 800d1fa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d1fe:	d1e3      	bne.n	800d1c8 <__ieee754_sqrt+0x60>
 800d200:	f04f 0820 	mov.w	r8, #32
 800d204:	462c      	mov	r4, r5
 800d206:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d20a:	e015      	b.n	800d238 <__ieee754_sqrt+0xd0>
 800d20c:	f000 808e 	beq.w	800d32c <__ieee754_sqrt+0x1c4>
 800d210:	0fce      	lsrs	r6, r1, #31
 800d212:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d216:	0840      	lsrs	r0, r0, #1
 800d218:	0049      	lsls	r1, r1, #1
 800d21a:	4293      	cmp	r3, r2
 800d21c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d220:	eb04 0600 	add.w	r6, r4, r0
 800d224:	dc1e      	bgt.n	800d264 <__ieee754_sqrt+0xfc>
 800d226:	d01b      	beq.n	800d260 <__ieee754_sqrt+0xf8>
 800d228:	0fce      	lsrs	r6, r1, #31
 800d22a:	0840      	lsrs	r0, r0, #1
 800d22c:	0049      	lsls	r1, r1, #1
 800d22e:	f1b8 0801 	subs.w	r8, r8, #1
 800d232:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d236:	d02d      	beq.n	800d294 <__ieee754_sqrt+0x12c>
 800d238:	4293      	cmp	r3, r2
 800d23a:	eb04 0600 	add.w	r6, r4, r0
 800d23e:	dde5      	ble.n	800d20c <__ieee754_sqrt+0xa4>
 800d240:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800d244:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800d248:	eb06 0400 	add.w	r4, r6, r0
 800d24c:	d03d      	beq.n	800d2ca <__ieee754_sqrt+0x162>
 800d24e:	4691      	mov	r9, r2
 800d250:	1a9b      	subs	r3, r3, r2
 800d252:	428e      	cmp	r6, r1
 800d254:	bf88      	it	hi
 800d256:	3b01      	subhi	r3, #1
 800d258:	1b89      	subs	r1, r1, r6
 800d25a:	182d      	adds	r5, r5, r0
 800d25c:	464a      	mov	r2, r9
 800d25e:	e7d7      	b.n	800d210 <__ieee754_sqrt+0xa8>
 800d260:	428e      	cmp	r6, r1
 800d262:	d8e1      	bhi.n	800d228 <__ieee754_sqrt+0xc0>
 800d264:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 800d268:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800d26c:	eb06 0400 	add.w	r4, r6, r0
 800d270:	d026      	beq.n	800d2c0 <__ieee754_sqrt+0x158>
 800d272:	4691      	mov	r9, r2
 800d274:	428e      	cmp	r6, r1
 800d276:	ebc2 0303 	rsb	r3, r2, r3
 800d27a:	d900      	bls.n	800d27e <__ieee754_sqrt+0x116>
 800d27c:	3b01      	subs	r3, #1
 800d27e:	1b89      	subs	r1, r1, r6
 800d280:	0fce      	lsrs	r6, r1, #31
 800d282:	182d      	adds	r5, r5, r0
 800d284:	0049      	lsls	r1, r1, #1
 800d286:	0840      	lsrs	r0, r0, #1
 800d288:	f1b8 0801 	subs.w	r8, r8, #1
 800d28c:	464a      	mov	r2, r9
 800d28e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d292:	d1d1      	bne.n	800d238 <__ieee754_sqrt+0xd0>
 800d294:	4319      	orrs	r1, r3
 800d296:	d124      	bne.n	800d2e2 <__ieee754_sqrt+0x17a>
 800d298:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800d29c:	ea4f 056c 	mov.w	r5, ip, asr #1
 800d2a0:	f105 547f 	add.w	r4, r5, #1069547520	; 0x3fc00000
 800d2a4:	f01c 0f01 	tst.w	ip, #1
 800d2a8:	f504 1300 	add.w	r3, r4, #2097152	; 0x200000
 800d2ac:	bf18      	it	ne
 800d2ae:	f048 4800 	orrne.w	r8, r8, #2147483648	; 0x80000000
 800d2b2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d2b6:	4644      	mov	r4, r8
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c0:	2c00      	cmp	r4, #0
 800d2c2:	dbd6      	blt.n	800d272 <__ieee754_sqrt+0x10a>
 800d2c4:	f102 0901 	add.w	r9, r2, #1
 800d2c8:	e7d4      	b.n	800d274 <__ieee754_sqrt+0x10c>
 800d2ca:	2c00      	cmp	r4, #0
 800d2cc:	dbbf      	blt.n	800d24e <__ieee754_sqrt+0xe6>
 800d2ce:	f102 0901 	add.w	r9, r2, #1
 800d2d2:	e7bd      	b.n	800d250 <__ieee754_sqrt+0xe8>
 800d2d4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 800d2d8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d2dc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d2e0:	e765      	b.n	800d1ae <__ieee754_sqrt+0x46>
 800d2e2:	1c6b      	adds	r3, r5, #1
 800d2e4:	d031      	beq.n	800d34a <__ieee754_sqrt+0x1e2>
 800d2e6:	f005 0201 	and.w	r2, r5, #1
 800d2ea:	1955      	adds	r5, r2, r5
 800d2ec:	e7d4      	b.n	800d298 <__ieee754_sqrt+0x130>
 800d2ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d2f2:	4306      	orrs	r6, r0
 800d2f4:	d0e0      	beq.n	800d2b8 <__ieee754_sqrt+0x150>
 800d2f6:	bb79      	cbnz	r1, 800d358 <__ieee754_sqrt+0x1f0>
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	ea4f 26d8 	mov.w	r6, r8, lsr #11
 800d2fe:	3c15      	subs	r4, #21
 800d300:	ea4f 5848 	mov.w	r8, r8, lsl #21
 800d304:	2e00      	cmp	r6, #0
 800d306:	d0f8      	beq.n	800d2fa <__ieee754_sqrt+0x192>
 800d308:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 800d30c:	d120      	bne.n	800d350 <__ieee754_sqrt+0x1e8>
 800d30e:	0076      	lsls	r6, r6, #1
 800d310:	3301      	adds	r3, #1
 800d312:	02f1      	lsls	r1, r6, #11
 800d314:	d5fb      	bpl.n	800d30e <__ieee754_sqrt+0x1a6>
 800d316:	f1c3 0101 	rsb	r1, r3, #1
 800d31a:	f1c3 0220 	rsb	r2, r3, #32
 800d31e:	fa28 f002 	lsr.w	r0, r8, r2
 800d322:	1864      	adds	r4, r4, r1
 800d324:	4306      	orrs	r6, r0
 800d326:	fa08 f803 	lsl.w	r8, r8, r3
 800d32a:	e735      	b.n	800d198 <__ieee754_sqrt+0x30>
 800d32c:	428e      	cmp	r6, r1
 800d32e:	d987      	bls.n	800d240 <__ieee754_sqrt+0xd8>
 800d330:	461a      	mov	r2, r3
 800d332:	e76d      	b.n	800d210 <__ieee754_sqrt+0xa8>
 800d334:	f7fe f976 	bl	800b624 <__aeabi_dmul>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4620      	mov	r0, r4
 800d33e:	4629      	mov	r1, r5
 800d340:	f7fd ffbe 	bl	800b2c0 <__adddf3>
 800d344:	4604      	mov	r4, r0
 800d346:	460d      	mov	r5, r1
 800d348:	e7b6      	b.n	800d2b8 <__ieee754_sqrt+0x150>
 800d34a:	f10c 0c01 	add.w	ip, ip, #1
 800d34e:	e7a5      	b.n	800d29c <__ieee754_sqrt+0x134>
 800d350:	2220      	movs	r2, #32
 800d352:	2101      	movs	r1, #1
 800d354:	2300      	movs	r3, #0
 800d356:	e7e2      	b.n	800d31e <__ieee754_sqrt+0x1b6>
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	f7fd ffae 	bl	800b2bc <__aeabi_dsub>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	f7fe fa88 	bl	800b878 <__aeabi_ddiv>
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	e7a4      	b.n	800d2b8 <__ieee754_sqrt+0x150>
 800d36e:	bf00      	nop

0800d370 <fabs>:
 800d370:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop

0800d378 <finite>:
 800d378:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800d37c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800d380:	0fc0      	lsrs	r0, r0, #31
 800d382:	4770      	bx	lr

0800d384 <__fpclassifyd>:
 800d384:	460b      	mov	r3, r1
 800d386:	b161      	cbz	r1, 800d3a2 <__fpclassifyd+0x1e>
 800d388:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800d38c:	d009      	beq.n	800d3a2 <__fpclassifyd+0x1e>
 800d38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d392:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 800d396:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800d39a:	4291      	cmp	r1, r2
 800d39c:	d805      	bhi.n	800d3aa <__fpclassifyd+0x26>
 800d39e:	2004      	movs	r0, #4
 800d3a0:	4770      	bx	lr
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1f3      	bne.n	800d38e <__fpclassifyd+0xa>
 800d3a6:	2002      	movs	r0, #2
 800d3a8:	4770      	bx	lr
 800d3aa:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 800d3ae:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	d9f3      	bls.n	800d39e <__fpclassifyd+0x1a>
 800d3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ba:	f2c0 020f 	movt	r2, #15
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d801      	bhi.n	800d3c6 <__fpclassifyd+0x42>
 800d3c2:	2003      	movs	r0, #3
 800d3c4:	4770      	bx	lr
 800d3c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3ca:	4291      	cmp	r1, r2
 800d3cc:	d9f9      	bls.n	800d3c2 <__fpclassifyd+0x3e>
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d004      	beq.n	800d3e2 <__fpclassifyd+0x5e>
 800d3d8:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800d3dc:	d001      	beq.n	800d3e2 <__fpclassifyd+0x5e>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	4770      	bx	lr
 800d3e2:	f1d0 0001 	rsbs	r0, r0, #1
 800d3e6:	bf38      	it	cc
 800d3e8:	2000      	movcc	r0, #0
 800d3ea:	4770      	bx	lr

0800d3ec <matherr>:
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	4770      	bx	lr

0800d3f0 <nan>:
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop

0800d3fc <rint>:
 800d3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d400:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800d404:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 800d408:	2e13      	cmp	r6, #19
 800d40a:	b083      	sub	sp, #12
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	460f      	mov	r7, r1
 800d416:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800d41a:	dc38      	bgt.n	800d48e <rint+0x92>
 800d41c:	2e00      	cmp	r6, #0
 800d41e:	db53      	blt.n	800d4c8 <rint+0xcc>
 800d420:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d424:	f2c0 010f 	movt	r1, #15
 800d428:	fa41 f106 	asr.w	r1, r1, r6
 800d42c:	ea01 0003 	and.w	r0, r1, r3
 800d430:	4310      	orrs	r0, r2
 800d432:	d027      	beq.n	800d484 <rint+0x88>
 800d434:	084f      	lsrs	r7, r1, #1
 800d436:	ea07 0203 	and.w	r2, r7, r3
 800d43a:	4314      	orrs	r4, r2
 800d43c:	d00b      	beq.n	800d456 <rint+0x5a>
 800d43e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d442:	ea25 0507 	bic.w	r5, r5, r7
 800d446:	fa43 f306 	asr.w	r3, r3, r6
 800d44a:	2e13      	cmp	r6, #19
 800d44c:	bf0c      	ite	eq
 800d44e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d452:	2400      	movne	r4, #0
 800d454:	431d      	orrs	r5, r3
 800d456:	4e32      	ldr	r6, [pc, #200]	; (800d520 <rint+0x124>)
 800d458:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 800d45c:	e9d8 8900 	ldrd	r8, r9, [r8]
 800d460:	4622      	mov	r2, r4
 800d462:	462b      	mov	r3, r5
 800d464:	4640      	mov	r0, r8
 800d466:	4649      	mov	r1, r9
 800d468:	f7fd ff2a 	bl	800b2c0 <__adddf3>
 800d46c:	e9cd 0100 	strd	r0, r1, [sp]
 800d470:	4642      	mov	r2, r8
 800d472:	464b      	mov	r3, r9
 800d474:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d478:	f7fd ff20 	bl	800b2bc <__aeabi_dsub>
 800d47c:	462f      	mov	r7, r5
 800d47e:	4626      	mov	r6, r4
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4610      	mov	r0, r2
 800d486:	4619      	mov	r1, r3
 800d488:	b003      	add	sp, #12
 800d48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d48e:	2e33      	cmp	r6, #51	; 0x33
 800d490:	dd07      	ble.n	800d4a2 <rint+0xa6>
 800d492:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d496:	d1f5      	bne.n	800d484 <rint+0x88>
 800d498:	f7fd ff12 	bl	800b2c0 <__adddf3>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	e7f0      	b.n	800d484 <rint+0x88>
 800d4a2:	f2ac 4013 	subw	r0, ip, #1043	; 0x413
 800d4a6:	f04f 31ff 	mov.w	r1, #4294967295
 800d4aa:	fa21 f100 	lsr.w	r1, r1, r0
 800d4ae:	4211      	tst	r1, r2
 800d4b0:	d0e8      	beq.n	800d484 <rint+0x88>
 800d4b2:	084a      	lsrs	r2, r1, #1
 800d4b4:	4222      	tst	r2, r4
 800d4b6:	d0ce      	beq.n	800d456 <rint+0x5a>
 800d4b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4bc:	ea24 0402 	bic.w	r4, r4, r2
 800d4c0:	fa43 f600 	asr.w	r6, r3, r0
 800d4c4:	4334      	orrs	r4, r6
 800d4c6:	e7c6      	b.n	800d456 <rint+0x5a>
 800d4c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d4cc:	4301      	orrs	r1, r0
 800d4ce:	d0d9      	beq.n	800d484 <rint+0x88>
 800d4d0:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
 800d4d4:	f425 0070 	bic.w	r0, r5, #15728640	; 0xf00000
 800d4d8:	ea40 0402 	orr.w	r4, r0, r2
 800d4dc:	4263      	negs	r3, r4
 800d4de:	4810      	ldr	r0, [pc, #64]	; (800d520 <rint+0x124>)
 800d4e0:	ea43 0104 	orr.w	r1, r3, r4
 800d4e4:	0b0d      	lsrs	r5, r1, #12
 800d4e6:	eb00 04c8 	add.w	r4, r0, r8, lsl #3
 800d4ea:	f405 2300 	and.w	r3, r5, #524288	; 0x80000
 800d4ee:	e9d4 4500 	ldrd	r4, r5, [r4]
 800d4f2:	0c7f      	lsrs	r7, r7, #17
 800d4f4:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	f7fd fee0 	bl	800b2c0 <__adddf3>
 800d500:	e9cd 0100 	strd	r0, r1, [sp]
 800d504:	4622      	mov	r2, r4
 800d506:	462b      	mov	r3, r5
 800d508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d50c:	f7fd fed6 	bl	800b2bc <__aeabi_dsub>
 800d510:	460d      	mov	r5, r1
 800d512:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d516:	4604      	mov	r4, r0
 800d518:	4602      	mov	r2, r0
 800d51a:	ea41 73c8 	orr.w	r3, r1, r8, lsl #31
 800d51e:	e7b1      	b.n	800d484 <rint+0x88>
 800d520:	08013530 	.word	0x08013530
 800d524:	00000000 	.word	0x00000000

0800d528 <scalbn>:
 800d528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	4690      	mov	r8, r2
 800d53a:	bb7b      	cbnz	r3, 800d59c <scalbn+0x74>
 800d53c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d540:	ea53 0c00 	orrs.w	ip, r3, r0
 800d544:	d026      	beq.n	800d594 <scalbn+0x6c>
 800d546:	2300      	movs	r3, #0
 800d548:	2200      	movs	r2, #0
 800d54a:	f2c4 3350 	movt	r3, #17232	; 0x4350
 800d54e:	f7fe f869 	bl	800b624 <__aeabi_dmul>
 800d552:	f643 42b0 	movw	r2, #15536	; 0x3cb0
 800d556:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 800d55a:	4590      	cmp	r8, r2
 800d55c:	4604      	mov	r4, r0
 800d55e:	460d      	mov	r5, r1
 800d560:	4606      	mov	r6, r0
 800d562:	460f      	mov	r7, r1
 800d564:	db3b      	blt.n	800d5de <scalbn+0xb6>
 800d566:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d56a:	3b36      	subs	r3, #54	; 0x36
 800d56c:	eb03 0008 	add.w	r0, r3, r8
 800d570:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d574:	4290      	cmp	r0, r2
 800d576:	dd1b      	ble.n	800d5b0 <scalbn+0x88>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	a128      	add	r1, pc, #160	; (adr r1, 800d620 <scalbn+0xf8>)
 800d57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d582:	f000 f855 	bl	800d630 <copysign>
 800d586:	a326      	add	r3, pc, #152	; (adr r3, 800d620 <scalbn+0xf8>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7fe f84a 	bl	800b624 <__aeabi_dmul>
 800d590:	4604      	mov	r4, r0
 800d592:	460d      	mov	r5, r1
 800d594:	4620      	mov	r0, r4
 800d596:	4629      	mov	r1, r5
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d024      	beq.n	800d5ee <scalbn+0xc6>
 800d5a4:	eb03 0008 	add.w	r0, r3, r8
 800d5a8:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d5ac:	4290      	cmp	r0, r2
 800d5ae:	dce3      	bgt.n	800d578 <scalbn+0x50>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	dd06      	ble.n	800d5c2 <scalbn+0x9a>
 800d5b4:	f021 42ff 	bic.w	r2, r1, #2139095040	; 0x7f800000
 800d5b8:	f422 05e0 	bic.w	r5, r2, #7340032	; 0x700000
 800d5bc:	ea45 5500 	orr.w	r5, r5, r0, lsl #20
 800d5c0:	e7e8      	b.n	800d594 <scalbn+0x6c>
 800d5c2:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800d5c6:	da19      	bge.n	800d5fc <scalbn+0xd4>
 800d5c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d5cc:	4580      	cmp	r8, r0
 800d5ce:	4622      	mov	r2, r4
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	dcd3      	bgt.n	800d57c <scalbn+0x54>
 800d5d4:	a114      	add	r1, pc, #80	; (adr r1, 800d628 <scalbn+0x100>)
 800d5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5da:	f000 f829 	bl	800d630 <copysign>
 800d5de:	a312      	add	r3, pc, #72	; (adr r3, 800d628 <scalbn+0x100>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7fe f81e 	bl	800b624 <__aeabi_dmul>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	e7d2      	b.n	800d594 <scalbn+0x6c>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	f7fd fe65 	bl	800b2c0 <__adddf3>
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	460d      	mov	r5, r1
 800d5fa:	e7cb      	b.n	800d594 <scalbn+0x6c>
 800d5fc:	f021 45ff 	bic.w	r5, r1, #2139095040	; 0x7f800000
 800d600:	f425 01e0 	bic.w	r1, r5, #7340032	; 0x700000
 800d604:	3036      	adds	r0, #54	; 0x36
 800d606:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d60a:	4619      	mov	r1, r3
 800d60c:	2300      	movs	r3, #0
 800d60e:	4620      	mov	r0, r4
 800d610:	2200      	movs	r2, #0
 800d612:	f6c3 4390 	movt	r3, #15504	; 0x3c90
 800d616:	f7fe f805 	bl	800b624 <__aeabi_dmul>
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	e7b9      	b.n	800d594 <scalbn+0x6c>
 800d620:	8800759c 	.word	0x8800759c
 800d624:	7e37e43c 	.word	0x7e37e43c
 800d628:	c2f8f359 	.word	0xc2f8f359
 800d62c:	01a56e1f 	.word	0x01a56e1f

0800d630 <copysign>:
 800d630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d634:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d638:	b430      	push	{r4, r5}
 800d63a:	460d      	mov	r5, r1
 800d63c:	4604      	mov	r4, r0
 800d63e:	ea43 0102 	orr.w	r1, r3, r2
 800d642:	bc30      	pop	{r4, r5}
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop

0800d648 <__register_exitproc>:
 800d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64c:	4c27      	ldr	r4, [pc, #156]	; (800d6ec <__register_exitproc+0xa4>)
 800d64e:	6825      	ldr	r5, [r4, #0]
 800d650:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800d654:	b084      	sub	sp, #16
 800d656:	4607      	mov	r7, r0
 800d658:	2c00      	cmp	r4, #0
 800d65a:	d041      	beq.n	800d6e0 <__register_exitproc+0x98>
 800d65c:	6866      	ldr	r6, [r4, #4]
 800d65e:	2e1f      	cmp	r6, #31
 800d660:	dd1c      	ble.n	800d69c <__register_exitproc+0x54>
 800d662:	4823      	ldr	r0, [pc, #140]	; (800d6f0 <__register_exitproc+0xa8>)
 800d664:	b910      	cbnz	r0, 800d66c <__register_exitproc+0x24>
 800d666:	f04f 30ff 	mov.w	r0, #4294967295
 800d66a:	e01f      	b.n	800d6ac <__register_exitproc+0x64>
 800d66c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d670:	9103      	str	r1, [sp, #12]
 800d672:	9202      	str	r2, [sp, #8]
 800d674:	9301      	str	r3, [sp, #4]
 800d676:	f3af 8000 	nop.w
 800d67a:	9903      	ldr	r1, [sp, #12]
 800d67c:	9a02      	ldr	r2, [sp, #8]
 800d67e:	9b01      	ldr	r3, [sp, #4]
 800d680:	4604      	mov	r4, r0
 800d682:	2800      	cmp	r0, #0
 800d684:	d0ef      	beq.n	800d666 <__register_exitproc+0x1e>
 800d686:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800d68a:	2000      	movs	r0, #0
 800d68c:	6060      	str	r0, [r4, #4]
 800d68e:	6026      	str	r6, [r4, #0]
 800d690:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800d694:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800d698:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800d69c:	6865      	ldr	r5, [r4, #4]
 800d69e:	b947      	cbnz	r7, 800d6b2 <__register_exitproc+0x6a>
 800d6a0:	1ca8      	adds	r0, r5, #2
 800d6a2:	3501      	adds	r5, #1
 800d6a4:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800d6a8:	6065      	str	r5, [r4, #4]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	b004      	add	sp, #16
 800d6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b2:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 800d6bc:	fa00 f005 	lsl.w	r0, r0, r5
 800d6c0:	4306      	orrs	r6, r0
 800d6c2:	2f02      	cmp	r7, #2
 800d6c4:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800d6c8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800d6cc:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 800d6d0:	d1e6      	bne.n	800d6a0 <__register_exitproc+0x58>
 800d6d2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800d6d6:	ea43 0200 	orr.w	r2, r3, r0
 800d6da:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800d6de:	e7df      	b.n	800d6a0 <__register_exitproc+0x58>
 800d6e0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800d6e4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800d6e8:	e7b8      	b.n	800d65c <__register_exitproc+0x14>
 800d6ea:	bf00      	nop
 800d6ec:	08013544 	.word	0x08013544
 800d6f0:	00000000 	.word	0x00000000

0800d6f4 <__errno>:
 800d6f4:	f240 4390 	movw	r3, #1168	; 0x490
 800d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6fc:	6818      	ldr	r0, [r3, #0]
 800d6fe:	4770      	bx	lr

0800d700 <__libc_fini_array>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	4b11      	ldr	r3, [pc, #68]	; (800d748 <__libc_fini_array+0x48>)
 800d704:	4c11      	ldr	r4, [pc, #68]	; (800d74c <__libc_fini_array+0x4c>)
 800d706:	1b18      	subs	r0, r3, r4
 800d708:	1081      	asrs	r1, r0, #2
 800d70a:	d018      	beq.n	800d73e <__libc_fini_array+0x3e>
 800d70c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d710:	1e4e      	subs	r6, r1, #1
 800d712:	4635      	mov	r5, r6
 800d714:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 800d718:	f006 0601 	and.w	r6, r6, #1
 800d71c:	4790      	blx	r2
 800d71e:	b175      	cbz	r5, 800d73e <__libc_fini_array+0x3e>
 800d720:	b126      	cbz	r6, 800d72c <__libc_fini_array+0x2c>
 800d722:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d726:	4798      	blx	r3
 800d728:	3d01      	subs	r5, #1
 800d72a:	d008      	beq.n	800d73e <__libc_fini_array+0x3e>
 800d72c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800d730:	4780      	blx	r0
 800d732:	3d01      	subs	r5, #1
 800d734:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800d738:	4788      	blx	r1
 800d73a:	3d01      	subs	r5, #1
 800d73c:	d1f6      	bne.n	800d72c <__libc_fini_array+0x2c>
 800d73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d742:	f005 bfc7 	b.w	80136d4 <_fini>
 800d746:	bf00      	nop
 800d748:	080136f4 	.word	0x080136f4
 800d74c:	080136f0 	.word	0x080136f0

0800d750 <memset>:
 800d750:	b4f0      	push	{r4, r5, r6, r7}
 800d752:	0784      	lsls	r4, r0, #30
 800d754:	4603      	mov	r3, r0
 800d756:	f000 808e 	beq.w	800d876 <memset+0x126>
 800d75a:	1e54      	subs	r4, r2, #1
 800d75c:	2a00      	cmp	r2, #0
 800d75e:	f000 8088 	beq.w	800d872 <memset+0x122>
 800d762:	07e5      	lsls	r5, r4, #31
 800d764:	b2ce      	uxtb	r6, r1
 800d766:	d411      	bmi.n	800d78c <memset+0x3c>
 800d768:	461a      	mov	r2, r3
 800d76a:	1e67      	subs	r7, r4, #1
 800d76c:	f802 6b01 	strb.w	r6, [r2], #1
 800d770:	4613      	mov	r3, r2
 800d772:	4615      	mov	r5, r2
 800d774:	0792      	lsls	r2, r2, #30
 800d776:	d00f      	beq.n	800d798 <memset+0x48>
 800d778:	2c00      	cmp	r4, #0
 800d77a:	d07a      	beq.n	800d872 <memset+0x122>
 800d77c:	f803 6b01 	strb.w	r6, [r3], #1
 800d780:	079a      	lsls	r2, r3, #30
 800d782:	463c      	mov	r4, r7
 800d784:	461d      	mov	r5, r3
 800d786:	d007      	beq.n	800d798 <memset+0x48>
 800d788:	3c01      	subs	r4, #1
 800d78a:	e7ed      	b.n	800d768 <memset+0x18>
 800d78c:	4603      	mov	r3, r0
 800d78e:	f803 6b01 	strb.w	r6, [r3], #1
 800d792:	079a      	lsls	r2, r3, #30
 800d794:	461d      	mov	r5, r3
 800d796:	d1f7      	bne.n	800d788 <memset+0x38>
 800d798:	2c03      	cmp	r4, #3
 800d79a:	d952      	bls.n	800d842 <memset+0xf2>
 800d79c:	b2ce      	uxtb	r6, r1
 800d79e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800d7a2:	2c0f      	cmp	r4, #15
 800d7a4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800d7a8:	d92d      	bls.n	800d806 <memset+0xb6>
 800d7aa:	f1a4 0210 	sub.w	r2, r4, #16
 800d7ae:	4617      	mov	r7, r2
 800d7b0:	2f0f      	cmp	r7, #15
 800d7b2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	606b      	str	r3, [r5, #4]
 800d7ba:	60ab      	str	r3, [r5, #8]
 800d7bc:	60eb      	str	r3, [r5, #12]
 800d7be:	f105 0210 	add.w	r2, r5, #16
 800d7c2:	d916      	bls.n	800d7f2 <memset+0xa2>
 800d7c4:	b13e      	cbz	r6, 800d7d6 <memset+0x86>
 800d7c6:	3f10      	subs	r7, #16
 800d7c8:	6013      	str	r3, [r2, #0]
 800d7ca:	6053      	str	r3, [r2, #4]
 800d7cc:	6093      	str	r3, [r2, #8]
 800d7ce:	60d3      	str	r3, [r2, #12]
 800d7d0:	3210      	adds	r2, #16
 800d7d2:	2f0f      	cmp	r7, #15
 800d7d4:	d90d      	bls.n	800d7f2 <memset+0xa2>
 800d7d6:	3f20      	subs	r7, #32
 800d7d8:	f102 0610 	add.w	r6, r2, #16
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	6053      	str	r3, [r2, #4]
 800d7e0:	6093      	str	r3, [r2, #8]
 800d7e2:	60d3      	str	r3, [r2, #12]
 800d7e4:	6113      	str	r3, [r2, #16]
 800d7e6:	6153      	str	r3, [r2, #20]
 800d7e8:	6193      	str	r3, [r2, #24]
 800d7ea:	61d3      	str	r3, [r2, #28]
 800d7ec:	3220      	adds	r2, #32
 800d7ee:	2f0f      	cmp	r7, #15
 800d7f0:	d8f1      	bhi.n	800d7d6 <memset+0x86>
 800d7f2:	f1a4 0210 	sub.w	r2, r4, #16
 800d7f6:	f022 020f 	bic.w	r2, r2, #15
 800d7fa:	f004 040f 	and.w	r4, r4, #15
 800d7fe:	3210      	adds	r2, #16
 800d800:	2c03      	cmp	r4, #3
 800d802:	4415      	add	r5, r2
 800d804:	d91d      	bls.n	800d842 <memset+0xf2>
 800d806:	1f27      	subs	r7, r4, #4
 800d808:	463e      	mov	r6, r7
 800d80a:	462a      	mov	r2, r5
 800d80c:	2e03      	cmp	r6, #3
 800d80e:	f842 3b04 	str.w	r3, [r2], #4
 800d812:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800d816:	d90d      	bls.n	800d834 <memset+0xe4>
 800d818:	b127      	cbz	r7, 800d824 <memset+0xd4>
 800d81a:	3e04      	subs	r6, #4
 800d81c:	2e03      	cmp	r6, #3
 800d81e:	f842 3b04 	str.w	r3, [r2], #4
 800d822:	d907      	bls.n	800d834 <memset+0xe4>
 800d824:	4617      	mov	r7, r2
 800d826:	3e08      	subs	r6, #8
 800d828:	f847 3b04 	str.w	r3, [r7], #4
 800d82c:	6053      	str	r3, [r2, #4]
 800d82e:	1d3a      	adds	r2, r7, #4
 800d830:	2e03      	cmp	r6, #3
 800d832:	d8f7      	bhi.n	800d824 <memset+0xd4>
 800d834:	1f23      	subs	r3, r4, #4
 800d836:	f023 0203 	bic.w	r2, r3, #3
 800d83a:	1d13      	adds	r3, r2, #4
 800d83c:	f004 0403 	and.w	r4, r4, #3
 800d840:	18ed      	adds	r5, r5, r3
 800d842:	b1b4      	cbz	r4, 800d872 <memset+0x122>
 800d844:	462b      	mov	r3, r5
 800d846:	b2c9      	uxtb	r1, r1
 800d848:	f803 1b01 	strb.w	r1, [r3], #1
 800d84c:	192c      	adds	r4, r5, r4
 800d84e:	43ed      	mvns	r5, r5
 800d850:	1962      	adds	r2, r4, r5
 800d852:	42a3      	cmp	r3, r4
 800d854:	f002 0501 	and.w	r5, r2, #1
 800d858:	d00b      	beq.n	800d872 <memset+0x122>
 800d85a:	b11d      	cbz	r5, 800d864 <memset+0x114>
 800d85c:	f803 1b01 	strb.w	r1, [r3], #1
 800d860:	42a3      	cmp	r3, r4
 800d862:	d006      	beq.n	800d872 <memset+0x122>
 800d864:	461a      	mov	r2, r3
 800d866:	f802 1b01 	strb.w	r1, [r2], #1
 800d86a:	7059      	strb	r1, [r3, #1]
 800d86c:	1c53      	adds	r3, r2, #1
 800d86e:	42a3      	cmp	r3, r4
 800d870:	d1f8      	bne.n	800d864 <memset+0x114>
 800d872:	bcf0      	pop	{r4, r5, r6, r7}
 800d874:	4770      	bx	lr
 800d876:	4605      	mov	r5, r0
 800d878:	4614      	mov	r4, r2
 800d87a:	e78d      	b.n	800d798 <memset+0x48>

0800d87c <printf>:
 800d87c:	b40f      	push	{r0, r1, r2, r3}
 800d87e:	b500      	push	{lr}
 800d880:	f240 4290 	movw	r2, #1168	; 0x490
 800d884:	b083      	sub	sp, #12
 800d886:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d88a:	ab04      	add	r3, sp, #16
 800d88c:	6810      	ldr	r0, [r2, #0]
 800d88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d892:	6881      	ldr	r1, [r0, #8]
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f000 f805 	bl	800d8a4 <_vfprintf_r>
 800d89a:	b003      	add	sp, #12
 800d89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8a0:	b004      	add	sp, #16
 800d8a2:	4770      	bx	lr

0800d8a4 <_vfprintf_r>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	4615      	mov	r5, r2
 800d8b0:	9310      	str	r3, [sp, #64]	; 0x40
 800d8b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d8b4:	f003 fcde 	bl	8011274 <_localeconv_r>
 800d8b8:	6800      	ldr	r0, [r0, #0]
 800d8ba:	9015      	str	r0, [sp, #84]	; 0x54
 800d8bc:	f004 feb0 	bl	8012620 <strlen>
 800d8c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d8c2:	9017      	str	r0, [sp, #92]	; 0x5c
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800d8cc:	b11c      	cbz	r4, 800d8d6 <_vfprintf_r+0x32>
 800d8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 8152 	beq.w	800db7a <_vfprintf_r+0x2d6>
 800d8d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d8da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d8de:	b210      	sxth	r0, r2
 800d8e0:	b948      	cbnz	r0, 800d8f6 <_vfprintf_r+0x52>
 800d8e2:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800d8e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d8ea:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
 800d8ee:	f8a9 300c 	strh.w	r3, [r9, #12]
 800d8f2:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 800d8f6:	f003 0008 	and.w	r0, r3, #8
 800d8fa:	b201      	sxth	r1, r0
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	f000 80d1 	beq.w	800daa4 <_vfprintf_r+0x200>
 800d902:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d906:	2a00      	cmp	r2, #0
 800d908:	f000 80cc 	beq.w	800daa4 <_vfprintf_r+0x200>
 800d90c:	f003 041a 	and.w	r4, r3, #26
 800d910:	2c0a      	cmp	r4, #10
 800d912:	f000 80d4 	beq.w	800dabe <_vfprintf_r+0x21a>
 800d916:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
 800d91a:	f10d 00cf 	add.w	r0, sp, #207	; 0xcf
 800d91e:	aa34      	add	r2, sp, #208	; 0xd0
 800d920:	2100      	movs	r1, #0
 800d922:	9008      	str	r0, [sp, #32]
 800d924:	9207      	str	r2, [sp, #28]
 800d926:	9111      	str	r1, [sp, #68]	; 0x44
 800d928:	f8ca 1008 	str.w	r1, [sl, #8]
 800d92c:	f8ca 1004 	str.w	r1, [sl, #4]
 800d930:	911a      	str	r1, [sp, #104]	; 0x68
 800d932:	911b      	str	r1, [sp, #108]	; 0x6c
 800d934:	910e      	str	r1, [sp, #56]	; 0x38
 800d936:	9c08      	ldr	r4, [sp, #32]
 800d938:	9907      	ldr	r1, [sp, #28]
 800d93a:	950a      	str	r5, [sp, #40]	; 0x28
 800d93c:	ab4e      	add	r3, sp, #312	; 0x138
 800d93e:	1b08      	subs	r0, r1, r4
 800d940:	f8ca 3000 	str.w	r3, [sl]
 800d944:	469b      	mov	fp, r3
 800d946:	901d      	str	r0, [sp, #116]	; 0x74
 800d948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d94a:	782a      	ldrb	r2, [r5, #0]
 800d94c:	2a00      	cmp	r2, #0
 800d94e:	f000 8118 	beq.w	800db82 <_vfprintf_r+0x2de>
 800d952:	2a25      	cmp	r2, #37	; 0x25
 800d954:	f000 8115 	beq.w	800db82 <_vfprintf_r+0x2de>
 800d958:	3501      	adds	r5, #1
 800d95a:	e002      	b.n	800d962 <_vfprintf_r+0xbe>
 800d95c:	2925      	cmp	r1, #37	; 0x25
 800d95e:	f000 8093 	beq.w	800da88 <_vfprintf_r+0x1e4>
 800d962:	462c      	mov	r4, r5
 800d964:	3501      	adds	r5, #1
 800d966:	7821      	ldrb	r1, [r4, #0]
 800d968:	2900      	cmp	r1, #0
 800d96a:	d1f7      	bne.n	800d95c <_vfprintf_r+0xb8>
 800d96c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d96e:	1a25      	subs	r5, r4, r0
 800d970:	b1b5      	cbz	r5, 800d9a0 <_vfprintf_r+0xfc>
 800d972:	f8da 1008 	ldr.w	r1, [sl, #8]
 800d976:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d97a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d97c:	f8cb 5004 	str.w	r5, [fp, #4]
 800d980:	194a      	adds	r2, r1, r5
 800d982:	1c59      	adds	r1, r3, #1
 800d984:	2907      	cmp	r1, #7
 800d986:	f8cb 0000 	str.w	r0, [fp]
 800d98a:	f8ca 2008 	str.w	r2, [sl, #8]
 800d98e:	f8ca 1004 	str.w	r1, [sl, #4]
 800d992:	f300 80e8 	bgt.w	800db66 <_vfprintf_r+0x2c2>
 800d996:	f10b 0b08 	add.w	fp, fp, #8
 800d99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d99c:	1958      	adds	r0, r3, r5
 800d99e:	900e      	str	r0, [sp, #56]	; 0x38
 800d9a0:	7822      	ldrb	r2, [r4, #0]
 800d9a2:	2a00      	cmp	r2, #0
 800d9a4:	f000 80c8 	beq.w	800db38 <_vfprintf_r+0x294>
 800d9a8:	2600      	movs	r6, #0
 800d9aa:	1c65      	adds	r5, r4, #1
 800d9ac:	f04f 3cff 	mov.w	ip, #4294967295
 800d9b0:	f894 8001 	ldrb.w	r8, [r4, #1]
 800d9b4:	960d      	str	r6, [sp, #52]	; 0x34
 800d9b6:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800d9ba:	9609      	str	r6, [sp, #36]	; 0x24
 800d9bc:	950a      	str	r5, [sp, #40]	; 0x28
 800d9be:	2120      	movs	r1, #32
 800d9c0:	222b      	movs	r2, #43	; 0x2b
 800d9c2:	462b      	mov	r3, r5
 800d9c4:	4666      	mov	r6, ip
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	f1a8 0020 	sub.w	r0, r8, #32
 800d9cc:	2858      	cmp	r0, #88	; 0x58
 800d9ce:	f200 833b 	bhi.w	800e048 <_vfprintf_r+0x7a4>
 800d9d2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d9d6:	034b      	.short	0x034b
 800d9d8:	03390339 	.word	0x03390339
 800d9dc:	03390355 	.word	0x03390355
 800d9e0:	03390339 	.word	0x03390339
 800d9e4:	03390339 	.word	0x03390339
 800d9e8:	038e0339 	.word	0x038e0339
 800d9ec:	033900d8 	.word	0x033900d8
 800d9f0:	00dd0060 	.word	0x00dd0060
 800d9f4:	00f80339 	.word	0x00f80339
 800d9f8:	00ff00ff 	.word	0x00ff00ff
 800d9fc:	00ff00ff 	.word	0x00ff00ff
 800da00:	00ff00ff 	.word	0x00ff00ff
 800da04:	00ff00ff 	.word	0x00ff00ff
 800da08:	033900ff 	.word	0x033900ff
 800da0c:	03390339 	.word	0x03390339
 800da10:	03390339 	.word	0x03390339
 800da14:	03390339 	.word	0x03390339
 800da18:	03390339 	.word	0x03390339
 800da1c:	01100339 	.word	0x01100339
 800da20:	033901da 	.word	0x033901da
 800da24:	033901da 	.word	0x033901da
 800da28:	03390339 	.word	0x03390339
 800da2c:	021b0339 	.word	0x021b0339
 800da30:	03390339 	.word	0x03390339
 800da34:	03390222 	.word	0x03390222
 800da38:	03390339 	.word	0x03390339
 800da3c:	03390339 	.word	0x03390339
 800da40:	0339023d 	.word	0x0339023d
 800da44:	02540339 	.word	0x02540339
 800da48:	03390339 	.word	0x03390339
 800da4c:	03390339 	.word	0x03390339
 800da50:	03390339 	.word	0x03390339
 800da54:	03390339 	.word	0x03390339
 800da58:	03390339 	.word	0x03390339
 800da5c:	03070323 	.word	0x03070323
 800da60:	01da01da 	.word	0x01da01da
 800da64:	031c01da 	.word	0x031c01da
 800da68:	03390307 	.word	0x03390307
 800da6c:	02b00339 	.word	0x02b00339
 800da70:	02bc0339 	.word	0x02bc0339
 800da74:	02ed02ca 	.word	0x02ed02ca
 800da78:	0339027a 	.word	0x0339027a
 800da7c:	03390281 	.word	0x03390281
 800da80:	0339035c 	.word	0x0339035c
 800da84:	03730339 	.word	0x03730339
 800da88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da8a:	1aa5      	subs	r5, r4, r2
 800da8c:	e770      	b.n	800d970 <_vfprintf_r+0xcc>
 800da8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800da90:	9010      	str	r0, [sp, #64]	; 0x40
 800da92:	426d      	negs	r5, r5
 800da94:	950d      	str	r5, [sp, #52]	; 0x34
 800da96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800da98:	f044 0004 	orr.w	r0, r4, #4
 800da9c:	9009      	str	r0, [sp, #36]	; 0x24
 800da9e:	f893 8000 	ldrb.w	r8, [r3]
 800daa2:	e790      	b.n	800d9c6 <_vfprintf_r+0x122>
 800daa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800daa6:	4649      	mov	r1, r9
 800daa8:	f001 fe40 	bl	800f72c <__swsetup_r>
 800daac:	2800      	cmp	r0, #0
 800daae:	d151      	bne.n	800db54 <_vfprintf_r+0x2b0>
 800dab0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dab4:	f003 041a 	and.w	r4, r3, #26
 800dab8:	2c0a      	cmp	r4, #10
 800daba:	f47f af2c 	bne.w	800d916 <_vfprintf_r+0x72>
 800dabe:	f8b9 600e 	ldrh.w	r6, [r9, #14]
 800dac2:	0432      	lsls	r2, r6, #16
 800dac4:	f53f af27 	bmi.w	800d916 <_vfprintf_r+0x72>
 800dac8:	f8d9 4064 	ldr.w	r4, [r9, #100]	; 0x64
 800dacc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dace:	944d      	str	r4, [sp, #308]	; 0x134
 800dad0:	462a      	mov	r2, r5
 800dad2:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800dad6:	f8ad 60de 	strh.w	r6, [sp, #222]	; 0xde
 800dada:	ac4e      	add	r4, sp, #312	; 0x138
 800dadc:	953b      	str	r5, [sp, #236]	; 0xec
 800dade:	f8d9 5024 	ldr.w	r5, [r9, #36]	; 0x24
 800dae2:	9434      	str	r4, [sp, #208]	; 0xd0
 800dae4:	f023 0e02 	bic.w	lr, r3, #2
 800dae8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800daec:	9438      	str	r4, [sp, #224]	; 0xe0
 800daee:	a934      	add	r1, sp, #208	; 0xd0
 800daf0:	2400      	movs	r4, #0
 800daf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daf4:	f8ad e0dc 	strh.w	lr, [sp, #220]	; 0xdc
 800daf8:	953d      	str	r5, [sp, #244]	; 0xf4
 800dafa:	9736      	str	r7, [sp, #216]	; 0xd8
 800dafc:	9739      	str	r7, [sp, #228]	; 0xe4
 800dafe:	943a      	str	r4, [sp, #232]	; 0xe8
 800db00:	f7ff fed0 	bl	800d8a4 <_vfprintf_r>
 800db04:	2800      	cmp	r0, #0
 800db06:	900e      	str	r0, [sp, #56]	; 0x38
 800db08:	db09      	blt.n	800db1e <_vfprintf_r+0x27a>
 800db0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db0c:	a934      	add	r1, sp, #208	; 0xd0
 800db0e:	f003 f927 	bl	8010d60 <_fflush_r>
 800db12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800db14:	2800      	cmp	r0, #0
 800db16:	bf18      	it	ne
 800db18:	f04f 34ff 	movne.w	r4, #4294967295
 800db1c:	940e      	str	r4, [sp, #56]	; 0x38
 800db1e:	f8bd 20dc 	ldrh.w	r2, [sp, #220]	; 0xdc
 800db22:	f002 0140 	and.w	r1, r2, #64	; 0x40
 800db26:	b20b      	sxth	r3, r1
 800db28:	b1bb      	cbz	r3, 800db5a <_vfprintf_r+0x2b6>
 800db2a:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 800db2e:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 800db32:	f8a9 200c 	strh.w	r2, [r9, #12]
 800db36:	e010      	b.n	800db5a <_vfprintf_r+0x2b6>
 800db38:	f8da 2008 	ldr.w	r2, [sl, #8]
 800db3c:	b122      	cbz	r2, 800db48 <_vfprintf_r+0x2a4>
 800db3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db40:	4649      	mov	r1, r9
 800db42:	4652      	mov	r2, sl
 800db44:	f004 fd9c 	bl	8012680 <__sprint_r>
 800db48:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800db4c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 800db50:	b218      	sxth	r0, r3
 800db52:	b110      	cbz	r0, 800db5a <_vfprintf_r+0x2b6>
 800db54:	f04f 35ff 	mov.w	r5, #4294967295
 800db58:	950e      	str	r5, [sp, #56]	; 0x38
 800db5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800db5c:	b04f      	add	sp, #316	; 0x13c
 800db5e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800db62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db68:	4649      	mov	r1, r9
 800db6a:	4652      	mov	r2, sl
 800db6c:	f004 fd88 	bl	8012680 <__sprint_r>
 800db70:	2800      	cmp	r0, #0
 800db72:	d1e9      	bne.n	800db48 <_vfprintf_r+0x2a4>
 800db74:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800db78:	e70f      	b.n	800d99a <_vfprintf_r+0xf6>
 800db7a:	4620      	mov	r0, r4
 800db7c:	f003 f9d2 	bl	8010f24 <__sinit>
 800db80:	e6a9      	b.n	800d8d6 <_vfprintf_r+0x32>
 800db82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db84:	e70c      	b.n	800d9a0 <_vfprintf_r+0xfc>
 800db86:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800db8a:	f893 8000 	ldrb.w	r8, [r3]
 800db8e:	e71a      	b.n	800d9c6 <_vfprintf_r+0x122>
 800db90:	461c      	mov	r4, r3
 800db92:	f814 8b01 	ldrb.w	r8, [r4], #1
 800db96:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800db9a:	f001 85a8 	beq.w	800f6ee <_vfprintf_r+0x1e4a>
 800db9e:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800dba2:	2600      	movs	r6, #0
 800dba4:	2809      	cmp	r0, #9
 800dba6:	f201 84dc 	bhi.w	800f562 <_vfprintf_r+0x1cbe>
 800dbaa:	f814 8b01 	ldrb.w	r8, [r4], #1
 800dbae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800dbb2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800dbb6:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 800dbba:	2809      	cmp	r0, #9
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	d9f4      	bls.n	800dbaa <_vfprintf_r+0x306>
 800dbc0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800dbc4:	e700      	b.n	800d9c8 <_vfprintf_r+0x124>
 800dbc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dbc8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 800dbcc:	9009      	str	r0, [sp, #36]	; 0x24
 800dbce:	f893 8000 	ldrb.w	r8, [r3]
 800dbd2:	e6f8      	b.n	800d9c6 <_vfprintf_r+0x122>
 800dbd4:	461c      	mov	r4, r3
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800dbdc:	f814 8b01 	ldrb.w	r8, [r4], #1
 800dbe0:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 800dbe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dbe8:	2d09      	cmp	r5, #9
 800dbea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800dbee:	4623      	mov	r3, r4
 800dbf0:	d9f2      	bls.n	800dbd8 <_vfprintf_r+0x334>
 800dbf2:	900d      	str	r0, [sp, #52]	; 0x34
 800dbf4:	e6e8      	b.n	800d9c8 <_vfprintf_r+0x124>
 800dbf6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfa:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dbfe:	f043 0710 	orr.w	r7, r3, #16
 800dc02:	9709      	str	r7, [sp, #36]	; 0x24
 800dc04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc06:	06ac      	lsls	r4, r5, #26
 800dc08:	46b6      	mov	lr, r6
 800dc0a:	f140 81f3 	bpl.w	800dff4 <_vfprintf_r+0x750>
 800dc0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dc10:	1dec      	adds	r4, r5, #7
 800dc12:	f024 0107 	bic.w	r1, r4, #7
 800dc16:	e9d1 2300 	ldrd	r2, r3, [r1]
 800dc1a:	3108      	adds	r1, #8
 800dc1c:	9110      	str	r1, [sp, #64]	; 0x40
 800dc1e:	4614      	mov	r4, r2
 800dc20:	461d      	mov	r5, r3
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	f173 0100 	sbcs.w	r1, r3, #0
 800dc28:	f2c1 814a 	blt.w	800eec0 <_vfprintf_r+0x161c>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	f1be 0f00 	cmp.w	lr, #0
 800dc32:	db03      	blt.n	800dc3c <_vfprintf_r+0x398>
 800dc34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc36:	f020 0780 	bic.w	r7, r0, #128	; 0x80
 800dc3a:	9709      	str	r7, [sp, #36]	; 0x24
 800dc3c:	ea54 0105 	orrs.w	r1, r4, r5
 800dc40:	f040 841c 	bne.w	800e47c <_vfprintf_r+0xbd8>
 800dc44:	f1be 0f00 	cmp.w	lr, #0
 800dc48:	f040 8418 	bne.w	800e47c <_vfprintf_r+0xbd8>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f040 862b 	bne.w	800e8a8 <_vfprintf_r+0x1004>
 800dc52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc54:	07e9      	lsls	r1, r5, #31
 800dc56:	f140 8627 	bpl.w	800e8a8 <_vfprintf_r+0x1004>
 800dc5a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dc5c:	2430      	movs	r4, #48	; 0x30
 800dc5e:	f88d 40cf 	strb.w	r4, [sp, #207]	; 0xcf
 800dc62:	910f      	str	r1, [sp, #60]	; 0x3c
 800dc64:	f10d 08cf 	add.w	r8, sp, #207	; 0xcf
 800dc68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800dc6a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800dc6e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800dc72:	4574      	cmp	r4, lr
 800dc74:	bfb8      	it	lt
 800dc76:	4674      	movlt	r4, lr
 800dc78:	2100      	movs	r1, #0
 800dc7a:	940c      	str	r4, [sp, #48]	; 0x30
 800dc7c:	9116      	str	r1, [sp, #88]	; 0x58
 800dc7e:	b113      	cbz	r3, 800dc86 <_vfprintf_r+0x3e2>
 800dc80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc82:	1c68      	adds	r0, r5, #1
 800dc84:	900c      	str	r0, [sp, #48]	; 0x30
 800dc86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc88:	f015 0102 	ands.w	r1, r5, #2
 800dc8c:	9113      	str	r1, [sp, #76]	; 0x4c
 800dc8e:	d002      	beq.n	800dc96 <_vfprintf_r+0x3f2>
 800dc90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dc92:	3402      	adds	r4, #2
 800dc94:	940c      	str	r4, [sp, #48]	; 0x30
 800dc96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc98:	f015 0784 	ands.w	r7, r5, #132	; 0x84
 800dc9c:	f040 823f 	bne.w	800e11e <_vfprintf_r+0x87a>
 800dca0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dca4:	1aac      	subs	r4, r5, r2
 800dca6:	2c00      	cmp	r4, #0
 800dca8:	f340 8239 	ble.w	800e11e <_vfprintf_r+0x87a>
 800dcac:	2c10      	cmp	r4, #16
 800dcae:	f341 8335 	ble.w	800f31c <_vfprintf_r+0x1a78>
 800dcb2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800dcb6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800dcba:	4db9      	ldr	r5, [pc, #740]	; (800dfa0 <_vfprintf_r+0x6fc>)
 800dcbc:	2610      	movs	r6, #16
 800dcbe:	1c42      	adds	r2, r0, #1
 800dcc0:	1999      	adds	r1, r3, r6
 800dcc2:	f1a4 0c11 	sub.w	ip, r4, #17
 800dcc6:	2a07      	cmp	r2, #7
 800dcc8:	e88b 0060 	stmia.w	fp, {r5, r6}
 800dccc:	f3cc 1300 	ubfx	r3, ip, #4, #1
 800dcd0:	f8ca 1008 	str.w	r1, [sl, #8]
 800dcd4:	f8ca 2004 	str.w	r2, [sl, #4]
 800dcd8:	f300 8625 	bgt.w	800e926 <_vfprintf_r+0x1082>
 800dcdc:	f10b 0b08 	add.w	fp, fp, #8
 800dce0:	3c10      	subs	r4, #16
 800dce2:	2c10      	cmp	r4, #16
 800dce4:	f340 837d 	ble.w	800e3e2 <_vfprintf_r+0xb3e>
 800dce8:	b1b3      	cbz	r3, 800dd18 <_vfprintf_r+0x474>
 800dcea:	f8da 1004 	ldr.w	r1, [sl, #4]
 800dcee:	f8da 0008 	ldr.w	r0, [sl, #8]
 800dcf2:	f8cb 5000 	str.w	r5, [fp]
 800dcf6:	1c4a      	adds	r2, r1, #1
 800dcf8:	3010      	adds	r0, #16
 800dcfa:	2a07      	cmp	r2, #7
 800dcfc:	f8cb 6004 	str.w	r6, [fp, #4]
 800dd00:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd04:	f8ca 2004 	str.w	r2, [sl, #4]
 800dd08:	f300 861b 	bgt.w	800e942 <_vfprintf_r+0x109e>
 800dd0c:	f10b 0b08 	add.w	fp, fp, #8
 800dd10:	3c10      	subs	r4, #16
 800dd12:	2c10      	cmp	r4, #16
 800dd14:	f340 8365 	ble.w	800e3e2 <_vfprintf_r+0xb3e>
 800dd18:	971c      	str	r7, [sp, #112]	; 0x70
 800dd1a:	462f      	mov	r7, r5
 800dd1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800dd1e:	e019      	b.n	800dd54 <_vfprintf_r+0x4b0>
 800dd20:	f10b 0b08 	add.w	fp, fp, #8
 800dd24:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dd28:	f8da 3008 	ldr.w	r3, [sl, #8]
 800dd2c:	f8cb 7000 	str.w	r7, [fp]
 800dd30:	1c50      	adds	r0, r2, #1
 800dd32:	3310      	adds	r3, #16
 800dd34:	3c10      	subs	r4, #16
 800dd36:	2807      	cmp	r0, #7
 800dd38:	f8cb 6004 	str.w	r6, [fp, #4]
 800dd3c:	f8ca 3008 	str.w	r3, [sl, #8]
 800dd40:	f8ca 0004 	str.w	r0, [sl, #4]
 800dd44:	f300 833d 	bgt.w	800e3c2 <_vfprintf_r+0xb1e>
 800dd48:	3c10      	subs	r4, #16
 800dd4a:	2c10      	cmp	r4, #16
 800dd4c:	f10b 0b08 	add.w	fp, fp, #8
 800dd50:	f340 8345 	ble.w	800e3de <_vfprintf_r+0xb3a>
 800dd54:	f8da 0004 	ldr.w	r0, [sl, #4]
 800dd58:	f8da 3008 	ldr.w	r3, [sl, #8]
 800dd5c:	f8cb 7000 	str.w	r7, [fp]
 800dd60:	1c41      	adds	r1, r0, #1
 800dd62:	3310      	adds	r3, #16
 800dd64:	2907      	cmp	r1, #7
 800dd66:	f8cb 6004 	str.w	r6, [fp, #4]
 800dd6a:	f8ca 3008 	str.w	r3, [sl, #8]
 800dd6e:	f8ca 1004 	str.w	r1, [sl, #4]
 800dd72:	ddd5      	ble.n	800dd20 <_vfprintf_r+0x47c>
 800dd74:	4628      	mov	r0, r5
 800dd76:	4649      	mov	r1, r9
 800dd78:	4652      	mov	r2, sl
 800dd7a:	f004 fc81 	bl	8012680 <__sprint_r>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f47f aee2 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800dd84:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800dd88:	e7cc      	b.n	800dd24 <_vfprintf_r+0x480>
 800dd8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dd8c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd8e:	46b6      	mov	lr, r6
 800dd90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dd92:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dd96:	1dc3      	adds	r3, r0, #7
 800dd98:	f023 0107 	bic.w	r1, r3, #7
 800dd9c:	0732      	lsls	r2, r6, #28
 800dd9e:	bf53      	iteet	pl
 800dda0:	f101 0608 	addpl.w	r6, r1, #8
 800dda4:	f101 0508 	addmi.w	r5, r1, #8
 800dda8:	9510      	strmi	r5, [sp, #64]	; 0x40
 800ddaa:	9610      	strpl	r6, [sp, #64]	; 0x40
 800ddac:	680e      	ldr	r6, [r1, #0]
 800ddae:	684c      	ldr	r4, [r1, #4]
 800ddb0:	f8cd e018 	str.w	lr, [sp, #24]
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff fae0 	bl	800d384 <__fpclassifyd>
 800ddc4:	2801      	cmp	r0, #1
 800ddc6:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ddca:	4630      	mov	r0, r6
 800ddcc:	4621      	mov	r1, r4
 800ddce:	f041 8083 	bne.w	800eed8 <_vfprintf_r+0x1634>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f7fd fe97 	bl	800bb08 <__aeabi_dcmplt>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	f041 8381 	bne.w	800f4e2 <_vfprintf_r+0x1c3e>
 800dde0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800dde4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800dde6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dde8:	4f6e      	ldr	r7, [pc, #440]	; (800dfa4 <_vfprintf_r+0x700>)
 800ddea:	4d6f      	ldr	r5, [pc, #444]	; (800dfa8 <_vfprintf_r+0x704>)
 800ddec:	2003      	movs	r0, #3
 800ddee:	2200      	movs	r2, #0
 800ddf0:	900c      	str	r0, [sp, #48]	; 0x30
 800ddf2:	9212      	str	r2, [sp, #72]	; 0x48
 800ddf4:	2c47      	cmp	r4, #71	; 0x47
 800ddf6:	bfcc      	ite	gt
 800ddf8:	46a8      	movgt	r8, r5
 800ddfa:	46b8      	movle	r8, r7
 800ddfc:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800de00:	2403      	movs	r4, #3
 800de02:	2200      	movs	r2, #0
 800de04:	9009      	str	r0, [sp, #36]	; 0x24
 800de06:	940f      	str	r4, [sp, #60]	; 0x3c
 800de08:	9216      	str	r2, [sp, #88]	; 0x58
 800de0a:	e738      	b.n	800dc7e <_vfprintf_r+0x3da>
 800de0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de0e:	f045 0508 	orr.w	r5, r5, #8
 800de12:	9509      	str	r5, [sp, #36]	; 0x24
 800de14:	f893 8000 	ldrb.w	r8, [r3]
 800de18:	e5d5      	b.n	800d9c6 <_vfprintf_r+0x122>
 800de1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de1c:	930a      	str	r3, [sp, #40]	; 0x28
 800de1e:	f044 0110 	orr.w	r1, r4, #16
 800de22:	9109      	str	r1, [sp, #36]	; 0x24
 800de24:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de2a:	f017 0320 	ands.w	r3, r7, #32
 800de2e:	46b6      	mov	lr, r6
 800de30:	f000 80a4 	beq.w	800df7c <_vfprintf_r+0x6d8>
 800de34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de36:	1dd9      	adds	r1, r3, #7
 800de38:	f021 0707 	bic.w	r7, r1, #7
 800de3c:	f107 0408 	add.w	r4, r7, #8
 800de40:	9410      	str	r4, [sp, #64]	; 0x40
 800de42:	e9d7 4500 	ldrd	r4, r5, [r7]
 800de46:	2300      	movs	r3, #0
 800de48:	2200      	movs	r2, #0
 800de4a:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800de4e:	e6ee      	b.n	800dc2e <_vfprintf_r+0x38a>
 800de50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de52:	930a      	str	r3, [sp, #40]	; 0x28
 800de54:	f044 0010 	orr.w	r0, r4, #16
 800de58:	9009      	str	r0, [sp, #36]	; 0x24
 800de5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de5c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de60:	06ad      	lsls	r5, r5, #26
 800de62:	46b6      	mov	lr, r6
 800de64:	f140 811b 	bpl.w	800e09e <_vfprintf_r+0x7fa>
 800de68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800de6a:	1dea      	adds	r2, r5, #7
 800de6c:	f022 0007 	bic.w	r0, r2, #7
 800de70:	f100 0308 	add.w	r3, r0, #8
 800de74:	9310      	str	r3, [sp, #64]	; 0x40
 800de76:	e9d0 4500 	ldrd	r4, r5, [r0]
 800de7a:	2301      	movs	r3, #1
 800de7c:	e7e4      	b.n	800de48 <_vfprintf_r+0x5a4>
 800de7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de80:	4c4a      	ldr	r4, [pc, #296]	; (800dfac <_vfprintf_r+0x708>)
 800de82:	930a      	str	r3, [sp, #40]	; 0x28
 800de84:	0681      	lsls	r1, r0, #26
 800de86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de8a:	46b6      	mov	lr, r6
 800de8c:	941a      	str	r4, [sp, #104]	; 0x68
 800de8e:	f140 811f 	bpl.w	800e0d0 <_vfprintf_r+0x82c>
 800de92:	9910      	ldr	r1, [sp, #64]	; 0x40
 800de94:	1dcb      	adds	r3, r1, #7
 800de96:	f023 0007 	bic.w	r0, r3, #7
 800de9a:	f100 0508 	add.w	r5, r0, #8
 800de9e:	9510      	str	r5, [sp, #64]	; 0x40
 800dea0:	e9d0 4500 	ldrd	r4, r5, [r0]
 800dea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dea6:	07cf      	lsls	r7, r1, #31
 800dea8:	f140 8121 	bpl.w	800e0ee <_vfprintf_r+0x84a>
 800deac:	ea54 0205 	orrs.w	r2, r4, r5
 800deb0:	f000 811d 	beq.w	800e0ee <_vfprintf_r+0x84a>
 800deb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800deb6:	f041 0302 	orr.w	r3, r1, #2
 800deba:	2730      	movs	r7, #48	; 0x30
 800debc:	9309      	str	r3, [sp, #36]	; 0x24
 800debe:	f88d 707c 	strb.w	r7, [sp, #124]	; 0x7c
 800dec2:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800dec6:	2302      	movs	r3, #2
 800dec8:	e7be      	b.n	800de48 <_vfprintf_r+0x5a4>
 800deca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800decc:	f040 0520 	orr.w	r5, r0, #32
 800ded0:	9509      	str	r5, [sp, #36]	; 0x24
 800ded2:	f893 8000 	ldrb.w	r8, [r3]
 800ded6:	e576      	b.n	800d9c6 <_vfprintf_r+0x122>
 800ded8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800deda:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dede:	2400      	movs	r4, #0
 800dee0:	f88d 407b 	strb.w	r4, [sp, #123]	; 0x7b
 800dee4:	f8d5 8000 	ldr.w	r8, [r5]
 800dee8:	930a      	str	r3, [sp, #40]	; 0x28
 800deea:	46b6      	mov	lr, r6
 800deec:	1d2f      	adds	r7, r5, #4
 800deee:	f1b8 0f00 	cmp.w	r8, #0
 800def2:	f001 828a 	beq.w	800f40a <_vfprintf_r+0x1b66>
 800def6:	2e00      	cmp	r6, #0
 800def8:	4640      	mov	r0, r8
 800defa:	f2c1 81f5 	blt.w	800f2e8 <_vfprintf_r+0x1a44>
 800defe:	4621      	mov	r1, r4
 800df00:	4632      	mov	r2, r6
 800df02:	9606      	str	r6, [sp, #24]
 800df04:	f003 fcde 	bl	80118c4 <memchr>
 800df08:	f8dd c018 	ldr.w	ip, [sp, #24]
 800df0c:	2800      	cmp	r0, #0
 800df0e:	f001 831c 	beq.w	800f54a <_vfprintf_r+0x1ca6>
 800df12:	ebc8 0300 	rsb	r3, r8, r0
 800df16:	4563      	cmp	r3, ip
 800df18:	930f      	str	r3, [sp, #60]	; 0x3c
 800df1a:	9412      	str	r4, [sp, #72]	; 0x48
 800df1c:	f341 8187 	ble.w	800f22e <_vfprintf_r+0x198a>
 800df20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800df22:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800df26:	9710      	str	r7, [sp, #64]	; 0x40
 800df28:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800df2c:	940c      	str	r4, [sp, #48]	; 0x30
 800df2e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800df32:	9516      	str	r5, [sp, #88]	; 0x58
 800df34:	e6a3      	b.n	800dc7e <_vfprintf_r+0x3da>
 800df36:	f893 8000 	ldrb.w	r8, [r3]
 800df3a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800df3e:	4618      	mov	r0, r3
 800df40:	f001 81ab 	beq.w	800f29a <_vfprintf_r+0x19f6>
 800df44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df46:	f044 0010 	orr.w	r0, r4, #16
 800df4a:	9009      	str	r0, [sp, #36]	; 0x24
 800df4c:	e53b      	b.n	800d9c6 <_vfprintf_r+0x122>
 800df4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df50:	930a      	str	r3, [sp, #40]	; 0x28
 800df52:	06a2      	lsls	r2, r4, #26
 800df54:	f141 8068 	bpl.w	800f028 <_vfprintf_r+0x1784>
 800df58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800df5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	17d1      	asrs	r1, r2, #31
 800df60:	1d25      	adds	r5, r4, #4
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	6059      	str	r1, [r3, #4]
 800df66:	9510      	str	r5, [sp, #64]	; 0x40
 800df68:	e4ee      	b.n	800d948 <_vfprintf_r+0xa4>
 800df6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df6c:	930a      	str	r3, [sp, #40]	; 0x28
 800df6e:	f017 0320 	ands.w	r3, r7, #32
 800df72:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800df76:	46b6      	mov	lr, r6
 800df78:	f47f af5c 	bne.w	800de34 <_vfprintf_r+0x590>
 800df7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df7e:	f015 0210 	ands.w	r2, r5, #16
 800df82:	f040 860f 	bne.w	800eba4 <_vfprintf_r+0x1300>
 800df86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df88:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800df8c:	f000 860a 	beq.w	800eba4 <_vfprintf_r+0x1300>
 800df90:	9910      	ldr	r1, [sp, #64]	; 0x40
 800df92:	1d0f      	adds	r7, r1, #4
 800df94:	880c      	ldrh	r4, [r1, #0]
 800df96:	9710      	str	r7, [sp, #64]	; 0x40
 800df98:	4613      	mov	r3, r2
 800df9a:	2500      	movs	r5, #0
 800df9c:	e754      	b.n	800de48 <_vfprintf_r+0x5a4>
 800df9e:	bf00      	nop
 800dfa0:	08013548 	.word	0x08013548
 800dfa4:	08013558 	.word	0x08013558
 800dfa8:	0801355c 	.word	0x0801355c
 800dfac:	08013568 	.word	0x08013568
 800dfb0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dfb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfb8:	930a      	str	r3, [sp, #40]	; 0x28
 800dfba:	4baa      	ldr	r3, [pc, #680]	; (800e264 <_vfprintf_r+0x9c0>)
 800dfbc:	f04f 0878 	mov.w	r8, #120	; 0x78
 800dfc0:	1d15      	adds	r5, r2, #4
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	f040 0702 	orr.w	r7, r0, #2
 800dfc8:	2130      	movs	r1, #48	; 0x30
 800dfca:	931a      	str	r3, [sp, #104]	; 0x68
 800dfcc:	9510      	str	r5, [sp, #64]	; 0x40
 800dfce:	46b6      	mov	lr, r6
 800dfd0:	2500      	movs	r5, #0
 800dfd2:	9709      	str	r7, [sp, #36]	; 0x24
 800dfd4:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
 800dfd8:	f88d 807d 	strb.w	r8, [sp, #125]	; 0x7d
 800dfdc:	2302      	movs	r3, #2
 800dfde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dfe2:	e731      	b.n	800de48 <_vfprintf_r+0x5a4>
 800dfe4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dfe6:	930a      	str	r3, [sp, #40]	; 0x28
 800dfe8:	06ac      	lsls	r4, r5, #26
 800dfea:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dfee:	46b6      	mov	lr, r6
 800dff0:	f53f ae0d 	bmi.w	800dc0e <_vfprintf_r+0x36a>
 800dff4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dff6:	06e0      	lsls	r0, r4, #27
 800dff8:	f141 802d 	bpl.w	800f056 <_vfprintf_r+0x17b2>
 800dffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e002:	17d5      	asrs	r5, r2, #31
 800e004:	1d07      	adds	r7, r0, #4
 800e006:	4614      	mov	r4, r2
 800e008:	462b      	mov	r3, r5
 800e00a:	9710      	str	r7, [sp, #64]	; 0x40
 800e00c:	e609      	b.n	800dc22 <_vfprintf_r+0x37e>
 800e00e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e010:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800e014:	9009      	str	r0, [sp, #36]	; 0x24
 800e016:	f893 8000 	ldrb.w	r8, [r3]
 800e01a:	e4d4      	b.n	800d9c6 <_vfprintf_r+0x122>
 800e01c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e01e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	930a      	str	r3, [sp, #40]	; 0x28
 800e024:	2401      	movs	r4, #1
 800e026:	1d0b      	adds	r3, r1, #4
 800e028:	2500      	movs	r5, #0
 800e02a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e02e:	940c      	str	r4, [sp, #48]	; 0x30
 800e030:	9310      	str	r3, [sp, #64]	; 0x40
 800e032:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e036:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800e03a:	940f      	str	r4, [sp, #60]	; 0x3c
 800e03c:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800e040:	2000      	movs	r0, #0
 800e042:	9012      	str	r0, [sp, #72]	; 0x48
 800e044:	9016      	str	r0, [sp, #88]	; 0x58
 800e046:	e61e      	b.n	800dc86 <_vfprintf_r+0x3e2>
 800e048:	4644      	mov	r4, r8
 800e04a:	930a      	str	r3, [sp, #40]	; 0x28
 800e04c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e050:	2c00      	cmp	r4, #0
 800e052:	f43f ad71 	beq.w	800db38 <_vfprintf_r+0x294>
 800e056:	2701      	movs	r7, #1
 800e058:	2300      	movs	r3, #0
 800e05a:	f88d 80a8 	strb.w	r8, [sp, #168]	; 0xa8
 800e05e:	970c      	str	r7, [sp, #48]	; 0x30
 800e060:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800e064:	970f      	str	r7, [sp, #60]	; 0x3c
 800e066:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800e06a:	e7e9      	b.n	800e040 <_vfprintf_r+0x79c>
 800e06c:	f89d 407b 	ldrb.w	r4, [sp, #123]	; 0x7b
 800e070:	2c00      	cmp	r4, #0
 800e072:	f040 87fe 	bne.w	800f072 <_vfprintf_r+0x17ce>
 800e076:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 800e07a:	f893 8000 	ldrb.w	r8, [r3]
 800e07e:	e4a2      	b.n	800d9c6 <_vfprintf_r+0x122>
 800e080:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e082:	f045 0501 	orr.w	r5, r5, #1
 800e086:	9509      	str	r5, [sp, #36]	; 0x24
 800e088:	f893 8000 	ldrb.w	r8, [r3]
 800e08c:	e49b      	b.n	800d9c6 <_vfprintf_r+0x122>
 800e08e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e090:	930a      	str	r3, [sp, #40]	; 0x28
 800e092:	06ad      	lsls	r5, r5, #26
 800e094:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e098:	46b6      	mov	lr, r6
 800e09a:	f53f aee5 	bmi.w	800de68 <_vfprintf_r+0x5c4>
 800e09e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0a0:	06cc      	lsls	r4, r1, #27
 800e0a2:	f100 84fa 	bmi.w	800ea9a <_vfprintf_r+0x11f6>
 800e0a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e0a8:	0678      	lsls	r0, r7, #25
 800e0aa:	f140 84f6 	bpl.w	800ea9a <_vfprintf_r+0x11f6>
 800e0ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0b0:	1d10      	adds	r0, r2, #4
 800e0b2:	8814      	ldrh	r4, [r2, #0]
 800e0b4:	9010      	str	r0, [sp, #64]	; 0x40
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	2500      	movs	r5, #0
 800e0ba:	e6c5      	b.n	800de48 <_vfprintf_r+0x5a4>
 800e0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0be:	4f69      	ldr	r7, [pc, #420]	; (800e264 <_vfprintf_r+0x9c0>)
 800e0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800e0c2:	0681      	lsls	r1, r0, #26
 800e0c4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e0c8:	46b6      	mov	lr, r6
 800e0ca:	971a      	str	r7, [sp, #104]	; 0x68
 800e0cc:	f53f aee1 	bmi.w	800de92 <_vfprintf_r+0x5ee>
 800e0d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e0d2:	06fa      	lsls	r2, r7, #27
 800e0d4:	f140 87b4 	bpl.w	800f040 <_vfprintf_r+0x179c>
 800e0d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e0de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0e0:	1d3a      	adds	r2, r7, #4
 800e0e2:	2500      	movs	r5, #0
 800e0e4:	07cf      	lsls	r7, r1, #31
 800e0e6:	461c      	mov	r4, r3
 800e0e8:	9210      	str	r2, [sp, #64]	; 0x40
 800e0ea:	f53f aedf 	bmi.w	800deac <_vfprintf_r+0x608>
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	e6aa      	b.n	800de48 <_vfprintf_r+0x5a4>
 800e0f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e0f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e0f6:	6824      	ldr	r4, [r4, #0]
 800e0f8:	3004      	adds	r0, #4
 800e0fa:	2c00      	cmp	r4, #0
 800e0fc:	940d      	str	r4, [sp, #52]	; 0x34
 800e0fe:	f6ff acc6 	blt.w	800da8e <_vfprintf_r+0x1ea>
 800e102:	f893 8000 	ldrb.w	r8, [r3]
 800e106:	9010      	str	r0, [sp, #64]	; 0x40
 800e108:	e45d      	b.n	800d9c6 <_vfprintf_r+0x122>
 800e10a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e10c:	4649      	mov	r1, r9
 800e10e:	4652      	mov	r2, sl
 800e110:	f004 fab6 	bl	8012680 <__sprint_r>
 800e114:	2800      	cmp	r0, #0
 800e116:	f47f ad17 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e11a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e11e:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 800e122:	b1a9      	cbz	r1, 800e150 <_vfprintf_r+0x8ac>
 800e124:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e128:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e12c:	3301      	adds	r3, #1
 800e12e:	3201      	adds	r2, #1
 800e130:	2101      	movs	r1, #1
 800e132:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800e136:	2b07      	cmp	r3, #7
 800e138:	f8cb 0000 	str.w	r0, [fp]
 800e13c:	f8cb 1004 	str.w	r1, [fp, #4]
 800e140:	f8ca 2008 	str.w	r2, [sl, #8]
 800e144:	f8ca 3004 	str.w	r3, [sl, #4]
 800e148:	f300 83a3 	bgt.w	800e892 <_vfprintf_r+0xfee>
 800e14c:	f10b 0b08 	add.w	fp, fp, #8
 800e150:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e152:	b1a0      	cbz	r0, 800e17e <_vfprintf_r+0x8da>
 800e154:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e158:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e15c:	1c90      	adds	r0, r2, #2
 800e15e:	1c5a      	adds	r2, r3, #1
 800e160:	a91f      	add	r1, sp, #124	; 0x7c
 800e162:	2302      	movs	r3, #2
 800e164:	2a07      	cmp	r2, #7
 800e166:	f8cb 1000 	str.w	r1, [fp]
 800e16a:	f8cb 3004 	str.w	r3, [fp, #4]
 800e16e:	f8ca 0008 	str.w	r0, [sl, #8]
 800e172:	f8ca 2004 	str.w	r2, [sl, #4]
 800e176:	f300 8381 	bgt.w	800e87c <_vfprintf_r+0xfd8>
 800e17a:	f10b 0b08 	add.w	fp, fp, #8
 800e17e:	2f80      	cmp	r7, #128	; 0x80
 800e180:	f000 8258 	beq.w	800e634 <_vfprintf_r+0xd90>
 800e184:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e186:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e188:	1b2c      	subs	r4, r5, r4
 800e18a:	2c00      	cmp	r4, #0
 800e18c:	f340 808e 	ble.w	800e2ac <_vfprintf_r+0xa08>
 800e190:	2c10      	cmp	r4, #16
 800e192:	f340 8787 	ble.w	800f0a4 <_vfprintf_r+0x1800>
 800e196:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e19a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e19e:	4d32      	ldr	r5, [pc, #200]	; (800e268 <_vfprintf_r+0x9c4>)
 800e1a0:	2610      	movs	r6, #16
 800e1a2:	1c43      	adds	r3, r0, #1
 800e1a4:	f1a4 0711 	sub.w	r7, r4, #17
 800e1a8:	198a      	adds	r2, r1, r6
 800e1aa:	2b07      	cmp	r3, #7
 800e1ac:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e1b0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e1b4:	f8ca 2008 	str.w	r2, [sl, #8]
 800e1b8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e1bc:	f300 833d 	bgt.w	800e83a <_vfprintf_r+0xf96>
 800e1c0:	f10b 0b08 	add.w	fp, fp, #8
 800e1c4:	3c10      	subs	r4, #16
 800e1c6:	2c10      	cmp	r4, #16
 800e1c8:	dd5d      	ble.n	800e286 <_vfprintf_r+0x9e2>
 800e1ca:	b1af      	cbz	r7, 800e1f8 <_vfprintf_r+0x954>
 800e1cc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e1d0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e1d4:	f8cb 5000 	str.w	r5, [fp]
 800e1d8:	1c42      	adds	r2, r0, #1
 800e1da:	3110      	adds	r1, #16
 800e1dc:	2a07      	cmp	r2, #7
 800e1de:	f8cb 6004 	str.w	r6, [fp, #4]
 800e1e2:	f8ca 1008 	str.w	r1, [sl, #8]
 800e1e6:	f8ca 2004 	str.w	r2, [sl, #4]
 800e1ea:	f300 8331 	bgt.w	800e850 <_vfprintf_r+0xfac>
 800e1ee:	f10b 0b08 	add.w	fp, fp, #8
 800e1f2:	3c10      	subs	r4, #16
 800e1f4:	2c10      	cmp	r4, #16
 800e1f6:	dd46      	ble.n	800e286 <_vfprintf_r+0x9e2>
 800e1f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e1fa:	e017      	b.n	800e22c <_vfprintf_r+0x988>
 800e1fc:	f10b 0b08 	add.w	fp, fp, #8
 800e200:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e204:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e208:	f8cb 5000 	str.w	r5, [fp]
 800e20c:	1c4b      	adds	r3, r1, #1
 800e20e:	3210      	adds	r2, #16
 800e210:	3c10      	subs	r4, #16
 800e212:	2b07      	cmp	r3, #7
 800e214:	f8cb 6004 	str.w	r6, [fp, #4]
 800e218:	f8ca 2008 	str.w	r2, [sl, #8]
 800e21c:	f8ca 3004 	str.w	r3, [sl, #4]
 800e220:	dc24      	bgt.n	800e26c <_vfprintf_r+0x9c8>
 800e222:	3c10      	subs	r4, #16
 800e224:	2c10      	cmp	r4, #16
 800e226:	f10b 0b08 	add.w	fp, fp, #8
 800e22a:	dd2c      	ble.n	800e286 <_vfprintf_r+0x9e2>
 800e22c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e230:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e234:	f8cb 5000 	str.w	r5, [fp]
 800e238:	1c58      	adds	r0, r3, #1
 800e23a:	3110      	adds	r1, #16
 800e23c:	2807      	cmp	r0, #7
 800e23e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e242:	f8ca 1008 	str.w	r1, [sl, #8]
 800e246:	f8ca 0004 	str.w	r0, [sl, #4]
 800e24a:	ddd7      	ble.n	800e1fc <_vfprintf_r+0x958>
 800e24c:	4638      	mov	r0, r7
 800e24e:	4649      	mov	r1, r9
 800e250:	4652      	mov	r2, sl
 800e252:	f004 fa15 	bl	8012680 <__sprint_r>
 800e256:	2800      	cmp	r0, #0
 800e258:	f47f ac76 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e25c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e260:	e7ce      	b.n	800e200 <_vfprintf_r+0x95c>
 800e262:	bf00      	nop
 800e264:	0801357c 	.word	0x0801357c
 800e268:	0801359c 	.word	0x0801359c
 800e26c:	4638      	mov	r0, r7
 800e26e:	4649      	mov	r1, r9
 800e270:	4652      	mov	r2, sl
 800e272:	f004 fa05 	bl	8012680 <__sprint_r>
 800e276:	2800      	cmp	r0, #0
 800e278:	f47f ac66 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e27c:	3c10      	subs	r4, #16
 800e27e:	2c10      	cmp	r4, #16
 800e280:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e284:	dcd2      	bgt.n	800e22c <_vfprintf_r+0x988>
 800e286:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e28a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e28e:	f8cb 5000 	str.w	r5, [fp]
 800e292:	1c4b      	adds	r3, r1, #1
 800e294:	1902      	adds	r2, r0, r4
 800e296:	2b07      	cmp	r3, #7
 800e298:	f8cb 4004 	str.w	r4, [fp, #4]
 800e29c:	f8ca 2008 	str.w	r2, [sl, #8]
 800e2a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e2a4:	f300 82df 	bgt.w	800e866 <_vfprintf_r+0xfc2>
 800e2a8:	f10b 0b08 	add.w	fp, fp, #8
 800e2ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e2ae:	05e2      	lsls	r2, r4, #23
 800e2b0:	f100 8109 	bmi.w	800e4c6 <_vfprintf_r+0xc22>
 800e2b4:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e2b8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e2bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e2be:	f8cb 8000 	str.w	r8, [fp]
 800e2c2:	1c43      	adds	r3, r0, #1
 800e2c4:	194a      	adds	r2, r1, r5
 800e2c6:	2b07      	cmp	r3, #7
 800e2c8:	f8cb 5004 	str.w	r5, [fp, #4]
 800e2cc:	f8ca 2008 	str.w	r2, [sl, #8]
 800e2d0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e2d4:	f300 829c 	bgt.w	800e810 <_vfprintf_r+0xf6c>
 800e2d8:	f10b 0b08 	add.w	fp, fp, #8
 800e2dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e2de:	076b      	lsls	r3, r5, #29
 800e2e0:	f140 80b8 	bpl.w	800e454 <_vfprintf_r+0xbb0>
 800e2e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e2e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2e8:	1a64      	subs	r4, r4, r1
 800e2ea:	2c00      	cmp	r4, #0
 800e2ec:	f340 80b2 	ble.w	800e454 <_vfprintf_r+0xbb0>
 800e2f0:	2c10      	cmp	r4, #16
 800e2f2:	f341 80b0 	ble.w	800f456 <_vfprintf_r+0x1bb2>
 800e2f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e2fa:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e2fe:	4dca      	ldr	r5, [pc, #808]	; (800e628 <_vfprintf_r+0xd84>)
 800e300:	2610      	movs	r6, #16
 800e302:	1c59      	adds	r1, r3, #1
 800e304:	f1a4 0711 	sub.w	r7, r4, #17
 800e308:	1982      	adds	r2, r0, r6
 800e30a:	2907      	cmp	r1, #7
 800e30c:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e310:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e314:	f8ca 2008 	str.w	r2, [sl, #8]
 800e318:	f8ca 1004 	str.w	r1, [sl, #4]
 800e31c:	f300 845e 	bgt.w	800ebdc <_vfprintf_r+0x1338>
 800e320:	f10b 0b08 	add.w	fp, fp, #8
 800e324:	3c10      	subs	r4, #16
 800e326:	2c10      	cmp	r4, #16
 800e328:	dd7c      	ble.n	800e424 <_vfprintf_r+0xb80>
 800e32a:	b1af      	cbz	r7, 800e358 <_vfprintf_r+0xab4>
 800e32c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e330:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e334:	f8cb 5000 	str.w	r5, [fp]
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	3010      	adds	r0, #16
 800e33c:	2a07      	cmp	r2, #7
 800e33e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e342:	f8ca 0008 	str.w	r0, [sl, #8]
 800e346:	f8ca 2004 	str.w	r2, [sl, #4]
 800e34a:	f300 8453 	bgt.w	800ebf4 <_vfprintf_r+0x1350>
 800e34e:	f10b 0b08 	add.w	fp, fp, #8
 800e352:	3c10      	subs	r4, #16
 800e354:	2c10      	cmp	r4, #16
 800e356:	dd65      	ble.n	800e424 <_vfprintf_r+0xb80>
 800e358:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e35a:	e017      	b.n	800e38c <_vfprintf_r+0xae8>
 800e35c:	f10b 0b08 	add.w	fp, fp, #8
 800e360:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e364:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e368:	f8cb 5000 	str.w	r5, [fp]
 800e36c:	1c48      	adds	r0, r1, #1
 800e36e:	3210      	adds	r2, #16
 800e370:	3c10      	subs	r4, #16
 800e372:	2807      	cmp	r0, #7
 800e374:	f8cb 6004 	str.w	r6, [fp, #4]
 800e378:	f8ca 2008 	str.w	r2, [sl, #8]
 800e37c:	f8ca 0004 	str.w	r0, [sl, #4]
 800e380:	dc43      	bgt.n	800e40a <_vfprintf_r+0xb66>
 800e382:	3c10      	subs	r4, #16
 800e384:	2c10      	cmp	r4, #16
 800e386:	f10b 0b08 	add.w	fp, fp, #8
 800e38a:	dd4b      	ble.n	800e424 <_vfprintf_r+0xb80>
 800e38c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e390:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e394:	f8cb 5000 	str.w	r5, [fp]
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	3110      	adds	r1, #16
 800e39c:	2b07      	cmp	r3, #7
 800e39e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e3a2:	f8ca 1008 	str.w	r1, [sl, #8]
 800e3a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3aa:	ddd7      	ble.n	800e35c <_vfprintf_r+0xab8>
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	4652      	mov	r2, sl
 800e3b2:	f004 f965 	bl	8012680 <__sprint_r>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f47f abc6 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e3bc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e3c0:	e7ce      	b.n	800e360 <_vfprintf_r+0xabc>
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	4652      	mov	r2, sl
 800e3c8:	f004 f95a 	bl	8012680 <__sprint_r>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	f47f abbb 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e3d2:	3c10      	subs	r4, #16
 800e3d4:	2c10      	cmp	r4, #16
 800e3d6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e3da:	f73f acbb 	bgt.w	800dd54 <_vfprintf_r+0x4b0>
 800e3de:	463d      	mov	r5, r7
 800e3e0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800e3e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e3e6:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e3ea:	f8cb 5000 	str.w	r5, [fp]
 800e3ee:	1c58      	adds	r0, r3, #1
 800e3f0:	190a      	adds	r2, r1, r4
 800e3f2:	2807      	cmp	r0, #7
 800e3f4:	f8cb 4004 	str.w	r4, [fp, #4]
 800e3f8:	f8ca 2008 	str.w	r2, [sl, #8]
 800e3fc:	f8ca 0004 	str.w	r0, [sl, #4]
 800e400:	f73f ae83 	bgt.w	800e10a <_vfprintf_r+0x866>
 800e404:	f10b 0b08 	add.w	fp, fp, #8
 800e408:	e689      	b.n	800e11e <_vfprintf_r+0x87a>
 800e40a:	4638      	mov	r0, r7
 800e40c:	4649      	mov	r1, r9
 800e40e:	4652      	mov	r2, sl
 800e410:	f004 f936 	bl	8012680 <__sprint_r>
 800e414:	2800      	cmp	r0, #0
 800e416:	f47f ab97 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e41a:	3c10      	subs	r4, #16
 800e41c:	2c10      	cmp	r4, #16
 800e41e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e422:	dcb3      	bgt.n	800e38c <_vfprintf_r+0xae8>
 800e424:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e428:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e42c:	f8cb 5000 	str.w	r5, [fp]
 800e430:	1c51      	adds	r1, r2, #1
 800e432:	18e3      	adds	r3, r4, r3
 800e434:	2907      	cmp	r1, #7
 800e436:	f8cb 4004 	str.w	r4, [fp, #4]
 800e43a:	f8ca 3008 	str.w	r3, [sl, #8]
 800e43e:	f8ca 1004 	str.w	r1, [sl, #4]
 800e442:	dd09      	ble.n	800e458 <_vfprintf_r+0xbb4>
 800e444:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e446:	4649      	mov	r1, r9
 800e448:	4652      	mov	r2, sl
 800e44a:	f004 f919 	bl	8012680 <__sprint_r>
 800e44e:	2800      	cmp	r0, #0
 800e450:	f47f ab7a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e454:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e458:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e45a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e45c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e45e:	42a8      	cmp	r0, r5
 800e460:	bfac      	ite	ge
 800e462:	1824      	addge	r4, r4, r0
 800e464:	1964      	addlt	r4, r4, r5
 800e466:	940e      	str	r4, [sp, #56]	; 0x38
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f040 81dc 	bne.w	800e826 <_vfprintf_r+0xf82>
 800e46e:	2500      	movs	r5, #0
 800e470:	f8ca 5004 	str.w	r5, [sl, #4]
 800e474:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e478:	f7ff ba66 	b.w	800d948 <_vfprintf_r+0xa4>
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	f000 8239 	beq.w	800e8f4 <_vfprintf_r+0x1050>
 800e482:	2b02      	cmp	r3, #2
 800e484:	f000 8216 	beq.w	800e8b4 <_vfprintf_r+0x1010>
 800e488:	f10d 06cf 	add.w	r6, sp, #207	; 0xcf
 800e48c:	2307      	movs	r3, #7
 800e48e:	08e2      	lsrs	r2, r4, #3
 800e490:	ea42 7745 	orr.w	r7, r2, r5, lsl #29
 800e494:	ea04 0003 	and.w	r0, r4, r3
 800e498:	08e9      	lsrs	r1, r5, #3
 800e49a:	3030      	adds	r0, #48	; 0x30
 800e49c:	463c      	mov	r4, r7
 800e49e:	460d      	mov	r5, r1
 800e4a0:	b2c2      	uxtb	r2, r0
 800e4a2:	ea54 0105 	orrs.w	r1, r4, r5
 800e4a6:	46b0      	mov	r8, r6
 800e4a8:	7032      	strb	r2, [r6, #0]
 800e4aa:	f106 36ff 	add.w	r6, r6, #4294967295
 800e4ae:	d1ee      	bne.n	800e48e <_vfprintf_r+0xbea>
 800e4b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e4b2:	07e4      	lsls	r4, r4, #31
 800e4b4:	4645      	mov	r5, r8
 800e4b6:	f100 83a9 	bmi.w	800ec0c <_vfprintf_r+0x1368>
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	ebc8 0003 	rsb	r0, r8, r3
 800e4c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e4c2:	f7ff bbd1 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800e4c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800e4c8:	2c65      	cmp	r4, #101	; 0x65
 800e4ca:	f340 8143 	ble.w	800e754 <_vfprintf_r+0xeb0>
 800e4ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f7fd fb0d 	bl	800baf4 <__aeabi_dcmpeq>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	f000 8240 	beq.w	800e960 <_vfprintf_r+0x10bc>
 800e4e0:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e4e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e4e8:	4950      	ldr	r1, [pc, #320]	; (800e62c <_vfprintf_r+0xd88>)
 800e4ea:	1c50      	adds	r0, r2, #1
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	2a07      	cmp	r2, #7
 800e4f2:	f8cb 1000 	str.w	r1, [fp]
 800e4f6:	f8cb 3004 	str.w	r3, [fp, #4]
 800e4fa:	f8ca 0008 	str.w	r0, [sl, #8]
 800e4fe:	f8ca 2004 	str.w	r2, [sl, #4]
 800e502:	f300 85d2 	bgt.w	800f0aa <_vfprintf_r+0x1806>
 800e506:	f10b 0b08 	add.w	fp, fp, #8
 800e50a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e50c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e50e:	42ac      	cmp	r4, r5
 800e510:	db03      	blt.n	800e51a <_vfprintf_r+0xc76>
 800e512:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e514:	07c3      	lsls	r3, r0, #31
 800e516:	f57f aee1 	bpl.w	800e2dc <_vfprintf_r+0xa38>
 800e51a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e51e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e522:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e524:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e526:	f8cb 4004 	str.w	r4, [fp, #4]
 800e52a:	1c4b      	adds	r3, r1, #1
 800e52c:	18a0      	adds	r0, r4, r2
 800e52e:	2b07      	cmp	r3, #7
 800e530:	f8cb 5000 	str.w	r5, [fp]
 800e534:	f8ca 0008 	str.w	r0, [sl, #8]
 800e538:	f8ca 3004 	str.w	r3, [sl, #4]
 800e53c:	f300 86b6 	bgt.w	800f2ac <_vfprintf_r+0x1a08>
 800e540:	f10b 0b08 	add.w	fp, fp, #8
 800e544:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e546:	3c01      	subs	r4, #1
 800e548:	2c00      	cmp	r4, #0
 800e54a:	f77f aec7 	ble.w	800e2dc <_vfprintf_r+0xa38>
 800e54e:	2c10      	cmp	r4, #16
 800e550:	f340 8331 	ble.w	800ebb6 <_vfprintf_r+0x1312>
 800e554:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e558:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e55c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800e55e:	4d34      	ldr	r5, [pc, #208]	; (800e630 <_vfprintf_r+0xd8c>)
 800e560:	2610      	movs	r6, #16
 800e562:	1c4b      	adds	r3, r1, #1
 800e564:	3f12      	subs	r7, #18
 800e566:	1990      	adds	r0, r2, r6
 800e568:	2b07      	cmp	r3, #7
 800e56a:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e56e:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e572:	f8ca 0008 	str.w	r0, [sl, #8]
 800e576:	f8ca 3004 	str.w	r3, [sl, #4]
 800e57a:	f300 86f6 	bgt.w	800f36a <_vfprintf_r+0x1ac6>
 800e57e:	f10b 0b08 	add.w	fp, fp, #8
 800e582:	3c10      	subs	r4, #16
 800e584:	2c10      	cmp	r4, #16
 800e586:	f340 8317 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800e58a:	b1b7      	cbz	r7, 800e5ba <_vfprintf_r+0xd16>
 800e58c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e590:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e594:	f8cb 5000 	str.w	r5, [fp]
 800e598:	1c48      	adds	r0, r1, #1
 800e59a:	3210      	adds	r2, #16
 800e59c:	2807      	cmp	r0, #7
 800e59e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e5a2:	f8ca 2008 	str.w	r2, [sl, #8]
 800e5a6:	f8ca 0004 	str.w	r0, [sl, #4]
 800e5aa:	f300 86f5 	bgt.w	800f398 <_vfprintf_r+0x1af4>
 800e5ae:	f10b 0b08 	add.w	fp, fp, #8
 800e5b2:	3c10      	subs	r4, #16
 800e5b4:	2c10      	cmp	r4, #16
 800e5b6:	f340 82ff 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800e5ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e5bc:	e019      	b.n	800e5f2 <_vfprintf_r+0xd4e>
 800e5be:	f10b 0b08 	add.w	fp, fp, #8
 800e5c2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e5c6:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e5ca:	f8cb 5000 	str.w	r5, [fp]
 800e5ce:	1c53      	adds	r3, r2, #1
 800e5d0:	3010      	adds	r0, #16
 800e5d2:	3c10      	subs	r4, #16
 800e5d4:	2b07      	cmp	r3, #7
 800e5d6:	f8cb 6004 	str.w	r6, [fp, #4]
 800e5da:	f8ca 0008 	str.w	r0, [sl, #8]
 800e5de:	f8ca 3004 	str.w	r3, [sl, #4]
 800e5e2:	f300 8195 	bgt.w	800e910 <_vfprintf_r+0x106c>
 800e5e6:	f10b 0b08 	add.w	fp, fp, #8
 800e5ea:	3c10      	subs	r4, #16
 800e5ec:	2c10      	cmp	r4, #16
 800e5ee:	f340 82e3 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800e5f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e5f6:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e5fa:	f8cb 5000 	str.w	r5, [fp]
 800e5fe:	1c59      	adds	r1, r3, #1
 800e600:	3210      	adds	r2, #16
 800e602:	2907      	cmp	r1, #7
 800e604:	f8cb 6004 	str.w	r6, [fp, #4]
 800e608:	f8ca 2008 	str.w	r2, [sl, #8]
 800e60c:	f8ca 1004 	str.w	r1, [sl, #4]
 800e610:	ddd5      	ble.n	800e5be <_vfprintf_r+0xd1a>
 800e612:	4638      	mov	r0, r7
 800e614:	4649      	mov	r1, r9
 800e616:	4652      	mov	r2, sl
 800e618:	f004 f832 	bl	8012680 <__sprint_r>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	f47f aa93 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e622:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e626:	e7cc      	b.n	800e5c2 <_vfprintf_r+0xd1e>
 800e628:	08013548 	.word	0x08013548
 800e62c:	08013598 	.word	0x08013598
 800e630:	0801359c 	.word	0x0801359c
 800e634:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e636:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e638:	1b2c      	subs	r4, r5, r4
 800e63a:	2c00      	cmp	r4, #0
 800e63c:	f77f ada2 	ble.w	800e184 <_vfprintf_r+0x8e0>
 800e640:	2c10      	cmp	r4, #16
 800e642:	f340 875e 	ble.w	800f502 <_vfprintf_r+0x1c5e>
 800e646:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e64a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e64e:	4dc3      	ldr	r5, [pc, #780]	; (800e95c <_vfprintf_r+0x10b8>)
 800e650:	2610      	movs	r6, #16
 800e652:	1c4b      	adds	r3, r1, #1
 800e654:	f1a4 0711 	sub.w	r7, r4, #17
 800e658:	1982      	adds	r2, r0, r6
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e660:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e664:	f8ca 2008 	str.w	r2, [sl, #8]
 800e668:	f8ca 3004 	str.w	r3, [sl, #4]
 800e66c:	f300 83c0 	bgt.w	800edf0 <_vfprintf_r+0x154c>
 800e670:	f10b 0b08 	add.w	fp, fp, #8
 800e674:	3c10      	subs	r4, #16
 800e676:	2c10      	cmp	r4, #16
 800e678:	dd58      	ble.n	800e72c <_vfprintf_r+0xe88>
 800e67a:	b1af      	cbz	r7, 800e6a8 <_vfprintf_r+0xe04>
 800e67c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e680:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e684:	f8cb 5000 	str.w	r5, [fp]
 800e688:	1c4a      	adds	r2, r1, #1
 800e68a:	3010      	adds	r0, #16
 800e68c:	2a07      	cmp	r2, #7
 800e68e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e692:	f8ca 0008 	str.w	r0, [sl, #8]
 800e696:	f8ca 2004 	str.w	r2, [sl, #4]
 800e69a:	f300 83b4 	bgt.w	800ee06 <_vfprintf_r+0x1562>
 800e69e:	f10b 0b08 	add.w	fp, fp, #8
 800e6a2:	3c10      	subs	r4, #16
 800e6a4:	2c10      	cmp	r4, #16
 800e6a6:	dd41      	ble.n	800e72c <_vfprintf_r+0xe88>
 800e6a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e6aa:	e017      	b.n	800e6dc <_vfprintf_r+0xe38>
 800e6ac:	f10b 0b08 	add.w	fp, fp, #8
 800e6b0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e6b4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e6b8:	f8cb 5000 	str.w	r5, [fp]
 800e6bc:	1c43      	adds	r3, r0, #1
 800e6be:	3210      	adds	r2, #16
 800e6c0:	3c10      	subs	r4, #16
 800e6c2:	2b07      	cmp	r3, #7
 800e6c4:	f8cb 6004 	str.w	r6, [fp, #4]
 800e6c8:	f8ca 2008 	str.w	r2, [sl, #8]
 800e6cc:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6d0:	dc1f      	bgt.n	800e712 <_vfprintf_r+0xe6e>
 800e6d2:	3c10      	subs	r4, #16
 800e6d4:	2c10      	cmp	r4, #16
 800e6d6:	f10b 0b08 	add.w	fp, fp, #8
 800e6da:	dd27      	ble.n	800e72c <_vfprintf_r+0xe88>
 800e6dc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e6e0:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e6e4:	f8cb 5000 	str.w	r5, [fp]
 800e6e8:	1c59      	adds	r1, r3, #1
 800e6ea:	3010      	adds	r0, #16
 800e6ec:	2907      	cmp	r1, #7
 800e6ee:	f8cb 6004 	str.w	r6, [fp, #4]
 800e6f2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6f6:	f8ca 1004 	str.w	r1, [sl, #4]
 800e6fa:	ddd7      	ble.n	800e6ac <_vfprintf_r+0xe08>
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	4649      	mov	r1, r9
 800e700:	4652      	mov	r2, sl
 800e702:	f003 ffbd 	bl	8012680 <__sprint_r>
 800e706:	2800      	cmp	r0, #0
 800e708:	f47f aa1e 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e70c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e710:	e7ce      	b.n	800e6b0 <_vfprintf_r+0xe0c>
 800e712:	4638      	mov	r0, r7
 800e714:	4649      	mov	r1, r9
 800e716:	4652      	mov	r2, sl
 800e718:	f003 ffb2 	bl	8012680 <__sprint_r>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	f47f aa13 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e722:	3c10      	subs	r4, #16
 800e724:	2c10      	cmp	r4, #16
 800e726:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e72a:	dcd7      	bgt.n	800e6dc <_vfprintf_r+0xe38>
 800e72c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e730:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e734:	f8cb 5000 	str.w	r5, [fp]
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	190a      	adds	r2, r1, r4
 800e73c:	2b07      	cmp	r3, #7
 800e73e:	f8cb 4004 	str.w	r4, [fp, #4]
 800e742:	f8ca 2008 	str.w	r2, [sl, #8]
 800e746:	f8ca 3004 	str.w	r3, [sl, #4]
 800e74a:	f300 83ad 	bgt.w	800eea8 <_vfprintf_r+0x1604>
 800e74e:	f10b 0b08 	add.w	fp, fp, #8
 800e752:	e517      	b.n	800e184 <_vfprintf_r+0x8e0>
 800e754:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e756:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e75a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e75e:	2d01      	cmp	r5, #1
 800e760:	f340 835c 	ble.w	800ee1c <_vfprintf_r+0x1578>
 800e764:	3301      	adds	r3, #1
 800e766:	1c42      	adds	r2, r0, #1
 800e768:	2001      	movs	r0, #1
 800e76a:	2b07      	cmp	r3, #7
 800e76c:	f8cb 8000 	str.w	r8, [fp]
 800e770:	f8cb 0004 	str.w	r0, [fp, #4]
 800e774:	f8ca 2008 	str.w	r2, [sl, #8]
 800e778:	f8ca 3004 	str.w	r3, [sl, #4]
 800e77c:	f300 836b 	bgt.w	800ee56 <_vfprintf_r+0x15b2>
 800e780:	f10b 0b08 	add.w	fp, fp, #8
 800e784:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e788:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e78c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e78e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e790:	f8cb 4004 	str.w	r4, [fp, #4]
 800e794:	1c58      	adds	r0, r3, #1
 800e796:	1862      	adds	r2, r4, r1
 800e798:	2807      	cmp	r0, #7
 800e79a:	f8cb 5000 	str.w	r5, [fp]
 800e79e:	f8ca 2008 	str.w	r2, [sl, #8]
 800e7a2:	f8ca 0004 	str.w	r0, [sl, #4]
 800e7a6:	f300 8374 	bgt.w	800ee92 <_vfprintf_r+0x15ee>
 800e7aa:	f10b 0b08 	add.w	fp, fp, #8
 800e7ae:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f7fd f99d 	bl	800baf4 <__aeabi_dcmpeq>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f040 8176 	bne.w	800eaac <_vfprintf_r+0x1208>
 800e7c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e7c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e7c6:	f8da 1008 	ldr.w	r1, [sl, #8]
 800e7ca:	1e6a      	subs	r2, r5, #1
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	f108 0001 	add.w	r0, r8, #1
 800e7d2:	1851      	adds	r1, r2, r1
 800e7d4:	2b07      	cmp	r3, #7
 800e7d6:	e88b 0005 	stmia.w	fp, {r0, r2}
 800e7da:	f8ca 1008 	str.w	r1, [sl, #8]
 800e7de:	f8ca 3004 	str.w	r3, [sl, #4]
 800e7e2:	f300 832d 	bgt.w	800ee40 <_vfprintf_r+0x159c>
 800e7e6:	f10b 0b08 	add.w	fp, fp, #8
 800e7ea:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e7ee:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e7f2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	1912      	adds	r2, r2, r4
 800e7f8:	a923      	add	r1, sp, #140	; 0x8c
 800e7fa:	2b07      	cmp	r3, #7
 800e7fc:	f8cb 4004 	str.w	r4, [fp, #4]
 800e800:	f8cb 1000 	str.w	r1, [fp]
 800e804:	f8ca 2008 	str.w	r2, [sl, #8]
 800e808:	f8ca 3004 	str.w	r3, [sl, #4]
 800e80c:	f77f ad64 	ble.w	800e2d8 <_vfprintf_r+0xa34>
 800e810:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e812:	4649      	mov	r1, r9
 800e814:	4652      	mov	r2, sl
 800e816:	f003 ff33 	bl	8012680 <__sprint_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f47f a994 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e820:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e824:	e55a      	b.n	800e2dc <_vfprintf_r+0xa38>
 800e826:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e828:	4649      	mov	r1, r9
 800e82a:	4652      	mov	r2, sl
 800e82c:	f003 ff28 	bl	8012680 <__sprint_r>
 800e830:	2800      	cmp	r0, #0
 800e832:	f43f ae1c 	beq.w	800e46e <_vfprintf_r+0xbca>
 800e836:	f7ff b987 	b.w	800db48 <_vfprintf_r+0x2a4>
 800e83a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e83c:	4649      	mov	r1, r9
 800e83e:	4652      	mov	r2, sl
 800e840:	f003 ff1e 	bl	8012680 <__sprint_r>
 800e844:	2800      	cmp	r0, #0
 800e846:	f47f a97f 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e84a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e84e:	e4b9      	b.n	800e1c4 <_vfprintf_r+0x920>
 800e850:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e852:	4649      	mov	r1, r9
 800e854:	4652      	mov	r2, sl
 800e856:	f003 ff13 	bl	8012680 <__sprint_r>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f47f a974 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e860:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e864:	e4c5      	b.n	800e1f2 <_vfprintf_r+0x94e>
 800e866:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e868:	4649      	mov	r1, r9
 800e86a:	4652      	mov	r2, sl
 800e86c:	f003 ff08 	bl	8012680 <__sprint_r>
 800e870:	2800      	cmp	r0, #0
 800e872:	f47f a969 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e876:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e87a:	e517      	b.n	800e2ac <_vfprintf_r+0xa08>
 800e87c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e87e:	4649      	mov	r1, r9
 800e880:	4652      	mov	r2, sl
 800e882:	f003 fefd 	bl	8012680 <__sprint_r>
 800e886:	2800      	cmp	r0, #0
 800e888:	f47f a95e 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e88c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e890:	e475      	b.n	800e17e <_vfprintf_r+0x8da>
 800e892:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e894:	4649      	mov	r1, r9
 800e896:	4652      	mov	r2, sl
 800e898:	f003 fef2 	bl	8012680 <__sprint_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	f47f a953 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e8a2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e8a6:	e453      	b.n	800e150 <_vfprintf_r+0x8ac>
 800e8a8:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800e8ac:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 800e8b0:	f7ff b9da 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800e8b4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e8b6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800e8ba:	f10d 01cf 	add.w	r1, sp, #207	; 0xcf
 800e8be:	260f      	movs	r6, #15
 800e8c0:	ea04 0306 	and.w	r3, r4, r6
 800e8c4:	18c7      	adds	r7, r0, r3
 800e8c6:	0924      	lsrs	r4, r4, #4
 800e8c8:	ea44 7c05 	orr.w	ip, r4, r5, lsl #28
 800e8cc:	092a      	lsrs	r2, r5, #4
 800e8ce:	4688      	mov	r8, r1
 800e8d0:	4664      	mov	r4, ip
 800e8d2:	7839      	ldrb	r1, [r7, #0]
 800e8d4:	4615      	mov	r5, r2
 800e8d6:	ea54 0205 	orrs.w	r2, r4, r5
 800e8da:	f888 1000 	strb.w	r1, [r8]
 800e8de:	f108 31ff 	add.w	r1, r8, #4294967295
 800e8e2:	d1ed      	bne.n	800e8c0 <_vfprintf_r+0x101c>
 800e8e4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800e8e8:	9d07      	ldr	r5, [sp, #28]
 800e8ea:	ebc8 0005 	rsb	r0, r8, r5
 800e8ee:	900f      	str	r0, [sp, #60]	; 0x3c
 800e8f0:	f7ff b9ba 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	bf08      	it	eq
 800e8f8:	2c0a      	cmpeq	r4, #10
 800e8fa:	f080 8193 	bcs.w	800ec24 <_vfprintf_r+0x1380>
 800e8fe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e900:	3430      	adds	r4, #48	; 0x30
 800e902:	f88d 40cf 	strb.w	r4, [sp, #207]	; 0xcf
 800e906:	920f      	str	r2, [sp, #60]	; 0x3c
 800e908:	f10d 08cf 	add.w	r8, sp, #207	; 0xcf
 800e90c:	f7ff b9ac 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800e910:	4638      	mov	r0, r7
 800e912:	4649      	mov	r1, r9
 800e914:	4652      	mov	r2, sl
 800e916:	f003 feb3 	bl	8012680 <__sprint_r>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	f47f a914 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e920:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e924:	e661      	b.n	800e5ea <_vfprintf_r+0xd46>
 800e926:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e928:	9306      	str	r3, [sp, #24]
 800e92a:	4649      	mov	r1, r9
 800e92c:	4652      	mov	r2, sl
 800e92e:	f003 fea7 	bl	8012680 <__sprint_r>
 800e932:	9b06      	ldr	r3, [sp, #24]
 800e934:	2800      	cmp	r0, #0
 800e936:	f47f a907 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e93a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e93e:	f7ff b9cf 	b.w	800dce0 <_vfprintf_r+0x43c>
 800e942:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e944:	4649      	mov	r1, r9
 800e946:	4652      	mov	r2, sl
 800e948:	f003 fe9a 	bl	8012680 <__sprint_r>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	f47f a8fb 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800e952:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800e956:	f7ff b9db 	b.w	800dd10 <_vfprintf_r+0x46c>
 800e95a:	bf00      	nop
 800e95c:	0801359c 	.word	0x0801359c
 800e960:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e962:	2c00      	cmp	r4, #0
 800e964:	f340 83ad 	ble.w	800f0c2 <_vfprintf_r+0x181e>
 800e968:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e96a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e96c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e96e:	42ac      	cmp	r4, r5
 800e970:	bfa8      	it	ge
 800e972:	462c      	movge	r4, r5
 800e974:	2c00      	cmp	r4, #0
 800e976:	eb08 0500 	add.w	r5, r8, r0
 800e97a:	950f      	str	r5, [sp, #60]	; 0x3c
 800e97c:	dd12      	ble.n	800e9a4 <_vfprintf_r+0x1100>
 800e97e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e982:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e986:	f8cb 8000 	str.w	r8, [fp]
 800e98a:	1c58      	adds	r0, r3, #1
 800e98c:	1911      	adds	r1, r2, r4
 800e98e:	2807      	cmp	r0, #7
 800e990:	f8cb 4004 	str.w	r4, [fp, #4]
 800e994:	f8ca 1008 	str.w	r1, [sl, #8]
 800e998:	f8ca 0004 	str.w	r0, [sl, #4]
 800e99c:	f300 84d9 	bgt.w	800f352 <_vfprintf_r+0x1aae>
 800e9a0:	f10b 0b08 	add.w	fp, fp, #8
 800e9a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e9a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e9aa:	1b2c      	subs	r4, r5, r4
 800e9ac:	2c00      	cmp	r4, #0
 800e9ae:	f340 8165 	ble.w	800ec7c <_vfprintf_r+0x13d8>
 800e9b2:	2c10      	cmp	r4, #16
 800e9b4:	f340 8361 	ble.w	800f07a <_vfprintf_r+0x17d6>
 800e9b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e9bc:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e9c0:	4da8      	ldr	r5, [pc, #672]	; (800ec64 <_vfprintf_r+0x13c0>)
 800e9c2:	2610      	movs	r6, #16
 800e9c4:	1c58      	adds	r0, r3, #1
 800e9c6:	f1a4 0711 	sub.w	r7, r4, #17
 800e9ca:	1991      	adds	r1, r2, r6
 800e9cc:	2807      	cmp	r0, #7
 800e9ce:	e88b 0060 	stmia.w	fp, {r5, r6}
 800e9d2:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800e9d6:	f8ca 1008 	str.w	r1, [sl, #8]
 800e9da:	f8ca 0004 	str.w	r0, [sl, #4]
 800e9de:	f300 84ac 	bgt.w	800f33a <_vfprintf_r+0x1a96>
 800e9e2:	f10b 0b08 	add.w	fp, fp, #8
 800e9e6:	3c10      	subs	r4, #16
 800e9e8:	2c10      	cmp	r4, #16
 800e9ea:	f340 8347 	ble.w	800f07c <_vfprintf_r+0x17d8>
 800e9ee:	b1b7      	cbz	r7, 800ea1e <_vfprintf_r+0x117a>
 800e9f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e9f4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e9f8:	f8cb 5000 	str.w	r5, [fp]
 800e9fc:	1c59      	adds	r1, r3, #1
 800e9fe:	3210      	adds	r2, #16
 800ea00:	2907      	cmp	r1, #7
 800ea02:	f8cb 6004 	str.w	r6, [fp, #4]
 800ea06:	f8ca 2008 	str.w	r2, [sl, #8]
 800ea0a:	f8ca 1004 	str.w	r1, [sl, #4]
 800ea0e:	f300 84cf 	bgt.w	800f3b0 <_vfprintf_r+0x1b0c>
 800ea12:	f10b 0b08 	add.w	fp, fp, #8
 800ea16:	3c10      	subs	r4, #16
 800ea18:	2c10      	cmp	r4, #16
 800ea1a:	f340 832f 	ble.w	800f07c <_vfprintf_r+0x17d8>
 800ea1e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ea20:	e016      	b.n	800ea50 <_vfprintf_r+0x11ac>
 800ea22:	f10b 0008 	add.w	r0, fp, #8
 800ea26:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ea2a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ea2e:	6005      	str	r5, [r0, #0]
 800ea30:	1c53      	adds	r3, r2, #1
 800ea32:	3110      	adds	r1, #16
 800ea34:	3c10      	subs	r4, #16
 800ea36:	2b07      	cmp	r3, #7
 800ea38:	6046      	str	r6, [r0, #4]
 800ea3a:	f8ca 1008 	str.w	r1, [sl, #8]
 800ea3e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea42:	dc1f      	bgt.n	800ea84 <_vfprintf_r+0x11e0>
 800ea44:	f100 0b08 	add.w	fp, r0, #8
 800ea48:	3c10      	subs	r4, #16
 800ea4a:	2c10      	cmp	r4, #16
 800ea4c:	f340 8316 	ble.w	800f07c <_vfprintf_r+0x17d8>
 800ea50:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ea54:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ea58:	f8cb 5000 	str.w	r5, [fp]
 800ea5c:	1c53      	adds	r3, r2, #1
 800ea5e:	3010      	adds	r0, #16
 800ea60:	2b07      	cmp	r3, #7
 800ea62:	f8cb 6004 	str.w	r6, [fp, #4]
 800ea66:	f8ca 0008 	str.w	r0, [sl, #8]
 800ea6a:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea6e:	ddd8      	ble.n	800ea22 <_vfprintf_r+0x117e>
 800ea70:	4638      	mov	r0, r7
 800ea72:	4649      	mov	r1, r9
 800ea74:	4652      	mov	r2, sl
 800ea76:	f003 fe03 	bl	8012680 <__sprint_r>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	f47f a864 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ea80:	a84e      	add	r0, sp, #312	; 0x138
 800ea82:	e7d0      	b.n	800ea26 <_vfprintf_r+0x1182>
 800ea84:	4638      	mov	r0, r7
 800ea86:	4649      	mov	r1, r9
 800ea88:	4652      	mov	r2, sl
 800ea8a:	f003 fdf9 	bl	8012680 <__sprint_r>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	f47f a85a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ea94:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ea98:	e7d6      	b.n	800ea48 <_vfprintf_r+0x11a4>
 800ea9a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ea9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea9e:	1d0f      	adds	r7, r1, #4
 800eaa0:	681c      	ldr	r4, [r3, #0]
 800eaa2:	9710      	str	r7, [sp, #64]	; 0x40
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	f7ff b9ce 	b.w	800de48 <_vfprintf_r+0x5a4>
 800eaac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800eaae:	1e6c      	subs	r4, r5, #1
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	f77f ae9a 	ble.w	800e7ea <_vfprintf_r+0xf46>
 800eab6:	2c10      	cmp	r4, #16
 800eab8:	f340 81d8 	ble.w	800ee6c <_vfprintf_r+0x15c8>
 800eabc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eac0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eac4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800eac6:	4d67      	ldr	r5, [pc, #412]	; (800ec64 <_vfprintf_r+0x13c0>)
 800eac8:	2610      	movs	r6, #16
 800eaca:	1c58      	adds	r0, r3, #1
 800eacc:	3f12      	subs	r7, #18
 800eace:	198a      	adds	r2, r1, r6
 800ead0:	2807      	cmp	r0, #7
 800ead2:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ead6:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800eada:	f8ca 2008 	str.w	r2, [sl, #8]
 800eade:	f8ca 0004 	str.w	r0, [sl, #4]
 800eae2:	f300 840f 	bgt.w	800f304 <_vfprintf_r+0x1a60>
 800eae6:	f10b 0b08 	add.w	fp, fp, #8
 800eaea:	3c10      	subs	r4, #16
 800eaec:	2c10      	cmp	r4, #16
 800eaee:	f340 81be 	ble.w	800ee6e <_vfprintf_r+0x15ca>
 800eaf2:	b1b7      	cbz	r7, 800eb22 <_vfprintf_r+0x127e>
 800eaf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eaf8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eafc:	f8cb 5000 	str.w	r5, [fp]
 800eb00:	1c5a      	adds	r2, r3, #1
 800eb02:	3110      	adds	r1, #16
 800eb04:	2a07      	cmp	r2, #7
 800eb06:	f8cb 6004 	str.w	r6, [fp, #4]
 800eb0a:	f8ca 1008 	str.w	r1, [sl, #8]
 800eb0e:	f8ca 2004 	str.w	r2, [sl, #4]
 800eb12:	f300 8406 	bgt.w	800f322 <_vfprintf_r+0x1a7e>
 800eb16:	f10b 0b08 	add.w	fp, fp, #8
 800eb1a:	3c10      	subs	r4, #16
 800eb1c:	2c10      	cmp	r4, #16
 800eb1e:	f340 81a6 	ble.w	800ee6e <_vfprintf_r+0x15ca>
 800eb22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800eb24:	e018      	b.n	800eb58 <_vfprintf_r+0x12b4>
 800eb26:	f10b 0b08 	add.w	fp, fp, #8
 800eb2a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800eb2e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800eb32:	f8cb 5000 	str.w	r5, [fp]
 800eb36:	1c41      	adds	r1, r0, #1
 800eb38:	3210      	adds	r2, #16
 800eb3a:	3c10      	subs	r4, #16
 800eb3c:	2907      	cmp	r1, #7
 800eb3e:	f8cb 6004 	str.w	r6, [fp, #4]
 800eb42:	f8ca 2008 	str.w	r2, [sl, #8]
 800eb46:	f8ca 1004 	str.w	r1, [sl, #4]
 800eb4a:	dc20      	bgt.n	800eb8e <_vfprintf_r+0x12ea>
 800eb4c:	f10b 0b08 	add.w	fp, fp, #8
 800eb50:	3c10      	subs	r4, #16
 800eb52:	2c10      	cmp	r4, #16
 800eb54:	f340 818b 	ble.w	800ee6e <_vfprintf_r+0x15ca>
 800eb58:	f8da 1004 	ldr.w	r1, [sl, #4]
 800eb5c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800eb60:	f8cb 5000 	str.w	r5, [fp]
 800eb64:	1c4b      	adds	r3, r1, #1
 800eb66:	3010      	adds	r0, #16
 800eb68:	2b07      	cmp	r3, #7
 800eb6a:	f8cb 6004 	str.w	r6, [fp, #4]
 800eb6e:	f8ca 0008 	str.w	r0, [sl, #8]
 800eb72:	f8ca 3004 	str.w	r3, [sl, #4]
 800eb76:	ddd6      	ble.n	800eb26 <_vfprintf_r+0x1282>
 800eb78:	4638      	mov	r0, r7
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	4652      	mov	r2, sl
 800eb7e:	f003 fd7f 	bl	8012680 <__sprint_r>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	f47e afe0 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800eb88:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eb8c:	e7cd      	b.n	800eb2a <_vfprintf_r+0x1286>
 800eb8e:	4638      	mov	r0, r7
 800eb90:	4649      	mov	r1, r9
 800eb92:	4652      	mov	r2, sl
 800eb94:	f003 fd74 	bl	8012680 <__sprint_r>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	f47e afd5 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800eb9e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eba2:	e7d5      	b.n	800eb50 <_vfprintf_r+0x12ac>
 800eba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800eba6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eba8:	6825      	ldr	r5, [r4, #0]
 800ebaa:	1d10      	adds	r0, r2, #4
 800ebac:	462c      	mov	r4, r5
 800ebae:	9010      	str	r0, [sp, #64]	; 0x40
 800ebb0:	2500      	movs	r5, #0
 800ebb2:	f7ff b949 	b.w	800de48 <_vfprintf_r+0x5a4>
 800ebb6:	4d2b      	ldr	r5, [pc, #172]	; (800ec64 <_vfprintf_r+0x13c0>)
 800ebb8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ebbc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ebc0:	f8cb 5000 	str.w	r5, [fp]
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	190a      	adds	r2, r1, r4
 800ebc8:	2b07      	cmp	r3, #7
 800ebca:	f8cb 4004 	str.w	r4, [fp, #4]
 800ebce:	f8ca 2008 	str.w	r2, [sl, #8]
 800ebd2:	f8ca 3004 	str.w	r3, [sl, #4]
 800ebd6:	f77f ab7f 	ble.w	800e2d8 <_vfprintf_r+0xa34>
 800ebda:	e619      	b.n	800e810 <_vfprintf_r+0xf6c>
 800ebdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ebde:	4649      	mov	r1, r9
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	f003 fd4d 	bl	8012680 <__sprint_r>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	f47e afae 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ebec:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ebf0:	f7ff bb98 	b.w	800e324 <_vfprintf_r+0xa80>
 800ebf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	4652      	mov	r2, sl
 800ebfa:	f003 fd41 	bl	8012680 <__sprint_r>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	f47e afa2 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ec04:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ec08:	f7ff bba3 	b.w	800e352 <_vfprintf_r+0xaae>
 800ec0c:	2a30      	cmp	r2, #48	; 0x30
 800ec0e:	f43f ae6b 	beq.w	800e8e8 <_vfprintf_r+0x1044>
 800ec12:	9907      	ldr	r1, [sp, #28]
 800ec14:	2730      	movs	r7, #48	; 0x30
 800ec16:	1b8a      	subs	r2, r1, r6
 800ec18:	46b0      	mov	r8, r6
 800ec1a:	f805 7c01 	strb.w	r7, [r5, #-1]
 800ec1e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ec20:	f7ff b822 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800ec24:	f10d 06cf 	add.w	r6, sp, #207	; 0xcf
 800ec28:	4677      	mov	r7, lr
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	220a      	movs	r2, #10
 800ec30:	2300      	movs	r3, #0
 800ec32:	f7fd f809 	bl	800bc48 <__aeabi_uldivmod>
 800ec36:	3230      	adds	r2, #48	; 0x30
 800ec38:	7032      	strb	r2, [r6, #0]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	220a      	movs	r2, #10
 800ec40:	2300      	movs	r3, #0
 800ec42:	f7fd f801 	bl	800bc48 <__aeabi_uldivmod>
 800ec46:	4604      	mov	r4, r0
 800ec48:	460d      	mov	r5, r1
 800ec4a:	ea54 0005 	orrs.w	r0, r4, r5
 800ec4e:	46b0      	mov	r8, r6
 800ec50:	f106 36ff 	add.w	r6, r6, #4294967295
 800ec54:	d1e9      	bne.n	800ec2a <_vfprintf_r+0x1386>
 800ec56:	9b07      	ldr	r3, [sp, #28]
 800ec58:	ebc8 0403 	rsb	r4, r8, r3
 800ec5c:	46be      	mov	lr, r7
 800ec5e:	940f      	str	r4, [sp, #60]	; 0x3c
 800ec60:	f7ff b802 	b.w	800dc68 <_vfprintf_r+0x3c4>
 800ec64:	0801359c 	.word	0x0801359c
 800ec68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	f003 fd07 	bl	8012680 <__sprint_r>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	f47e af68 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ec78:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ec7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ec7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ec80:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800ec82:	42a3      	cmp	r3, r4
 800ec84:	4446      	add	r6, r8
 800ec86:	f2c0 8092 	blt.w	800edae <_vfprintf_r+0x150a>
 800ec8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ec8c:	07e8      	lsls	r0, r5, #31
 800ec8e:	f100 808e 	bmi.w	800edae <_vfprintf_r+0x150a>
 800ec92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ec94:	1ba5      	subs	r5, r4, r6
 800ec96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ec98:	1ae3      	subs	r3, r4, r3
 800ec9a:	42ab      	cmp	r3, r5
 800ec9c:	bfb8      	it	lt
 800ec9e:	461d      	movlt	r5, r3
 800eca0:	2d00      	cmp	r5, #0
 800eca2:	dd12      	ble.n	800ecca <_vfprintf_r+0x1426>
 800eca4:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eca8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ecac:	f8cb 6000 	str.w	r6, [fp]
 800ecb0:	1948      	adds	r0, r1, r5
 800ecb2:	1c51      	adds	r1, r2, #1
 800ecb4:	2907      	cmp	r1, #7
 800ecb6:	f8cb 5004 	str.w	r5, [fp, #4]
 800ecba:	f8ca 0008 	str.w	r0, [sl, #8]
 800ecbe:	f8ca 1004 	str.w	r1, [sl, #4]
 800ecc2:	f300 83ba 	bgt.w	800f43a <_vfprintf_r+0x1b96>
 800ecc6:	f10b 0b08 	add.w	fp, fp, #8
 800ecca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800ecce:	1b5c      	subs	r4, r3, r5
 800ecd0:	2c00      	cmp	r4, #0
 800ecd2:	f77f ab03 	ble.w	800e2dc <_vfprintf_r+0xa38>
 800ecd6:	2c10      	cmp	r4, #16
 800ecd8:	f77f af6d 	ble.w	800ebb6 <_vfprintf_r+0x1312>
 800ecdc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ece0:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ece4:	4d7b      	ldr	r5, [pc, #492]	; (800eed4 <_vfprintf_r+0x1630>)
 800ece6:	2610      	movs	r6, #16
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	f1a4 0711 	sub.w	r7, r4, #17
 800ecee:	1991      	adds	r1, r2, r6
 800ecf0:	2b07      	cmp	r3, #7
 800ecf2:	e88b 0060 	stmia.w	fp, {r5, r6}
 800ecf6:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800ecfa:	f8ca 1008 	str.w	r1, [sl, #8]
 800ecfe:	f8ca 3004 	str.w	r3, [sl, #4]
 800ed02:	f300 838f 	bgt.w	800f424 <_vfprintf_r+0x1b80>
 800ed06:	f10b 0b08 	add.w	fp, fp, #8
 800ed0a:	3c10      	subs	r4, #16
 800ed0c:	2c10      	cmp	r4, #16
 800ed0e:	f77f af53 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800ed12:	b1b7      	cbz	r7, 800ed42 <_vfprintf_r+0x149e>
 800ed14:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ed18:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ed1c:	f8cb 5000 	str.w	r5, [fp]
 800ed20:	1c41      	adds	r1, r0, #1
 800ed22:	3210      	adds	r2, #16
 800ed24:	2907      	cmp	r1, #7
 800ed26:	f8cb 6004 	str.w	r6, [fp, #4]
 800ed2a:	f8ca 2008 	str.w	r2, [sl, #8]
 800ed2e:	f8ca 1004 	str.w	r1, [sl, #4]
 800ed32:	f300 83db 	bgt.w	800f4ec <_vfprintf_r+0x1c48>
 800ed36:	f10b 0b08 	add.w	fp, fp, #8
 800ed3a:	3c10      	subs	r4, #16
 800ed3c:	2c10      	cmp	r4, #16
 800ed3e:	f77f af3b 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800ed42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ed44:	e018      	b.n	800ed78 <_vfprintf_r+0x14d4>
 800ed46:	f10b 0b08 	add.w	fp, fp, #8
 800ed4a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ed4e:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ed52:	f8cb 5000 	str.w	r5, [fp]
 800ed56:	1c53      	adds	r3, r2, #1
 800ed58:	3110      	adds	r1, #16
 800ed5a:	3c10      	subs	r4, #16
 800ed5c:	2b07      	cmp	r3, #7
 800ed5e:	f8cb 6004 	str.w	r6, [fp, #4]
 800ed62:	f8ca 1008 	str.w	r1, [sl, #8]
 800ed66:	f8ca 3004 	str.w	r3, [sl, #4]
 800ed6a:	dc36      	bgt.n	800edda <_vfprintf_r+0x1536>
 800ed6c:	f10b 0b08 	add.w	fp, fp, #8
 800ed70:	3c10      	subs	r4, #16
 800ed72:	2c10      	cmp	r4, #16
 800ed74:	f77f af20 	ble.w	800ebb8 <_vfprintf_r+0x1314>
 800ed78:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ed7c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ed80:	f8cb 5000 	str.w	r5, [fp]
 800ed84:	1c58      	adds	r0, r3, #1
 800ed86:	3210      	adds	r2, #16
 800ed88:	2807      	cmp	r0, #7
 800ed8a:	f8cb 6004 	str.w	r6, [fp, #4]
 800ed8e:	f8ca 2008 	str.w	r2, [sl, #8]
 800ed92:	f8ca 0004 	str.w	r0, [sl, #4]
 800ed96:	ddd6      	ble.n	800ed46 <_vfprintf_r+0x14a2>
 800ed98:	4638      	mov	r0, r7
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	4652      	mov	r2, sl
 800ed9e:	f003 fc6f 	bl	8012680 <__sprint_r>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	f47e aed0 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800eda8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800edac:	e7cd      	b.n	800ed4a <_vfprintf_r+0x14a6>
 800edae:	f8da 0008 	ldr.w	r0, [sl, #8]
 800edb2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800edb6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800edb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800edba:	f8cb 4004 	str.w	r4, [fp, #4]
 800edbe:	1821      	adds	r1, r4, r0
 800edc0:	1c50      	adds	r0, r2, #1
 800edc2:	2807      	cmp	r0, #7
 800edc4:	f8cb 5000 	str.w	r5, [fp]
 800edc8:	f8ca 1008 	str.w	r1, [sl, #8]
 800edcc:	f8ca 0004 	str.w	r0, [sl, #4]
 800edd0:	f300 82fa 	bgt.w	800f3c8 <_vfprintf_r+0x1b24>
 800edd4:	f10b 0b08 	add.w	fp, fp, #8
 800edd8:	e75b      	b.n	800ec92 <_vfprintf_r+0x13ee>
 800edda:	4638      	mov	r0, r7
 800eddc:	4649      	mov	r1, r9
 800edde:	4652      	mov	r2, sl
 800ede0:	f003 fc4e 	bl	8012680 <__sprint_r>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	f47e aeaf 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800edea:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800edee:	e7bf      	b.n	800ed70 <_vfprintf_r+0x14cc>
 800edf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800edf2:	4649      	mov	r1, r9
 800edf4:	4652      	mov	r2, sl
 800edf6:	f003 fc43 	bl	8012680 <__sprint_r>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	f47e aea4 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ee00:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ee04:	e436      	b.n	800e674 <_vfprintf_r+0xdd0>
 800ee06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee08:	4649      	mov	r1, r9
 800ee0a:	4652      	mov	r2, sl
 800ee0c:	f003 fc38 	bl	8012680 <__sprint_r>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	f47e ae99 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ee16:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ee1a:	e442      	b.n	800e6a2 <_vfprintf_r+0xdfe>
 800ee1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ee1e:	07e1      	lsls	r1, r4, #31
 800ee20:	f53f aca0 	bmi.w	800e764 <_vfprintf_r+0xec0>
 800ee24:	1c42      	adds	r2, r0, #1
 800ee26:	1c58      	adds	r0, r3, #1
 800ee28:	2101      	movs	r1, #1
 800ee2a:	2807      	cmp	r0, #7
 800ee2c:	f8cb 8000 	str.w	r8, [fp]
 800ee30:	f8cb 1004 	str.w	r1, [fp, #4]
 800ee34:	f8ca 2008 	str.w	r2, [sl, #8]
 800ee38:	f8ca 0004 	str.w	r0, [sl, #4]
 800ee3c:	f77f acd3 	ble.w	800e7e6 <_vfprintf_r+0xf42>
 800ee40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee42:	4649      	mov	r1, r9
 800ee44:	4652      	mov	r2, sl
 800ee46:	f003 fc1b 	bl	8012680 <__sprint_r>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	f47e ae7c 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ee50:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ee54:	e4c9      	b.n	800e7ea <_vfprintf_r+0xf46>
 800ee56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4652      	mov	r2, sl
 800ee5c:	f003 fc10 	bl	8012680 <__sprint_r>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f47e ae71 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800ee66:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800ee6a:	e48b      	b.n	800e784 <_vfprintf_r+0xee0>
 800ee6c:	4d19      	ldr	r5, [pc, #100]	; (800eed4 <_vfprintf_r+0x1630>)
 800ee6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ee72:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ee76:	f8cb 5000 	str.w	r5, [fp]
 800ee7a:	1c59      	adds	r1, r3, #1
 800ee7c:	1910      	adds	r0, r2, r4
 800ee7e:	2907      	cmp	r1, #7
 800ee80:	f8cb 4004 	str.w	r4, [fp, #4]
 800ee84:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee88:	f8ca 1004 	str.w	r1, [sl, #4]
 800ee8c:	f77f acab 	ble.w	800e7e6 <_vfprintf_r+0xf42>
 800ee90:	e7d6      	b.n	800ee40 <_vfprintf_r+0x159c>
 800ee92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee94:	4649      	mov	r1, r9
 800ee96:	4652      	mov	r2, sl
 800ee98:	f003 fbf2 	bl	8012680 <__sprint_r>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	f47e ae53 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800eea2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eea6:	e482      	b.n	800e7ae <_vfprintf_r+0xf0a>
 800eea8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eeaa:	4649      	mov	r1, r9
 800eeac:	4652      	mov	r2, sl
 800eeae:	f003 fbe7 	bl	8012680 <__sprint_r>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f47e ae48 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800eeb8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800eebc:	f7ff b962 	b.w	800e184 <_vfprintf_r+0x8e0>
 800eec0:	222d      	movs	r2, #45	; 0x2d
 800eec2:	4264      	negs	r4, r4
 800eec4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800eec8:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800eecc:	2301      	movs	r3, #1
 800eece:	f7fe beae 	b.w	800dc2e <_vfprintf_r+0x38a>
 800eed2:	bf00      	nop
 800eed4:	0801359c 	.word	0x0801359c
 800eed8:	f8cd c018 	str.w	ip, [sp, #24]
 800eedc:	f7fe fa52 	bl	800d384 <__fpclassifyd>
 800eee0:	f8dd c018 	ldr.w	ip, [sp, #24]
 800eee4:	2800      	cmp	r0, #0
 800eee6:	f000 818d 	beq.w	800f204 <_vfprintf_r+0x1960>
 800eeea:	f1bc 3fff 	cmp.w	ip, #4294967295
 800eeee:	f000 835c 	beq.w	800f5aa <_vfprintf_r+0x1d06>
 800eef2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eef4:	2d67      	cmp	r5, #103	; 0x67
 800eef6:	f000 8338 	beq.w	800f56a <_vfprintf_r+0x1cc6>
 800eefa:	2d47      	cmp	r5, #71	; 0x47
 800eefc:	f000 8335 	beq.w	800f56a <_vfprintf_r+0x1cc6>
 800ef00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef02:	2c00      	cmp	r4, #0
 800ef04:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800ef08:	9113      	str	r1, [sp, #76]	; 0x4c
 800ef0a:	f2c0 8351 	blt.w	800f5b0 <_vfprintf_r+0x1d0c>
 800ef0e:	2700      	movs	r7, #0
 800ef10:	9712      	str	r7, [sp, #72]	; 0x48
 800ef12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ef14:	2d66      	cmp	r5, #102	; 0x66
 800ef16:	f000 82f7 	beq.w	800f508 <_vfprintf_r+0x1c64>
 800ef1a:	2d46      	cmp	r5, #70	; 0x46
 800ef1c:	f000 82f4 	beq.w	800f508 <_vfprintf_r+0x1c64>
 800ef20:	2d65      	cmp	r5, #101	; 0x65
 800ef22:	f000 834a 	beq.w	800f5ba <_vfprintf_r+0x1d16>
 800ef26:	2d45      	cmp	r5, #69	; 0x45
 800ef28:	f000 8347 	beq.w	800f5ba <_vfprintf_r+0x1d16>
 800ef2c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ef30:	a920      	add	r1, sp, #128	; 0x80
 800ef32:	910c      	str	r1, [sp, #48]	; 0x30
 800ef34:	2502      	movs	r5, #2
 800ef36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ef38:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef3a:	9500      	str	r5, [sp, #0]
 800ef3c:	af22      	add	r7, sp, #136	; 0x88
 800ef3e:	ad21      	add	r5, sp, #132	; 0x84
 800ef40:	4623      	mov	r3, r4
 800ef42:	9001      	str	r0, [sp, #4]
 800ef44:	4632      	mov	r2, r6
 800ef46:	9102      	str	r1, [sp, #8]
 800ef48:	9503      	str	r5, [sp, #12]
 800ef4a:	9704      	str	r7, [sp, #16]
 800ef4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef4e:	f8cd c018 	str.w	ip, [sp, #24]
 800ef52:	f000 fdd5 	bl	800fb00 <_dtoa_r>
 800ef56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef58:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ef5c:	2b67      	cmp	r3, #103	; 0x67
 800ef5e:	4680      	mov	r8, r0
 800ef60:	d001      	beq.n	800ef66 <_vfprintf_r+0x16c2>
 800ef62:	2b47      	cmp	r3, #71	; 0x47
 800ef64:	d103      	bne.n	800ef6e <_vfprintf_r+0x16ca>
 800ef66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef68:	07c3      	lsls	r3, r0, #31
 800ef6a:	f140 832a 	bpl.w	800f5c2 <_vfprintf_r+0x1d1e>
 800ef6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef72:	2946      	cmp	r1, #70	; 0x46
 800ef74:	eb08 0502 	add.w	r5, r8, r2
 800ef78:	f000 82de 	beq.w	800f538 <_vfprintf_r+0x1c94>
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	4621      	mov	r1, r4
 800ef80:	2200      	movs	r2, #0
 800ef82:	2300      	movs	r3, #0
 800ef84:	f8cd c018 	str.w	ip, [sp, #24]
 800ef88:	f7fc fdb4 	bl	800baf4 <__aeabi_dcmpeq>
 800ef8c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ef90:	b9e8      	cbnz	r0, 800efce <_vfprintf_r+0x172a>
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	4295      	cmp	r5, r2
 800ef96:	f240 83c6 	bls.w	800f726 <_vfprintf_r+0x1e82>
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	2430      	movs	r4, #48	; 0x30
 800ef9e:	f803 4b01 	strb.w	r4, [r3], #1
 800efa2:	43d1      	mvns	r1, r2
 800efa4:	1868      	adds	r0, r5, r1
 800efa6:	42ab      	cmp	r3, r5
 800efa8:	603b      	str	r3, [r7, #0]
 800efaa:	f000 0101 	and.w	r1, r0, #1
 800efae:	d00d      	beq.n	800efcc <_vfprintf_r+0x1728>
 800efb0:	b121      	cbz	r1, 800efbc <_vfprintf_r+0x1718>
 800efb2:	3301      	adds	r3, #1
 800efb4:	42ab      	cmp	r3, r5
 800efb6:	7054      	strb	r4, [r2, #1]
 800efb8:	603b      	str	r3, [r7, #0]
 800efba:	d007      	beq.n	800efcc <_vfprintf_r+0x1728>
 800efbc:	461a      	mov	r2, r3
 800efbe:	f802 4b01 	strb.w	r4, [r2], #1
 800efc2:	705c      	strb	r4, [r3, #1]
 800efc4:	1c53      	adds	r3, r2, #1
 800efc6:	42ab      	cmp	r3, r5
 800efc8:	603b      	str	r3, [r7, #0]
 800efca:	d1f7      	bne.n	800efbc <_vfprintf_r+0x1718>
 800efcc:	461d      	mov	r5, r3
 800efce:	ebc8 0705 	rsb	r7, r8, r5
 800efd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800efd4:	9711      	str	r7, [sp, #68]	; 0x44
 800efd6:	2d67      	cmp	r5, #103	; 0x67
 800efd8:	f000 8240 	beq.w	800f45c <_vfprintf_r+0x1bb8>
 800efdc:	2d47      	cmp	r5, #71	; 0x47
 800efde:	f000 823d 	beq.w	800f45c <_vfprintf_r+0x1bb8>
 800efe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800efe4:	2a66      	cmp	r2, #102	; 0x66
 800efe6:	f040 8242 	bne.w	800f46e <_vfprintf_r+0x1bca>
 800efea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800efec:	6823      	ldr	r3, [r4, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	f340 835b 	ble.w	800f6aa <_vfprintf_r+0x1e06>
 800eff4:	f1bc 0f00 	cmp.w	ip, #0
 800eff8:	f040 8340 	bne.w	800f67c <_vfprintf_r+0x1dd8>
 800effc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800effe:	07d4      	lsls	r4, r2, #31
 800f000:	f100 833c 	bmi.w	800f67c <_vfprintf_r+0x1dd8>
 800f004:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 800f008:	940c      	str	r4, [sp, #48]	; 0x30
 800f00a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f00c:	9316      	str	r3, [sp, #88]	; 0x58
 800f00e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f010:	2d00      	cmp	r5, #0
 800f012:	f000 8260 	beq.w	800f4d6 <_vfprintf_r+0x1c32>
 800f016:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f018:	222d      	movs	r2, #45	; 0x2d
 800f01a:	2700      	movs	r7, #0
 800f01c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800f020:	9409      	str	r4, [sp, #36]	; 0x24
 800f022:	9712      	str	r7, [sp, #72]	; 0x48
 800f024:	f7fe be2c 	b.w	800dc80 <_vfprintf_r+0x3dc>
 800f028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02a:	06db      	lsls	r3, r3, #27
 800f02c:	f140 8111 	bpl.w	800f252 <_vfprintf_r+0x19ae>
 800f030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f032:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f034:	6813      	ldr	r3, [r2, #0]
 800f036:	1d15      	adds	r5, r2, #4
 800f038:	9510      	str	r5, [sp, #64]	; 0x40
 800f03a:	6018      	str	r0, [r3, #0]
 800f03c:	f7fe bc84 	b.w	800d948 <_vfprintf_r+0xa4>
 800f040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f042:	0653      	lsls	r3, r2, #25
 800f044:	f140 8101 	bpl.w	800f24a <_vfprintf_r+0x19a6>
 800f048:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f04a:	1d28      	adds	r0, r5, #4
 800f04c:	882c      	ldrh	r4, [r5, #0]
 800f04e:	9010      	str	r0, [sp, #64]	; 0x40
 800f050:	2500      	movs	r5, #0
 800f052:	f7fe bf27 	b.w	800dea4 <_vfprintf_r+0x600>
 800f056:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f058:	0649      	lsls	r1, r1, #25
 800f05a:	f140 80f2 	bpl.w	800f242 <_vfprintf_r+0x199e>
 800f05e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f060:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f064:	1d39      	adds	r1, r7, #4
 800f066:	17e5      	asrs	r5, r4, #31
 800f068:	4622      	mov	r2, r4
 800f06a:	462b      	mov	r3, r5
 800f06c:	9110      	str	r1, [sp, #64]	; 0x40
 800f06e:	f7fe bdd8 	b.w	800dc22 <_vfprintf_r+0x37e>
 800f072:	f893 8000 	ldrb.w	r8, [r3]
 800f076:	f7fe bca6 	b.w	800d9c6 <_vfprintf_r+0x122>
 800f07a:	4dc2      	ldr	r5, [pc, #776]	; (800f384 <_vfprintf_r+0x1ae0>)
 800f07c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f080:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f084:	f8cb 5000 	str.w	r5, [fp]
 800f088:	1c4b      	adds	r3, r1, #1
 800f08a:	1902      	adds	r2, r0, r4
 800f08c:	2b07      	cmp	r3, #7
 800f08e:	f8cb 4004 	str.w	r4, [fp, #4]
 800f092:	f8ca 2008 	str.w	r2, [sl, #8]
 800f096:	f8ca 3004 	str.w	r3, [sl, #4]
 800f09a:	f73f ade5 	bgt.w	800ec68 <_vfprintf_r+0x13c4>
 800f09e:	f10b 0b08 	add.w	fp, fp, #8
 800f0a2:	e5eb      	b.n	800ec7c <_vfprintf_r+0x13d8>
 800f0a4:	4db7      	ldr	r5, [pc, #732]	; (800f384 <_vfprintf_r+0x1ae0>)
 800f0a6:	f7ff b8ee 	b.w	800e286 <_vfprintf_r+0x9e2>
 800f0aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	4652      	mov	r2, sl
 800f0b0:	f003 fae6 	bl	8012680 <__sprint_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f47e ad47 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f0ba:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f0be:	f7ff ba24 	b.w	800e50a <_vfprintf_r+0xc66>
 800f0c2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f0c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f0ca:	1c42      	adds	r2, r0, #1
 800f0cc:	1c4b      	adds	r3, r1, #1
 800f0ce:	48ae      	ldr	r0, [pc, #696]	; (800f388 <_vfprintf_r+0x1ae4>)
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	2b07      	cmp	r3, #7
 800f0d4:	f8cb 0000 	str.w	r0, [fp]
 800f0d8:	f8cb 1004 	str.w	r1, [fp, #4]
 800f0dc:	f8ca 2008 	str.w	r2, [sl, #8]
 800f0e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f0e4:	f300 80c2 	bgt.w	800f26c <_vfprintf_r+0x19c8>
 800f0e8:	f10b 0b08 	add.w	fp, fp, #8
 800f0ec:	b92c      	cbnz	r4, 800f0fa <_vfprintf_r+0x1856>
 800f0ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f0f0:	b91d      	cbnz	r5, 800f0fa <_vfprintf_r+0x1856>
 800f0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f4:	07d5      	lsls	r5, r2, #31
 800f0f6:	f57f a8f1 	bpl.w	800e2dc <_vfprintf_r+0xa38>
 800f0fa:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f0fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f102:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f104:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f106:	f8cb 5004 	str.w	r5, [fp, #4]
 800f10a:	182a      	adds	r2, r5, r0
 800f10c:	1c58      	adds	r0, r3, #1
 800f10e:	2807      	cmp	r0, #7
 800f110:	f8cb 1000 	str.w	r1, [fp]
 800f114:	f8ca 2008 	str.w	r2, [sl, #8]
 800f118:	f8ca 0004 	str.w	r0, [sl, #4]
 800f11c:	f300 822b 	bgt.w	800f576 <_vfprintf_r+0x1cd2>
 800f120:	f10b 0b08 	add.w	fp, fp, #8
 800f124:	4264      	negs	r4, r4
 800f126:	2c00      	cmp	r4, #0
 800f128:	f340 80d6 	ble.w	800f2d8 <_vfprintf_r+0x1a34>
 800f12c:	2c10      	cmp	r4, #16
 800f12e:	f340 8157 	ble.w	800f3e0 <_vfprintf_r+0x1b3c>
 800f132:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f136:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f13a:	4e92      	ldr	r6, [pc, #584]	; (800f384 <_vfprintf_r+0x1ae0>)
 800f13c:	2710      	movs	r7, #16
 800f13e:	1c58      	adds	r0, r3, #1
 800f140:	f1a4 0511 	sub.w	r5, r4, #17
 800f144:	19ca      	adds	r2, r1, r7
 800f146:	2807      	cmp	r0, #7
 800f148:	e88b 00c0 	stmia.w	fp, {r6, r7}
 800f14c:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800f150:	f8ca 2008 	str.w	r2, [sl, #8]
 800f154:	f8ca 0004 	str.w	r0, [sl, #4]
 800f158:	f300 827d 	bgt.w	800f656 <_vfprintf_r+0x1db2>
 800f15c:	f10b 0b08 	add.w	fp, fp, #8
 800f160:	3c10      	subs	r4, #16
 800f162:	2c10      	cmp	r4, #16
 800f164:	f340 813d 	ble.w	800f3e2 <_vfprintf_r+0x1b3e>
 800f168:	b1b5      	cbz	r5, 800f198 <_vfprintf_r+0x18f4>
 800f16a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f16e:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f172:	f8cb 6000 	str.w	r6, [fp]
 800f176:	1c5a      	adds	r2, r3, #1
 800f178:	3110      	adds	r1, #16
 800f17a:	2a07      	cmp	r2, #7
 800f17c:	f8cb 7004 	str.w	r7, [fp, #4]
 800f180:	f8ca 1008 	str.w	r1, [sl, #8]
 800f184:	f8ca 2004 	str.w	r2, [sl, #4]
 800f188:	f300 821d 	bgt.w	800f5c6 <_vfprintf_r+0x1d22>
 800f18c:	f10b 0b08 	add.w	fp, fp, #8
 800f190:	3c10      	subs	r4, #16
 800f192:	2c10      	cmp	r4, #16
 800f194:	f340 8125 	ble.w	800f3e2 <_vfprintf_r+0x1b3e>
 800f198:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f19a:	e018      	b.n	800f1ce <_vfprintf_r+0x192a>
 800f19c:	f10b 0b08 	add.w	fp, fp, #8
 800f1a0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f1a4:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f1a8:	f8cb 6000 	str.w	r6, [fp]
 800f1ac:	1c41      	adds	r1, r0, #1
 800f1ae:	3210      	adds	r2, #16
 800f1b0:	3c10      	subs	r4, #16
 800f1b2:	2907      	cmp	r1, #7
 800f1b4:	f8cb 7004 	str.w	r7, [fp, #4]
 800f1b8:	f8ca 2008 	str.w	r2, [sl, #8]
 800f1bc:	f8ca 1004 	str.w	r1, [sl, #4]
 800f1c0:	dc60      	bgt.n	800f284 <_vfprintf_r+0x19e0>
 800f1c2:	f10b 0b08 	add.w	fp, fp, #8
 800f1c6:	3c10      	subs	r4, #16
 800f1c8:	2c10      	cmp	r4, #16
 800f1ca:	f340 810a 	ble.w	800f3e2 <_vfprintf_r+0x1b3e>
 800f1ce:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f1d2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f1d6:	f8cb 6000 	str.w	r6, [fp]
 800f1da:	1c4b      	adds	r3, r1, #1
 800f1dc:	3010      	adds	r0, #16
 800f1de:	2b07      	cmp	r3, #7
 800f1e0:	f8cb 7004 	str.w	r7, [fp, #4]
 800f1e4:	f8ca 0008 	str.w	r0, [sl, #8]
 800f1e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800f1ec:	ddd6      	ble.n	800f19c <_vfprintf_r+0x18f8>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	4652      	mov	r2, sl
 800f1f4:	f003 fa44 	bl	8012680 <__sprint_r>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	f47e aca5 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f1fe:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f202:	e7cd      	b.n	800f1a0 <_vfprintf_r+0x18fc>
 800f204:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f206:	4a61      	ldr	r2, [pc, #388]	; (800f38c <_vfprintf_r+0x1ae8>)
 800f208:	4f61      	ldr	r7, [pc, #388]	; (800f390 <_vfprintf_r+0x1aec>)
 800f20a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f20c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f210:	9012      	str	r0, [sp, #72]	; 0x48
 800f212:	2103      	movs	r1, #3
 800f214:	910c      	str	r1, [sp, #48]	; 0x30
 800f216:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800f21a:	2103      	movs	r1, #3
 800f21c:	2d47      	cmp	r5, #71	; 0x47
 800f21e:	bfcc      	ite	gt
 800f220:	46b8      	movgt	r8, r7
 800f222:	4690      	movle	r8, r2
 800f224:	9409      	str	r4, [sp, #36]	; 0x24
 800f226:	910f      	str	r1, [sp, #60]	; 0x3c
 800f228:	9016      	str	r0, [sp, #88]	; 0x58
 800f22a:	f7fe bd28 	b.w	800dc7e <_vfprintf_r+0x3da>
 800f22e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f230:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f234:	9710      	str	r7, [sp, #64]	; 0x40
 800f236:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f23a:	900c      	str	r0, [sp, #48]	; 0x30
 800f23c:	9416      	str	r4, [sp, #88]	; 0x58
 800f23e:	f7fe bd1e 	b.w	800dc7e <_vfprintf_r+0x3da>
 800f242:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f244:	6802      	ldr	r2, [r0, #0]
 800f246:	f7fe bedb 	b.w	800e000 <_vfprintf_r+0x75c>
 800f24a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f24c:	680b      	ldr	r3, [r1, #0]
 800f24e:	f7fe bf45 	b.w	800e0dc <_vfprintf_r+0x838>
 800f252:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f256:	6828      	ldr	r0, [r5, #0]
 800f258:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f25a:	1d29      	adds	r1, r5, #4
 800f25c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f260:	9110      	str	r1, [sp, #64]	; 0x40
 800f262:	bf14      	ite	ne
 800f264:	8004      	strhne	r4, [r0, #0]
 800f266:	6004      	streq	r4, [r0, #0]
 800f268:	f7fe bb6e 	b.w	800d948 <_vfprintf_r+0xa4>
 800f26c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f26e:	4649      	mov	r1, r9
 800f270:	4652      	mov	r2, sl
 800f272:	f003 fa05 	bl	8012680 <__sprint_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	f47e ac66 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f27c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f27e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f282:	e733      	b.n	800f0ec <_vfprintf_r+0x1848>
 800f284:	4628      	mov	r0, r5
 800f286:	4649      	mov	r1, r9
 800f288:	4652      	mov	r2, sl
 800f28a:	f003 f9f9 	bl	8012680 <__sprint_r>
 800f28e:	2800      	cmp	r0, #0
 800f290:	f47e ac5a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f294:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f298:	e795      	b.n	800f1c6 <_vfprintf_r+0x1922>
 800f29a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f29c:	f890 8001 	ldrb.w	r8, [r0, #1]
 800f2a0:	f045 0520 	orr.w	r5, r5, #32
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	9509      	str	r5, [sp, #36]	; 0x24
 800f2a8:	f7fe bb8d 	b.w	800d9c6 <_vfprintf_r+0x122>
 800f2ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2ae:	4649      	mov	r1, r9
 800f2b0:	4652      	mov	r2, sl
 800f2b2:	f003 f9e5 	bl	8012680 <__sprint_r>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f47e ac46 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f2bc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f2c0:	f7ff b940 	b.w	800e544 <_vfprintf_r+0xca0>
 800f2c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	4652      	mov	r2, sl
 800f2ca:	f003 f9d9 	bl	8012680 <__sprint_r>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f47e ac3a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f2d4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f2d8:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f2dc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f2e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f2e2:	f8cb 8000 	str.w	r8, [fp]
 800f2e6:	e46d      	b.n	800ebc4 <_vfprintf_r+0x1320>
 800f2e8:	f003 f99a 	bl	8012620 <strlen>
 800f2ec:	9412      	str	r4, [sp, #72]	; 0x48
 800f2ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f2f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f2f2:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 800f2f6:	940c      	str	r4, [sp, #48]	; 0x30
 800f2f8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f2fc:	9710      	str	r7, [sp, #64]	; 0x40
 800f2fe:	9116      	str	r1, [sp, #88]	; 0x58
 800f300:	f7fe bcbd 	b.w	800dc7e <_vfprintf_r+0x3da>
 800f304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f306:	4649      	mov	r1, r9
 800f308:	4652      	mov	r2, sl
 800f30a:	f003 f9b9 	bl	8012680 <__sprint_r>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f47e ac1a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f314:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f318:	f7ff bbe7 	b.w	800eaea <_vfprintf_r+0x1246>
 800f31c:	4d1d      	ldr	r5, [pc, #116]	; (800f394 <_vfprintf_r+0x1af0>)
 800f31e:	f7ff b860 	b.w	800e3e2 <_vfprintf_r+0xb3e>
 800f322:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f324:	4649      	mov	r1, r9
 800f326:	4652      	mov	r2, sl
 800f328:	f003 f9aa 	bl	8012680 <__sprint_r>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	f47e ac0b 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f332:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f336:	f7ff bbf0 	b.w	800eb1a <_vfprintf_r+0x1276>
 800f33a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f33c:	4649      	mov	r1, r9
 800f33e:	4652      	mov	r2, sl
 800f340:	f003 f99e 	bl	8012680 <__sprint_r>
 800f344:	2800      	cmp	r0, #0
 800f346:	f47e abff 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f34a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f34e:	f7ff bb4a 	b.w	800e9e6 <_vfprintf_r+0x1142>
 800f352:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f354:	4649      	mov	r1, r9
 800f356:	4652      	mov	r2, sl
 800f358:	f003 f992 	bl	8012680 <__sprint_r>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	f47e abf3 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f362:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f366:	f7ff bb1d 	b.w	800e9a4 <_vfprintf_r+0x1100>
 800f36a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f36c:	4649      	mov	r1, r9
 800f36e:	4652      	mov	r2, sl
 800f370:	f003 f986 	bl	8012680 <__sprint_r>
 800f374:	2800      	cmp	r0, #0
 800f376:	f47e abe7 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f37a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f37e:	f7ff b900 	b.w	800e582 <_vfprintf_r+0xcde>
 800f382:	bf00      	nop
 800f384:	0801359c 	.word	0x0801359c
 800f388:	08013598 	.word	0x08013598
 800f38c:	08013560 	.word	0x08013560
 800f390:	08013564 	.word	0x08013564
 800f394:	08013548 	.word	0x08013548
 800f398:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f39a:	4649      	mov	r1, r9
 800f39c:	4652      	mov	r2, sl
 800f39e:	f003 f96f 	bl	8012680 <__sprint_r>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f47e abd0 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f3a8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3ac:	f7ff b901 	b.w	800e5b2 <_vfprintf_r+0xd0e>
 800f3b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3b2:	4649      	mov	r1, r9
 800f3b4:	4652      	mov	r2, sl
 800f3b6:	f003 f963 	bl	8012680 <__sprint_r>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	f47e abc4 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f3c0:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3c4:	f7ff bb27 	b.w	800ea16 <_vfprintf_r+0x1172>
 800f3c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	4652      	mov	r2, sl
 800f3ce:	f003 f957 	bl	8012680 <__sprint_r>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f47e abb8 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f3d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f3da:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f3de:	e458      	b.n	800ec92 <_vfprintf_r+0x13ee>
 800f3e0:	4eb7      	ldr	r6, [pc, #732]	; (800f6c0 <_vfprintf_r+0x1e1c>)
 800f3e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f3e6:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f3ea:	f8cb 6000 	str.w	r6, [fp]
 800f3ee:	1c59      	adds	r1, r3, #1
 800f3f0:	1910      	adds	r0, r2, r4
 800f3f2:	2907      	cmp	r1, #7
 800f3f4:	f8cb 4004 	str.w	r4, [fp, #4]
 800f3f8:	f8ca 0008 	str.w	r0, [sl, #8]
 800f3fc:	f8ca 1004 	str.w	r1, [sl, #4]
 800f400:	f73f af60 	bgt.w	800f2c4 <_vfprintf_r+0x1a20>
 800f404:	f10b 0b08 	add.w	fp, fp, #8
 800f408:	e766      	b.n	800f2d8 <_vfprintf_r+0x1a34>
 800f40a:	2e06      	cmp	r6, #6
 800f40c:	bf34      	ite	cc
 800f40e:	4634      	movcc	r4, r6
 800f410:	2406      	movcs	r4, #6
 800f412:	940f      	str	r4, [sp, #60]	; 0x3c
 800f414:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f418:	940c      	str	r4, [sp, #48]	; 0x30
 800f41a:	9710      	str	r7, [sp, #64]	; 0x40
 800f41c:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800f6c8 <_vfprintf_r+0x1e24>
 800f420:	f7fe be0e 	b.w	800e040 <_vfprintf_r+0x79c>
 800f424:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f426:	4649      	mov	r1, r9
 800f428:	4652      	mov	r2, sl
 800f42a:	f003 f929 	bl	8012680 <__sprint_r>
 800f42e:	2800      	cmp	r0, #0
 800f430:	f47e ab8a 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f434:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f438:	e467      	b.n	800ed0a <_vfprintf_r+0x1466>
 800f43a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f43c:	4649      	mov	r1, r9
 800f43e:	4652      	mov	r2, sl
 800f440:	f003 f91e 	bl	8012680 <__sprint_r>
 800f444:	2800      	cmp	r0, #0
 800f446:	f47e ab7f 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f44a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f44c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f44e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f452:	1ae3      	subs	r3, r4, r3
 800f454:	e439      	b.n	800ecca <_vfprintf_r+0x1426>
 800f456:	4d9b      	ldr	r5, [pc, #620]	; (800f6c4 <_vfprintf_r+0x1e20>)
 800f458:	f7fe bfe4 	b.w	800e424 <_vfprintf_r+0xb80>
 800f45c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	1cdf      	adds	r7, r3, #3
 800f462:	db01      	blt.n	800f468 <_vfprintf_r+0x1bc4>
 800f464:	459c      	cmp	ip, r3
 800f466:	da28      	bge.n	800f4ba <_vfprintf_r+0x1c16>
 800f468:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f46a:	1eb3      	subs	r3, r6, #2
 800f46c:	9314      	str	r3, [sp, #80]	; 0x50
 800f46e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f470:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f472:	680f      	ldr	r7, [r1, #0]
 800f474:	ae23      	add	r6, sp, #140	; 0x8c
 800f476:	1e7b      	subs	r3, r7, #1
 800f478:	2b00      	cmp	r3, #0
 800f47a:	600b      	str	r3, [r1, #0]
 800f47c:	7035      	strb	r5, [r6, #0]
 800f47e:	f2c0 8132 	blt.w	800f6e6 <_vfprintf_r+0x1e42>
 800f482:	222b      	movs	r2, #43	; 0x2b
 800f484:	7072      	strb	r2, [r6, #1]
 800f486:	2b09      	cmp	r3, #9
 800f488:	f300 80a8 	bgt.w	800f5dc <_vfprintf_r+0x1d38>
 800f48c:	3330      	adds	r3, #48	; 0x30
 800f48e:	2030      	movs	r0, #48	; 0x30
 800f490:	70b0      	strb	r0, [r6, #2]
 800f492:	70f3      	strb	r3, [r6, #3]
 800f494:	a924      	add	r1, sp, #144	; 0x90
 800f496:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f49a:	1b8e      	subs	r6, r1, r6
 800f49c:	19a0      	adds	r0, r4, r6
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	961b      	str	r6, [sp, #108]	; 0x6c
 800f4a2:	900f      	str	r0, [sp, #60]	; 0x3c
 800f4a4:	f340 8131 	ble.w	800f70a <_vfprintf_r+0x1e66>
 800f4a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f4aa:	1c60      	adds	r0, r4, #1
 800f4ac:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	900f      	str	r0, [sp, #60]	; 0x3c
 800f4b4:	930c      	str	r3, [sp, #48]	; 0x30
 800f4b6:	9116      	str	r1, [sp, #88]	; 0x58
 800f4b8:	e5a9      	b.n	800f00e <_vfprintf_r+0x176a>
 800f4ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f4bc:	42bb      	cmp	r3, r7
 800f4be:	db66      	blt.n	800f58e <_vfprintf_r+0x1cea>
 800f4c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4c2:	07c9      	lsls	r1, r1, #31
 800f4c4:	f100 80d2 	bmi.w	800f66c <_vfprintf_r+0x1dc8>
 800f4c8:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
 800f4cc:	2567      	movs	r5, #103	; 0x67
 800f4ce:	970c      	str	r7, [sp, #48]	; 0x30
 800f4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4d2:	9514      	str	r5, [sp, #80]	; 0x50
 800f4d4:	e59a      	b.n	800f00c <_vfprintf_r+0x1768>
 800f4d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f4d8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f4dc:	9409      	str	r4, [sp, #36]	; 0x24
 800f4de:	f7fe bbce 	b.w	800dc7e <_vfprintf_r+0x3da>
 800f4e2:	232d      	movs	r3, #45	; 0x2d
 800f4e4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800f4e8:	f7fe bc7c 	b.w	800dde4 <_vfprintf_r+0x540>
 800f4ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f4ee:	4649      	mov	r1, r9
 800f4f0:	4652      	mov	r2, sl
 800f4f2:	f003 f8c5 	bl	8012680 <__sprint_r>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	f47e ab26 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f4fc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f500:	e41b      	b.n	800ed3a <_vfprintf_r+0x1496>
 800f502:	4d6f      	ldr	r5, [pc, #444]	; (800f6c0 <_vfprintf_r+0x1e1c>)
 800f504:	f7ff b912 	b.w	800e72c <_vfprintf_r+0xe88>
 800f508:	ad20      	add	r5, sp, #128	; 0x80
 800f50a:	2103      	movs	r1, #3
 800f50c:	a821      	add	r0, sp, #132	; 0x84
 800f50e:	af22      	add	r7, sp, #136	; 0x88
 800f510:	e88d 1002 	stmia.w	sp, {r1, ip}
 800f514:	9502      	str	r5, [sp, #8]
 800f516:	9003      	str	r0, [sp, #12]
 800f518:	4632      	mov	r2, r6
 800f51a:	4623      	mov	r3, r4
 800f51c:	9704      	str	r7, [sp, #16]
 800f51e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f520:	950c      	str	r5, [sp, #48]	; 0x30
 800f522:	f8cd c018 	str.w	ip, [sp, #24]
 800f526:	f000 faeb 	bl	800fb00 <_dtoa_r>
 800f52a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f52e:	4680      	mov	r8, r0
 800f530:	eb00 050c 	add.w	r5, r0, ip
 800f534:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f538:	f898 3000 	ldrb.w	r3, [r8]
 800f53c:	2b30      	cmp	r3, #48	; 0x30
 800f53e:	f000 80a6 	beq.w	800f68e <_vfprintf_r+0x1dea>
 800f542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f544:	6813      	ldr	r3, [r2, #0]
 800f546:	18ed      	adds	r5, r5, r3
 800f548:	e518      	b.n	800ef7c <_vfprintf_r+0x16d8>
 800f54a:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 800f54e:	9012      	str	r0, [sp, #72]	; 0x48
 800f550:	940c      	str	r4, [sp, #48]	; 0x30
 800f552:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800f556:	9710      	str	r7, [sp, #64]	; 0x40
 800f558:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f55c:	9016      	str	r0, [sp, #88]	; 0x58
 800f55e:	f7fe bb8e 	b.w	800dc7e <_vfprintf_r+0x3da>
 800f562:	4623      	mov	r3, r4
 800f564:	2600      	movs	r6, #0
 800f566:	f7fe ba2f 	b.w	800d9c8 <_vfprintf_r+0x124>
 800f56a:	f1bc 0f00 	cmp.w	ip, #0
 800f56e:	bf08      	it	eq
 800f570:	f04f 0c01 	moveq.w	ip, #1
 800f574:	e4c4      	b.n	800ef00 <_vfprintf_r+0x165c>
 800f576:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f578:	4649      	mov	r1, r9
 800f57a:	4652      	mov	r2, sl
 800f57c:	f003 f880 	bl	8012680 <__sprint_r>
 800f580:	2800      	cmp	r0, #0
 800f582:	f47e aae1 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f586:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f588:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f58c:	e5ca      	b.n	800f124 <_vfprintf_r+0x1880>
 800f58e:	2b00      	cmp	r3, #0
 800f590:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f592:	bfd4      	ite	le
 800f594:	f1c3 0202 	rsble	r2, r3, #2
 800f598:	2201      	movgt	r2, #1
 800f59a:	1952      	adds	r2, r2, r5
 800f59c:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800f5a0:	2067      	movs	r0, #103	; 0x67
 800f5a2:	920f      	str	r2, [sp, #60]	; 0x3c
 800f5a4:	940c      	str	r4, [sp, #48]	; 0x30
 800f5a6:	9014      	str	r0, [sp, #80]	; 0x50
 800f5a8:	e530      	b.n	800f00c <_vfprintf_r+0x1768>
 800f5aa:	f04f 0c06 	mov.w	ip, #6
 800f5ae:	e4a7      	b.n	800ef00 <_vfprintf_r+0x165c>
 800f5b0:	222d      	movs	r2, #45	; 0x2d
 800f5b2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800f5b6:	9212      	str	r2, [sp, #72]	; 0x48
 800f5b8:	e4ab      	b.n	800ef12 <_vfprintf_r+0x166e>
 800f5ba:	f10c 0001 	add.w	r0, ip, #1
 800f5be:	900f      	str	r0, [sp, #60]	; 0x3c
 800f5c0:	e4b6      	b.n	800ef30 <_vfprintf_r+0x168c>
 800f5c2:	683d      	ldr	r5, [r7, #0]
 800f5c4:	e503      	b.n	800efce <_vfprintf_r+0x172a>
 800f5c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f5c8:	4649      	mov	r1, r9
 800f5ca:	4652      	mov	r2, sl
 800f5cc:	f003 f858 	bl	8012680 <__sprint_r>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f47e aab9 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f5d6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f5da:	e5d9      	b.n	800f190 <_vfprintf_r+0x18ec>
 800f5dc:	f246 6767 	movw	r7, #26215	; 0x6667
 800f5e0:	f10d 059a 	add.w	r5, sp, #154	; 0x9a
 800f5e4:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800f5e8:	fb87 2103 	smull	r2, r1, r7, r3
 800f5ec:	17da      	asrs	r2, r3, #31
 800f5ee:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
 800f5f2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f5f6:	462a      	mov	r2, r5
 800f5f8:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800f5fc:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800f600:	7015      	strb	r5, [r2, #0]
 800f602:	1e55      	subs	r5, r2, #1
 800f604:	2809      	cmp	r0, #9
 800f606:	4603      	mov	r3, r0
 800f608:	dcee      	bgt.n	800f5e8 <_vfprintf_r+0x1d44>
 800f60a:	3330      	adds	r3, #48	; 0x30
 800f60c:	f10d 079b 	add.w	r7, sp, #155	; 0x9b
 800f610:	b2d9      	uxtb	r1, r3
 800f612:	42af      	cmp	r7, r5
 800f614:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f618:	f240 8082 	bls.w	800f720 <_vfprintf_r+0x1e7c>
 800f61c:	1abc      	subs	r4, r7, r2
 800f61e:	07e5      	lsls	r5, r4, #31
 800f620:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
 800f624:	4613      	mov	r3, r2
 800f626:	d50c      	bpl.n	800f642 <_vfprintf_r+0x1d9e>
 800f628:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 800f62c:	4613      	mov	r3, r2
 800f62e:	7001      	strb	r1, [r0, #0]
 800f630:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f634:	e005      	b.n	800f642 <_vfprintf_r+0x1d9e>
 800f636:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f63a:	706c      	strb	r4, [r5, #1]
 800f63c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f640:	1c68      	adds	r0, r5, #1
 800f642:	1c45      	adds	r5, r0, #1
 800f644:	42bb      	cmp	r3, r7
 800f646:	7041      	strb	r1, [r0, #1]
 800f648:	d1f5      	bne.n	800f636 <_vfprintf_r+0x1d92>
 800f64a:	ebc2 020a 	rsb	r2, r2, sl
 800f64e:	f10d 078e 	add.w	r7, sp, #142	; 0x8e
 800f652:	18b9      	adds	r1, r7, r2
 800f654:	e71f      	b.n	800f496 <_vfprintf_r+0x1bf2>
 800f656:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f658:	4649      	mov	r1, r9
 800f65a:	4652      	mov	r2, sl
 800f65c:	f003 f810 	bl	8012680 <__sprint_r>
 800f660:	2800      	cmp	r0, #0
 800f662:	f47e aa71 	bne.w	800db48 <_vfprintf_r+0x2a4>
 800f666:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800f66a:	e579      	b.n	800f160 <_vfprintf_r+0x18bc>
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800f672:	2067      	movs	r0, #103	; 0x67
 800f674:	920f      	str	r2, [sp, #60]	; 0x3c
 800f676:	940c      	str	r4, [sp, #48]	; 0x30
 800f678:	9014      	str	r0, [sp, #80]	; 0x50
 800f67a:	e4c7      	b.n	800f00c <_vfprintf_r+0x1768>
 800f67c:	f10c 0e01 	add.w	lr, ip, #1
 800f680:	eb03 000e 	add.w	r0, r3, lr
 800f684:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 800f688:	900f      	str	r0, [sp, #60]	; 0x3c
 800f68a:	910c      	str	r1, [sp, #48]	; 0x30
 800f68c:	e4be      	b.n	800f00c <_vfprintf_r+0x1768>
 800f68e:	4630      	mov	r0, r6
 800f690:	4621      	mov	r1, r4
 800f692:	2200      	movs	r2, #0
 800f694:	2300      	movs	r3, #0
 800f696:	f8cd c018 	str.w	ip, [sp, #24]
 800f69a:	f7fc fa2b 	bl	800baf4 <__aeabi_dcmpeq>
 800f69e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f6a2:	b198      	cbz	r0, 800f6cc <_vfprintf_r+0x1e28>
 800f6a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f6a6:	680b      	ldr	r3, [r1, #0]
 800f6a8:	e74d      	b.n	800f546 <_vfprintf_r+0x1ca2>
 800f6aa:	f1bc 0f00 	cmp.w	ip, #0
 800f6ae:	d113      	bne.n	800f6d8 <_vfprintf_r+0x1e34>
 800f6b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6b2:	07c0      	lsls	r0, r0, #31
 800f6b4:	d410      	bmi.n	800f6d8 <_vfprintf_r+0x1e34>
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	910c      	str	r1, [sp, #48]	; 0x30
 800f6ba:	910f      	str	r1, [sp, #60]	; 0x3c
 800f6bc:	e4a6      	b.n	800f00c <_vfprintf_r+0x1768>
 800f6be:	bf00      	nop
 800f6c0:	0801359c 	.word	0x0801359c
 800f6c4:	08013548 	.word	0x08013548
 800f6c8:	08013590 	.word	0x08013590
 800f6cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6d0:	f1c0 0301 	rsb	r3, r0, #1
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	e736      	b.n	800f546 <_vfprintf_r+0x1ca2>
 800f6d8:	f10c 0702 	add.w	r7, ip, #2
 800f6dc:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
 800f6e0:	970f      	str	r7, [sp, #60]	; 0x3c
 800f6e2:	950c      	str	r5, [sp, #48]	; 0x30
 800f6e4:	e492      	b.n	800f00c <_vfprintf_r+0x1768>
 800f6e6:	242d      	movs	r4, #45	; 0x2d
 800f6e8:	425b      	negs	r3, r3
 800f6ea:	7074      	strb	r4, [r6, #1]
 800f6ec:	e6cb      	b.n	800f486 <_vfprintf_r+0x1be2>
 800f6ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f6f0:	f893 8001 	ldrb.w	r8, [r3, #1]
 800f6f4:	682e      	ldr	r6, [r5, #0]
 800f6f6:	1d28      	adds	r0, r5, #4
 800f6f8:	2e00      	cmp	r6, #0
 800f6fa:	9010      	str	r0, [sp, #64]	; 0x40
 800f6fc:	4623      	mov	r3, r4
 800f6fe:	f6be a962 	bge.w	800d9c6 <_vfprintf_r+0x122>
 800f702:	f04f 36ff 	mov.w	r6, #4294967295
 800f706:	f7fe b95e 	b.w	800d9c6 <_vfprintf_r+0x122>
 800f70a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f70c:	f011 0501 	ands.w	r5, r1, #1
 800f710:	f47f aeca 	bne.w	800f4a8 <_vfprintf_r+0x1c04>
 800f714:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f716:	9516      	str	r5, [sp, #88]	; 0x58
 800f718:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 800f71c:	970c      	str	r7, [sp, #48]	; 0x30
 800f71e:	e476      	b.n	800f00e <_vfprintf_r+0x176a>
 800f720:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800f724:	e6b7      	b.n	800f496 <_vfprintf_r+0x1bf2>
 800f726:	4615      	mov	r5, r2
 800f728:	e451      	b.n	800efce <_vfprintf_r+0x172a>
 800f72a:	bf00      	nop

0800f72c <__swsetup_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4b2f      	ldr	r3, [pc, #188]	; (800f7ec <__swsetup_r+0xc0>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4605      	mov	r5, r0
 800f734:	460c      	mov	r4, r1
 800f736:	b113      	cbz	r3, 800f73e <__swsetup_r+0x12>
 800f738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f73a:	2a00      	cmp	r2, #0
 800f73c:	d03d      	beq.n	800f7ba <__swsetup_r+0x8e>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	f003 0008 	and.w	r0, r3, #8
 800f744:	b202      	sxth	r2, r0
 800f746:	4619      	mov	r1, r3
 800f748:	b16a      	cbz	r2, 800f766 <__swsetup_r+0x3a>
 800f74a:	6922      	ldr	r2, [r4, #16]
 800f74c:	b1ca      	cbz	r2, 800f782 <__swsetup_r+0x56>
 800f74e:	f013 0101 	ands.w	r1, r3, #1
 800f752:	d122      	bne.n	800f79a <__swsetup_r+0x6e>
 800f754:	f003 0002 	and.w	r0, r3, #2
 800f758:	b203      	sxth	r3, r0
 800f75a:	b903      	cbnz	r3, 800f75e <__swsetup_r+0x32>
 800f75c:	6961      	ldr	r1, [r4, #20]
 800f75e:	60a1      	str	r1, [r4, #8]
 800f760:	b312      	cbz	r2, 800f7a8 <__swsetup_r+0x7c>
 800f762:	2000      	movs	r0, #0
 800f764:	bd38      	pop	{r3, r4, r5, pc}
 800f766:	f003 0010 	and.w	r0, r3, #16
 800f76a:	b202      	sxth	r2, r0
 800f76c:	b312      	cbz	r2, 800f7b4 <__swsetup_r+0x88>
 800f76e:	f001 0104 	and.w	r1, r1, #4
 800f772:	b208      	sxth	r0, r1
 800f774:	bb28      	cbnz	r0, 800f7c2 <__swsetup_r+0x96>
 800f776:	6922      	ldr	r2, [r4, #16]
 800f778:	f043 0308 	orr.w	r3, r3, #8
 800f77c:	81a3      	strh	r3, [r4, #12]
 800f77e:	2a00      	cmp	r2, #0
 800f780:	d1e5      	bne.n	800f74e <__swsetup_r+0x22>
 800f782:	f403 7020 	and.w	r0, r3, #640	; 0x280
 800f786:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800f78a:	d0e0      	beq.n	800f74e <__swsetup_r+0x22>
 800f78c:	4628      	mov	r0, r5
 800f78e:	4621      	mov	r1, r4
 800f790:	f001 fd76 	bl	8011280 <__smakebuf_r>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	6922      	ldr	r2, [r4, #16]
 800f798:	e7d9      	b.n	800f74e <__swsetup_r+0x22>
 800f79a:	6960      	ldr	r0, [r4, #20]
 800f79c:	2100      	movs	r1, #0
 800f79e:	4243      	negs	r3, r0
 800f7a0:	60a1      	str	r1, [r4, #8]
 800f7a2:	61a3      	str	r3, [r4, #24]
 800f7a4:	2a00      	cmp	r2, #0
 800f7a6:	d1dc      	bne.n	800f762 <__swsetup_r+0x36>
 800f7a8:	89a2      	ldrh	r2, [r4, #12]
 800f7aa:	f002 0080 	and.w	r0, r2, #128	; 0x80
 800f7ae:	b203      	sxth	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d0d6      	beq.n	800f762 <__swsetup_r+0x36>
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f001 fbb2 	bl	8010f24 <__sinit>
 800f7c0:	e7bd      	b.n	800f73e <__swsetup_r+0x12>
 800f7c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f7c4:	b149      	cbz	r1, 800f7da <__swsetup_r+0xae>
 800f7c6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800f7ca:	4291      	cmp	r1, r2
 800f7cc:	d003      	beq.n	800f7d6 <__swsetup_r+0xaa>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f001 fc1e 	bl	8011010 <_free_r>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	6321      	str	r1, [r4, #48]	; 0x30
 800f7da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7de:	6922      	ldr	r2, [r4, #16]
 800f7e0:	0418      	lsls	r0, r3, #16
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	0c03      	lsrs	r3, r0, #16
 800f7e6:	6061      	str	r1, [r4, #4]
 800f7e8:	6022      	str	r2, [r4, #0]
 800f7ea:	e7c5      	b.n	800f778 <__swsetup_r+0x4c>
 800f7ec:	20000490 	.word	0x20000490

0800f7f0 <register_fini>:
 800f7f0:	4b02      	ldr	r3, [pc, #8]	; (800f7fc <register_fini+0xc>)
 800f7f2:	b113      	cbz	r3, 800f7fa <register_fini+0xa>
 800f7f4:	4802      	ldr	r0, [pc, #8]	; (800f800 <register_fini+0x10>)
 800f7f6:	f000 b805 	b.w	800f804 <atexit>
 800f7fa:	4770      	bx	lr
 800f7fc:	00000000 	.word	0x00000000
 800f800:	0800d701 	.word	0x0800d701

0800f804 <atexit>:
 800f804:	4601      	mov	r1, r0
 800f806:	2000      	movs	r0, #0
 800f808:	4602      	mov	r2, r0
 800f80a:	4603      	mov	r3, r0
 800f80c:	f7fd bf1c 	b.w	800d648 <__register_exitproc>

0800f810 <quorem>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	6903      	ldr	r3, [r0, #16]
 800f816:	690c      	ldr	r4, [r1, #16]
 800f818:	429c      	cmp	r4, r3
 800f81a:	b083      	sub	sp, #12
 800f81c:	4606      	mov	r6, r0
 800f81e:	f300 816b 	bgt.w	800faf8 <quorem+0x2e8>
 800f822:	1ce0      	adds	r0, r4, #3
 800f824:	0082      	lsls	r2, r0, #2
 800f826:	188f      	adds	r7, r1, r2
 800f828:	18b5      	adds	r5, r6, r2
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6868      	ldr	r0, [r5, #4]
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	fbb0 f5f2 	udiv	r5, r0, r2
 800f834:	f101 0314 	add.w	r3, r1, #20
 800f838:	9301      	str	r3, [sp, #4]
 800f83a:	3c01      	subs	r4, #1
 800f83c:	3704      	adds	r7, #4
 800f83e:	f106 0814 	add.w	r8, r6, #20
 800f842:	2d00      	cmp	r5, #0
 800f844:	f000 80be 	beq.w	800f9c4 <quorem+0x1b4>
 800f848:	694a      	ldr	r2, [r1, #20]
 800f84a:	f8d8 3000 	ldr.w	r3, [r8]
 800f84e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f852:	b290      	uxth	r0, r2
 800f854:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f858:	fb05 f000 	mul.w	r0, r5, r0
 800f85c:	fb05 f20c 	mul.w	r2, r5, ip
 800f860:	eb02 4c10 	add.w	ip, r2, r0, lsr #16
 800f864:	fa1f fe8c 	uxth.w	lr, ip
 800f868:	b29a      	uxth	r2, r3
 800f86a:	b280      	uxth	r0, r0
 800f86c:	1a12      	subs	r2, r2, r0
 800f86e:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800f872:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800f876:	b292      	uxth	r2, r2
 800f878:	ebc9 0007 	rsb	r0, r9, r7
 800f87c:	f106 0318 	add.w	r3, r6, #24
 800f880:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800f884:	f101 0218 	add.w	r2, r1, #24
 800f888:	4297      	cmp	r7, r2
 800f88a:	f843 9c04 	str.w	r9, [r3, #-4]
 800f88e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800f892:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f896:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800f89a:	d370      	bcc.n	800f97e <quorem+0x16e>
 800f89c:	b328      	cbz	r0, 800f8ea <quorem+0xda>
 800f89e:	6810      	ldr	r0, [r2, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	b282      	uxth	r2, r0
 800f8a4:	0c00      	lsrs	r0, r0, #16
 800f8a6:	fb05 cc02 	mla	ip, r5, r2, ip
 800f8aa:	fb05 f000 	mul.w	r0, r5, r0
 800f8ae:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 800f8b2:	fa1e f283 	uxtah	r2, lr, r3
 800f8b6:	fa1f fc8c 	uxth.w	ip, ip
 800f8ba:	fa1f fe80 	uxth.w	lr, r0
 800f8be:	ebcc 0202 	rsb	r2, ip, r2
 800f8c2:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800f8c6:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800f8ca:	fa1f fc82 	uxth.w	ip, r2
 800f8ce:	f106 031c 	add.w	r3, r6, #28
 800f8d2:	f101 021c 	add.w	r2, r1, #28
 800f8d6:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 800f8da:	4297      	cmp	r7, r2
 800f8dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8e0:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800f8e4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800f8e8:	d349      	bcc.n	800f97e <quorem+0x16e>
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	f8d3 9000 	ldr.w	r9, [r3]
 800f8f0:	f850 bb04 	ldr.w	fp, [r0], #4
 800f8f4:	fa1f fa8b 	uxth.w	sl, fp
 800f8f8:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800f8fc:	fb05 cc0a 	mla	ip, r5, sl, ip
 800f900:	fb05 fa0b 	mul.w	sl, r5, fp
 800f904:	eb0a 4b1c 	add.w	fp, sl, ip, lsr #16
 800f908:	fa1f fa8b 	uxth.w	sl, fp
 800f90c:	fa1e fe89 	uxtah	lr, lr, r9
 800f910:	fa1f fc8c 	uxth.w	ip, ip
 800f914:	ebcc 0e0e 	rsb	lr, ip, lr
 800f918:	ebca 4c19 	rsb	ip, sl, r9, lsr #16
 800f91c:	eb0c 4a2e 	add.w	sl, ip, lr, asr #16
 800f920:	4699      	mov	r9, r3
 800f922:	fa1f fe8e 	uxth.w	lr, lr
 800f926:	ea4e 4c0a 	orr.w	ip, lr, sl, lsl #16
 800f92a:	f849 cb04 	str.w	ip, [r9], #4
 800f92e:	6852      	ldr	r2, [r2, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	fa1f fe82 	uxth.w	lr, r2
 800f936:	fb05 fe0e 	mul.w	lr, r5, lr
 800f93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f93e:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 800f942:	fb05 f20c 	mul.w	r2, r5, ip
 800f946:	eb02 4c1b 	add.w	ip, r2, fp, lsr #16
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	fa1f fe8c 	uxth.w	lr, ip
 800f950:	eb02 422a 	add.w	r2, r2, sl, asr #16
 800f954:	fa1f fb8b 	uxth.w	fp, fp
 800f958:	ebcb 0202 	rsb	r2, fp, r2
 800f95c:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800f960:	eb03 4e22 	add.w	lr, r3, r2, asr #16
 800f964:	b292      	uxth	r2, r2
 800f966:	464b      	mov	r3, r9
 800f968:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800f96c:	1d02      	adds	r2, r0, #4
 800f96e:	4297      	cmp	r7, r2
 800f970:	f843 9b04 	str.w	r9, [r3], #4
 800f974:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f978:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800f97c:	d2b5      	bcs.n	800f8ea <quorem+0xda>
 800f97e:	1d20      	adds	r0, r4, #4
 800f980:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	b9ea      	cbnz	r2, 800f9c4 <quorem+0x1b4>
 800f988:	1d18      	adds	r0, r3, #4
 800f98a:	4598      	cmp	r8, r3
 800f98c:	d219      	bcs.n	800f9c2 <quorem+0x1b2>
 800f98e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f992:	b9b2      	cbnz	r2, 800f9c2 <quorem+0x1b2>
 800f994:	3b04      	subs	r3, #4
 800f996:	ebc8 0003 	rsb	r0, r8, r3
 800f99a:	1cc2      	adds	r2, r0, #3
 800f99c:	0750      	lsls	r0, r2, #29
 800f99e:	d50d      	bpl.n	800f9bc <quorem+0x1ac>
 800f9a0:	3c01      	subs	r4, #1
 800f9a2:	4598      	cmp	r8, r3
 800f9a4:	d20d      	bcs.n	800f9c2 <quorem+0x1b2>
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	3b04      	subs	r3, #4
 800f9aa:	b13a      	cbz	r2, 800f9bc <quorem+0x1ac>
 800f9ac:	e009      	b.n	800f9c2 <quorem+0x1b2>
 800f9ae:	6818      	ldr	r0, [r3, #0]
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	b930      	cbnz	r0, 800f9c2 <quorem+0x1b2>
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	3c01      	subs	r4, #1
 800f9b8:	3b04      	subs	r3, #4
 800f9ba:	b912      	cbnz	r2, 800f9c2 <quorem+0x1b2>
 800f9bc:	3c01      	subs	r4, #1
 800f9be:	4598      	cmp	r8, r3
 800f9c0:	d3f5      	bcc.n	800f9ae <quorem+0x19e>
 800f9c2:	6134      	str	r4, [r6, #16]
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	f002 fc3b 	bl	8012240 <__mcmp>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	f2c0 8083 	blt.w	800fad6 <quorem+0x2c6>
 800f9d0:	9a01      	ldr	r2, [sp, #4]
 800f9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f9d6:	f852 0b04 	ldr.w	r0, [r2], #4
 800f9da:	fa1f f983 	uxth.w	r9, r3
 800f9de:	b281      	uxth	r1, r0
 800f9e0:	0c00      	lsrs	r0, r0, #16
 800f9e2:	ebc1 0109 	rsb	r1, r1, r9
 800f9e6:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800f9ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f9ee:	eb03 4021 	add.w	r0, r3, r1, asr #16
 800f9f2:	4643      	mov	r3, r8
 800f9f4:	b289      	uxth	r1, r1
 800f9f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9fa:	ebc9 0c07 	rsb	ip, r9, r7
 800f9fe:	3501      	adds	r5, #1
 800fa00:	1400      	asrs	r0, r0, #16
 800fa02:	4297      	cmp	r7, r2
 800fa04:	f843 1b04 	str.w	r1, [r3], #4
 800fa08:	f3cc 0180 	ubfx	r1, ip, #2, #1
 800fa0c:	d34b      	bcc.n	800faa6 <quorem+0x296>
 800fa0e:	b1b9      	cbz	r1, 800fa40 <quorem+0x230>
 800fa10:	f852 eb04 	ldr.w	lr, [r2], #4
 800fa14:	6819      	ldr	r1, [r3, #0]
 800fa16:	fa1f f98e 	uxth.w	r9, lr
 800fa1a:	fa1f fa81 	uxth.w	sl, r1
 800fa1e:	ebc9 090a 	rsb	r9, r9, sl
 800fa22:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 800fa26:	4448      	add	r0, r9
 800fa28:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 800fa2c:	eb01 4120 	add.w	r1, r1, r0, asr #16
 800fa30:	b280      	uxth	r0, r0
 800fa32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800fa36:	f843 0b04 	str.w	r0, [r3], #4
 800fa3a:	1408      	asrs	r0, r1, #16
 800fa3c:	4297      	cmp	r7, r2
 800fa3e:	d332      	bcc.n	800faa6 <quorem+0x296>
 800fa40:	4682      	mov	sl, r0
 800fa42:	4611      	mov	r1, r2
 800fa44:	f8d3 e000 	ldr.w	lr, [r3]
 800fa48:	f851 0b04 	ldr.w	r0, [r1], #4
 800fa4c:	fa1f fb8e 	uxth.w	fp, lr
 800fa50:	fa1f f980 	uxth.w	r9, r0
 800fa54:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800fa58:	ebc9 0b0b 	rsb	fp, r9, fp
 800fa5c:	eb0b 000a 	add.w	r0, fp, sl
 800fa60:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 800fa64:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 800fa68:	469e      	mov	lr, r3
 800fa6a:	b280      	uxth	r0, r0
 800fa6c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800fa70:	f84e 0b04 	str.w	r0, [lr], #4
 800fa74:	6850      	ldr	r0, [r2, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	b282      	uxth	r2, r0
 800fa7a:	fa1f fc83 	uxth.w	ip, r3
 800fa7e:	0c00      	lsrs	r0, r0, #16
 800fa80:	ebc2 020c 	rsb	r2, r2, ip
 800fa84:	eb02 4229 	add.w	r2, r2, r9, asr #16
 800fa88:	ebc0 4313 	rsb	r3, r0, r3, lsr #16
 800fa8c:	eb03 4022 	add.w	r0, r3, r2, asr #16
 800fa90:	b292      	uxth	r2, r2
 800fa92:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 800fa96:	4673      	mov	r3, lr
 800fa98:	1d0a      	adds	r2, r1, #4
 800fa9a:	4297      	cmp	r7, r2
 800fa9c:	f843 ab04 	str.w	sl, [r3], #4
 800faa0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800faa4:	d2cd      	bcs.n	800fa42 <quorem+0x232>
 800faa6:	1d21      	adds	r1, r4, #4
 800faa8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 800faac:	6858      	ldr	r0, [r3, #4]
 800faae:	b990      	cbnz	r0, 800fad6 <quorem+0x2c6>
 800fab0:	1d1a      	adds	r2, r3, #4
 800fab2:	4598      	cmp	r8, r3
 800fab4:	d20e      	bcs.n	800fad4 <quorem+0x2c4>
 800fab6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800faba:	b959      	cbnz	r1, 800fad4 <quorem+0x2c4>
 800fabc:	3b04      	subs	r3, #4
 800fabe:	ebc8 0003 	rsb	r0, r8, r3
 800fac2:	1cc2      	adds	r2, r0, #3
 800fac4:	0752      	lsls	r2, r2, #29
 800fac6:	d513      	bpl.n	800faf0 <quorem+0x2e0>
 800fac8:	3c01      	subs	r4, #1
 800faca:	4598      	cmp	r8, r3
 800facc:	d202      	bcs.n	800fad4 <quorem+0x2c4>
 800face:	6818      	ldr	r0, [r3, #0]
 800fad0:	3b04      	subs	r3, #4
 800fad2:	b168      	cbz	r0, 800faf0 <quorem+0x2e0>
 800fad4:	6134      	str	r4, [r6, #16]
 800fad6:	4628      	mov	r0, r5
 800fad8:	b003      	add	sp, #12
 800fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	3b04      	subs	r3, #4
 800fae2:	2a00      	cmp	r2, #0
 800fae4:	d1f6      	bne.n	800fad4 <quorem+0x2c4>
 800fae6:	6819      	ldr	r1, [r3, #0]
 800fae8:	3c01      	subs	r4, #1
 800faea:	3b04      	subs	r3, #4
 800faec:	2900      	cmp	r1, #0
 800faee:	d1f1      	bne.n	800fad4 <quorem+0x2c4>
 800faf0:	3c01      	subs	r4, #1
 800faf2:	4598      	cmp	r8, r3
 800faf4:	d3f3      	bcc.n	800fade <quorem+0x2ce>
 800faf6:	e7ed      	b.n	800fad4 <quorem+0x2c4>
 800faf8:	2000      	movs	r0, #0
 800fafa:	e7ed      	b.n	800fad8 <quorem+0x2c8>
 800fafc:	0000      	movs	r0, r0
	...

0800fb00 <_dtoa_r>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800fb06:	b09f      	sub	sp, #124	; 0x7c
 800fb08:	4681      	mov	r9, r0
 800fb0a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800fb0c:	4692      	mov	sl, r2
 800fb0e:	469b      	mov	fp, r3
 800fb10:	b151      	cbz	r1, 800fb28 <_dtoa_r+0x28>
 800fb12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fb14:	2201      	movs	r2, #1
 800fb16:	fa02 f203 	lsl.w	r2, r2, r3
 800fb1a:	604b      	str	r3, [r1, #4]
 800fb1c:	608a      	str	r2, [r1, #8]
 800fb1e:	f002 f83d 	bl	8011b9c <_Bfree>
 800fb22:	2000      	movs	r0, #0
 800fb24:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800fb28:	f1bb 0800 	subs.w	r8, fp, #0
 800fb2c:	db39      	blt.n	800fba2 <_dtoa_r+0xa2>
 800fb2e:	2100      	movs	r1, #0
 800fb30:	6021      	str	r1, [r4, #0]
 800fb32:	2400      	movs	r4, #0
 800fb34:	4622      	mov	r2, r4
 800fb36:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 800fb3a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800fb3e:	ea08 0004 	and.w	r0, r8, r4
 800fb42:	4290      	cmp	r0, r2
 800fb44:	d016      	beq.n	800fb74 <_dtoa_r+0x74>
 800fb46:	2200      	movs	r2, #0
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4650      	mov	r0, sl
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7fb ffd1 	bl	800baf4 <__aeabi_dcmpeq>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d02b      	beq.n	800fbae <_dtoa_r+0xae>
 800fb56:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fb58:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	6028      	str	r0, [r5, #0]
 800fb5e:	2c00      	cmp	r4, #0
 800fb60:	f000 80cf 	beq.w	800fd02 <_dtoa_r+0x202>
 800fb64:	49a2      	ldr	r1, [pc, #648]	; (800fdf0 <_dtoa_r+0x2f0>)
 800fb66:	1e4b      	subs	r3, r1, #1
 800fb68:	6021      	str	r1, [r4, #0]
 800fb6a:	9305      	str	r3, [sp, #20]
 800fb6c:	9805      	ldr	r0, [sp, #20]
 800fb6e:	b01f      	add	sp, #124	; 0x7c
 800fb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb74:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800fb76:	f242 720f 	movw	r2, #9999	; 0x270f
 800fb7a:	6022      	str	r2, [r4, #0]
 800fb7c:	f1ba 0f00 	cmp.w	sl, #0
 800fb80:	f000 80a6 	beq.w	800fcd0 <_dtoa_r+0x1d0>
 800fb84:	4d9b      	ldr	r5, [pc, #620]	; (800fdf4 <_dtoa_r+0x2f4>)
 800fb86:	9505      	str	r5, [sp, #20]
 800fb88:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fb8a:	2c00      	cmp	r4, #0
 800fb8c:	d0ee      	beq.n	800fb6c <_dtoa_r+0x6c>
 800fb8e:	9d05      	ldr	r5, [sp, #20]
 800fb90:	78eb      	ldrb	r3, [r5, #3]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f000 820b 	beq.w	800ffae <_dtoa_r+0x4ae>
 800fb98:	4628      	mov	r0, r5
 800fb9a:	3008      	adds	r0, #8
 800fb9c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800fb9e:	6020      	str	r0, [r4, #0]
 800fba0:	e7e4      	b.n	800fb6c <_dtoa_r+0x6c>
 800fba2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 800fba6:	2301      	movs	r3, #1
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	46c3      	mov	fp, r8
 800fbac:	e7c1      	b.n	800fb32 <_dtoa_r+0x32>
 800fbae:	ae1d      	add	r6, sp, #116	; 0x74
 800fbb0:	af1c      	add	r7, sp, #112	; 0x70
 800fbb2:	4652      	mov	r2, sl
 800fbb4:	9600      	str	r6, [sp, #0]
 800fbb6:	9701      	str	r7, [sp, #4]
 800fbb8:	4648      	mov	r0, r9
 800fbba:	465b      	mov	r3, fp
 800fbbc:	f002 fc74 	bl	80124a8 <__d2b>
 800fbc0:	f3c8 520a 	ubfx	r2, r8, #20, #11
 800fbc4:	900c      	str	r0, [sp, #48]	; 0x30
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	f040 808c 	bne.w	800fce4 <_dtoa_r+0x1e4>
 800fbcc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fbce:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fbd0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800fbd4:	187e      	adds	r6, r7, r1
 800fbd6:	429e      	cmp	r6, r3
 800fbd8:	f2c0 8334 	blt.w	8010244 <_dtoa_r+0x744>
 800fbdc:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 800fbe0:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 800fbe4:	1ba9      	subs	r1, r5, r6
 800fbe6:	f206 4212 	addw	r2, r6, #1042	; 0x412
 800fbea:	fa08 f301 	lsl.w	r3, r8, r1
 800fbee:	fa2a f002 	lsr.w	r0, sl, r2
 800fbf2:	4318      	orrs	r0, r3
 800fbf4:	f7fb fca0 	bl	800b538 <__aeabi_ui2d>
 800fbf8:	2401      	movs	r4, #1
 800fbfa:	3e01      	subs	r6, #1
 800fbfc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fc00:	940d      	str	r4, [sp, #52]	; 0x34
 800fc02:	2300      	movs	r3, #0
 800fc04:	2200      	movs	r2, #0
 800fc06:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800fc0a:	f7fb fb57 	bl	800b2bc <__aeabi_dsub>
 800fc0e:	a372      	add	r3, pc, #456	; (adr r3, 800fdd8 <_dtoa_r+0x2d8>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f7fb fd06 	bl	800b624 <__aeabi_dmul>
 800fc18:	a371      	add	r3, pc, #452	; (adr r3, 800fde0 <_dtoa_r+0x2e0>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7fb fb4f 	bl	800b2c0 <__adddf3>
 800fc22:	4604      	mov	r4, r0
 800fc24:	4630      	mov	r0, r6
 800fc26:	460d      	mov	r5, r1
 800fc28:	f7fb fc96 	bl	800b558 <__aeabi_i2d>
 800fc2c:	a36e      	add	r3, pc, #440	; (adr r3, 800fde8 <_dtoa_r+0x2e8>)
 800fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc32:	f7fb fcf7 	bl	800b624 <__aeabi_dmul>
 800fc36:	4602      	mov	r2, r0
 800fc38:	460b      	mov	r3, r1
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	f7fb fb3f 	bl	800b2c0 <__adddf3>
 800fc42:	4604      	mov	r4, r0
 800fc44:	460d      	mov	r5, r1
 800fc46:	f7fb ff87 	bl	800bb58 <__aeabi_d2iz>
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800fc4e:	2200      	movs	r2, #0
 800fc50:	4620      	mov	r0, r4
 800fc52:	2300      	movs	r3, #0
 800fc54:	f7fb ff58 	bl	800bb08 <__aeabi_dcmplt>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	f040 82c6 	bne.w	80101ea <_dtoa_r+0x6ea>
 800fc5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc60:	2816      	cmp	r0, #22
 800fc62:	f200 82bf 	bhi.w	80101e4 <_dtoa_r+0x6e4>
 800fc66:	4c64      	ldr	r4, [pc, #400]	; (800fdf8 <_dtoa_r+0x2f8>)
 800fc68:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 800fc6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fc70:	4652      	mov	r2, sl
 800fc72:	465b      	mov	r3, fp
 800fc74:	f7fb ff66 	bl	800bb44 <__aeabi_dcmpgt>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	f000 82eb 	beq.w	8010254 <_dtoa_r+0x754>
 800fc7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc80:	2000      	movs	r0, #0
 800fc82:	1e4b      	subs	r3, r1, #1
 800fc84:	9309      	str	r3, [sp, #36]	; 0x24
 800fc86:	9012      	str	r0, [sp, #72]	; 0x48
 800fc88:	1bbe      	subs	r6, r7, r6
 800fc8a:	3e01      	subs	r6, #1
 800fc8c:	f100 82c4 	bmi.w	8010218 <_dtoa_r+0x718>
 800fc90:	2400      	movs	r4, #0
 800fc92:	960a      	str	r6, [sp, #40]	; 0x28
 800fc94:	940e      	str	r4, [sp, #56]	; 0x38
 800fc96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	f2c0 82b4 	blt.w	8010206 <_dtoa_r+0x706>
 800fc9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fca0:	9111      	str	r1, [sp, #68]	; 0x44
 800fca2:	186b      	adds	r3, r5, r1
 800fca4:	2100      	movs	r1, #0
 800fca6:	930a      	str	r3, [sp, #40]	; 0x28
 800fca8:	9110      	str	r1, [sp, #64]	; 0x40
 800fcaa:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fcac:	2809      	cmp	r0, #9
 800fcae:	d82b      	bhi.n	800fd08 <_dtoa_r+0x208>
 800fcb0:	2805      	cmp	r0, #5
 800fcb2:	f341 804c 	ble.w	8010d4e <_dtoa_r+0x124e>
 800fcb6:	1f02      	subs	r2, r0, #4
 800fcb8:	9228      	str	r2, [sp, #160]	; 0xa0
 800fcba:	2500      	movs	r5, #0
 800fcbc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800fcbe:	1ea3      	subs	r3, r4, #2
 800fcc0:	2b03      	cmp	r3, #3
 800fcc2:	d823      	bhi.n	800fd0c <_dtoa_r+0x20c>
 800fcc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fcc8:	052f0543 	.word	0x052f0543
 800fccc:	05400349 	.word	0x05400349
 800fcd0:	4848      	ldr	r0, [pc, #288]	; (800fdf4 <_dtoa_r+0x2f4>)
 800fcd2:	494a      	ldr	r1, [pc, #296]	; (800fdfc <_dtoa_r+0x2fc>)
 800fcd4:	f3c8 0813 	ubfx	r8, r8, #0, #20
 800fcd8:	f1b8 0f00 	cmp.w	r8, #0
 800fcdc:	bf18      	it	ne
 800fcde:	4601      	movne	r1, r0
 800fce0:	9105      	str	r1, [sp, #20]
 800fce2:	e751      	b.n	800fb88 <_dtoa_r+0x88>
 800fce4:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 800fce8:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 800fcec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fcf0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 800fcfc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fcfe:	920d      	str	r2, [sp, #52]	; 0x34
 800fd00:	e77f      	b.n	800fc02 <_dtoa_r+0x102>
 800fd02:	4d3f      	ldr	r5, [pc, #252]	; (800fe00 <_dtoa_r+0x300>)
 800fd04:	9505      	str	r5, [sp, #20]
 800fd06:	e731      	b.n	800fb6c <_dtoa_r+0x6c>
 800fd08:	2500      	movs	r5, #0
 800fd0a:	9528      	str	r5, [sp, #160]	; 0xa0
 800fd0c:	2400      	movs	r4, #0
 800fd0e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800fd12:	4648      	mov	r0, r9
 800fd14:	4621      	mov	r1, r4
 800fd16:	f001 ff1b 	bl	8011b50 <_Balloc>
 800fd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd1e:	9005      	str	r0, [sp, #20]
 800fd20:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800fd24:	2001      	movs	r0, #1
 800fd26:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd28:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd2a:	9429      	str	r4, [sp, #164]	; 0xa4
 800fd2c:	900f      	str	r0, [sp, #60]	; 0x3c
 800fd2e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fd30:	2900      	cmp	r1, #0
 800fd32:	f2c0 813f 	blt.w	800ffb4 <_dtoa_r+0x4b4>
 800fd36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd38:	2a0e      	cmp	r2, #14
 800fd3a:	f300 813b 	bgt.w	800ffb4 <_dtoa_r+0x4b4>
 800fd3e:	4d2e      	ldr	r5, [pc, #184]	; (800fdf8 <_dtoa_r+0x2f8>)
 800fd40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fd42:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800fd46:	ed90 7b00 	vldr	d7, [r0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd50:	f2c0 8500 	blt.w	8010754 <_dtoa_r+0xc54>
 800fd54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd58:	4650      	mov	r0, sl
 800fd5a:	4659      	mov	r1, fp
 800fd5c:	f7fb fd8c 	bl	800b878 <__aeabi_ddiv>
 800fd60:	f7fb fefa 	bl	800bb58 <__aeabi_d2iz>
 800fd64:	4606      	mov	r6, r0
 800fd66:	f7fb fbf7 	bl	800b558 <__aeabi_i2d>
 800fd6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd6e:	f7fb fc59 	bl	800b624 <__aeabi_dmul>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4650      	mov	r0, sl
 800fd78:	4659      	mov	r1, fp
 800fd7a:	f7fb fa9f 	bl	800b2bc <__aeabi_dsub>
 800fd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fd84:	f106 0230 	add.w	r2, r6, #48	; 0x30
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	460d      	mov	r5, r1
 800fd8e:	f808 2b01 	strb.w	r2, [r8], #1
 800fd92:	f000 8091 	beq.w	800feb8 <_dtoa_r+0x3b8>
 800fd96:	2300      	movs	r3, #0
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800fd9e:	f7fb fc41 	bl	800b624 <__aeabi_dmul>
 800fda2:	2200      	movs	r2, #0
 800fda4:	2300      	movs	r3, #0
 800fda6:	4604      	mov	r4, r0
 800fda8:	460d      	mov	r5, r1
 800fdaa:	f7fb fea3 	bl	800baf4 <__aeabi_dcmpeq>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f040 80c0 	bne.w	800ff34 <_dtoa_r+0x434>
 800fdb4:	9f05      	ldr	r7, [sp, #20]
 800fdb6:	9e05      	ldr	r6, [sp, #20]
 800fdb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fdba:	3702      	adds	r7, #2
 800fdbc:	eb06 0b00 	add.w	fp, r6, r0
 800fdc0:	ebc7 010b 	rsb	r1, r7, fp
 800fdc4:	07c9      	lsls	r1, r1, #31
 800fdc6:	f100 80c7 	bmi.w	800ff58 <_dtoa_r+0x458>
 800fdca:	f8cd b020 	str.w	fp, [sp, #32]
 800fdce:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800fdd2:	e04b      	b.n	800fe6c <_dtoa_r+0x36c>
 800fdd4:	f3af 8000 	nop.w
 800fdd8:	636f4361 	.word	0x636f4361
 800fddc:	3fd287a7 	.word	0x3fd287a7
 800fde0:	8b60c8b3 	.word	0x8b60c8b3
 800fde4:	3fc68a28 	.word	0x3fc68a28
 800fde8:	509f79fb 	.word	0x509f79fb
 800fdec:	3fd34413 	.word	0x3fd34413
 800fdf0:	08013599 	.word	0x08013599
 800fdf4:	080135b8 	.word	0x080135b8
 800fdf8:	080135d8 	.word	0x080135d8
 800fdfc:	080135ac 	.word	0x080135ac
 800fe00:	08013598 	.word	0x08013598
 800fe04:	f7fb fc0e 	bl	800b624 <__aeabi_dmul>
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	460d      	mov	r5, r1
 800fe10:	f7fb fe70 	bl	800baf4 <__aeabi_dcmpeq>
 800fe14:	4652      	mov	r2, sl
 800fe16:	465b      	mov	r3, fp
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f040 808b 	bne.w	800ff34 <_dtoa_r+0x434>
 800fe1e:	4620      	mov	r0, r4
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7fb fd29 	bl	800b878 <__aeabi_ddiv>
 800fe26:	f7fb fe97 	bl	800bb58 <__aeabi_d2iz>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	f7fb fb94 	bl	800b558 <__aeabi_i2d>
 800fe30:	4652      	mov	r2, sl
 800fe32:	465b      	mov	r3, fp
 800fe34:	f7fb fbf6 	bl	800b624 <__aeabi_dmul>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	4629      	mov	r1, r5
 800fe40:	f7fb fa3c 	bl	800b2bc <__aeabi_dsub>
 800fe44:	3630      	adds	r6, #48	; 0x30
 800fe46:	2300      	movs	r3, #0
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800fe4e:	f807 6c01 	strb.w	r6, [r7, #-1]
 800fe52:	f7fb fbe7 	bl	800b624 <__aeabi_dmul>
 800fe56:	2200      	movs	r2, #0
 800fe58:	2300      	movs	r3, #0
 800fe5a:	46b8      	mov	r8, r7
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	460d      	mov	r5, r1
 800fe60:	f107 0701 	add.w	r7, r7, #1
 800fe64:	f7fb fe46 	bl	800baf4 <__aeabi_dcmpeq>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d163      	bne.n	800ff34 <_dtoa_r+0x434>
 800fe6c:	4652      	mov	r2, sl
 800fe6e:	465b      	mov	r3, fp
 800fe70:	4620      	mov	r0, r4
 800fe72:	4629      	mov	r1, r5
 800fe74:	f7fb fd00 	bl	800b878 <__aeabi_ddiv>
 800fe78:	f7fb fe6e 	bl	800bb58 <__aeabi_d2iz>
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	f7fb fb6b 	bl	800b558 <__aeabi_i2d>
 800fe82:	4652      	mov	r2, sl
 800fe84:	465b      	mov	r3, fp
 800fe86:	f7fb fbcd 	bl	800b624 <__aeabi_dmul>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4629      	mov	r1, r5
 800fe92:	f7fb fa13 	bl	800b2bc <__aeabi_dsub>
 800fe96:	f8dd c020 	ldr.w	ip, [sp, #32]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800fea0:	2200      	movs	r2, #0
 800fea2:	4567      	cmp	r7, ip
 800fea4:	f807 8c01 	strb.w	r8, [r7, #-1]
 800fea8:	4604      	mov	r4, r0
 800feaa:	46b8      	mov	r8, r7
 800feac:	460d      	mov	r5, r1
 800feae:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800feb2:	f107 0701 	add.w	r7, r7, #1
 800feb6:	d1a5      	bne.n	800fe04 <_dtoa_r+0x304>
 800feb8:	4622      	mov	r2, r4
 800feba:	462b      	mov	r3, r5
 800febc:	4620      	mov	r0, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	f7fb f9fe 	bl	800b2c0 <__adddf3>
 800fec4:	4604      	mov	r4, r0
 800fec6:	460d      	mov	r5, r1
 800fec8:	4622      	mov	r2, r4
 800feca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fece:	462b      	mov	r3, r5
 800fed0:	f7fb fe1a 	bl	800bb08 <__aeabi_dcmplt>
 800fed4:	b940      	cbnz	r0, 800fee8 <_dtoa_r+0x3e8>
 800fed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800feda:	4622      	mov	r2, r4
 800fedc:	462b      	mov	r3, r5
 800fede:	f7fb fe09 	bl	800baf4 <__aeabi_dcmpeq>
 800fee2:	b338      	cbz	r0, 800ff34 <_dtoa_r+0x434>
 800fee4:	07f4      	lsls	r4, r6, #31
 800fee6:	d525      	bpl.n	800ff34 <_dtoa_r+0x434>
 800fee8:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 800feec:	9a05      	ldr	r2, [sp, #20]
 800feee:	43d3      	mvns	r3, r2
 800fef0:	eb08 0003 	add.w	r0, r8, r3
 800fef4:	07c0      	lsls	r0, r0, #31
 800fef6:	f100 8504 	bmi.w	8010902 <_dtoa_r+0xe02>
 800fefa:	4614      	mov	r4, r2
 800fefc:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800ff00:	f108 31ff 	add.w	r1, r8, #4294967295
 800ff04:	d112      	bne.n	800ff2c <_dtoa_r+0x42c>
 800ff06:	428c      	cmp	r4, r1
 800ff08:	f000 853e 	beq.w	8010988 <_dtoa_r+0xe88>
 800ff0c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 800ff10:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800ff14:	4688      	mov	r8, r1
 800ff16:	f101 31ff 	add.w	r1, r1, #4294967295
 800ff1a:	d107      	bne.n	800ff2c <_dtoa_r+0x42c>
 800ff1c:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 800ff20:	4688      	mov	r8, r1
 800ff22:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800ff26:	f108 31ff 	add.w	r1, r8, #4294967295
 800ff2a:	d0ec      	beq.n	800ff06 <_dtoa_r+0x406>
 800ff2c:	f10b 0501 	add.w	r5, fp, #1
 800ff30:	b2ea      	uxtb	r2, r5
 800ff32:	700a      	strb	r2, [r1, #0]
 800ff34:	4648      	mov	r0, r9
 800ff36:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff38:	f001 fe30 	bl	8011b9c <_Bfree>
 800ff3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff3e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800ff40:	1c6b      	adds	r3, r5, #1
 800ff42:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ff44:	2200      	movs	r2, #0
 800ff46:	f888 2000 	strb.w	r2, [r8]
 800ff4a:	602b      	str	r3, [r5, #0]
 800ff4c:	2c00      	cmp	r4, #0
 800ff4e:	f43f ae0d 	beq.w	800fb6c <_dtoa_r+0x6c>
 800ff52:	f8c4 8000 	str.w	r8, [r4]
 800ff56:	e609      	b.n	800fb6c <_dtoa_r+0x6c>
 800ff58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	4629      	mov	r1, r5
 800ff60:	f7fb fc8a 	bl	800b878 <__aeabi_ddiv>
 800ff64:	f7fb fdf8 	bl	800bb58 <__aeabi_d2iz>
 800ff68:	4606      	mov	r6, r0
 800ff6a:	f7fb faf5 	bl	800b558 <__aeabi_i2d>
 800ff6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff72:	f7fb fb57 	bl	800b624 <__aeabi_dmul>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	f7fb f99d 	bl	800b2bc <__aeabi_dsub>
 800ff82:	3630      	adds	r6, #48	; 0x30
 800ff84:	2300      	movs	r3, #0
 800ff86:	2200      	movs	r2, #0
 800ff88:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800ff8c:	f807 6c01 	strb.w	r6, [r7, #-1]
 800ff90:	f7fb fb48 	bl	800b624 <__aeabi_dmul>
 800ff94:	46b8      	mov	r8, r7
 800ff96:	9f05      	ldr	r7, [sp, #20]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	460d      	mov	r5, r1
 800ffa0:	3703      	adds	r7, #3
 800ffa2:	f7fb fda7 	bl	800baf4 <__aeabi_dcmpeq>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f43f af0f 	beq.w	800fdca <_dtoa_r+0x2ca>
 800ffac:	e7c2      	b.n	800ff34 <_dtoa_r+0x434>
 800ffae:	9a05      	ldr	r2, [sp, #20]
 800ffb0:	1cd0      	adds	r0, r2, #3
 800ffb2:	e5f3      	b.n	800fb9c <_dtoa_r+0x9c>
 800ffb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ffb6:	2f00      	cmp	r7, #0
 800ffb8:	f000 8133 	beq.w	8010222 <_dtoa_r+0x722>
 800ffbc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ffbe:	2c01      	cmp	r4, #1
 800ffc0:	f340 83f8 	ble.w	80107b4 <_dtoa_r+0xcb4>
 800ffc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ffc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffc8:	1e41      	subs	r1, r0, #1
 800ffca:	428a      	cmp	r2, r1
 800ffcc:	f2c0 84e7 	blt.w	801099e <_dtoa_r+0xe9e>
 800ffd0:	1a55      	subs	r5, r2, r1
 800ffd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	f2c0 8637 	blt.w	8010c48 <_dtoa_r+0x1148>
 800ffda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ffdc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800ffde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffe0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800ffe4:	19da      	adds	r2, r3, r7
 800ffe6:	eb0e 0807 	add.w	r8, lr, r7
 800ffea:	4648      	mov	r0, r9
 800ffec:	2101      	movs	r1, #1
 800ffee:	920e      	str	r2, [sp, #56]	; 0x38
 800fff0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800fff4:	f001 fea4 	bl	8011d40 <__i2b>
 800fff8:	900d      	str	r0, [sp, #52]	; 0x34
 800fffa:	b17c      	cbz	r4, 801001c <_dtoa_r+0x51c>
 800fffc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fffe:	2800      	cmp	r0, #0
 8010000:	dd0c      	ble.n	801001c <_dtoa_r+0x51c>
 8010002:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8010006:	4607      	mov	r7, r0
 8010008:	42a7      	cmp	r7, r4
 801000a:	bfa8      	it	ge
 801000c:	4627      	movge	r7, r4
 801000e:	ebc7 0e0c 	rsb	lr, r7, ip
 8010012:	1bc1      	subs	r1, r0, r7
 8010014:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8010018:	1be4      	subs	r4, r4, r7
 801001a:	910a      	str	r1, [sp, #40]	; 0x28
 801001c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801001e:	2b00      	cmp	r3, #0
 8010020:	dd1a      	ble.n	8010058 <_dtoa_r+0x558>
 8010022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010024:	2a00      	cmp	r2, #0
 8010026:	f000 84a7 	beq.w	8010978 <_dtoa_r+0xe78>
 801002a:	2d00      	cmp	r5, #0
 801002c:	dd10      	ble.n	8010050 <_dtoa_r+0x550>
 801002e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010030:	462a      	mov	r2, r5
 8010032:	4648      	mov	r0, r9
 8010034:	f001 fff6 	bl	8012024 <__pow5mult>
 8010038:	900d      	str	r0, [sp, #52]	; 0x34
 801003a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801003c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801003e:	4648      	mov	r0, r9
 8010040:	f001 fe88 	bl	8011d54 <__multiply>
 8010044:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010046:	4606      	mov	r6, r0
 8010048:	4648      	mov	r0, r9
 801004a:	f001 fda7 	bl	8011b9c <_Bfree>
 801004e:	960c      	str	r6, [sp, #48]	; 0x30
 8010050:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010052:	1b42      	subs	r2, r0, r5
 8010054:	f040 83a8 	bne.w	80107a8 <_dtoa_r+0xca8>
 8010058:	2101      	movs	r1, #1
 801005a:	4648      	mov	r0, r9
 801005c:	f001 fe70 	bl	8011d40 <__i2b>
 8010060:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010062:	2d00      	cmp	r5, #0
 8010064:	4607      	mov	r7, r0
 8010066:	dd05      	ble.n	8010074 <_dtoa_r+0x574>
 8010068:	4639      	mov	r1, r7
 801006a:	4648      	mov	r0, r9
 801006c:	462a      	mov	r2, r5
 801006e:	f001 ffd9 	bl	8012024 <__pow5mult>
 8010072:	4607      	mov	r7, r0
 8010074:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010076:	2901      	cmp	r1, #1
 8010078:	f340 8156 	ble.w	8010328 <_dtoa_r+0x828>
 801007c:	2500      	movs	r5, #0
 801007e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010080:	2800      	cmp	r0, #0
 8010082:	f040 8416 	bne.w	80108b2 <_dtoa_r+0xdb2>
 8010086:	2101      	movs	r1, #1
 8010088:	980a      	ldr	r0, [sp, #40]	; 0x28
 801008a:	1809      	adds	r1, r1, r0
 801008c:	f011 031f 	ands.w	r3, r1, #31
 8010090:	f000 80cc 	beq.w	801022c <_dtoa_r+0x72c>
 8010094:	f1c3 0220 	rsb	r2, r3, #32
 8010098:	2a04      	cmp	r2, #4
 801009a:	f340 865b 	ble.w	8010d54 <_dtoa_r+0x1254>
 801009e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80100a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100a4:	f1c3 001c 	rsb	r0, r3, #28
 80100a8:	eb0e 0800 	add.w	r8, lr, r0
 80100ac:	1811      	adds	r1, r2, r0
 80100ae:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80100b2:	1824      	adds	r4, r4, r0
 80100b4:	910a      	str	r1, [sp, #40]	; 0x28
 80100b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd05      	ble.n	80100c8 <_dtoa_r+0x5c8>
 80100bc:	4648      	mov	r0, r9
 80100be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100c2:	f001 fff9 	bl	80120b8 <__lshift>
 80100c6:	900c      	str	r0, [sp, #48]	; 0x30
 80100c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	dd04      	ble.n	80100d8 <_dtoa_r+0x5d8>
 80100ce:	4639      	mov	r1, r7
 80100d0:	4648      	mov	r0, r9
 80100d2:	f001 fff1 	bl	80120b8 <__lshift>
 80100d6:	4607      	mov	r7, r0
 80100d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80100da:	2800      	cmp	r0, #0
 80100dc:	f040 83ce 	bne.w	801087c <_dtoa_r+0xd7c>
 80100e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80100e2:	2800      	cmp	r0, #0
 80100e4:	f340 83ef 	ble.w	80108c6 <_dtoa_r+0xdc6>
 80100e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80100ea:	2900      	cmp	r1, #0
 80100ec:	f040 80b4 	bne.w	8010258 <_dtoa_r+0x758>
 80100f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80100f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80100f4:	07e2      	lsls	r2, r4, #31
 80100f6:	f140 839f 	bpl.w	8010838 <_dtoa_r+0xd38>
 80100fa:	46a2      	mov	sl, r4
 80100fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80100fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010102:	e010      	b.n	8010126 <_dtoa_r+0x626>
 8010104:	f001 fd54 	bl	8011bb0 <__multadd>
 8010108:	4639      	mov	r1, r7
 801010a:	4606      	mov	r6, r0
 801010c:	f7ff fb80 	bl	800f810 <quorem>
 8010110:	3030      	adds	r0, #48	; 0x30
 8010112:	f808 0004 	strb.w	r0, [r8, r4]
 8010116:	4631      	mov	r1, r6
 8010118:	4648      	mov	r0, r9
 801011a:	220a      	movs	r2, #10
 801011c:	2300      	movs	r3, #0
 801011e:	f001 fd47 	bl	8011bb0 <__multadd>
 8010122:	1c65      	adds	r5, r4, #1
 8010124:	4606      	mov	r6, r0
 8010126:	4639      	mov	r1, r7
 8010128:	4630      	mov	r0, r6
 801012a:	f7ff fb71 	bl	800f810 <quorem>
 801012e:	1c6c      	adds	r4, r5, #1
 8010130:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8010134:	220a      	movs	r2, #10
 8010136:	2300      	movs	r3, #0
 8010138:	45a2      	cmp	sl, r4
 801013a:	4631      	mov	r1, r6
 801013c:	4648      	mov	r0, r9
 801013e:	f808 b005 	strb.w	fp, [r8, r5]
 8010142:	dcdf      	bgt.n	8010104 <_dtoa_r+0x604>
 8010144:	960c      	str	r6, [sp, #48]	; 0x30
 8010146:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801014a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801014c:	2500      	movs	r5, #0
 801014e:	2a01      	cmp	r2, #1
 8010150:	bfac      	ite	ge
 8010152:	4490      	addge	r8, r2
 8010154:	f108 0801 	addlt.w	r8, r8, #1
 8010158:	2201      	movs	r2, #1
 801015a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801015c:	4648      	mov	r0, r9
 801015e:	f001 ffab 	bl	80120b8 <__lshift>
 8010162:	4639      	mov	r1, r7
 8010164:	900c      	str	r0, [sp, #48]	; 0x30
 8010166:	f002 f86b 	bl	8012240 <__mcmp>
 801016a:	2800      	cmp	r0, #0
 801016c:	f340 8449 	ble.w	8010a02 <_dtoa_r+0xf02>
 8010170:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010174:	9905      	ldr	r1, [sp, #20]
 8010176:	43c8      	mvns	r0, r1
 8010178:	eb08 0300 	add.w	r3, r8, r0
 801017c:	07db      	lsls	r3, r3, #31
 801017e:	d507      	bpl.n	8010190 <_dtoa_r+0x690>
 8010180:	2a39      	cmp	r2, #57	; 0x39
 8010182:	f108 34ff 	add.w	r4, r8, #4294967295
 8010186:	d118      	bne.n	80101ba <_dtoa_r+0x6ba>
 8010188:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801018c:	9905      	ldr	r1, [sp, #20]
 801018e:	46a0      	mov	r8, r4
 8010190:	2a39      	cmp	r2, #57	; 0x39
 8010192:	f108 34ff 	add.w	r4, r8, #4294967295
 8010196:	d110      	bne.n	80101ba <_dtoa_r+0x6ba>
 8010198:	42a1      	cmp	r1, r4
 801019a:	f000 8368 	beq.w	801086e <_dtoa_r+0xd6e>
 801019e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80101a2:	2a39      	cmp	r2, #57	; 0x39
 80101a4:	46a0      	mov	r8, r4
 80101a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80101aa:	d106      	bne.n	80101ba <_dtoa_r+0x6ba>
 80101ac:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80101b0:	46a0      	mov	r8, r4
 80101b2:	2a39      	cmp	r2, #57	; 0x39
 80101b4:	f108 34ff 	add.w	r4, r8, #4294967295
 80101b8:	d0ee      	beq.n	8010198 <_dtoa_r+0x698>
 80101ba:	3201      	adds	r2, #1
 80101bc:	7022      	strb	r2, [r4, #0]
 80101be:	4648      	mov	r0, r9
 80101c0:	4639      	mov	r1, r7
 80101c2:	f001 fceb 	bl	8011b9c <_Bfree>
 80101c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101c8:	2a00      	cmp	r2, #0
 80101ca:	f43f aeb3 	beq.w	800ff34 <_dtoa_r+0x434>
 80101ce:	2d00      	cmp	r5, #0
 80101d0:	f000 82e4 	beq.w	801079c <_dtoa_r+0xc9c>
 80101d4:	4295      	cmp	r5, r2
 80101d6:	f000 82e1 	beq.w	801079c <_dtoa_r+0xc9c>
 80101da:	4648      	mov	r0, r9
 80101dc:	4629      	mov	r1, r5
 80101de:	f001 fcdd 	bl	8011b9c <_Bfree>
 80101e2:	e2db      	b.n	801079c <_dtoa_r+0xc9c>
 80101e4:	2201      	movs	r2, #1
 80101e6:	9212      	str	r2, [sp, #72]	; 0x48
 80101e8:	e54e      	b.n	800fc88 <_dtoa_r+0x188>
 80101ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ec:	f7fb f9b4 	bl	800b558 <__aeabi_i2d>
 80101f0:	4622      	mov	r2, r4
 80101f2:	462b      	mov	r3, r5
 80101f4:	f7fb fc7e 	bl	800baf4 <__aeabi_dcmpeq>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	f47f ad30 	bne.w	800fc5e <_dtoa_r+0x15e>
 80101fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010200:	1e4b      	subs	r3, r1, #1
 8010202:	9309      	str	r3, [sp, #36]	; 0x24
 8010204:	e52b      	b.n	800fc5e <_dtoa_r+0x15e>
 8010206:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801020a:	2400      	movs	r4, #0
 801020c:	1ae8      	subs	r0, r5, r3
 801020e:	425a      	negs	r2, r3
 8010210:	900e      	str	r0, [sp, #56]	; 0x38
 8010212:	9210      	str	r2, [sp, #64]	; 0x40
 8010214:	9411      	str	r4, [sp, #68]	; 0x44
 8010216:	e548      	b.n	800fcaa <_dtoa_r+0x1aa>
 8010218:	4276      	negs	r6, r6
 801021a:	2200      	movs	r2, #0
 801021c:	960e      	str	r6, [sp, #56]	; 0x38
 801021e:	920a      	str	r2, [sp, #40]	; 0x28
 8010220:	e539      	b.n	800fc96 <_dtoa_r+0x196>
 8010222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010224:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010226:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010228:	930d      	str	r3, [sp, #52]	; 0x34
 801022a:	e6e6      	b.n	800fffa <_dtoa_r+0x4fa>
 801022c:	201c      	movs	r0, #28
 801022e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010230:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8010234:	180b      	adds	r3, r1, r0
 8010236:	eb08 0c00 	add.w	ip, r8, r0
 801023a:	930e      	str	r3, [sp, #56]	; 0x38
 801023c:	1824      	adds	r4, r4, r0
 801023e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8010242:	e738      	b.n	80100b6 <_dtoa_r+0x5b6>
 8010244:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8010248:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 801024c:	1b84      	subs	r4, r0, r6
 801024e:	fa0a f004 	lsl.w	r0, sl, r4
 8010252:	e4cf      	b.n	800fbf4 <_dtoa_r+0xf4>
 8010254:	9012      	str	r0, [sp, #72]	; 0x48
 8010256:	e517      	b.n	800fc88 <_dtoa_r+0x188>
 8010258:	2c00      	cmp	r4, #0
 801025a:	dd05      	ble.n	8010268 <_dtoa_r+0x768>
 801025c:	4648      	mov	r0, r9
 801025e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010260:	4622      	mov	r2, r4
 8010262:	f001 ff29 	bl	80120b8 <__lshift>
 8010266:	900d      	str	r0, [sp, #52]	; 0x34
 8010268:	2d00      	cmp	r5, #0
 801026a:	f040 8402 	bne.w	8010a72 <_dtoa_r+0xf72>
 801026e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010270:	9d05      	ldr	r5, [sp, #20]
 8010272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010274:	9a05      	ldr	r2, [sp, #20]
 8010276:	186b      	adds	r3, r5, r1
 8010278:	f00a 0001 	and.w	r0, sl, #1
 801027c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801027e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010282:	930a      	str	r3, [sp, #40]	; 0x28
 8010284:	1c54      	adds	r4, r2, #1
 8010286:	900b      	str	r0, [sp, #44]	; 0x2c
 8010288:	4639      	mov	r1, r7
 801028a:	4650      	mov	r0, sl
 801028c:	f7ff fac0 	bl	800f810 <quorem>
 8010290:	4629      	mov	r1, r5
 8010292:	4680      	mov	r8, r0
 8010294:	4650      	mov	r0, sl
 8010296:	f001 ffd3 	bl	8012240 <__mcmp>
 801029a:	4639      	mov	r1, r7
 801029c:	4632      	mov	r2, r6
 801029e:	4683      	mov	fp, r0
 80102a0:	4648      	mov	r0, r9
 80102a2:	f001 fffb 	bl	801229c <__mdiff>
 80102a6:	68c3      	ldr	r3, [r0, #12]
 80102a8:	1e61      	subs	r1, r4, #1
 80102aa:	4602      	mov	r2, r0
 80102ac:	9108      	str	r1, [sp, #32]
 80102ae:	f108 0c30 	add.w	ip, r8, #48	; 0x30
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 8287 	beq.w	80107c6 <_dtoa_r+0xcc6>
 80102b8:	4648      	mov	r0, r9
 80102ba:	4611      	mov	r1, r2
 80102bc:	f8cd c00c 	str.w	ip, [sp, #12]
 80102c0:	f001 fc6c 	bl	8011b9c <_Bfree>
 80102c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80102c8:	2001      	movs	r0, #1
 80102ca:	f1bb 0f00 	cmp.w	fp, #0
 80102ce:	f2c0 8378 	blt.w	80109c2 <_dtoa_r+0xec2>
 80102d2:	d105      	bne.n	80102e0 <_dtoa_r+0x7e0>
 80102d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80102d6:	b91a      	cbnz	r2, 80102e0 <_dtoa_r+0x7e0>
 80102d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80102da:	2900      	cmp	r1, #0
 80102dc:	f000 8371 	beq.w	80109c2 <_dtoa_r+0xec2>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	f300 83de 	bgt.w	8010aa2 <_dtoa_r+0xfa2>
 80102e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80102e8:	f804 cc01 	strb.w	ip, [r4, #-1]
 80102ec:	4284      	cmp	r4, r0
 80102ee:	46a0      	mov	r8, r4
 80102f0:	f000 83e6 	beq.w	8010ac0 <_dtoa_r+0xfc0>
 80102f4:	4651      	mov	r1, sl
 80102f6:	220a      	movs	r2, #10
 80102f8:	2300      	movs	r3, #0
 80102fa:	4648      	mov	r0, r9
 80102fc:	f001 fc58 	bl	8011bb0 <__multadd>
 8010300:	42b5      	cmp	r5, r6
 8010302:	4682      	mov	sl, r0
 8010304:	f000 828e 	beq.w	8010824 <_dtoa_r+0xd24>
 8010308:	4629      	mov	r1, r5
 801030a:	220a      	movs	r2, #10
 801030c:	2300      	movs	r3, #0
 801030e:	4648      	mov	r0, r9
 8010310:	f001 fc4e 	bl	8011bb0 <__multadd>
 8010314:	4631      	mov	r1, r6
 8010316:	4605      	mov	r5, r0
 8010318:	220a      	movs	r2, #10
 801031a:	4648      	mov	r0, r9
 801031c:	2300      	movs	r3, #0
 801031e:	f001 fc47 	bl	8011bb0 <__multadd>
 8010322:	3401      	adds	r4, #1
 8010324:	4606      	mov	r6, r0
 8010326:	e7af      	b.n	8010288 <_dtoa_r+0x788>
 8010328:	f1ba 0f00 	cmp.w	sl, #0
 801032c:	f47f aea6 	bne.w	801007c <_dtoa_r+0x57c>
 8010330:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8010334:	465b      	mov	r3, fp
 8010336:	2a00      	cmp	r2, #0
 8010338:	f040 8494 	bne.w	8010c64 <_dtoa_r+0x1164>
 801033c:	2500      	movs	r5, #0
 801033e:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 8010342:	401d      	ands	r5, r3
 8010344:	2d00      	cmp	r5, #0
 8010346:	f43f ae9a 	beq.w	801007e <_dtoa_r+0x57e>
 801034a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801034c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801034e:	1c41      	adds	r1, r0, #1
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	910e      	str	r1, [sp, #56]	; 0x38
 8010354:	920a      	str	r2, [sp, #40]	; 0x28
 8010356:	2501      	movs	r5, #1
 8010358:	e691      	b.n	801007e <_dtoa_r+0x57e>
 801035a:	2101      	movs	r1, #1
 801035c:	910f      	str	r1, [sp, #60]	; 0x3c
 801035e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010360:	2b00      	cmp	r3, #0
 8010362:	f340 8329 	ble.w	80109b8 <_dtoa_r+0xeb8>
 8010366:	461c      	mov	r4, r3
 8010368:	9313      	str	r3, [sp, #76]	; 0x4c
 801036a:	930b      	str	r3, [sp, #44]	; 0x2c
 801036c:	2100      	movs	r1, #0
 801036e:	2c17      	cmp	r4, #23
 8010370:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8010374:	d90a      	bls.n	801038c <_dtoa_r+0x88c>
 8010376:	2201      	movs	r2, #1
 8010378:	2304      	movs	r3, #4
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	f103 0014 	add.w	r0, r3, #20
 8010380:	4611      	mov	r1, r2
 8010382:	3201      	adds	r2, #1
 8010384:	42a0      	cmp	r0, r4
 8010386:	d9f8      	bls.n	801037a <_dtoa_r+0x87a>
 8010388:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 801038c:	4648      	mov	r0, r9
 801038e:	f001 fbdf 	bl	8011b50 <_Balloc>
 8010392:	2c0e      	cmp	r4, #14
 8010394:	9005      	str	r0, [sp, #20]
 8010396:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 801039a:	f63f acc8 	bhi.w	800fd2e <_dtoa_r+0x22e>
 801039e:	2d00      	cmp	r5, #0
 80103a0:	f43f acc5 	beq.w	800fd2e <_dtoa_r+0x22e>
 80103a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80103a6:	2f00      	cmp	r7, #0
 80103a8:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80103ac:	f340 833d 	ble.w	8010a2a <_dtoa_r+0xf2a>
 80103b0:	4899      	ldr	r0, [pc, #612]	; (8010618 <_dtoa_r+0xb18>)
 80103b2:	f007 060f 	and.w	r6, r7, #15
 80103b6:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 80103ba:	113e      	asrs	r6, r7, #4
 80103bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80103c0:	06f1      	lsls	r1, r6, #27
 80103c2:	f140 82f5 	bpl.w	80109b0 <_dtoa_r+0xeb0>
 80103c6:	4f95      	ldr	r7, [pc, #596]	; (801061c <_dtoa_r+0xb1c>)
 80103c8:	4650      	mov	r0, sl
 80103ca:	4659      	mov	r1, fp
 80103cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80103d0:	f7fb fa52 	bl	800b878 <__aeabi_ddiv>
 80103d4:	f006 060f 	and.w	r6, r6, #15
 80103d8:	4682      	mov	sl, r0
 80103da:	468b      	mov	fp, r1
 80103dc:	2703      	movs	r7, #3
 80103de:	b186      	cbz	r6, 8010402 <_dtoa_r+0x902>
 80103e0:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801061c <_dtoa_r+0xb1c>
 80103e4:	4620      	mov	r0, r4
 80103e6:	4629      	mov	r1, r5
 80103e8:	07f2      	lsls	r2, r6, #31
 80103ea:	d504      	bpl.n	80103f6 <_dtoa_r+0x8f6>
 80103ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80103f0:	f7fb f918 	bl	800b624 <__aeabi_dmul>
 80103f4:	3701      	adds	r7, #1
 80103f6:	1076      	asrs	r6, r6, #1
 80103f8:	f108 0808 	add.w	r8, r8, #8
 80103fc:	d1f4      	bne.n	80103e8 <_dtoa_r+0x8e8>
 80103fe:	4604      	mov	r4, r0
 8010400:	460d      	mov	r5, r1
 8010402:	4650      	mov	r0, sl
 8010404:	4659      	mov	r1, fp
 8010406:	4622      	mov	r2, r4
 8010408:	462b      	mov	r3, r5
 801040a:	f7fb fa35 	bl	800b878 <__aeabi_ddiv>
 801040e:	4682      	mov	sl, r0
 8010410:	468b      	mov	fp, r1
 8010412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010414:	b153      	cbz	r3, 801042c <_dtoa_r+0x92c>
 8010416:	2300      	movs	r3, #0
 8010418:	4650      	mov	r0, sl
 801041a:	4659      	mov	r1, fp
 801041c:	2200      	movs	r2, #0
 801041e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8010422:	f7fb fb71 	bl	800bb08 <__aeabi_dcmplt>
 8010426:	2800      	cmp	r0, #0
 8010428:	f040 8424 	bne.w	8010c74 <_dtoa_r+0x1174>
 801042c:	4638      	mov	r0, r7
 801042e:	f7fb f893 	bl	800b558 <__aeabi_i2d>
 8010432:	4652      	mov	r2, sl
 8010434:	465b      	mov	r3, fp
 8010436:	f7fb f8f5 	bl	800b624 <__aeabi_dmul>
 801043a:	2300      	movs	r3, #0
 801043c:	2200      	movs	r2, #0
 801043e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010442:	f7fa ff3d 	bl	800b2c0 <__adddf3>
 8010446:	4604      	mov	r4, r0
 8010448:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801044a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801044e:	2800      	cmp	r0, #0
 8010450:	f000 8275 	beq.w	801093e <_dtoa_r+0xe3e>
 8010454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010456:	961b      	str	r6, [sp, #108]	; 0x6c
 8010458:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801045a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801045c:	2900      	cmp	r1, #0
 801045e:	f000 8338 	beq.w	8010ad2 <_dtoa_r+0xfd2>
 8010462:	4a6d      	ldr	r2, [pc, #436]	; (8010618 <_dtoa_r+0xb18>)
 8010464:	2100      	movs	r1, #0
 8010466:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 801046a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801046e:	2000      	movs	r0, #0
 8010470:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8010474:	f7fb fa00 	bl	800b878 <__aeabi_ddiv>
 8010478:	462b      	mov	r3, r5
 801047a:	4622      	mov	r2, r4
 801047c:	f7fa ff1e 	bl	800b2bc <__aeabi_dsub>
 8010480:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8010484:	4659      	mov	r1, fp
 8010486:	4650      	mov	r0, sl
 8010488:	f7fb fb66 	bl	800bb58 <__aeabi_d2iz>
 801048c:	4605      	mov	r5, r0
 801048e:	f7fb f863 	bl	800b558 <__aeabi_i2d>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	4650      	mov	r0, sl
 8010498:	4659      	mov	r1, fp
 801049a:	f7fa ff0f 	bl	800b2bc <__aeabi_dsub>
 801049e:	3530      	adds	r5, #48	; 0x30
 80104a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80104a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80104a8:	fa5f fb85 	uxtb.w	fp, r5
 80104ac:	f808 bb01 	strb.w	fp, [r8], #1
 80104b0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80104b4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80104b8:	f7fb fb44 	bl	800bb44 <__aeabi_dcmpgt>
 80104bc:	2800      	cmp	r0, #0
 80104be:	f040 841d 	bne.w	8010cfc <_dtoa_r+0x11fc>
 80104c2:	2100      	movs	r1, #0
 80104c4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80104c8:	2000      	movs	r0, #0
 80104ca:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80104ce:	f7fa fef5 	bl	800b2bc <__aeabi_dsub>
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80104da:	f7fb fb33 	bl	800bb44 <__aeabi_dcmpgt>
 80104de:	2800      	cmp	r0, #0
 80104e0:	f040 8431 	bne.w	8010d46 <_dtoa_r+0x1246>
 80104e4:	2e01      	cmp	r6, #1
 80104e6:	f340 829c 	ble.w	8010a22 <_dtoa_r+0xf22>
 80104ea:	9905      	ldr	r1, [sp, #20]
 80104ec:	ea6f 0708 	mvn.w	r7, r8
 80104f0:	198e      	adds	r6, r1, r6
 80104f2:	19bc      	adds	r4, r7, r6
 80104f4:	2300      	movs	r3, #0
 80104f6:	f004 0501 	and.w	r5, r4, #1
 80104fa:	2200      	movs	r2, #0
 80104fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010500:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010504:	961a      	str	r6, [sp, #104]	; 0x68
 8010506:	9518      	str	r5, [sp, #96]	; 0x60
 8010508:	f7fb f88c 	bl	800b624 <__aeabi_dmul>
 801050c:	2300      	movs	r3, #0
 801050e:	2200      	movs	r2, #0
 8010510:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010514:	4604      	mov	r4, r0
 8010516:	460d      	mov	r5, r1
 8010518:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801051c:	f7fb f882 	bl	800b624 <__aeabi_dmul>
 8010520:	460f      	mov	r7, r1
 8010522:	4606      	mov	r6, r0
 8010524:	f7fb fb18 	bl	800bb58 <__aeabi_d2iz>
 8010528:	4683      	mov	fp, r0
 801052a:	f7fb f815 	bl	800b558 <__aeabi_i2d>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	4630      	mov	r0, r6
 8010534:	4639      	mov	r1, r7
 8010536:	f7fa fec1 	bl	800b2bc <__aeabi_dsub>
 801053a:	46c2      	mov	sl, r8
 801053c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8010540:	fa5f fb82 	uxtb.w	fp, r2
 8010544:	f80a bb01 	strb.w	fp, [sl], #1
 8010548:	4622      	mov	r2, r4
 801054a:	462b      	mov	r3, r5
 801054c:	4606      	mov	r6, r0
 801054e:	460f      	mov	r7, r1
 8010550:	46d0      	mov	r8, sl
 8010552:	f7fb fad9 	bl	800bb08 <__aeabi_dcmplt>
 8010556:	2800      	cmp	r0, #0
 8010558:	f040 80e2 	bne.w	8010720 <_dtoa_r+0xc20>
 801055c:	2100      	movs	r1, #0
 801055e:	4632      	mov	r2, r6
 8010560:	463b      	mov	r3, r7
 8010562:	2000      	movs	r0, #0
 8010564:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8010568:	f7fa fea8 	bl	800b2bc <__aeabi_dsub>
 801056c:	4622      	mov	r2, r4
 801056e:	462b      	mov	r3, r5
 8010570:	f7fb faca 	bl	800bb08 <__aeabi_dcmplt>
 8010574:	2800      	cmp	r0, #0
 8010576:	f040 83c7 	bne.w	8010d08 <_dtoa_r+0x1208>
 801057a:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 801057e:	45f2      	cmp	sl, lr
 8010580:	f000 824f 	beq.w	8010a22 <_dtoa_r+0xf22>
 8010584:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010586:	2800      	cmp	r0, #0
 8010588:	d041      	beq.n	801060e <_dtoa_r+0xb0e>
 801058a:	2300      	movs	r3, #0
 801058c:	2200      	movs	r2, #0
 801058e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010592:	4620      	mov	r0, r4
 8010594:	4629      	mov	r1, r5
 8010596:	f7fb f845 	bl	800b624 <__aeabi_dmul>
 801059a:	2300      	movs	r3, #0
 801059c:	2200      	movs	r2, #0
 801059e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80105a2:	4604      	mov	r4, r0
 80105a4:	460d      	mov	r5, r1
 80105a6:	4630      	mov	r0, r6
 80105a8:	4639      	mov	r1, r7
 80105aa:	f7fb f83b 	bl	800b624 <__aeabi_dmul>
 80105ae:	460f      	mov	r7, r1
 80105b0:	4606      	mov	r6, r0
 80105b2:	f7fb fad1 	bl	800bb58 <__aeabi_d2iz>
 80105b6:	4680      	mov	r8, r0
 80105b8:	f7fa ffce 	bl	800b558 <__aeabi_i2d>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	4630      	mov	r0, r6
 80105c2:	4639      	mov	r1, r7
 80105c4:	f7fa fe7a 	bl	800b2bc <__aeabi_dsub>
 80105c8:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80105cc:	fa5f fb83 	uxtb.w	fp, r3
 80105d0:	f80a bb01 	strb.w	fp, [sl], #1
 80105d4:	4622      	mov	r2, r4
 80105d6:	462b      	mov	r3, r5
 80105d8:	4606      	mov	r6, r0
 80105da:	460f      	mov	r7, r1
 80105dc:	46d0      	mov	r8, sl
 80105de:	f7fb fa93 	bl	800bb08 <__aeabi_dcmplt>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	f040 809c 	bne.w	8010720 <_dtoa_r+0xc20>
 80105e8:	2100      	movs	r1, #0
 80105ea:	4632      	mov	r2, r6
 80105ec:	463b      	mov	r3, r7
 80105ee:	2000      	movs	r0, #0
 80105f0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80105f4:	f7fa fe62 	bl	800b2bc <__aeabi_dsub>
 80105f8:	4622      	mov	r2, r4
 80105fa:	462b      	mov	r3, r5
 80105fc:	f7fb fa84 	bl	800bb08 <__aeabi_dcmplt>
 8010600:	2800      	cmp	r0, #0
 8010602:	f040 8381 	bne.w	8010d08 <_dtoa_r+0x1208>
 8010606:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010608:	458a      	cmp	sl, r1
 801060a:	f000 820a 	beq.w	8010a22 <_dtoa_r+0xf22>
 801060e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8010612:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010616:	e050      	b.n	80106ba <_dtoa_r+0xbba>
 8010618:	080135d8 	.word	0x080135d8
 801061c:	080136a0 	.word	0x080136a0
 8010620:	2100      	movs	r1, #0
 8010622:	2000      	movs	r0, #0
 8010624:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8010628:	f7fa fe48 	bl	800b2bc <__aeabi_dsub>
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	f7fb fa6a 	bl	800bb08 <__aeabi_dcmplt>
 8010634:	2300      	movs	r3, #0
 8010636:	2200      	movs	r2, #0
 8010638:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801063c:	2800      	cmp	r0, #0
 801063e:	f040 8361 	bne.w	8010d04 <_dtoa_r+0x1204>
 8010642:	4620      	mov	r0, r4
 8010644:	4629      	mov	r1, r5
 8010646:	f7fa ffed 	bl	800b624 <__aeabi_dmul>
 801064a:	2300      	movs	r3, #0
 801064c:	2200      	movs	r2, #0
 801064e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010652:	4604      	mov	r4, r0
 8010654:	460d      	mov	r5, r1
 8010656:	4630      	mov	r0, r6
 8010658:	4639      	mov	r1, r7
 801065a:	f7fa ffe3 	bl	800b624 <__aeabi_dmul>
 801065e:	460f      	mov	r7, r1
 8010660:	4606      	mov	r6, r0
 8010662:	f7fb fa79 	bl	800bb58 <__aeabi_d2iz>
 8010666:	4680      	mov	r8, r0
 8010668:	f7fa ff76 	bl	800b558 <__aeabi_i2d>
 801066c:	4602      	mov	r2, r0
 801066e:	460b      	mov	r3, r1
 8010670:	4630      	mov	r0, r6
 8010672:	4639      	mov	r1, r7
 8010674:	f7fa fe22 	bl	800b2bc <__aeabi_dsub>
 8010678:	f108 0330 	add.w	r3, r8, #48	; 0x30
 801067c:	fa5f fb83 	uxtb.w	fp, r3
 8010680:	f80a bb01 	strb.w	fp, [sl], #1
 8010684:	4622      	mov	r2, r4
 8010686:	462b      	mov	r3, r5
 8010688:	4606      	mov	r6, r0
 801068a:	460f      	mov	r7, r1
 801068c:	f7fb fa3c 	bl	800bb08 <__aeabi_dcmplt>
 8010690:	46d0      	mov	r8, sl
 8010692:	4632      	mov	r2, r6
 8010694:	463b      	mov	r3, r7
 8010696:	2800      	cmp	r0, #0
 8010698:	d140      	bne.n	801071c <_dtoa_r+0xc1c>
 801069a:	2100      	movs	r1, #0
 801069c:	2000      	movs	r0, #0
 801069e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80106a2:	f7fa fe0b 	bl	800b2bc <__aeabi_dsub>
 80106a6:	4622      	mov	r2, r4
 80106a8:	462b      	mov	r3, r5
 80106aa:	f7fb fa2d 	bl	800bb08 <__aeabi_dcmplt>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f040 8328 	bne.w	8010d04 <_dtoa_r+0x1204>
 80106b4:	45ca      	cmp	sl, r9
 80106b6:	f000 81b2 	beq.w	8010a1e <_dtoa_r+0xf1e>
 80106ba:	2300      	movs	r3, #0
 80106bc:	4620      	mov	r0, r4
 80106be:	4629      	mov	r1, r5
 80106c0:	2200      	movs	r2, #0
 80106c2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80106c6:	f7fa ffad 	bl	800b624 <__aeabi_dmul>
 80106ca:	2300      	movs	r3, #0
 80106cc:	2200      	movs	r2, #0
 80106ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80106d2:	4604      	mov	r4, r0
 80106d4:	460d      	mov	r5, r1
 80106d6:	4630      	mov	r0, r6
 80106d8:	4639      	mov	r1, r7
 80106da:	f7fa ffa3 	bl	800b624 <__aeabi_dmul>
 80106de:	460f      	mov	r7, r1
 80106e0:	4606      	mov	r6, r0
 80106e2:	f7fb fa39 	bl	800bb58 <__aeabi_d2iz>
 80106e6:	4683      	mov	fp, r0
 80106e8:	f7fa ff36 	bl	800b558 <__aeabi_i2d>
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	4630      	mov	r0, r6
 80106f2:	4639      	mov	r1, r7
 80106f4:	f7fa fde2 	bl	800b2bc <__aeabi_dsub>
 80106f8:	46d0      	mov	r8, sl
 80106fa:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 80106fe:	fa5f fb82 	uxtb.w	fp, r2
 8010702:	f808 bb01 	strb.w	fp, [r8], #1
 8010706:	4622      	mov	r2, r4
 8010708:	462b      	mov	r3, r5
 801070a:	4606      	mov	r6, r0
 801070c:	460f      	mov	r7, r1
 801070e:	f7fb f9fb 	bl	800bb08 <__aeabi_dcmplt>
 8010712:	46c2      	mov	sl, r8
 8010714:	4632      	mov	r2, r6
 8010716:	463b      	mov	r3, r7
 8010718:	2800      	cmp	r0, #0
 801071a:	d081      	beq.n	8010620 <_dtoa_r+0xb20>
 801071c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010720:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010722:	9109      	str	r1, [sp, #36]	; 0x24
 8010724:	e406      	b.n	800ff34 <_dtoa_r+0x434>
 8010726:	2000      	movs	r0, #0
 8010728:	900f      	str	r0, [sp, #60]	; 0x3c
 801072a:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 801072e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010730:	eb0e 0200 	add.w	r2, lr, r0
 8010734:	1c54      	adds	r4, r2, #1
 8010736:	2c00      	cmp	r4, #0
 8010738:	9213      	str	r2, [sp, #76]	; 0x4c
 801073a:	940b      	str	r4, [sp, #44]	; 0x2c
 801073c:	f73f ae16 	bgt.w	801036c <_dtoa_r+0x86c>
 8010740:	2100      	movs	r1, #0
 8010742:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8010746:	e621      	b.n	801038c <_dtoa_r+0x88c>
 8010748:	2101      	movs	r1, #1
 801074a:	910f      	str	r1, [sp, #60]	; 0x3c
 801074c:	e7ed      	b.n	801072a <_dtoa_r+0xc2a>
 801074e:	2200      	movs	r2, #0
 8010750:	920f      	str	r2, [sp, #60]	; 0x3c
 8010752:	e604      	b.n	801035e <_dtoa_r+0x85e>
 8010754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010756:	2900      	cmp	r1, #0
 8010758:	f73f aafc 	bgt.w	800fd54 <_dtoa_r+0x254>
 801075c:	f040 82ee 	bne.w	8010d3c <_dtoa_r+0x123c>
 8010760:	2300      	movs	r3, #0
 8010762:	2200      	movs	r2, #0
 8010764:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8010768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801076c:	f7fa ff5a 	bl	800b624 <__aeabi_dmul>
 8010770:	4652      	mov	r2, sl
 8010772:	465b      	mov	r3, fp
 8010774:	f7fb f9dc 	bl	800bb30 <__aeabi_dcmpge>
 8010778:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801077a:	970d      	str	r7, [sp, #52]	; 0x34
 801077c:	2800      	cmp	r0, #0
 801077e:	f000 80b7 	beq.w	80108f0 <_dtoa_r+0xdf0>
 8010782:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010784:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010788:	43c1      	mvns	r1, r0
 801078a:	9109      	str	r1, [sp, #36]	; 0x24
 801078c:	4648      	mov	r0, r9
 801078e:	4639      	mov	r1, r7
 8010790:	f001 fa04 	bl	8011b9c <_Bfree>
 8010794:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010796:	2c00      	cmp	r4, #0
 8010798:	f43f abcc 	beq.w	800ff34 <_dtoa_r+0x434>
 801079c:	4648      	mov	r0, r9
 801079e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107a0:	f001 f9fc 	bl	8011b9c <_Bfree>
 80107a4:	f7ff bbc6 	b.w	800ff34 <_dtoa_r+0x434>
 80107a8:	4648      	mov	r0, r9
 80107aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80107ac:	f001 fc3a 	bl	8012024 <__pow5mult>
 80107b0:	900c      	str	r0, [sp, #48]	; 0x30
 80107b2:	e451      	b.n	8010058 <_dtoa_r+0x558>
 80107b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107b6:	2a00      	cmp	r2, #0
 80107b8:	f000 824d 	beq.w	8010c56 <_dtoa_r+0x1156>
 80107bc:	f201 4733 	addw	r7, r1, #1075	; 0x433
 80107c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80107c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80107c4:	e40b      	b.n	800ffde <_dtoa_r+0x4de>
 80107c6:	4611      	mov	r1, r2
 80107c8:	4650      	mov	r0, sl
 80107ca:	f8cd c00c 	str.w	ip, [sp, #12]
 80107ce:	9204      	str	r2, [sp, #16]
 80107d0:	f001 fd36 	bl	8012240 <__mcmp>
 80107d4:	9a04      	ldr	r2, [sp, #16]
 80107d6:	4603      	mov	r3, r0
 80107d8:	4611      	mov	r1, r2
 80107da:	4648      	mov	r0, r9
 80107dc:	9304      	str	r3, [sp, #16]
 80107de:	f001 f9dd 	bl	8011b9c <_Bfree>
 80107e2:	9804      	ldr	r0, [sp, #16]
 80107e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80107e8:	2800      	cmp	r0, #0
 80107ea:	f47f ad6e 	bne.w	80102ca <_dtoa_r+0x7ca>
 80107ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80107f0:	2900      	cmp	r1, #0
 80107f2:	f47f ad6a 	bne.w	80102ca <_dtoa_r+0x7ca>
 80107f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f47f ad66 	bne.w	80102ca <_dtoa_r+0x7ca>
 80107fe:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8010802:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010806:	46da      	mov	sl, fp
 8010808:	46e3      	mov	fp, ip
 801080a:	f000 80f2 	beq.w	80109f2 <_dtoa_r+0xef2>
 801080e:	f1ba 0f00 	cmp.w	sl, #0
 8010812:	dd01      	ble.n	8010818 <_dtoa_r+0xd18>
 8010814:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 8010818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801081c:	960d      	str	r6, [sp, #52]	; 0x34
 801081e:	f808 bb01 	strb.w	fp, [r8], #1
 8010822:	e4cc      	b.n	80101be <_dtoa_r+0x6be>
 8010824:	4629      	mov	r1, r5
 8010826:	4648      	mov	r0, r9
 8010828:	220a      	movs	r2, #10
 801082a:	2300      	movs	r3, #0
 801082c:	f001 f9c0 	bl	8011bb0 <__multadd>
 8010830:	3401      	adds	r4, #1
 8010832:	4605      	mov	r5, r0
 8010834:	4606      	mov	r6, r0
 8010836:	e527      	b.n	8010288 <_dtoa_r+0x788>
 8010838:	980c      	ldr	r0, [sp, #48]	; 0x30
 801083a:	4639      	mov	r1, r7
 801083c:	f7fe ffe8 	bl	800f810 <quorem>
 8010840:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8010844:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010846:	9b05      	ldr	r3, [sp, #20]
 8010848:	2501      	movs	r5, #1
 801084a:	42a8      	cmp	r0, r5
 801084c:	f883 b000 	strb.w	fp, [r3]
 8010850:	f77f ac79 	ble.w	8010146 <_dtoa_r+0x646>
 8010854:	4648      	mov	r0, r9
 8010856:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801085a:	220a      	movs	r2, #10
 801085c:	f001 f9a8 	bl	8011bb0 <__multadd>
 8010860:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010864:	900c      	str	r0, [sp, #48]	; 0x30
 8010866:	4606      	mov	r6, r0
 8010868:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801086c:	e45b      	b.n	8010126 <_dtoa_r+0x626>
 801086e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010870:	9c05      	ldr	r4, [sp, #20]
 8010872:	1c43      	adds	r3, r0, #1
 8010874:	2131      	movs	r1, #49	; 0x31
 8010876:	9309      	str	r3, [sp, #36]	; 0x24
 8010878:	7021      	strb	r1, [r4, #0]
 801087a:	e4a0      	b.n	80101be <_dtoa_r+0x6be>
 801087c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801087e:	4639      	mov	r1, r7
 8010880:	f001 fcde 	bl	8012240 <__mcmp>
 8010884:	2800      	cmp	r0, #0
 8010886:	f6bf ac2b 	bge.w	80100e0 <_dtoa_r+0x5e0>
 801088a:	220a      	movs	r2, #10
 801088c:	4648      	mov	r0, r9
 801088e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010890:	2300      	movs	r3, #0
 8010892:	f001 f98d 	bl	8011bb0 <__multadd>
 8010896:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801089a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801089c:	900c      	str	r0, [sp, #48]	; 0x30
 801089e:	f10c 3eff 	add.w	lr, ip, #4294967295
 80108a2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80108a6:	2a00      	cmp	r2, #0
 80108a8:	f040 823d 	bne.w	8010d26 <_dtoa_r+0x1226>
 80108ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80108ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80108b0:	e416      	b.n	80100e0 <_dtoa_r+0x5e0>
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80108b8:	6910      	ldr	r0, [r2, #16]
 80108ba:	f001 f9f5 	bl	8011ca8 <__hi0bits>
 80108be:	f1c0 0120 	rsb	r1, r0, #32
 80108c2:	f7ff bbe1 	b.w	8010088 <_dtoa_r+0x588>
 80108c6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80108c8:	2a02      	cmp	r2, #2
 80108ca:	f77f ac0d 	ble.w	80100e8 <_dtoa_r+0x5e8>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	f47f af57 	bne.w	8010782 <_dtoa_r+0xc82>
 80108d4:	4639      	mov	r1, r7
 80108d6:	2205      	movs	r2, #5
 80108d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108da:	4648      	mov	r0, r9
 80108dc:	f001 f968 	bl	8011bb0 <__multadd>
 80108e0:	4607      	mov	r7, r0
 80108e2:	4639      	mov	r1, r7
 80108e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80108e6:	f001 fcab 	bl	8012240 <__mcmp>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	f77f af49 	ble.w	8010782 <_dtoa_r+0xc82>
 80108f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108f2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80108f6:	2531      	movs	r5, #49	; 0x31
 80108f8:	1c53      	adds	r3, r2, #1
 80108fa:	f808 5b01 	strb.w	r5, [r8], #1
 80108fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010900:	e744      	b.n	801078c <_dtoa_r+0xc8c>
 8010902:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8010906:	f108 31ff 	add.w	r1, r8, #4294967295
 801090a:	f47f ab0f 	bne.w	800ff2c <_dtoa_r+0x42c>
 801090e:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8010912:	9c05      	ldr	r4, [sp, #20]
 8010914:	4688      	mov	r8, r1
 8010916:	f7ff baf1 	b.w	800fefc <_dtoa_r+0x3fc>
 801091a:	4638      	mov	r0, r7
 801091c:	f7fa fe1c 	bl	800b558 <__aeabi_i2d>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	4650      	mov	r0, sl
 8010926:	4659      	mov	r1, fp
 8010928:	f7fa fe7c 	bl	800b624 <__aeabi_dmul>
 801092c:	2300      	movs	r3, #0
 801092e:	2200      	movs	r2, #0
 8010930:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010934:	f7fa fcc4 	bl	800b2c0 <__adddf3>
 8010938:	4604      	mov	r4, r0
 801093a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801093e:	2300      	movs	r3, #0
 8010940:	2200      	movs	r2, #0
 8010942:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8010946:	4650      	mov	r0, sl
 8010948:	4659      	mov	r1, fp
 801094a:	f7fa fcb7 	bl	800b2bc <__aeabi_dsub>
 801094e:	4622      	mov	r2, r4
 8010950:	462b      	mov	r3, r5
 8010952:	4682      	mov	sl, r0
 8010954:	468b      	mov	fp, r1
 8010956:	f7fb f8f5 	bl	800bb44 <__aeabi_dcmpgt>
 801095a:	4607      	mov	r7, r0
 801095c:	2800      	cmp	r0, #0
 801095e:	f040 80b5 	bne.w	8010acc <_dtoa_r+0xfcc>
 8010962:	4622      	mov	r2, r4
 8010964:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010968:	4650      	mov	r0, sl
 801096a:	4659      	mov	r1, fp
 801096c:	f7fb f8cc 	bl	800bb08 <__aeabi_dcmplt>
 8010970:	2800      	cmp	r0, #0
 8010972:	d056      	beq.n	8010a22 <_dtoa_r+0xf22>
 8010974:	970d      	str	r7, [sp, #52]	; 0x34
 8010976:	e704      	b.n	8010782 <_dtoa_r+0xc82>
 8010978:	4648      	mov	r0, r9
 801097a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801097c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801097e:	f001 fb51 	bl	8012024 <__pow5mult>
 8010982:	900c      	str	r0, [sp, #48]	; 0x30
 8010984:	f7ff bb68 	b.w	8010058 <_dtoa_r+0x558>
 8010988:	9c05      	ldr	r4, [sp, #20]
 801098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801098c:	2130      	movs	r1, #48	; 0x30
 801098e:	7021      	strb	r1, [r4, #0]
 8010990:	4621      	mov	r1, r4
 8010992:	1c58      	adds	r0, r3, #1
 8010994:	2231      	movs	r2, #49	; 0x31
 8010996:	9009      	str	r0, [sp, #36]	; 0x24
 8010998:	700a      	strb	r2, [r1, #0]
 801099a:	f7ff bacb 	b.w	800ff34 <_dtoa_r+0x434>
 801099e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80109a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109a2:	9110      	str	r1, [sp, #64]	; 0x40
 80109a4:	1bcd      	subs	r5, r1, r7
 80109a6:	195c      	adds	r4, r3, r5
 80109a8:	9411      	str	r4, [sp, #68]	; 0x44
 80109aa:	2500      	movs	r5, #0
 80109ac:	f7ff bb11 	b.w	800ffd2 <_dtoa_r+0x4d2>
 80109b0:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 80109b4:	2702      	movs	r7, #2
 80109b6:	e512      	b.n	80103de <_dtoa_r+0x8de>
 80109b8:	2401      	movs	r4, #1
 80109ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80109bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80109be:	9429      	str	r4, [sp, #164]	; 0xa4
 80109c0:	e6be      	b.n	8010740 <_dtoa_r+0xc40>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	46e3      	mov	fp, ip
 80109c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80109ca:	4664      	mov	r4, ip
 80109cc:	f77f af24 	ble.w	8010818 <_dtoa_r+0xd18>
 80109d0:	2201      	movs	r2, #1
 80109d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109d4:	4648      	mov	r0, r9
 80109d6:	f001 fb6f 	bl	80120b8 <__lshift>
 80109da:	4639      	mov	r1, r7
 80109dc:	900c      	str	r0, [sp, #48]	; 0x30
 80109de:	f001 fc2f 	bl	8012240 <__mcmp>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	f340 8198 	ble.w	8010d18 <_dtoa_r+0x1218>
 80109e8:	2c39      	cmp	r4, #57	; 0x39
 80109ea:	f108 0b31 	add.w	fp, r8, #49	; 0x31
 80109ee:	f47f af13 	bne.w	8010818 <_dtoa_r+0xd18>
 80109f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109f6:	960d      	str	r6, [sp, #52]	; 0x34
 80109f8:	2239      	movs	r2, #57	; 0x39
 80109fa:	f808 2b01 	strb.w	r2, [r8], #1
 80109fe:	f7ff bbb9 	b.w	8010174 <_dtoa_r+0x674>
 8010a02:	d103      	bne.n	8010a0c <_dtoa_r+0xf0c>
 8010a04:	f01b 0f01 	tst.w	fp, #1
 8010a08:	f47f abb2 	bne.w	8010170 <_dtoa_r+0x670>
 8010a0c:	4643      	mov	r3, r8
 8010a0e:	4698      	mov	r8, r3
 8010a10:	3b01      	subs	r3, #1
 8010a12:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010a16:	2a30      	cmp	r2, #48	; 0x30
 8010a18:	d0f9      	beq.n	8010a0e <_dtoa_r+0xf0e>
 8010a1a:	f7ff bbd0 	b.w	80101be <_dtoa_r+0x6be>
 8010a1e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010a22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8010a26:	f7ff b982 	b.w	800fd2e <_dtoa_r+0x22e>
 8010a2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010a2c:	426c      	negs	r4, r5
 8010a2e:	2c00      	cmp	r4, #0
 8010a30:	f000 811b 	beq.w	8010c6a <_dtoa_r+0x116a>
 8010a34:	4bb6      	ldr	r3, [pc, #728]	; (8010d10 <_dtoa_r+0x1210>)
 8010a36:	f004 010f 	and.w	r1, r4, #15
 8010a3a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8010a3e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010a42:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8010a46:	f7fa fded 	bl	800b624 <__aeabi_dmul>
 8010a4a:	1124      	asrs	r4, r4, #4
 8010a4c:	4682      	mov	sl, r0
 8010a4e:	468b      	mov	fp, r1
 8010a50:	f000 8176 	beq.w	8010d40 <_dtoa_r+0x1240>
 8010a54:	4daf      	ldr	r5, [pc, #700]	; (8010d14 <_dtoa_r+0x1214>)
 8010a56:	2702      	movs	r7, #2
 8010a58:	07e3      	lsls	r3, r4, #31
 8010a5a:	d504      	bpl.n	8010a66 <_dtoa_r+0xf66>
 8010a5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a60:	f7fa fde0 	bl	800b624 <__aeabi_dmul>
 8010a64:	3701      	adds	r7, #1
 8010a66:	3508      	adds	r5, #8
 8010a68:	1064      	asrs	r4, r4, #1
 8010a6a:	d1f5      	bne.n	8010a58 <_dtoa_r+0xf58>
 8010a6c:	4682      	mov	sl, r0
 8010a6e:	468b      	mov	fp, r1
 8010a70:	e4cf      	b.n	8010412 <_dtoa_r+0x912>
 8010a72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a74:	4648      	mov	r0, r9
 8010a76:	6849      	ldr	r1, [r1, #4]
 8010a78:	f001 f86a 	bl	8011b50 <_Balloc>
 8010a7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010a7e:	692b      	ldr	r3, [r5, #16]
 8010a80:	4604      	mov	r4, r0
 8010a82:	4629      	mov	r1, r5
 8010a84:	1c98      	adds	r0, r3, #2
 8010a86:	0082      	lsls	r2, r0, #2
 8010a88:	310c      	adds	r1, #12
 8010a8a:	f104 000c 	add.w	r0, r4, #12
 8010a8e:	f000 ffb9 	bl	8011a04 <memcpy>
 8010a92:	4648      	mov	r0, r9
 8010a94:	4621      	mov	r1, r4
 8010a96:	2201      	movs	r2, #1
 8010a98:	f001 fb0e 	bl	80120b8 <__lshift>
 8010a9c:	4606      	mov	r6, r0
 8010a9e:	f7ff bbe7 	b.w	8010270 <_dtoa_r+0x770>
 8010aa2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8010aa6:	46e3      	mov	fp, ip
 8010aa8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010aac:	d0a1      	beq.n	80109f2 <_dtoa_r+0xef2>
 8010aae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ab2:	960d      	str	r6, [sp, #52]	; 0x34
 8010ab4:	f10c 0e01 	add.w	lr, ip, #1
 8010ab8:	f808 eb01 	strb.w	lr, [r8], #1
 8010abc:	f7ff bb7f 	b.w	80101be <_dtoa_r+0x6be>
 8010ac0:	46e3      	mov	fp, ip
 8010ac2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010ac6:	960d      	str	r6, [sp, #52]	; 0x34
 8010ac8:	f7ff bb46 	b.w	8010158 <_dtoa_r+0x658>
 8010acc:	2700      	movs	r7, #0
 8010ace:	970d      	str	r7, [sp, #52]	; 0x34
 8010ad0:	e70e      	b.n	80108f0 <_dtoa_r+0xdf0>
 8010ad2:	4b8f      	ldr	r3, [pc, #572]	; (8010d10 <_dtoa_r+0x1210>)
 8010ad4:	f106 38ff 	add.w	r8, r6, #4294967295
 8010ad8:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
 8010adc:	4622      	mov	r2, r4
 8010ade:	462b      	mov	r3, r5
 8010ae0:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010ae4:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010ae8:	f7fa fd9c 	bl	800b624 <__aeabi_dmul>
 8010aec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8010af0:	4659      	mov	r1, fp
 8010af2:	4650      	mov	r0, sl
 8010af4:	f7fb f830 	bl	800bb58 <__aeabi_d2iz>
 8010af8:	4604      	mov	r4, r0
 8010afa:	f7fa fd2d 	bl	800b558 <__aeabi_i2d>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	4650      	mov	r0, sl
 8010b04:	4659      	mov	r1, fp
 8010b06:	f7fa fbd9 	bl	800b2bc <__aeabi_dsub>
 8010b0a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010b0e:	3430      	adds	r4, #48	; 0x30
 8010b10:	2e01      	cmp	r6, #1
 8010b12:	4682      	mov	sl, r0
 8010b14:	468b      	mov	fp, r1
 8010b16:	f808 4b01 	strb.w	r4, [r8], #1
 8010b1a:	f000 8081 	beq.w	8010c20 <_dtoa_r+0x1120>
 8010b1e:	9f05      	ldr	r7, [sp, #20]
 8010b20:	2300      	movs	r3, #0
 8010b22:	1e7d      	subs	r5, r7, #1
 8010b24:	eb05 0a06 	add.w	sl, r5, r6
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010b2e:	f8cd a00c 	str.w	sl, [sp, #12]
 8010b32:	f7fa fd77 	bl	800b624 <__aeabi_dmul>
 8010b36:	43fe      	mvns	r6, r7
 8010b38:	eb06 040a 	add.w	r4, r6, sl
 8010b3c:	460f      	mov	r7, r1
 8010b3e:	4606      	mov	r6, r0
 8010b40:	f7fb f80a 	bl	800bb58 <__aeabi_d2iz>
 8010b44:	f004 0501 	and.w	r5, r4, #1
 8010b48:	4604      	mov	r4, r0
 8010b4a:	f7fa fd05 	bl	800b558 <__aeabi_i2d>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	4630      	mov	r0, r6
 8010b54:	4639      	mov	r1, r7
 8010b56:	f7fa fbb1 	bl	800b2bc <__aeabi_dsub>
 8010b5a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010b5e:	3430      	adds	r4, #48	; 0x30
 8010b60:	f88c 4001 	strb.w	r4, [ip, #1]
 8010b64:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010b68:	45e0      	cmp	r8, ip
 8010b6a:	4682      	mov	sl, r0
 8010b6c:	468b      	mov	fp, r1
 8010b6e:	4647      	mov	r7, r8
 8010b70:	d054      	beq.n	8010c1c <_dtoa_r+0x111c>
 8010b72:	b1f5      	cbz	r5, 8010bb2 <_dtoa_r+0x10b2>
 8010b74:	2300      	movs	r3, #0
 8010b76:	2200      	movs	r2, #0
 8010b78:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010b7c:	f8cd c00c 	str.w	ip, [sp, #12]
 8010b80:	f7fa fd50 	bl	800b624 <__aeabi_dmul>
 8010b84:	468b      	mov	fp, r1
 8010b86:	4682      	mov	sl, r0
 8010b88:	f7fa ffe6 	bl	800bb58 <__aeabi_d2iz>
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	f7fa fce3 	bl	800b558 <__aeabi_i2d>
 8010b92:	4647      	mov	r7, r8
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	4650      	mov	r0, sl
 8010b9a:	4659      	mov	r1, fp
 8010b9c:	3530      	adds	r5, #48	; 0x30
 8010b9e:	f7fa fb8d 	bl	800b2bc <__aeabi_dsub>
 8010ba2:	f807 5f01 	strb.w	r5, [r7, #1]!
 8010ba6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010baa:	4567      	cmp	r7, ip
 8010bac:	4682      	mov	sl, r0
 8010bae:	468b      	mov	fp, r1
 8010bb0:	d034      	beq.n	8010c1c <_dtoa_r+0x111c>
 8010bb2:	4650      	mov	r0, sl
 8010bb4:	4659      	mov	r1, fp
 8010bb6:	4666      	mov	r6, ip
 8010bb8:	2300      	movs	r3, #0
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010bc0:	f7fa fd30 	bl	800b624 <__aeabi_dmul>
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	f7fa ffc6 	bl	800bb58 <__aeabi_d2iz>
 8010bcc:	4682      	mov	sl, r0
 8010bce:	f7fa fcc3 	bl	800b558 <__aeabi_i2d>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	f7fa fb6f 	bl	800b2bc <__aeabi_dsub>
 8010bde:	f10a 0430 	add.w	r4, sl, #48	; 0x30
 8010be2:	2300      	movs	r3, #0
 8010be4:	2200      	movs	r2, #0
 8010be6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010bea:	f807 4f01 	strb.w	r4, [r7, #1]!
 8010bee:	f7fa fd19 	bl	800b624 <__aeabi_dmul>
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	f7fa ffaf 	bl	800bb58 <__aeabi_d2iz>
 8010bfa:	4683      	mov	fp, r0
 8010bfc:	f7fa fcac 	bl	800b558 <__aeabi_i2d>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	4620      	mov	r0, r4
 8010c06:	4629      	mov	r1, r5
 8010c08:	f7fa fb58 	bl	800b2bc <__aeabi_dsub>
 8010c0c:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8010c10:	f807 2f01 	strb.w	r2, [r7, #1]!
 8010c14:	42b7      	cmp	r7, r6
 8010c16:	d1cf      	bne.n	8010bb8 <_dtoa_r+0x10b8>
 8010c18:	4682      	mov	sl, r0
 8010c1a:	468b      	mov	fp, r1
 8010c1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010c1e:	4488      	add	r8, r1
 8010c20:	2300      	movs	r3, #0
 8010c22:	2200      	movs	r2, #0
 8010c24:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8010c28:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010c2c:	f7fa fb48 	bl	800b2c0 <__adddf3>
 8010c30:	4652      	mov	r2, sl
 8010c32:	465b      	mov	r3, fp
 8010c34:	f7fa ff68 	bl	800bb08 <__aeabi_dcmplt>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d048      	beq.n	8010cce <_dtoa_r+0x11ce>
 8010c3c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010c3e:	f818 bc01 	ldrb.w	fp, [r8, #-1]
 8010c42:	9409      	str	r4, [sp, #36]	; 0x24
 8010c44:	f7ff b952 	b.w	800feec <_dtoa_r+0x3ec>
 8010c48:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8010c4c:	2700      	movs	r7, #0
 8010c4e:	ebc0 040c 	rsb	r4, r0, ip
 8010c52:	f7ff b9c4 	b.w	800ffde <_dtoa_r+0x4de>
 8010c56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010c58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010c5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010c5c:	f1c1 0736 	rsb	r7, r1, #54	; 0x36
 8010c60:	f7ff b9bd 	b.w	800ffde <_dtoa_r+0x4de>
 8010c64:	4655      	mov	r5, sl
 8010c66:	f7ff ba0a 	b.w	801007e <_dtoa_r+0x57e>
 8010c6a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8010c6e:	2702      	movs	r7, #2
 8010c70:	f7ff bbcf 	b.w	8010412 <_dtoa_r+0x912>
 8010c74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010c76:	2d00      	cmp	r5, #0
 8010c78:	f43f ae4f 	beq.w	801091a <_dtoa_r+0xe1a>
 8010c7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c7e:	2a00      	cmp	r2, #0
 8010c80:	f77f aecf 	ble.w	8010a22 <_dtoa_r+0xf22>
 8010c84:	2300      	movs	r3, #0
 8010c86:	2200      	movs	r2, #0
 8010c88:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8010c8c:	4650      	mov	r0, sl
 8010c8e:	4659      	mov	r1, fp
 8010c90:	f7fa fcc8 	bl	800b624 <__aeabi_dmul>
 8010c94:	4682      	mov	sl, r0
 8010c96:	1c78      	adds	r0, r7, #1
 8010c98:	468b      	mov	fp, r1
 8010c9a:	f7fa fc5d 	bl	800b558 <__aeabi_i2d>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	4650      	mov	r0, sl
 8010ca4:	4659      	mov	r1, fp
 8010ca6:	f7fa fcbd 	bl	800b624 <__aeabi_dmul>
 8010caa:	2300      	movs	r3, #0
 8010cac:	2200      	movs	r2, #0
 8010cae:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8010cb2:	f7fa fb05 	bl	800b2c0 <__adddf3>
 8010cb6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8010cba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010cbc:	f10c 3eff 	add.w	lr, ip, #4294967295
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8010cc6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8010cca:	f7ff bbc6 	b.w	801045a <_dtoa_r+0x95a>
 8010cce:	2100      	movs	r1, #0
 8010cd0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8010cda:	f7fa faef 	bl	800b2bc <__aeabi_dsub>
 8010cde:	4652      	mov	r2, sl
 8010ce0:	465b      	mov	r3, fp
 8010ce2:	f7fa ff2f 	bl	800bb44 <__aeabi_dcmpgt>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	f43f ae9b 	beq.w	8010a22 <_dtoa_r+0xf22>
 8010cec:	4643      	mov	r3, r8
 8010cee:	4698      	mov	r8, r3
 8010cf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8010cf4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8010cf8:	2830      	cmp	r0, #48	; 0x30
 8010cfa:	d0f8      	beq.n	8010cee <_dtoa_r+0x11ee>
 8010cfc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010cfe:	9409      	str	r4, [sp, #36]	; 0x24
 8010d00:	f7ff b918 	b.w	800ff34 <_dtoa_r+0x434>
 8010d04:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8010d08:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010d0a:	9009      	str	r0, [sp, #36]	; 0x24
 8010d0c:	f7ff b8ee 	b.w	800feec <_dtoa_r+0x3ec>
 8010d10:	080135d8 	.word	0x080135d8
 8010d14:	080136a0 	.word	0x080136a0
 8010d18:	f47f ad7e 	bne.w	8010818 <_dtoa_r+0xd18>
 8010d1c:	f01b 0f01 	tst.w	fp, #1
 8010d20:	f43f ad7a 	beq.w	8010818 <_dtoa_r+0xd18>
 8010d24:	e660      	b.n	80109e8 <_dtoa_r+0xee8>
 8010d26:	2300      	movs	r3, #0
 8010d28:	4648      	mov	r0, r9
 8010d2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	f000 ff3f 	bl	8011bb0 <__multadd>
 8010d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d34:	900d      	str	r0, [sp, #52]	; 0x34
 8010d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d38:	f7ff b9d2 	b.w	80100e0 <_dtoa_r+0x5e0>
 8010d3c:	2700      	movs	r7, #0
 8010d3e:	e619      	b.n	8010974 <_dtoa_r+0xe74>
 8010d40:	2702      	movs	r7, #2
 8010d42:	f7ff bb66 	b.w	8010412 <_dtoa_r+0x912>
 8010d46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010d48:	9209      	str	r2, [sp, #36]	; 0x24
 8010d4a:	f7ff b8cf 	b.w	800feec <_dtoa_r+0x3ec>
 8010d4e:	2501      	movs	r5, #1
 8010d50:	f7fe bfb4 	b.w	800fcbc <_dtoa_r+0x1bc>
 8010d54:	f43f a9af 	beq.w	80100b6 <_dtoa_r+0x5b6>
 8010d58:	f1c3 003c 	rsb	r0, r3, #60	; 0x3c
 8010d5c:	f7ff ba67 	b.w	801022e <_dtoa_r+0x72e>

08010d60 <_fflush_r>:
 8010d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d64:	460d      	mov	r5, r1
 8010d66:	4680      	mov	r8, r0
 8010d68:	b110      	cbz	r0, 8010d70 <_fflush_r+0x10>
 8010d6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d062      	beq.n	8010e36 <_fflush_r+0xd6>
 8010d70:	89a8      	ldrh	r0, [r5, #12]
 8010d72:	b1e0      	cbz	r0, 8010dae <_fflush_r+0x4e>
 8010d74:	f000 0208 	and.w	r2, r0, #8
 8010d78:	b211      	sxth	r1, r2
 8010d7a:	b1d9      	cbz	r1, 8010db4 <_fflush_r+0x54>
 8010d7c:	692e      	ldr	r6, [r5, #16]
 8010d7e:	b1b6      	cbz	r6, 8010dae <_fflush_r+0x4e>
 8010d80:	0783      	lsls	r3, r0, #30
 8010d82:	682c      	ldr	r4, [r5, #0]
 8010d84:	bf08      	it	eq
 8010d86:	696b      	ldreq	r3, [r5, #20]
 8010d88:	602e      	str	r6, [r5, #0]
 8010d8a:	bf18      	it	ne
 8010d8c:	2300      	movne	r3, #0
 8010d8e:	1ba4      	subs	r4, r4, r6
 8010d90:	60ab      	str	r3, [r5, #8]
 8010d92:	e00a      	b.n	8010daa <_fflush_r+0x4a>
 8010d94:	4632      	mov	r2, r6
 8010d96:	4623      	mov	r3, r4
 8010d98:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8010d9a:	69e9      	ldr	r1, [r5, #28]
 8010d9c:	4640      	mov	r0, r8
 8010d9e:	47b8      	blx	r7
 8010da0:	2800      	cmp	r0, #0
 8010da2:	ebc0 0404 	rsb	r4, r0, r4
 8010da6:	4406      	add	r6, r0
 8010da8:	dd52      	ble.n	8010e50 <_fflush_r+0xf0>
 8010daa:	2c00      	cmp	r4, #0
 8010dac:	dcf2      	bgt.n	8010d94 <_fflush_r+0x34>
 8010dae:	2000      	movs	r0, #0
 8010db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db4:	686a      	ldr	r2, [r5, #4]
 8010db6:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
 8010dba:	2a00      	cmp	r2, #0
 8010dbc:	81a9      	strh	r1, [r5, #12]
 8010dbe:	dd4f      	ble.n	8010e60 <_fflush_r+0x100>
 8010dc0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010dc2:	2c00      	cmp	r4, #0
 8010dc4:	d0f3      	beq.n	8010dae <_fflush_r+0x4e>
 8010dc6:	f400 5680 	and.w	r6, r0, #4096	; 0x1000
 8010dca:	b232      	sxth	r2, r6
 8010dcc:	2000      	movs	r0, #0
 8010dce:	f8d8 6000 	ldr.w	r6, [r8]
 8010dd2:	f8c8 0000 	str.w	r0, [r8]
 8010dd6:	2a00      	cmp	r2, #0
 8010dd8:	d030      	beq.n	8010e3c <_fflush_r+0xdc>
 8010dda:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010ddc:	f001 0004 	and.w	r0, r1, #4
 8010de0:	b201      	sxth	r1, r0
 8010de2:	b129      	cbz	r1, 8010df0 <_fflush_r+0x90>
 8010de4:	6868      	ldr	r0, [r5, #4]
 8010de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010de8:	1a12      	subs	r2, r2, r0
 8010dea:	b10b      	cbz	r3, 8010df0 <_fflush_r+0x90>
 8010dec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8010dee:	1a52      	subs	r2, r2, r1
 8010df0:	2300      	movs	r3, #0
 8010df2:	4640      	mov	r0, r8
 8010df4:	69e9      	ldr	r1, [r5, #28]
 8010df6:	47a0      	blx	r4
 8010df8:	1c42      	adds	r2, r0, #1
 8010dfa:	d035      	beq.n	8010e68 <_fflush_r+0x108>
 8010dfc:	89ab      	ldrh	r3, [r5, #12]
 8010dfe:	692a      	ldr	r2, [r5, #16]
 8010e00:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8010e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e08:	81ab      	strh	r3, [r5, #12]
 8010e0a:	b209      	sxth	r1, r1
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	e885 000c 	stmia.w	r5, {r2, r3}
 8010e12:	2900      	cmp	r1, #0
 8010e14:	d144      	bne.n	8010ea0 <_fflush_r+0x140>
 8010e16:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8010e18:	f8c8 6000 	str.w	r6, [r8]
 8010e1c:	2900      	cmp	r1, #0
 8010e1e:	d0c6      	beq.n	8010dae <_fflush_r+0x4e>
 8010e20:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8010e24:	4281      	cmp	r1, r0
 8010e26:	d002      	beq.n	8010e2e <_fflush_r+0xce>
 8010e28:	4640      	mov	r0, r8
 8010e2a:	f000 f8f1 	bl	8011010 <_free_r>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	6328      	str	r0, [r5, #48]	; 0x30
 8010e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e36:	f000 f875 	bl	8010f24 <__sinit>
 8010e3a:	e799      	b.n	8010d70 <_fflush_r+0x10>
 8010e3c:	69e9      	ldr	r1, [r5, #28]
 8010e3e:	2301      	movs	r3, #1
 8010e40:	4640      	mov	r0, r8
 8010e42:	47a0      	blx	r4
 8010e44:	1c41      	adds	r1, r0, #1
 8010e46:	4602      	mov	r2, r0
 8010e48:	d02c      	beq.n	8010ea4 <_fflush_r+0x144>
 8010e4a:	89a9      	ldrh	r1, [r5, #12]
 8010e4c:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8010e4e:	e7c5      	b.n	8010ddc <_fflush_r+0x7c>
 8010e50:	89aa      	ldrh	r2, [r5, #12]
 8010e52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e56:	81ab      	strh	r3, [r5, #12]
 8010e58:	f04f 30ff 	mov.w	r0, #4294967295
 8010e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e60:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	dcac      	bgt.n	8010dc0 <_fflush_r+0x60>
 8010e66:	e7a2      	b.n	8010dae <_fflush_r+0x4e>
 8010e68:	f8d8 3000 	ldr.w	r3, [r8]
 8010e6c:	b163      	cbz	r3, 8010e88 <_fflush_r+0x128>
 8010e6e:	2b1d      	cmp	r3, #29
 8010e70:	d001      	beq.n	8010e76 <_fflush_r+0x116>
 8010e72:	2b16      	cmp	r3, #22
 8010e74:	d121      	bne.n	8010eba <_fflush_r+0x15a>
 8010e76:	89a8      	ldrh	r0, [r5, #12]
 8010e78:	692b      	ldr	r3, [r5, #16]
 8010e7a:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
 8010e7e:	2100      	movs	r1, #0
 8010e80:	81aa      	strh	r2, [r5, #12]
 8010e82:	6069      	str	r1, [r5, #4]
 8010e84:	602b      	str	r3, [r5, #0]
 8010e86:	e7c6      	b.n	8010e16 <_fflush_r+0xb6>
 8010e88:	89aa      	ldrh	r2, [r5, #12]
 8010e8a:	6929      	ldr	r1, [r5, #16]
 8010e8c:	606b      	str	r3, [r5, #4]
 8010e8e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8010e92:	b21b      	sxth	r3, r3
 8010e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e98:	81aa      	strh	r2, [r5, #12]
 8010e9a:	6029      	str	r1, [r5, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d0ba      	beq.n	8010e16 <_fflush_r+0xb6>
 8010ea0:	6528      	str	r0, [r5, #80]	; 0x50
 8010ea2:	e7b8      	b.n	8010e16 <_fflush_r+0xb6>
 8010ea4:	f8d8 1000 	ldr.w	r1, [r8]
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	d0ce      	beq.n	8010e4a <_fflush_r+0xea>
 8010eac:	291d      	cmp	r1, #29
 8010eae:	d001      	beq.n	8010eb4 <_fflush_r+0x154>
 8010eb0:	2916      	cmp	r1, #22
 8010eb2:	d1cd      	bne.n	8010e50 <_fflush_r+0xf0>
 8010eb4:	f8c8 6000 	str.w	r6, [r8]
 8010eb8:	e779      	b.n	8010dae <_fflush_r+0x4e>
 8010eba:	89aa      	ldrh	r2, [r5, #12]
 8010ebc:	f042 0140 	orr.w	r1, r2, #64	; 0x40
 8010ec0:	81a9      	strh	r1, [r5, #12]
 8010ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec6:	bf00      	nop

08010ec8 <_cleanup_r>:
 8010ec8:	f642 0181 	movw	r1, #10369	; 0x2881
 8010ecc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010ed0:	f000 b968 	b.w	80111a4 <_fwalk>

08010ed4 <std.isra.0>:
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	b510      	push	{r4, lr}
 8010ed8:	4604      	mov	r4, r0
 8010eda:	8181      	strh	r1, [r0, #12]
 8010edc:	81c2      	strh	r2, [r0, #14]
 8010ede:	6003      	str	r3, [r0, #0]
 8010ee0:	6043      	str	r3, [r0, #4]
 8010ee2:	6083      	str	r3, [r0, #8]
 8010ee4:	6643      	str	r3, [r0, #100]	; 0x64
 8010ee6:	6103      	str	r3, [r0, #16]
 8010ee8:	6143      	str	r3, [r0, #20]
 8010eea:	6183      	str	r3, [r0, #24]
 8010eec:	4619      	mov	r1, r3
 8010eee:	2208      	movs	r2, #8
 8010ef0:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 8010ef4:	f7fc fc2c 	bl	800d750 <memset>
 8010ef8:	f242 508d 	movw	r0, #9613	; 0x258d
 8010efc:	f242 51b1 	movw	r1, #9649	; 0x25b1
 8010f00:	f242 52f5 	movw	r2, #9717	; 0x25f5
 8010f04:	f242 6319 	movw	r3, #9753	; 0x2619
 8010f08:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010f0c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8010f10:	f6c0 0201 	movt	r2, #2049	; 0x801
 8010f14:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010f18:	61e4      	str	r4, [r4, #28]
 8010f1a:	6220      	str	r0, [r4, #32]
 8010f1c:	6261      	str	r1, [r4, #36]	; 0x24
 8010f1e:	62a2      	str	r2, [r4, #40]	; 0x28
 8010f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f22:	bd10      	pop	{r4, pc}

08010f24 <__sinit>:
 8010f24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	4604      	mov	r4, r0
 8010f2a:	b103      	cbz	r3, 8010f2e <__sinit+0xa>
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
 8010f2e:	4a0f      	ldr	r2, [pc, #60]	; (8010f6c <__sinit+0x48>)
 8010f30:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 8010f34:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010f36:	2501      	movs	r5, #1
 8010f38:	461a      	mov	r2, r3
 8010f3a:	f504 763b 	add.w	r6, r4, #748	; 0x2ec
 8010f3e:	2303      	movs	r3, #3
 8010f40:	2104      	movs	r1, #4
 8010f42:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8010f46:	6840      	ldr	r0, [r0, #4]
 8010f48:	63a5      	str	r5, [r4, #56]	; 0x38
 8010f4a:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 8010f4e:	f7ff ffc1 	bl	8010ed4 <std.isra.0>
 8010f52:	68a0      	ldr	r0, [r4, #8]
 8010f54:	2109      	movs	r1, #9
 8010f56:	462a      	mov	r2, r5
 8010f58:	f7ff ffbc 	bl	8010ed4 <std.isra.0>
 8010f5c:	68e0      	ldr	r0, [r4, #12]
 8010f5e:	2112      	movs	r1, #18
 8010f60:	2202      	movs	r2, #2
 8010f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f66:	f7ff bfb5 	b.w	8010ed4 <std.isra.0>
 8010f6a:	bf00      	nop
 8010f6c:	08010ec9 	.word	0x08010ec9

08010f70 <__sfp_lock_acquire>:
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop

08010f74 <__sfp_lock_release>:
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop

08010f78 <_malloc_trim_r>:
 8010f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f7a:	4d22      	ldr	r5, [pc, #136]	; (8011004 <_malloc_trim_r+0x8c>)
 8010f7c:	460f      	mov	r7, r1
 8010f7e:	4604      	mov	r4, r0
 8010f80:	f000 fde2 	bl	8011b48 <__malloc_lock>
 8010f84:	68ab      	ldr	r3, [r5, #8]
 8010f86:	685e      	ldr	r6, [r3, #4]
 8010f88:	f026 0603 	bic.w	r6, r6, #3
 8010f8c:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 8010f90:	1bc1      	subs	r1, r0, r7
 8010f92:	0b0a      	lsrs	r2, r1, #12
 8010f94:	1e57      	subs	r7, r2, #1
 8010f96:	033f      	lsls	r7, r7, #12
 8010f98:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8010f9c:	db07      	blt.n	8010fae <_malloc_trim_r+0x36>
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f001 fae1 	bl	8012568 <_sbrk_r>
 8010fa6:	68ab      	ldr	r3, [r5, #8]
 8010fa8:	1999      	adds	r1, r3, r6
 8010faa:	4288      	cmp	r0, r1
 8010fac:	d004      	beq.n	8010fb8 <_malloc_trim_r+0x40>
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 fdcc 	bl	8011b4c <__malloc_unlock>
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb8:	4279      	negs	r1, r7
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f001 fad4 	bl	8012568 <_sbrk_r>
 8010fc0:	3001      	adds	r0, #1
 8010fc2:	d00d      	beq.n	8010fe0 <_malloc_trim_r+0x68>
 8010fc4:	4b10      	ldr	r3, [pc, #64]	; (8011008 <_malloc_trim_r+0x90>)
 8010fc6:	68a8      	ldr	r0, [r5, #8]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	1bf6      	subs	r6, r6, r7
 8010fcc:	f046 0601 	orr.w	r6, r6, #1
 8010fd0:	1bd7      	subs	r7, r2, r7
 8010fd2:	6046      	str	r6, [r0, #4]
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	601f      	str	r7, [r3, #0]
 8010fd8:	f000 fdb8 	bl	8011b4c <__malloc_unlock>
 8010fdc:	2001      	movs	r0, #1
 8010fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f001 fac0 	bl	8012568 <_sbrk_r>
 8010fe8:	68ab      	ldr	r3, [r5, #8]
 8010fea:	1ac2      	subs	r2, r0, r3
 8010fec:	2a0f      	cmp	r2, #15
 8010fee:	ddde      	ble.n	8010fae <_malloc_trim_r+0x36>
 8010ff0:	4906      	ldr	r1, [pc, #24]	; (801100c <_malloc_trim_r+0x94>)
 8010ff2:	6809      	ldr	r1, [r1, #0]
 8010ff4:	1a40      	subs	r0, r0, r1
 8010ff6:	4904      	ldr	r1, [pc, #16]	; (8011008 <_malloc_trim_r+0x90>)
 8010ff8:	f042 0201 	orr.w	r2, r2, #1
 8010ffc:	6008      	str	r0, [r1, #0]
 8010ffe:	605a      	str	r2, [r3, #4]
 8011000:	e7d5      	b.n	8010fae <_malloc_trim_r+0x36>
 8011002:	bf00      	nop
 8011004:	200004f0 	.word	0x200004f0
 8011008:	200009f0 	.word	0x200009f0
 801100c:	200008fc 	.word	0x200008fc

08011010 <_free_r>:
 8011010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011014:	460d      	mov	r5, r1
 8011016:	4606      	mov	r6, r0
 8011018:	2900      	cmp	r1, #0
 801101a:	d055      	beq.n	80110c8 <_free_r+0xb8>
 801101c:	f000 fd94 	bl	8011b48 <__malloc_lock>
 8011020:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8011024:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8011194 <_free_r+0x184>
 8011028:	f1a5 0408 	sub.w	r4, r5, #8
 801102c:	f021 0301 	bic.w	r3, r1, #1
 8011030:	18e2      	adds	r2, r4, r3
 8011032:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8011036:	6857      	ldr	r7, [r2, #4]
 8011038:	4290      	cmp	r0, r2
 801103a:	f027 0703 	bic.w	r7, r7, #3
 801103e:	d065      	beq.n	801110c <_free_r+0xfc>
 8011040:	f011 0101 	ands.w	r1, r1, #1
 8011044:	6057      	str	r7, [r2, #4]
 8011046:	d032      	beq.n	80110ae <_free_r+0x9e>
 8011048:	2100      	movs	r1, #0
 801104a:	19d0      	adds	r0, r2, r7
 801104c:	6840      	ldr	r0, [r0, #4]
 801104e:	07c0      	lsls	r0, r0, #31
 8011050:	d406      	bmi.n	8011060 <_free_r+0x50>
 8011052:	19db      	adds	r3, r3, r7
 8011054:	6890      	ldr	r0, [r2, #8]
 8011056:	2900      	cmp	r1, #0
 8011058:	d04a      	beq.n	80110f0 <_free_r+0xe0>
 801105a:	68d2      	ldr	r2, [r2, #12]
 801105c:	60c2      	str	r2, [r0, #12]
 801105e:	6090      	str	r0, [r2, #8]
 8011060:	f043 0001 	orr.w	r0, r3, #1
 8011064:	6060      	str	r0, [r4, #4]
 8011066:	50e3      	str	r3, [r4, r3]
 8011068:	b9e1      	cbnz	r1, 80110a4 <_free_r+0x94>
 801106a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801106e:	d32d      	bcc.n	80110cc <_free_r+0xbc>
 8011070:	0a5a      	lsrs	r2, r3, #9
 8011072:	2a04      	cmp	r2, #4
 8011074:	d866      	bhi.n	8011144 <_free_r+0x134>
 8011076:	0998      	lsrs	r0, r3, #6
 8011078:	3038      	adds	r0, #56	; 0x38
 801107a:	0042      	lsls	r2, r0, #1
 801107c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8011080:	4944      	ldr	r1, [pc, #272]	; (8011194 <_free_r+0x184>)
 8011082:	f8de 2008 	ldr.w	r2, [lr, #8]
 8011086:	4572      	cmp	r2, lr
 8011088:	d062      	beq.n	8011150 <_free_r+0x140>
 801108a:	6850      	ldr	r0, [r2, #4]
 801108c:	f020 0103 	bic.w	r1, r0, #3
 8011090:	428b      	cmp	r3, r1
 8011092:	d202      	bcs.n	801109a <_free_r+0x8a>
 8011094:	6892      	ldr	r2, [r2, #8]
 8011096:	4596      	cmp	lr, r2
 8011098:	d1f7      	bne.n	801108a <_free_r+0x7a>
 801109a:	68d0      	ldr	r0, [r2, #12]
 801109c:	60e0      	str	r0, [r4, #12]
 801109e:	60a2      	str	r2, [r4, #8]
 80110a0:	60d4      	str	r4, [r2, #12]
 80110a2:	6084      	str	r4, [r0, #8]
 80110a4:	4630      	mov	r0, r6
 80110a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110aa:	f000 bd4f 	b.w	8011b4c <__malloc_unlock>
 80110ae:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80110b2:	1b64      	subs	r4, r4, r5
 80110b4:	f10c 0808 	add.w	r8, ip, #8
 80110b8:	68a0      	ldr	r0, [r4, #8]
 80110ba:	4540      	cmp	r0, r8
 80110bc:	442b      	add	r3, r5
 80110be:	d03f      	beq.n	8011140 <_free_r+0x130>
 80110c0:	68e5      	ldr	r5, [r4, #12]
 80110c2:	60c5      	str	r5, [r0, #12]
 80110c4:	60a8      	str	r0, [r5, #8]
 80110c6:	e7c0      	b.n	801104a <_free_r+0x3a>
 80110c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110cc:	08dd      	lsrs	r5, r3, #3
 80110ce:	eb0c 02c5 	add.w	r2, ip, r5, lsl #3
 80110d2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80110d6:	6891      	ldr	r1, [r2, #8]
 80110d8:	60e2      	str	r2, [r4, #12]
 80110da:	10ab      	asrs	r3, r5, #2
 80110dc:	2501      	movs	r5, #1
 80110de:	fa05 f303 	lsl.w	r3, r5, r3
 80110e2:	4318      	orrs	r0, r3
 80110e4:	60a1      	str	r1, [r4, #8]
 80110e6:	f8cc 0004 	str.w	r0, [ip, #4]
 80110ea:	6094      	str	r4, [r2, #8]
 80110ec:	60cc      	str	r4, [r1, #12]
 80110ee:	e7d9      	b.n	80110a4 <_free_r+0x94>
 80110f0:	4d29      	ldr	r5, [pc, #164]	; (8011198 <_free_r+0x188>)
 80110f2:	42a8      	cmp	r0, r5
 80110f4:	d1b1      	bne.n	801105a <_free_r+0x4a>
 80110f6:	f043 0201 	orr.w	r2, r3, #1
 80110fa:	f8cc 4014 	str.w	r4, [ip, #20]
 80110fe:	f8cc 4010 	str.w	r4, [ip, #16]
 8011102:	60e0      	str	r0, [r4, #12]
 8011104:	60a0      	str	r0, [r4, #8]
 8011106:	6062      	str	r2, [r4, #4]
 8011108:	50e3      	str	r3, [r4, r3]
 801110a:	e7cb      	b.n	80110a4 <_free_r+0x94>
 801110c:	18ff      	adds	r7, r7, r3
 801110e:	07cb      	lsls	r3, r1, #31
 8011110:	d407      	bmi.n	8011122 <_free_r+0x112>
 8011112:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8011116:	1a64      	subs	r4, r4, r1
 8011118:	187f      	adds	r7, r7, r1
 801111a:	68e3      	ldr	r3, [r4, #12]
 801111c:	68a0      	ldr	r0, [r4, #8]
 801111e:	60c3      	str	r3, [r0, #12]
 8011120:	6098      	str	r0, [r3, #8]
 8011122:	4a1e      	ldr	r2, [pc, #120]	; (801119c <_free_r+0x18c>)
 8011124:	f8cc 4008 	str.w	r4, [ip, #8]
 8011128:	6811      	ldr	r1, [r2, #0]
 801112a:	f047 0301 	orr.w	r3, r7, #1
 801112e:	428f      	cmp	r7, r1
 8011130:	6063      	str	r3, [r4, #4]
 8011132:	d3b7      	bcc.n	80110a4 <_free_r+0x94>
 8011134:	4a1a      	ldr	r2, [pc, #104]	; (80111a0 <_free_r+0x190>)
 8011136:	4630      	mov	r0, r6
 8011138:	6811      	ldr	r1, [r2, #0]
 801113a:	f7ff ff1d 	bl	8010f78 <_malloc_trim_r>
 801113e:	e7b1      	b.n	80110a4 <_free_r+0x94>
 8011140:	2101      	movs	r1, #1
 8011142:	e782      	b.n	801104a <_free_r+0x3a>
 8011144:	2a14      	cmp	r2, #20
 8011146:	d80c      	bhi.n	8011162 <_free_r+0x152>
 8011148:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 801114c:	0042      	lsls	r2, r0, #1
 801114e:	e795      	b.n	801107c <_free_r+0x6c>
 8011150:	684b      	ldr	r3, [r1, #4]
 8011152:	1080      	asrs	r0, r0, #2
 8011154:	2501      	movs	r5, #1
 8011156:	fa05 f000 	lsl.w	r0, r5, r0
 801115a:	4303      	orrs	r3, r0
 801115c:	604b      	str	r3, [r1, #4]
 801115e:	4610      	mov	r0, r2
 8011160:	e79c      	b.n	801109c <_free_r+0x8c>
 8011162:	2a54      	cmp	r2, #84	; 0x54
 8011164:	d803      	bhi.n	801116e <_free_r+0x15e>
 8011166:	0b18      	lsrs	r0, r3, #12
 8011168:	306e      	adds	r0, #110	; 0x6e
 801116a:	0042      	lsls	r2, r0, #1
 801116c:	e786      	b.n	801107c <_free_r+0x6c>
 801116e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011172:	d803      	bhi.n	801117c <_free_r+0x16c>
 8011174:	0bd8      	lsrs	r0, r3, #15
 8011176:	3077      	adds	r0, #119	; 0x77
 8011178:	0042      	lsls	r2, r0, #1
 801117a:	e77f      	b.n	801107c <_free_r+0x6c>
 801117c:	f240 5154 	movw	r1, #1364	; 0x554
 8011180:	428a      	cmp	r2, r1
 8011182:	d803      	bhi.n	801118c <_free_r+0x17c>
 8011184:	0c98      	lsrs	r0, r3, #18
 8011186:	307c      	adds	r0, #124	; 0x7c
 8011188:	0042      	lsls	r2, r0, #1
 801118a:	e777      	b.n	801107c <_free_r+0x6c>
 801118c:	22fc      	movs	r2, #252	; 0xfc
 801118e:	207e      	movs	r0, #126	; 0x7e
 8011190:	e774      	b.n	801107c <_free_r+0x6c>
 8011192:	bf00      	nop
 8011194:	200004f0 	.word	0x200004f0
 8011198:	200004f8 	.word	0x200004f8
 801119c:	200008f8 	.word	0x200008f8
 80111a0:	200009ec 	.word	0x200009ec

080111a4 <_fwalk>:
 80111a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111a8:	4680      	mov	r8, r0
 80111aa:	4689      	mov	r9, r1
 80111ac:	f7ff fee0 	bl	8010f70 <__sfp_lock_acquire>
 80111b0:	f518 7838 	adds.w	r8, r8, #736	; 0x2e0
 80111b4:	d04f      	beq.n	8011256 <_fwalk+0xb2>
 80111b6:	f04f 0a00 	mov.w	sl, #0
 80111ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80111be:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111c2:	3d01      	subs	r5, #1
 80111c4:	d43d      	bmi.n	8011242 <_fwalk+0x9e>
 80111c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111ca:	f005 0601 	and.w	r6, r5, #1
 80111ce:	b13b      	cbz	r3, 80111e0 <_fwalk+0x3c>
 80111d0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d003      	beq.n	80111e0 <_fwalk+0x3c>
 80111d8:	4620      	mov	r0, r4
 80111da:	47c8      	blx	r9
 80111dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80111e0:	3468      	adds	r4, #104	; 0x68
 80111e2:	1e6f      	subs	r7, r5, #1
 80111e4:	b36d      	cbz	r5, 8011242 <_fwalk+0x9e>
 80111e6:	b176      	cbz	r6, 8011206 <_fwalk+0x62>
 80111e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80111ec:	b139      	cbz	r1, 80111fe <_fwalk+0x5a>
 80111ee:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80111f2:	1c53      	adds	r3, r2, #1
 80111f4:	d003      	beq.n	80111fe <_fwalk+0x5a>
 80111f6:	4620      	mov	r0, r4
 80111f8:	47c8      	blx	r9
 80111fa:	ea4a 0a00 	orr.w	sl, sl, r0
 80111fe:	3f01      	subs	r7, #1
 8011200:	3468      	adds	r4, #104	; 0x68
 8011202:	1c7b      	adds	r3, r7, #1
 8011204:	d01d      	beq.n	8011242 <_fwalk+0x9e>
 8011206:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801120a:	f104 0568 	add.w	r5, r4, #104	; 0x68
 801120e:	b13e      	cbz	r6, 8011220 <_fwalk+0x7c>
 8011210:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8011214:	3301      	adds	r3, #1
 8011216:	4620      	mov	r0, r4
 8011218:	d002      	beq.n	8011220 <_fwalk+0x7c>
 801121a:	47c8      	blx	r9
 801121c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011220:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8011224:	1e7e      	subs	r6, r7, #1
 8011226:	b13c      	cbz	r4, 8011238 <_fwalk+0x94>
 8011228:	f9b5 700e 	ldrsh.w	r7, [r5, #14]
 801122c:	1c7b      	adds	r3, r7, #1
 801122e:	4628      	mov	r0, r5
 8011230:	d002      	beq.n	8011238 <_fwalk+0x94>
 8011232:	47c8      	blx	r9
 8011234:	ea4a 0a00 	orr.w	sl, sl, r0
 8011238:	f105 0468 	add.w	r4, r5, #104	; 0x68
 801123c:	1e77      	subs	r7, r6, #1
 801123e:	2e00      	cmp	r6, #0
 8011240:	d1e1      	bne.n	8011206 <_fwalk+0x62>
 8011242:	f8d8 8000 	ldr.w	r8, [r8]
 8011246:	f1b8 0f00 	cmp.w	r8, #0
 801124a:	d1b6      	bne.n	80111ba <_fwalk+0x16>
 801124c:	f7ff fe92 	bl	8010f74 <__sfp_lock_release>
 8011250:	4650      	mov	r0, sl
 8011252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011256:	46c2      	mov	sl, r8
 8011258:	e7f8      	b.n	801124c <_fwalk+0xa8>
 801125a:	bf00      	nop

0801125c <__locale_charset>:
 801125c:	f240 40cc 	movw	r0, #1228	; 0x4cc
 8011260:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop

08011268 <__locale_mb_cur_max>:
 8011268:	f240 43ec 	movw	r3, #1260	; 0x4ec
 801126c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011270:	6818      	ldr	r0, [r3, #0]
 8011272:	4770      	bx	lr

08011274 <_localeconv_r>:
 8011274:	f240 4094 	movw	r0, #1172	; 0x494
 8011278:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop

08011280 <__smakebuf_r>:
 8011280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011282:	898b      	ldrh	r3, [r1, #12]
 8011284:	f003 0202 	and.w	r2, r3, #2
 8011288:	460c      	mov	r4, r1
 801128a:	b211      	sxth	r1, r2
 801128c:	b091      	sub	sp, #68	; 0x44
 801128e:	4605      	mov	r5, r0
 8011290:	2900      	cmp	r1, #0
 8011292:	d138      	bne.n	8011306 <__smakebuf_r+0x86>
 8011294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011298:	2900      	cmp	r1, #0
 801129a:	db16      	blt.n	80112ca <__smakebuf_r+0x4a>
 801129c:	aa01      	add	r2, sp, #4
 801129e:	f001 fbcf 	bl	8012a40 <_fstat_r>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	db10      	blt.n	80112c8 <__smakebuf_r+0x48>
 80112a6:	9b02      	ldr	r3, [sp, #8]
 80112a8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
 80112ac:	f5b0 5600 	subs.w	r6, r0, #8192	; 0x2000
 80112b0:	4277      	negs	r7, r6
 80112b2:	4177      	adcs	r7, r6
 80112b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80112b8:	d02c      	beq.n	8011314 <__smakebuf_r+0x94>
 80112ba:	89a3      	ldrh	r3, [r4, #12]
 80112bc:	f443 6000 	orr.w	r0, r3, #2048	; 0x800
 80112c0:	81a0      	strh	r0, [r4, #12]
 80112c2:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80112c6:	e00c      	b.n	80112e2 <__smakebuf_r+0x62>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f003 0680 	and.w	r6, r3, #128	; 0x80
 80112ce:	b237      	sxth	r7, r6
 80112d0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80112d4:	2f00      	cmp	r7, #0
 80112d6:	bf0c      	ite	eq
 80112d8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80112dc:	2640      	movne	r6, #64	; 0x40
 80112de:	81a2      	strh	r2, [r4, #12]
 80112e0:	2700      	movs	r7, #0
 80112e2:	4631      	mov	r1, r6
 80112e4:	4628      	mov	r0, r5
 80112e6:	f000 f83f 	bl	8011368 <_malloc_r>
 80112ea:	89a1      	ldrh	r1, [r4, #12]
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d028      	beq.n	8011342 <__smakebuf_r+0xc2>
 80112f0:	4a1b      	ldr	r2, [pc, #108]	; (8011360 <__smakebuf_r+0xe0>)
 80112f2:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80112f6:	63ea      	str	r2, [r5, #60]	; 0x3c
 80112f8:	81a3      	strh	r3, [r4, #12]
 80112fa:	6020      	str	r0, [r4, #0]
 80112fc:	6120      	str	r0, [r4, #16]
 80112fe:	6166      	str	r6, [r4, #20]
 8011300:	b99f      	cbnz	r7, 801132a <__smakebuf_r+0xaa>
 8011302:	b011      	add	sp, #68	; 0x44
 8011304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801130a:	2001      	movs	r0, #1
 801130c:	6022      	str	r2, [r4, #0]
 801130e:	6122      	str	r2, [r4, #16]
 8011310:	6160      	str	r0, [r4, #20]
 8011312:	e7f6      	b.n	8011302 <__smakebuf_r+0x82>
 8011314:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011316:	4a13      	ldr	r2, [pc, #76]	; (8011364 <__smakebuf_r+0xe4>)
 8011318:	4291      	cmp	r1, r2
 801131a:	d1ce      	bne.n	80112ba <__smakebuf_r+0x3a>
 801131c:	89a1      	ldrh	r1, [r4, #12]
 801131e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8011322:	4331      	orrs	r1, r6
 8011324:	81a1      	strh	r1, [r4, #12]
 8011326:	64e6      	str	r6, [r4, #76]	; 0x4c
 8011328:	e7db      	b.n	80112e2 <__smakebuf_r+0x62>
 801132a:	4628      	mov	r0, r5
 801132c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011330:	f001 fd24 	bl	8012d7c <_isatty_r>
 8011334:	2800      	cmp	r0, #0
 8011336:	d0e4      	beq.n	8011302 <__smakebuf_r+0x82>
 8011338:	89a0      	ldrh	r0, [r4, #12]
 801133a:	f040 0101 	orr.w	r1, r0, #1
 801133e:	81a1      	strh	r1, [r4, #12]
 8011340:	e7df      	b.n	8011302 <__smakebuf_r+0x82>
 8011342:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8011346:	b21a      	sxth	r2, r3
 8011348:	2a00      	cmp	r2, #0
 801134a:	d1da      	bne.n	8011302 <__smakebuf_r+0x82>
 801134c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8011350:	f041 0102 	orr.w	r1, r1, #2
 8011354:	2301      	movs	r3, #1
 8011356:	81a1      	strh	r1, [r4, #12]
 8011358:	6020      	str	r0, [r4, #0]
 801135a:	6120      	str	r0, [r4, #16]
 801135c:	6163      	str	r3, [r4, #20]
 801135e:	e7d0      	b.n	8011302 <__smakebuf_r+0x82>
 8011360:	08010ec9 	.word	0x08010ec9
 8011364:	080125f5 	.word	0x080125f5

08011368 <_malloc_r>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	f101 050b 	add.w	r5, r1, #11
 8011370:	2d16      	cmp	r5, #22
 8011372:	b083      	sub	sp, #12
 8011374:	4606      	mov	r6, r0
 8011376:	d927      	bls.n	80113c8 <_malloc_r+0x60>
 8011378:	f035 0507 	bics.w	r5, r5, #7
 801137c:	d427      	bmi.n	80113ce <_malloc_r+0x66>
 801137e:	42a9      	cmp	r1, r5
 8011380:	d825      	bhi.n	80113ce <_malloc_r+0x66>
 8011382:	4630      	mov	r0, r6
 8011384:	f000 fbe0 	bl	8011b48 <__malloc_lock>
 8011388:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 801138c:	d223      	bcs.n	80113d6 <_malloc_r+0x6e>
 801138e:	4fba      	ldr	r7, [pc, #744]	; (8011678 <_malloc_r+0x310>)
 8011390:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8011394:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8011398:	68d4      	ldr	r4, [r2, #12]
 801139a:	4294      	cmp	r4, r2
 801139c:	f000 81de 	beq.w	801175c <_malloc_r+0x3f4>
 80113a0:	6863      	ldr	r3, [r4, #4]
 80113a2:	68e2      	ldr	r2, [r4, #12]
 80113a4:	68a1      	ldr	r1, [r4, #8]
 80113a6:	f023 0003 	bic.w	r0, r3, #3
 80113aa:	1823      	adds	r3, r4, r0
 80113ac:	60ca      	str	r2, [r1, #12]
 80113ae:	6858      	ldr	r0, [r3, #4]
 80113b0:	6091      	str	r1, [r2, #8]
 80113b2:	f040 0201 	orr.w	r2, r0, #1
 80113b6:	605a      	str	r2, [r3, #4]
 80113b8:	4630      	mov	r0, r6
 80113ba:	f000 fbc7 	bl	8011b4c <__malloc_unlock>
 80113be:	3408      	adds	r4, #8
 80113c0:	4620      	mov	r0, r4
 80113c2:	b003      	add	sp, #12
 80113c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c8:	2510      	movs	r5, #16
 80113ca:	42a9      	cmp	r1, r5
 80113cc:	d9d9      	bls.n	8011382 <_malloc_r+0x1a>
 80113ce:	240c      	movs	r4, #12
 80113d0:	6034      	str	r4, [r6, #0]
 80113d2:	2400      	movs	r4, #0
 80113d4:	e7f4      	b.n	80113c0 <_malloc_r+0x58>
 80113d6:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80113da:	f000 808b 	beq.w	80114f4 <_malloc_r+0x18c>
 80113de:	f1bc 0f04 	cmp.w	ip, #4
 80113e2:	f200 8155 	bhi.w	8011690 <_malloc_r+0x328>
 80113e6:	ea4f 1795 	mov.w	r7, r5, lsr #6
 80113ea:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 80113ee:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80113f2:	4fa1      	ldr	r7, [pc, #644]	; (8011678 <_malloc_r+0x310>)
 80113f4:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80113f8:	68cc      	ldr	r4, [r1, #12]
 80113fa:	42a1      	cmp	r1, r4
 80113fc:	d105      	bne.n	801140a <_malloc_r+0xa2>
 80113fe:	e00c      	b.n	801141a <_malloc_r+0xb2>
 8011400:	2a00      	cmp	r2, #0
 8011402:	da7c      	bge.n	80114fe <_malloc_r+0x196>
 8011404:	68e4      	ldr	r4, [r4, #12]
 8011406:	42a1      	cmp	r1, r4
 8011408:	d007      	beq.n	801141a <_malloc_r+0xb2>
 801140a:	6863      	ldr	r3, [r4, #4]
 801140c:	f023 0003 	bic.w	r0, r3, #3
 8011410:	1b42      	subs	r2, r0, r5
 8011412:	2a0f      	cmp	r2, #15
 8011414:	ddf4      	ble.n	8011400 <_malloc_r+0x98>
 8011416:	f10e 3eff 	add.w	lr, lr, #4294967295
 801141a:	f10e 0c01 	add.w	ip, lr, #1
 801141e:	4b96      	ldr	r3, [pc, #600]	; (8011678 <_malloc_r+0x310>)
 8011420:	693c      	ldr	r4, [r7, #16]
 8011422:	f103 0e08 	add.w	lr, r3, #8
 8011426:	4574      	cmp	r4, lr
 8011428:	f000 8175 	beq.w	8011716 <_malloc_r+0x3ae>
 801142c:	6861      	ldr	r1, [r4, #4]
 801142e:	f021 0103 	bic.w	r1, r1, #3
 8011432:	1b4a      	subs	r2, r1, r5
 8011434:	2a0f      	cmp	r2, #15
 8011436:	f300 815b 	bgt.w	80116f0 <_malloc_r+0x388>
 801143a:	2a00      	cmp	r2, #0
 801143c:	f8c3 e014 	str.w	lr, [r3, #20]
 8011440:	f8c3 e010 	str.w	lr, [r3, #16]
 8011444:	da69      	bge.n	801151a <_malloc_r+0x1b2>
 8011446:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801144a:	f080 812f 	bcs.w	80116ac <_malloc_r+0x344>
 801144e:	08ca      	lsrs	r2, r1, #3
 8011450:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8011454:	f04f 0901 	mov.w	r9, #1
 8011458:	1092      	asrs	r2, r2, #2
 801145a:	fa09 f902 	lsl.w	r9, r9, r2
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	6888      	ldr	r0, [r1, #8]
 8011462:	60e1      	str	r1, [r4, #12]
 8011464:	ea49 0902 	orr.w	r9, r9, r2
 8011468:	60a0      	str	r0, [r4, #8]
 801146a:	f8c3 9004 	str.w	r9, [r3, #4]
 801146e:	608c      	str	r4, [r1, #8]
 8011470:	60c4      	str	r4, [r0, #12]
 8011472:	2001      	movs	r0, #1
 8011474:	ea4f 04ac 	mov.w	r4, ip, asr #2
 8011478:	fa00 f004 	lsl.w	r0, r0, r4
 801147c:	4548      	cmp	r0, r9
 801147e:	d856      	bhi.n	801152e <_malloc_r+0x1c6>
 8011480:	ea19 0f00 	tst.w	r9, r0
 8011484:	d107      	bne.n	8011496 <_malloc_r+0x12e>
 8011486:	f02c 0c03 	bic.w	ip, ip, #3
 801148a:	0040      	lsls	r0, r0, #1
 801148c:	ea19 0f00 	tst.w	r9, r0
 8011490:	f10c 0c04 	add.w	ip, ip, #4
 8011494:	d0f9      	beq.n	801148a <_malloc_r+0x122>
 8011496:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 801149a:	464c      	mov	r4, r9
 801149c:	46e0      	mov	r8, ip
 801149e:	68e3      	ldr	r3, [r4, #12]
 80114a0:	429c      	cmp	r4, r3
 80114a2:	d107      	bne.n	80114b4 <_malloc_r+0x14c>
 80114a4:	e13a      	b.n	801171c <_malloc_r+0x3b4>
 80114a6:	2a00      	cmp	r2, #0
 80114a8:	f280 8162 	bge.w	8011770 <_malloc_r+0x408>
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	429c      	cmp	r4, r3
 80114b0:	f000 8134 	beq.w	801171c <_malloc_r+0x3b4>
 80114b4:	6859      	ldr	r1, [r3, #4]
 80114b6:	f021 0103 	bic.w	r1, r1, #3
 80114ba:	1b4a      	subs	r2, r1, r5
 80114bc:	2a0f      	cmp	r2, #15
 80114be:	ddf2      	ble.n	80114a6 <_malloc_r+0x13e>
 80114c0:	461c      	mov	r4, r3
 80114c2:	1959      	adds	r1, r3, r5
 80114c4:	68d8      	ldr	r0, [r3, #12]
 80114c6:	f854 cf08 	ldr.w	ip, [r4, #8]!
 80114ca:	508a      	str	r2, [r1, r2]
 80114cc:	f045 0501 	orr.w	r5, r5, #1
 80114d0:	f042 0201 	orr.w	r2, r2, #1
 80114d4:	f8cc 000c 	str.w	r0, [ip, #12]
 80114d8:	f8c0 c008 	str.w	ip, [r0, #8]
 80114dc:	605d      	str	r5, [r3, #4]
 80114de:	6179      	str	r1, [r7, #20]
 80114e0:	6139      	str	r1, [r7, #16]
 80114e2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80114e6:	f8c1 e008 	str.w	lr, [r1, #8]
 80114ea:	604a      	str	r2, [r1, #4]
 80114ec:	4630      	mov	r0, r6
 80114ee:	f000 fb2d 	bl	8011b4c <__malloc_unlock>
 80114f2:	e765      	b.n	80113c0 <_malloc_r+0x58>
 80114f4:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 80114f8:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80114fc:	e779      	b.n	80113f2 <_malloc_r+0x8a>
 80114fe:	1822      	adds	r2, r4, r0
 8011500:	68e3      	ldr	r3, [r4, #12]
 8011502:	6850      	ldr	r0, [r2, #4]
 8011504:	68a1      	ldr	r1, [r4, #8]
 8011506:	f040 0001 	orr.w	r0, r0, #1
 801150a:	6050      	str	r0, [r2, #4]
 801150c:	60cb      	str	r3, [r1, #12]
 801150e:	6099      	str	r1, [r3, #8]
 8011510:	4630      	mov	r0, r6
 8011512:	f000 fb1b 	bl	8011b4c <__malloc_unlock>
 8011516:	3408      	adds	r4, #8
 8011518:	e752      	b.n	80113c0 <_malloc_r+0x58>
 801151a:	1861      	adds	r1, r4, r1
 801151c:	4630      	mov	r0, r6
 801151e:	684b      	ldr	r3, [r1, #4]
 8011520:	f043 0201 	orr.w	r2, r3, #1
 8011524:	604a      	str	r2, [r1, #4]
 8011526:	f000 fb11 	bl	8011b4c <__malloc_unlock>
 801152a:	3408      	adds	r4, #8
 801152c:	e748      	b.n	80113c0 <_malloc_r+0x58>
 801152e:	68bc      	ldr	r4, [r7, #8]
 8011530:	6860      	ldr	r0, [r4, #4]
 8011532:	f020 0903 	bic.w	r9, r0, #3
 8011536:	45a9      	cmp	r9, r5
 8011538:	d304      	bcc.n	8011544 <_malloc_r+0x1dc>
 801153a:	ebc5 0309 	rsb	r3, r5, r9
 801153e:	2b0f      	cmp	r3, #15
 8011540:	f300 808d 	bgt.w	801165e <_malloc_r+0x2f6>
 8011544:	4a4d      	ldr	r2, [pc, #308]	; (801167c <_malloc_r+0x314>)
 8011546:	4b4e      	ldr	r3, [pc, #312]	; (8011680 <_malloc_r+0x318>)
 8011548:	6811      	ldr	r1, [r2, #0]
 801154a:	6818      	ldr	r0, [r3, #0]
 801154c:	3101      	adds	r1, #1
 801154e:	eb04 0b09 	add.w	fp, r4, r9
 8011552:	eb05 0300 	add.w	r3, r5, r0
 8011556:	f000 815a 	beq.w	801180e <_malloc_r+0x4a6>
 801155a:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 801155e:	300f      	adds	r0, #15
 8011560:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 8011564:	f021 0c0f 	bic.w	ip, r1, #15
 8011568:	4661      	mov	r1, ip
 801156a:	4630      	mov	r0, r6
 801156c:	e88d 1004 	stmia.w	sp, {r2, ip}
 8011570:	f000 fffa 	bl	8012568 <_sbrk_r>
 8011574:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011578:	4680      	mov	r8, r0
 801157a:	e89d 1004 	ldmia.w	sp, {r2, ip}
 801157e:	f000 8152 	beq.w	8011826 <_malloc_r+0x4be>
 8011582:	4583      	cmp	fp, r0
 8011584:	f200 810f 	bhi.w	80117a6 <_malloc_r+0x43e>
 8011588:	f8df a100 	ldr.w	sl, [pc, #256]	; 801168c <_malloc_r+0x324>
 801158c:	f8da 3000 	ldr.w	r3, [sl]
 8011590:	45c3      	cmp	fp, r8
 8011592:	4463      	add	r3, ip
 8011594:	f8ca 3000 	str.w	r3, [sl]
 8011598:	f000 814a 	beq.w	8011830 <_malloc_r+0x4c8>
 801159c:	6812      	ldr	r2, [r2, #0]
 801159e:	3201      	adds	r2, #1
 80115a0:	f000 8157 	beq.w	8011852 <_malloc_r+0x4ea>
 80115a4:	ebcb 0b08 	rsb	fp, fp, r8
 80115a8:	445b      	add	r3, fp
 80115aa:	f8ca 3000 	str.w	r3, [sl]
 80115ae:	f018 0107 	ands.w	r1, r8, #7
 80115b2:	f000 810b 	beq.w	80117cc <_malloc_r+0x464>
 80115b6:	f1c1 0008 	rsb	r0, r1, #8
 80115ba:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 80115be:	4480      	add	r8, r0
 80115c0:	f103 0208 	add.w	r2, r3, #8
 80115c4:	eb08 010c 	add.w	r1, r8, ip
 80115c8:	0508      	lsls	r0, r1, #20
 80115ca:	0d03      	lsrs	r3, r0, #20
 80115cc:	ebc3 0b02 	rsb	fp, r3, r2
 80115d0:	4630      	mov	r0, r6
 80115d2:	4659      	mov	r1, fp
 80115d4:	f000 ffc8 	bl	8012568 <_sbrk_r>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	f000 8146 	beq.w	801186a <_malloc_r+0x502>
 80115de:	ebc8 0200 	rsb	r2, r8, r0
 80115e2:	eb0b 0102 	add.w	r1, fp, r2
 80115e6:	f041 0001 	orr.w	r0, r1, #1
 80115ea:	f8da 3000 	ldr.w	r3, [sl]
 80115ee:	f8c7 8008 	str.w	r8, [r7, #8]
 80115f2:	445b      	add	r3, fp
 80115f4:	42bc      	cmp	r4, r7
 80115f6:	f8ca 3000 	str.w	r3, [sl]
 80115fa:	f8c8 0004 	str.w	r0, [r8, #4]
 80115fe:	d015      	beq.n	801162c <_malloc_r+0x2c4>
 8011600:	f1b9 0f0f 	cmp.w	r9, #15
 8011604:	f240 80f2 	bls.w	80117ec <_malloc_r+0x484>
 8011608:	6861      	ldr	r1, [r4, #4]
 801160a:	f1a9 020c 	sub.w	r2, r9, #12
 801160e:	f022 0207 	bic.w	r2, r2, #7
 8011612:	18a0      	adds	r0, r4, r2
 8011614:	f001 0c01 	and.w	ip, r1, #1
 8011618:	ea42 0e0c 	orr.w	lr, r2, ip
 801161c:	2105      	movs	r1, #5
 801161e:	2a0f      	cmp	r2, #15
 8011620:	f8c4 e004 	str.w	lr, [r4, #4]
 8011624:	6041      	str	r1, [r0, #4]
 8011626:	6081      	str	r1, [r0, #8]
 8011628:	f200 8117 	bhi.w	801185a <_malloc_r+0x4f2>
 801162c:	4a15      	ldr	r2, [pc, #84]	; (8011684 <_malloc_r+0x31c>)
 801162e:	68bc      	ldr	r4, [r7, #8]
 8011630:	6810      	ldr	r0, [r2, #0]
 8011632:	4283      	cmp	r3, r0
 8011634:	bf88      	it	hi
 8011636:	6013      	strhi	r3, [r2, #0]
 8011638:	4a13      	ldr	r2, [pc, #76]	; (8011688 <_malloc_r+0x320>)
 801163a:	6811      	ldr	r1, [r2, #0]
 801163c:	428b      	cmp	r3, r1
 801163e:	bf88      	it	hi
 8011640:	6013      	strhi	r3, [r2, #0]
 8011642:	6863      	ldr	r3, [r4, #4]
 8011644:	f023 0003 	bic.w	r0, r3, #3
 8011648:	42a8      	cmp	r0, r5
 801164a:	ebc5 0300 	rsb	r3, r5, r0
 801164e:	d301      	bcc.n	8011654 <_malloc_r+0x2ec>
 8011650:	2b0f      	cmp	r3, #15
 8011652:	dc04      	bgt.n	801165e <_malloc_r+0x2f6>
 8011654:	4630      	mov	r0, r6
 8011656:	f000 fa79 	bl	8011b4c <__malloc_unlock>
 801165a:	2400      	movs	r4, #0
 801165c:	e6b0      	b.n	80113c0 <_malloc_r+0x58>
 801165e:	1962      	adds	r2, r4, r5
 8011660:	f043 0101 	orr.w	r1, r3, #1
 8011664:	f045 0501 	orr.w	r5, r5, #1
 8011668:	6065      	str	r5, [r4, #4]
 801166a:	4630      	mov	r0, r6
 801166c:	6051      	str	r1, [r2, #4]
 801166e:	60ba      	str	r2, [r7, #8]
 8011670:	f000 fa6c 	bl	8011b4c <__malloc_unlock>
 8011674:	3408      	adds	r4, #8
 8011676:	e6a3      	b.n	80113c0 <_malloc_r+0x58>
 8011678:	200004f0 	.word	0x200004f0
 801167c:	200008fc 	.word	0x200008fc
 8011680:	200009ec 	.word	0x200009ec
 8011684:	200009e8 	.word	0x200009e8
 8011688:	200009e4 	.word	0x200009e4
 801168c:	200009f0 	.word	0x200009f0
 8011690:	f1bc 0f14 	cmp.w	ip, #20
 8011694:	d97b      	bls.n	801178e <_malloc_r+0x426>
 8011696:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 801169a:	f200 808d 	bhi.w	80117b8 <_malloc_r+0x450>
 801169e:	ea4f 3415 	mov.w	r4, r5, lsr #12
 80116a2:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 80116a6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80116aa:	e6a2      	b.n	80113f2 <_malloc_r+0x8a>
 80116ac:	0a48      	lsrs	r0, r1, #9
 80116ae:	2804      	cmp	r0, #4
 80116b0:	d972      	bls.n	8011798 <_malloc_r+0x430>
 80116b2:	2814      	cmp	r0, #20
 80116b4:	f200 80ae 	bhi.w	8011814 <_malloc_r+0x4ac>
 80116b8:	f100 095b 	add.w	r9, r0, #91	; 0x5b
 80116bc:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80116c0:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 80116c4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80118b8 <_malloc_r+0x550>
 80116c8:	6883      	ldr	r3, [r0, #8]
 80116ca:	4283      	cmp	r3, r0
 80116cc:	f000 8081 	beq.w	80117d2 <_malloc_r+0x46a>
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	f022 0203 	bic.w	r2, r2, #3
 80116d6:	4291      	cmp	r1, r2
 80116d8:	d202      	bcs.n	80116e0 <_malloc_r+0x378>
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	4298      	cmp	r0, r3
 80116de:	d1f7      	bne.n	80116d0 <_malloc_r+0x368>
 80116e0:	68da      	ldr	r2, [r3, #12]
 80116e2:	f8d7 9004 	ldr.w	r9, [r7, #4]
 80116e6:	60e2      	str	r2, [r4, #12]
 80116e8:	60a3      	str	r3, [r4, #8]
 80116ea:	60dc      	str	r4, [r3, #12]
 80116ec:	6094      	str	r4, [r2, #8]
 80116ee:	e6c0      	b.n	8011472 <_malloc_r+0x10a>
 80116f0:	1961      	adds	r1, r4, r5
 80116f2:	f042 0001 	orr.w	r0, r2, #1
 80116f6:	f045 0501 	orr.w	r5, r5, #1
 80116fa:	6065      	str	r5, [r4, #4]
 80116fc:	6159      	str	r1, [r3, #20]
 80116fe:	6119      	str	r1, [r3, #16]
 8011700:	6048      	str	r0, [r1, #4]
 8011702:	f8c1 e00c 	str.w	lr, [r1, #12]
 8011706:	f8c1 e008 	str.w	lr, [r1, #8]
 801170a:	508a      	str	r2, [r1, r2]
 801170c:	4630      	mov	r0, r6
 801170e:	f000 fa1d 	bl	8011b4c <__malloc_unlock>
 8011712:	3408      	adds	r4, #8
 8011714:	e654      	b.n	80113c0 <_malloc_r+0x58>
 8011716:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801171a:	e6aa      	b.n	8011472 <_malloc_r+0x10a>
 801171c:	f108 0801 	add.w	r8, r8, #1
 8011720:	3408      	adds	r4, #8
 8011722:	f018 0f03 	tst.w	r8, #3
 8011726:	f47f aeba 	bne.w	801149e <_malloc_r+0x136>
 801172a:	4649      	mov	r1, r9
 801172c:	f01c 0f03 	tst.w	ip, #3
 8011730:	f1a1 0408 	sub.w	r4, r1, #8
 8011734:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011738:	f000 80b0 	beq.w	801189c <_malloc_r+0x534>
 801173c:	6809      	ldr	r1, [r1, #0]
 801173e:	42a1      	cmp	r1, r4
 8011740:	d0f4      	beq.n	801172c <_malloc_r+0x3c4>
 8011742:	687c      	ldr	r4, [r7, #4]
 8011744:	0040      	lsls	r0, r0, #1
 8011746:	42a0      	cmp	r0, r4
 8011748:	f63f aef1 	bhi.w	801152e <_malloc_r+0x1c6>
 801174c:	2800      	cmp	r0, #0
 801174e:	f43f aeee 	beq.w	801152e <_malloc_r+0x1c6>
 8011752:	4204      	tst	r4, r0
 8011754:	f000 80a7 	beq.w	80118a6 <_malloc_r+0x53e>
 8011758:	46c4      	mov	ip, r8
 801175a:	e69c      	b.n	8011496 <_malloc_r+0x12e>
 801175c:	f104 0308 	add.w	r3, r4, #8
 8011760:	6964      	ldr	r4, [r4, #20]
 8011762:	42a3      	cmp	r3, r4
 8011764:	bf08      	it	eq
 8011766:	f10c 0c02 	addeq.w	ip, ip, #2
 801176a:	f43f ae58 	beq.w	801141e <_malloc_r+0xb6>
 801176e:	e617      	b.n	80113a0 <_malloc_r+0x38>
 8011770:	1859      	adds	r1, r3, r1
 8011772:	461c      	mov	r4, r3
 8011774:	6848      	ldr	r0, [r1, #4]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	f854 2f08 	ldr.w	r2, [r4, #8]!
 801177c:	f040 0001 	orr.w	r0, r0, #1
 8011780:	6048      	str	r0, [r1, #4]
 8011782:	60d3      	str	r3, [r2, #12]
 8011784:	609a      	str	r2, [r3, #8]
 8011786:	4630      	mov	r0, r6
 8011788:	f000 f9e0 	bl	8011b4c <__malloc_unlock>
 801178c:	e618      	b.n	80113c0 <_malloc_r+0x58>
 801178e:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 8011792:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8011796:	e62c      	b.n	80113f2 <_malloc_r+0x8a>
 8011798:	ea4f 1891 	mov.w	r8, r1, lsr #6
 801179c:	f108 0938 	add.w	r9, r8, #56	; 0x38
 80117a0:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80117a4:	e78c      	b.n	80116c0 <_malloc_r+0x358>
 80117a6:	42bc      	cmp	r4, r7
 80117a8:	f43f aeee 	beq.w	8011588 <_malloc_r+0x220>
 80117ac:	4c42      	ldr	r4, [pc, #264]	; (80118b8 <_malloc_r+0x550>)
 80117ae:	68a4      	ldr	r4, [r4, #8]
 80117b0:	6862      	ldr	r2, [r4, #4]
 80117b2:	f022 0003 	bic.w	r0, r2, #3
 80117b6:	e747      	b.n	8011648 <_malloc_r+0x2e0>
 80117b8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80117bc:	d81c      	bhi.n	80117f8 <_malloc_r+0x490>
 80117be:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 80117c2:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 80117c6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80117ca:	e612      	b.n	80113f2 <_malloc_r+0x8a>
 80117cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80117d0:	e6f8      	b.n	80115c4 <_malloc_r+0x25c>
 80117d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80117d6:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80117da:	2101      	movs	r1, #1
 80117dc:	fa01 f202 	lsl.w	r2, r1, r2
 80117e0:	ea42 0900 	orr.w	r9, r2, r0
 80117e4:	f8c8 9004 	str.w	r9, [r8, #4]
 80117e8:	461a      	mov	r2, r3
 80117ea:	e77c      	b.n	80116e6 <_malloc_r+0x37e>
 80117ec:	2201      	movs	r2, #1
 80117ee:	f8c8 2004 	str.w	r2, [r8, #4]
 80117f2:	4644      	mov	r4, r8
 80117f4:	2000      	movs	r0, #0
 80117f6:	e727      	b.n	8011648 <_malloc_r+0x2e0>
 80117f8:	f240 5354 	movw	r3, #1364	; 0x554
 80117fc:	459c      	cmp	ip, r3
 80117fe:	d824      	bhi.n	801184a <_malloc_r+0x4e2>
 8011800:	ea4f 4095 	mov.w	r0, r5, lsr #18
 8011804:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 8011808:	ea4f 014e 	mov.w	r1, lr, lsl #1
 801180c:	e5f1      	b.n	80113f2 <_malloc_r+0x8a>
 801180e:	f103 0c10 	add.w	ip, r3, #16
 8011812:	e6a9      	b.n	8011568 <_malloc_r+0x200>
 8011814:	2854      	cmp	r0, #84	; 0x54
 8011816:	d82c      	bhi.n	8011872 <_malloc_r+0x50a>
 8011818:	ea4f 3211 	mov.w	r2, r1, lsr #12
 801181c:	f102 096e 	add.w	r9, r2, #110	; 0x6e
 8011820:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8011824:	e74c      	b.n	80116c0 <_malloc_r+0x358>
 8011826:	68bc      	ldr	r4, [r7, #8]
 8011828:	6861      	ldr	r1, [r4, #4]
 801182a:	f021 0003 	bic.w	r0, r1, #3
 801182e:	e70b      	b.n	8011648 <_malloc_r+0x2e0>
 8011830:	ea4f 500b 	mov.w	r0, fp, lsl #20
 8011834:	0d01      	lsrs	r1, r0, #20
 8011836:	2900      	cmp	r1, #0
 8011838:	f47f aeb0 	bne.w	801159c <_malloc_r+0x234>
 801183c:	68b8      	ldr	r0, [r7, #8]
 801183e:	eb0c 0109 	add.w	r1, ip, r9
 8011842:	f041 0401 	orr.w	r4, r1, #1
 8011846:	6044      	str	r4, [r0, #4]
 8011848:	e6f0      	b.n	801162c <_malloc_r+0x2c4>
 801184a:	21fc      	movs	r1, #252	; 0xfc
 801184c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8011850:	e5cf      	b.n	80113f2 <_malloc_r+0x8a>
 8011852:	481a      	ldr	r0, [pc, #104]	; (80118bc <_malloc_r+0x554>)
 8011854:	f8c0 8000 	str.w	r8, [r0]
 8011858:	e6a9      	b.n	80115ae <_malloc_r+0x246>
 801185a:	f104 0108 	add.w	r1, r4, #8
 801185e:	4c18      	ldr	r4, [pc, #96]	; (80118c0 <_malloc_r+0x558>)
 8011860:	4630      	mov	r0, r6
 8011862:	f7ff fbd5 	bl	8011010 <_free_r>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	e6e0      	b.n	801162c <_malloc_r+0x2c4>
 801186a:	2001      	movs	r0, #1
 801186c:	f04f 0b00 	mov.w	fp, #0
 8011870:	e6bb      	b.n	80115ea <_malloc_r+0x282>
 8011872:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8011876:	d806      	bhi.n	8011886 <_malloc_r+0x51e>
 8011878:	ea4f 33d1 	mov.w	r3, r1, lsr #15
 801187c:	f103 0977 	add.w	r9, r3, #119	; 0x77
 8011880:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8011884:	e71c      	b.n	80116c0 <_malloc_r+0x358>
 8011886:	f240 5354 	movw	r3, #1364	; 0x554
 801188a:	4298      	cmp	r0, r3
 801188c:	d80f      	bhi.n	80118ae <_malloc_r+0x546>
 801188e:	ea4f 4091 	mov.w	r0, r1, lsr #18
 8011892:	f100 097c 	add.w	r9, r0, #124	; 0x7c
 8011896:	ea4f 0249 	mov.w	r2, r9, lsl #1
 801189a:	e711      	b.n	80116c0 <_malloc_r+0x358>
 801189c:	687c      	ldr	r4, [r7, #4]
 801189e:	ea24 0400 	bic.w	r4, r4, r0
 80118a2:	607c      	str	r4, [r7, #4]
 80118a4:	e74e      	b.n	8011744 <_malloc_r+0x3dc>
 80118a6:	0040      	lsls	r0, r0, #1
 80118a8:	f108 0804 	add.w	r8, r8, #4
 80118ac:	e751      	b.n	8011752 <_malloc_r+0x3ea>
 80118ae:	22fc      	movs	r2, #252	; 0xfc
 80118b0:	f04f 097e 	mov.w	r9, #126	; 0x7e
 80118b4:	e704      	b.n	80116c0 <_malloc_r+0x358>
 80118b6:	bf00      	nop
 80118b8:	200004f0 	.word	0x200004f0
 80118bc:	200008fc 	.word	0x200008fc
 80118c0:	200009f0 	.word	0x200009f0

080118c4 <memchr>:
 80118c4:	0783      	lsls	r3, r0, #30
 80118c6:	b4f0      	push	{r4, r5, r6, r7}
 80118c8:	b2c9      	uxtb	r1, r1
 80118ca:	f000 8096 	beq.w	80119fa <memchr+0x136>
 80118ce:	1e53      	subs	r3, r2, #1
 80118d0:	2a00      	cmp	r2, #0
 80118d2:	f000 8094 	beq.w	80119fe <memchr+0x13a>
 80118d6:	7802      	ldrb	r2, [r0, #0]
 80118d8:	428a      	cmp	r2, r1
 80118da:	d00b      	beq.n	80118f4 <memchr+0x30>
 80118dc:	1c42      	adds	r2, r0, #1
 80118de:	07d8      	lsls	r0, r3, #31
 80118e0:	d51a      	bpl.n	8011918 <memchr+0x54>
 80118e2:	f012 0f03 	tst.w	r2, #3
 80118e6:	4610      	mov	r0, r2
 80118e8:	d01c      	beq.n	8011924 <memchr+0x60>
 80118ea:	7814      	ldrb	r4, [r2, #0]
 80118ec:	3b01      	subs	r3, #1
 80118ee:	3201      	adds	r2, #1
 80118f0:	428c      	cmp	r4, r1
 80118f2:	d111      	bne.n	8011918 <memchr+0x54>
 80118f4:	bcf0      	pop	{r4, r5, r6, r7}
 80118f6:	4770      	bx	lr
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d07c      	beq.n	80119f6 <memchr+0x132>
 80118fc:	7812      	ldrb	r2, [r2, #0]
 80118fe:	3b01      	subs	r3, #1
 8011900:	428a      	cmp	r2, r1
 8011902:	d0f7      	beq.n	80118f4 <memchr+0x30>
 8011904:	f014 0f03 	tst.w	r4, #3
 8011908:	4620      	mov	r0, r4
 801190a:	f104 0201 	add.w	r2, r4, #1
 801190e:	d009      	beq.n	8011924 <memchr+0x60>
 8011910:	7824      	ldrb	r4, [r4, #0]
 8011912:	3b01      	subs	r3, #1
 8011914:	428c      	cmp	r4, r1
 8011916:	d0ed      	beq.n	80118f4 <memchr+0x30>
 8011918:	f012 0f03 	tst.w	r2, #3
 801191c:	4610      	mov	r0, r2
 801191e:	f102 0401 	add.w	r4, r2, #1
 8011922:	d1e9      	bne.n	80118f8 <memchr+0x34>
 8011924:	2b03      	cmp	r3, #3
 8011926:	d93f      	bls.n	80119a8 <memchr+0xe4>
 8011928:	6804      	ldr	r4, [r0, #0]
 801192a:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 801192e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8011932:	ea85 0704 	eor.w	r7, r5, r4
 8011936:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 801193a:	ea22 0207 	bic.w	r2, r2, r7
 801193e:	1f1e      	subs	r6, r3, #4
 8011940:	1d04      	adds	r4, r0, #4
 8011942:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011946:	f3c6 0780 	ubfx	r7, r6, #2, #1
 801194a:	d12d      	bne.n	80119a8 <memchr+0xe4>
 801194c:	2e03      	cmp	r6, #3
 801194e:	4633      	mov	r3, r6
 8011950:	d929      	bls.n	80119a6 <memchr+0xe2>
 8011952:	b167      	cbz	r7, 801196e <memchr+0xaa>
 8011954:	4620      	mov	r0, r4
 8011956:	3404      	adds	r4, #4
 8011958:	6806      	ldr	r6, [r0, #0]
 801195a:	ea85 0206 	eor.w	r2, r5, r6
 801195e:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 8011962:	ea26 0202 	bic.w	r2, r6, r2
 8011966:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801196a:	d019      	beq.n	80119a0 <memchr+0xdc>
 801196c:	e01c      	b.n	80119a8 <memchr+0xe4>
 801196e:	1d26      	adds	r6, r4, #4
 8011970:	4620      	mov	r0, r4
 8011972:	6824      	ldr	r4, [r4, #0]
 8011974:	ea85 0204 	eor.w	r2, r5, r4
 8011978:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 801197c:	ea24 0202 	bic.w	r2, r4, r2
 8011980:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8011984:	d110      	bne.n	80119a8 <memchr+0xe4>
 8011986:	6834      	ldr	r4, [r6, #0]
 8011988:	ea85 0204 	eor.w	r2, r5, r4
 801198c:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8011990:	ea24 0202 	bic.w	r2, r4, r2
 8011994:	3b04      	subs	r3, #4
 8011996:	1d34      	adds	r4, r6, #4
 8011998:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801199c:	4630      	mov	r0, r6
 801199e:	d103      	bne.n	80119a8 <memchr+0xe4>
 80119a0:	3b04      	subs	r3, #4
 80119a2:	2b03      	cmp	r3, #3
 80119a4:	d8e3      	bhi.n	801196e <memchr+0xaa>
 80119a6:	4620      	mov	r0, r4
 80119a8:	1e5d      	subs	r5, r3, #1
 80119aa:	b323      	cbz	r3, 80119f6 <memchr+0x132>
 80119ac:	7803      	ldrb	r3, [r0, #0]
 80119ae:	428b      	cmp	r3, r1
 80119b0:	d0a0      	beq.n	80118f4 <memchr+0x30>
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	2200      	movs	r2, #0
 80119b6:	07e8      	lsls	r0, r5, #31
 80119b8:	d514      	bpl.n	80119e4 <memchr+0x120>
 80119ba:	4618      	mov	r0, r3
 80119bc:	2201      	movs	r2, #1
 80119be:	7804      	ldrb	r4, [r0, #0]
 80119c0:	3301      	adds	r3, #1
 80119c2:	428c      	cmp	r4, r1
 80119c4:	d096      	beq.n	80118f4 <memchr+0x30>
 80119c6:	4295      	cmp	r5, r2
 80119c8:	4618      	mov	r0, r3
 80119ca:	f103 0401 	add.w	r4, r3, #1
 80119ce:	f102 0202 	add.w	r2, r2, #2
 80119d2:	d00e      	beq.n	80119f2 <memchr+0x12e>
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	428b      	cmp	r3, r1
 80119d8:	d08c      	beq.n	80118f4 <memchr+0x30>
 80119da:	1c63      	adds	r3, r4, #1
 80119dc:	4620      	mov	r0, r4
 80119de:	7824      	ldrb	r4, [r4, #0]
 80119e0:	428c      	cmp	r4, r1
 80119e2:	d087      	beq.n	80118f4 <memchr+0x30>
 80119e4:	4295      	cmp	r5, r2
 80119e6:	4618      	mov	r0, r3
 80119e8:	f103 0401 	add.w	r4, r3, #1
 80119ec:	f102 0202 	add.w	r2, r2, #2
 80119f0:	d1f0      	bne.n	80119d4 <memchr+0x110>
 80119f2:	2000      	movs	r0, #0
 80119f4:	e77e      	b.n	80118f4 <memchr+0x30>
 80119f6:	4618      	mov	r0, r3
 80119f8:	e77c      	b.n	80118f4 <memchr+0x30>
 80119fa:	4613      	mov	r3, r2
 80119fc:	e792      	b.n	8011924 <memchr+0x60>
 80119fe:	4610      	mov	r0, r2
 8011a00:	e778      	b.n	80118f4 <memchr+0x30>
 8011a02:	bf00      	nop

08011a04 <memcpy>:
 8011a04:	2a0f      	cmp	r2, #15
 8011a06:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8011a0a:	f240 8095 	bls.w	8011b38 <memcpy+0x134>
 8011a0e:	ea41 0300 	orr.w	r3, r1, r0
 8011a12:	079b      	lsls	r3, r3, #30
 8011a14:	f040 8092 	bne.w	8011b3c <memcpy+0x138>
 8011a18:	680c      	ldr	r4, [r1, #0]
 8011a1a:	6004      	str	r4, [r0, #0]
 8011a1c:	684d      	ldr	r5, [r1, #4]
 8011a1e:	6045      	str	r5, [r0, #4]
 8011a20:	688e      	ldr	r6, [r1, #8]
 8011a22:	f1a2 0310 	sub.w	r3, r2, #16
 8011a26:	6086      	str	r6, [r0, #8]
 8011a28:	68cc      	ldr	r4, [r1, #12]
 8011a2a:	461d      	mov	r5, r3
 8011a2c:	2d0f      	cmp	r5, #15
 8011a2e:	60c4      	str	r4, [r0, #12]
 8011a30:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8011a34:	f101 0410 	add.w	r4, r1, #16
 8011a38:	f100 0310 	add.w	r3, r0, #16
 8011a3c:	d922      	bls.n	8011a84 <memcpy+0x80>
 8011a3e:	b166      	cbz	r6, 8011a5a <memcpy+0x56>
 8011a40:	6826      	ldr	r6, [r4, #0]
 8011a42:	601e      	str	r6, [r3, #0]
 8011a44:	6866      	ldr	r6, [r4, #4]
 8011a46:	605e      	str	r6, [r3, #4]
 8011a48:	68a6      	ldr	r6, [r4, #8]
 8011a4a:	609e      	str	r6, [r3, #8]
 8011a4c:	68e6      	ldr	r6, [r4, #12]
 8011a4e:	3d10      	subs	r5, #16
 8011a50:	60de      	str	r6, [r3, #12]
 8011a52:	3410      	adds	r4, #16
 8011a54:	3310      	adds	r3, #16
 8011a56:	2d0f      	cmp	r5, #15
 8011a58:	d914      	bls.n	8011a84 <memcpy+0x80>
 8011a5a:	6826      	ldr	r6, [r4, #0]
 8011a5c:	601e      	str	r6, [r3, #0]
 8011a5e:	6866      	ldr	r6, [r4, #4]
 8011a60:	605e      	str	r6, [r3, #4]
 8011a62:	68a6      	ldr	r6, [r4, #8]
 8011a64:	609e      	str	r6, [r3, #8]
 8011a66:	68e6      	ldr	r6, [r4, #12]
 8011a68:	60de      	str	r6, [r3, #12]
 8011a6a:	6926      	ldr	r6, [r4, #16]
 8011a6c:	611e      	str	r6, [r3, #16]
 8011a6e:	6966      	ldr	r6, [r4, #20]
 8011a70:	615e      	str	r6, [r3, #20]
 8011a72:	69a6      	ldr	r6, [r4, #24]
 8011a74:	619e      	str	r6, [r3, #24]
 8011a76:	69e6      	ldr	r6, [r4, #28]
 8011a78:	3d20      	subs	r5, #32
 8011a7a:	61de      	str	r6, [r3, #28]
 8011a7c:	3420      	adds	r4, #32
 8011a7e:	3320      	adds	r3, #32
 8011a80:	2d0f      	cmp	r5, #15
 8011a82:	d8ea      	bhi.n	8011a5a <memcpy+0x56>
 8011a84:	f1a2 0310 	sub.w	r3, r2, #16
 8011a88:	f023 040f 	bic.w	r4, r3, #15
 8011a8c:	f002 030f 	and.w	r3, r2, #15
 8011a90:	3410      	adds	r4, #16
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	eb00 0804 	add.w	r8, r0, r4
 8011a98:	4421      	add	r1, r4
 8011a9a:	d951      	bls.n	8011b40 <memcpy+0x13c>
 8011a9c:	f1a3 0904 	sub.w	r9, r3, #4
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8011aa6:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 8011aaa:	f853 6b04 	ldr.w	r6, [r3], #4
 8011aae:	ebc1 050c 	rsb	r5, r1, ip
 8011ab2:	4644      	mov	r4, r8
 8011ab4:	f10c 0c04 	add.w	ip, ip, #4
 8011ab8:	4563      	cmp	r3, ip
 8011aba:	f844 6b04 	str.w	r6, [r4], #4
 8011abe:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8011ac2:	d012      	beq.n	8011aea <memcpy+0xe6>
 8011ac4:	b12d      	cbz	r5, 8011ad2 <memcpy+0xce>
 8011ac6:	f853 5b04 	ldr.w	r5, [r3], #4
 8011aca:	4563      	cmp	r3, ip
 8011acc:	f844 5b04 	str.w	r5, [r4], #4
 8011ad0:	d00b      	beq.n	8011aea <memcpy+0xe6>
 8011ad2:	461e      	mov	r6, r3
 8011ad4:	4625      	mov	r5, r4
 8011ad6:	f856 7b04 	ldr.w	r7, [r6], #4
 8011ada:	f845 7b04 	str.w	r7, [r5], #4
 8011ade:	685f      	ldr	r7, [r3, #4]
 8011ae0:	1d33      	adds	r3, r6, #4
 8011ae2:	6067      	str	r7, [r4, #4]
 8011ae4:	1d2c      	adds	r4, r5, #4
 8011ae6:	4563      	cmp	r3, ip
 8011ae8:	d1f3      	bne.n	8011ad2 <memcpy+0xce>
 8011aea:	f109 0301 	add.w	r3, r9, #1
 8011aee:	009c      	lsls	r4, r3, #2
 8011af0:	1909      	adds	r1, r1, r4
 8011af2:	f002 0203 	and.w	r2, r2, #3
 8011af6:	4444      	add	r4, r8
 8011af8:	b1da      	cbz	r2, 8011b32 <memcpy+0x12e>
 8011afa:	4623      	mov	r3, r4
 8011afc:	780d      	ldrb	r5, [r1, #0]
 8011afe:	f803 5b01 	strb.w	r5, [r3], #1
 8011b02:	18a2      	adds	r2, r4, r2
 8011b04:	43e4      	mvns	r4, r4
 8011b06:	1914      	adds	r4, r2, r4
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	f004 0401 	and.w	r4, r4, #1
 8011b0e:	d010      	beq.n	8011b32 <memcpy+0x12e>
 8011b10:	b12c      	cbz	r4, 8011b1e <memcpy+0x11a>
 8011b12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b16:	f803 4b01 	strb.w	r4, [r3], #1
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d009      	beq.n	8011b32 <memcpy+0x12e>
 8011b1e:	784d      	ldrb	r5, [r1, #1]
 8011b20:	461c      	mov	r4, r3
 8011b22:	f804 5b01 	strb.w	r5, [r4], #1
 8011b26:	788d      	ldrb	r5, [r1, #2]
 8011b28:	705d      	strb	r5, [r3, #1]
 8011b2a:	1c63      	adds	r3, r4, #1
 8011b2c:	3102      	adds	r1, #2
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d1f5      	bne.n	8011b1e <memcpy+0x11a>
 8011b32:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8011b36:	4770      	bx	lr
 8011b38:	4604      	mov	r4, r0
 8011b3a:	e7dd      	b.n	8011af8 <memcpy+0xf4>
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	e7dc      	b.n	8011afa <memcpy+0xf6>
 8011b40:	4644      	mov	r4, r8
 8011b42:	461a      	mov	r2, r3
 8011b44:	e7d8      	b.n	8011af8 <memcpy+0xf4>
 8011b46:	bf00      	nop

08011b48 <__malloc_lock>:
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop

08011b4c <__malloc_unlock>:
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop

08011b50 <_Balloc>:
 8011b50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011b52:	b570      	push	{r4, r5, r6, lr}
 8011b54:	4605      	mov	r5, r0
 8011b56:	460c      	mov	r4, r1
 8011b58:	b14b      	cbz	r3, 8011b6e <_Balloc+0x1e>
 8011b5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011b5e:	b180      	cbz	r0, 8011b82 <_Balloc+0x32>
 8011b60:	6801      	ldr	r1, [r0, #0]
 8011b62:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8011b66:	2300      	movs	r3, #0
 8011b68:	6103      	str	r3, [r0, #16]
 8011b6a:	60c3      	str	r3, [r0, #12]
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	2104      	movs	r1, #4
 8011b70:	2221      	movs	r2, #33	; 0x21
 8011b72:	f000 fdf9 	bl	8012768 <_calloc_r>
 8011b76:	4603      	mov	r3, r0
 8011b78:	64e8      	str	r0, [r5, #76]	; 0x4c
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	d1ed      	bne.n	8011b5a <_Balloc+0xa>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	2101      	movs	r1, #1
 8011b84:	fa01 f604 	lsl.w	r6, r1, r4
 8011b88:	1d72      	adds	r2, r6, #5
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	0092      	lsls	r2, r2, #2
 8011b8e:	f000 fdeb 	bl	8012768 <_calloc_r>
 8011b92:	2800      	cmp	r0, #0
 8011b94:	d0f3      	beq.n	8011b7e <_Balloc+0x2e>
 8011b96:	6044      	str	r4, [r0, #4]
 8011b98:	6086      	str	r6, [r0, #8]
 8011b9a:	e7e4      	b.n	8011b66 <_Balloc+0x16>

08011b9c <_Bfree>:
 8011b9c:	b131      	cbz	r1, 8011bac <_Bfree+0x10>
 8011b9e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011ba0:	684a      	ldr	r2, [r1, #4]
 8011ba2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ba6:	6008      	str	r0, [r1, #0]
 8011ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop

08011bb0 <__multadd>:
 8011bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb4:	460e      	mov	r6, r1
 8011bb6:	6949      	ldr	r1, [r1, #20]
 8011bb8:	6937      	ldr	r7, [r6, #16]
 8011bba:	b28c      	uxth	r4, r1
 8011bbc:	0c0d      	lsrs	r5, r1, #16
 8011bbe:	fb02 3304 	mla	r3, r2, r4, r3
 8011bc2:	fb02 f105 	mul.w	r1, r2, r5
 8011bc6:	eb01 4513 	add.w	r5, r1, r3, lsr #16
 8011bca:	f106 0418 	add.w	r4, r6, #24
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 8011bd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bd8:	2301      	movs	r3, #1
 8011bda:	1e79      	subs	r1, r7, #1
 8011bdc:	0c2d      	lsrs	r5, r5, #16
 8011bde:	429f      	cmp	r7, r3
 8011be0:	4680      	mov	r8, r0
 8011be2:	f001 0001 	and.w	r0, r1, #1
 8011be6:	dd39      	ble.n	8011c5c <__multadd+0xac>
 8011be8:	b198      	cbz	r0, 8011c12 <__multadd+0x62>
 8011bea:	6824      	ldr	r4, [r4, #0]
 8011bec:	b2a3      	uxth	r3, r4
 8011bee:	0c21      	lsrs	r1, r4, #16
 8011bf0:	fb02 5503 	mla	r5, r2, r3, r5
 8011bf4:	fb02 f101 	mul.w	r1, r2, r1
 8011bf8:	b2ab      	uxth	r3, r5
 8011bfa:	eb01 4015 	add.w	r0, r1, r5, lsr #16
 8011bfe:	eb03 4100 	add.w	r1, r3, r0, lsl #16
 8011c02:	f106 041c 	add.w	r4, r6, #28
 8011c06:	2302      	movs	r3, #2
 8011c08:	0c05      	lsrs	r5, r0, #16
 8011c0a:	429f      	cmp	r7, r3
 8011c0c:	f844 1c04 	str.w	r1, [r4, #-4]
 8011c10:	dd24      	ble.n	8011c5c <__multadd+0xac>
 8011c12:	6820      	ldr	r0, [r4, #0]
 8011c14:	b281      	uxth	r1, r0
 8011c16:	0c00      	lsrs	r0, r0, #16
 8011c18:	fb02 5101 	mla	r1, r2, r1, r5
 8011c1c:	fb02 f000 	mul.w	r0, r2, r0
 8011c20:	4625      	mov	r5, r4
 8011c22:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 8011c26:	b289      	uxth	r1, r1
 8011c28:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011c2c:	f845 1b04 	str.w	r1, [r5], #4
 8011c30:	6864      	ldr	r4, [r4, #4]
 8011c32:	fa1f fc84 	uxth.w	ip, r4
 8011c36:	0c21      	lsrs	r1, r4, #16
 8011c38:	fb02 fc0c 	mul.w	ip, r2, ip
 8011c3c:	eb0c 4010 	add.w	r0, ip, r0, lsr #16
 8011c40:	fb02 f101 	mul.w	r1, r2, r1
 8011c44:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 8011c48:	462c      	mov	r4, r5
 8011c4a:	3302      	adds	r3, #2
 8011c4c:	b285      	uxth	r5, r0
 8011c4e:	eb05 4001 	add.w	r0, r5, r1, lsl #16
 8011c52:	0c0d      	lsrs	r5, r1, #16
 8011c54:	429f      	cmp	r7, r3
 8011c56:	f844 0b04 	str.w	r0, [r4], #4
 8011c5a:	dcda      	bgt.n	8011c12 <__multadd+0x62>
 8011c5c:	b13d      	cbz	r5, 8011c6e <__multadd+0xbe>
 8011c5e:	68b2      	ldr	r2, [r6, #8]
 8011c60:	4297      	cmp	r7, r2
 8011c62:	da07      	bge.n	8011c74 <__multadd+0xc4>
 8011c64:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011c68:	3701      	adds	r7, #1
 8011c6a:	6155      	str	r5, [r2, #20]
 8011c6c:	6137      	str	r7, [r6, #16]
 8011c6e:	4630      	mov	r0, r6
 8011c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c74:	6873      	ldr	r3, [r6, #4]
 8011c76:	4640      	mov	r0, r8
 8011c78:	1c59      	adds	r1, r3, #1
 8011c7a:	f7ff ff69 	bl	8011b50 <_Balloc>
 8011c7e:	6931      	ldr	r1, [r6, #16]
 8011c80:	1c8a      	adds	r2, r1, #2
 8011c82:	4604      	mov	r4, r0
 8011c84:	f106 010c 	add.w	r1, r6, #12
 8011c88:	f100 000c 	add.w	r0, r0, #12
 8011c8c:	0092      	lsls	r2, r2, #2
 8011c8e:	f7ff feb9 	bl	8011a04 <memcpy>
 8011c92:	6870      	ldr	r0, [r6, #4]
 8011c94:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8011c98:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8011c9c:	6031      	str	r1, [r6, #0]
 8011c9e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011ca2:	4626      	mov	r6, r4
 8011ca4:	e7de      	b.n	8011c64 <__multadd+0xb4>
 8011ca6:	bf00      	nop

08011ca8 <__hi0bits>:
 8011ca8:	0c02      	lsrs	r2, r0, #16
 8011caa:	4603      	mov	r3, r0
 8011cac:	d116      	bne.n	8011cdc <__hi0bits+0x34>
 8011cae:	0403      	lsls	r3, r0, #16
 8011cb0:	2010      	movs	r0, #16
 8011cb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011cb6:	d101      	bne.n	8011cbc <__hi0bits+0x14>
 8011cb8:	3008      	adds	r0, #8
 8011cba:	021b      	lsls	r3, r3, #8
 8011cbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011cc0:	d101      	bne.n	8011cc6 <__hi0bits+0x1e>
 8011cc2:	3004      	adds	r0, #4
 8011cc4:	011b      	lsls	r3, r3, #4
 8011cc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011cca:	d101      	bne.n	8011cd0 <__hi0bits+0x28>
 8011ccc:	3002      	adds	r0, #2
 8011cce:	009b      	lsls	r3, r3, #2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	db02      	blt.n	8011cda <__hi0bits+0x32>
 8011cd4:	005b      	lsls	r3, r3, #1
 8011cd6:	d403      	bmi.n	8011ce0 <__hi0bits+0x38>
 8011cd8:	2020      	movs	r0, #32
 8011cda:	4770      	bx	lr
 8011cdc:	2000      	movs	r0, #0
 8011cde:	e7e8      	b.n	8011cb2 <__hi0bits+0xa>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	4770      	bx	lr

08011ce4 <__lo0bits>:
 8011ce4:	6803      	ldr	r3, [r0, #0]
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	f013 0007 	ands.w	r0, r3, #7
 8011cec:	d007      	beq.n	8011cfe <__lo0bits+0x1a>
 8011cee:	07d9      	lsls	r1, r3, #31
 8011cf0:	d41f      	bmi.n	8011d32 <__lo0bits+0x4e>
 8011cf2:	0798      	lsls	r0, r3, #30
 8011cf4:	d41f      	bmi.n	8011d36 <__lo0bits+0x52>
 8011cf6:	0898      	lsrs	r0, r3, #2
 8011cf8:	6010      	str	r0, [r2, #0]
 8011cfa:	2002      	movs	r0, #2
 8011cfc:	4770      	bx	lr
 8011cfe:	b299      	uxth	r1, r3
 8011d00:	b909      	cbnz	r1, 8011d06 <__lo0bits+0x22>
 8011d02:	0c1b      	lsrs	r3, r3, #16
 8011d04:	2010      	movs	r0, #16
 8011d06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011d0a:	d101      	bne.n	8011d10 <__lo0bits+0x2c>
 8011d0c:	3008      	adds	r0, #8
 8011d0e:	0a1b      	lsrs	r3, r3, #8
 8011d10:	0719      	lsls	r1, r3, #28
 8011d12:	d101      	bne.n	8011d18 <__lo0bits+0x34>
 8011d14:	3004      	adds	r0, #4
 8011d16:	091b      	lsrs	r3, r3, #4
 8011d18:	0799      	lsls	r1, r3, #30
 8011d1a:	d101      	bne.n	8011d20 <__lo0bits+0x3c>
 8011d1c:	3002      	adds	r0, #2
 8011d1e:	089b      	lsrs	r3, r3, #2
 8011d20:	07d9      	lsls	r1, r3, #31
 8011d22:	d404      	bmi.n	8011d2e <__lo0bits+0x4a>
 8011d24:	085b      	lsrs	r3, r3, #1
 8011d26:	d101      	bne.n	8011d2c <__lo0bits+0x48>
 8011d28:	2020      	movs	r0, #32
 8011d2a:	4770      	bx	lr
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	4770      	bx	lr
 8011d32:	2000      	movs	r0, #0
 8011d34:	4770      	bx	lr
 8011d36:	0859      	lsrs	r1, r3, #1
 8011d38:	6011      	str	r1, [r2, #0]
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop

08011d40 <__i2b>:
 8011d40:	b510      	push	{r4, lr}
 8011d42:	460c      	mov	r4, r1
 8011d44:	2101      	movs	r1, #1
 8011d46:	f7ff ff03 	bl	8011b50 <_Balloc>
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	6144      	str	r4, [r0, #20]
 8011d4e:	6102      	str	r2, [r0, #16]
 8011d50:	bd10      	pop	{r4, pc}
 8011d52:	bf00      	nop

08011d54 <__multiply>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	690c      	ldr	r4, [r1, #16]
 8011d5a:	6917      	ldr	r7, [r2, #16]
 8011d5c:	42bc      	cmp	r4, r7
 8011d5e:	b085      	sub	sp, #20
 8011d60:	460e      	mov	r6, r1
 8011d62:	4690      	mov	r8, r2
 8011d64:	da04      	bge.n	8011d70 <__multiply+0x1c>
 8011d66:	4622      	mov	r2, r4
 8011d68:	4646      	mov	r6, r8
 8011d6a:	463c      	mov	r4, r7
 8011d6c:	4688      	mov	r8, r1
 8011d6e:	4617      	mov	r7, r2
 8011d70:	68b3      	ldr	r3, [r6, #8]
 8011d72:	6871      	ldr	r1, [r6, #4]
 8011d74:	19e2      	adds	r2, r4, r7
 8011d76:	429a      	cmp	r2, r3
 8011d78:	bfc8      	it	gt
 8011d7a:	3101      	addgt	r1, #1
 8011d7c:	9201      	str	r2, [sp, #4]
 8011d7e:	f7ff fee7 	bl	8011b50 <_Balloc>
 8011d82:	9901      	ldr	r1, [sp, #4]
 8011d84:	9003      	str	r0, [sp, #12]
 8011d86:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011d8a:	3314      	adds	r3, #20
 8011d8c:	3014      	adds	r0, #20
 8011d8e:	4298      	cmp	r0, r3
 8011d90:	9302      	str	r3, [sp, #8]
 8011d92:	d21a      	bcs.n	8011dca <__multiply+0x76>
 8011d94:	9902      	ldr	r1, [sp, #8]
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	43c2      	mvns	r2, r0
 8011d9a:	188a      	adds	r2, r1, r2
 8011d9c:	9902      	ldr	r1, [sp, #8]
 8011d9e:	3318      	adds	r3, #24
 8011da0:	2500      	movs	r5, #0
 8011da2:	4299      	cmp	r1, r3
 8011da4:	6005      	str	r5, [r0, #0]
 8011da6:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8011daa:	d90e      	bls.n	8011dca <__multiply+0x76>
 8011dac:	b128      	cbz	r0, 8011dba <__multiply+0x66>
 8011dae:	601d      	str	r5, [r3, #0]
 8011db0:	9b03      	ldr	r3, [sp, #12]
 8011db2:	9a02      	ldr	r2, [sp, #8]
 8011db4:	331c      	adds	r3, #28
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d907      	bls.n	8011dca <__multiply+0x76>
 8011dba:	9802      	ldr	r0, [sp, #8]
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	f841 5b04 	str.w	r5, [r1], #4
 8011dc2:	605d      	str	r5, [r3, #4]
 8011dc4:	1d0b      	adds	r3, r1, #4
 8011dc6:	4298      	cmp	r0, r3
 8011dc8:	d8f8      	bhi.n	8011dbc <__multiply+0x68>
 8011dca:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8011dce:	3314      	adds	r3, #20
 8011dd0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011dd4:	f108 0714 	add.w	r7, r8, #20
 8011dd8:	3414      	adds	r4, #20
 8011dda:	429f      	cmp	r7, r3
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	f106 0c14 	add.w	ip, r6, #20
 8011de2:	f080 80f8 	bcs.w	8011fd6 <__multiply+0x282>
 8011de6:	9803      	ldr	r0, [sp, #12]
 8011de8:	3018      	adds	r0, #24
 8011dea:	f857 3b04 	ldr.w	r3, [r7], #4
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	2a00      	cmp	r2, #0
 8011df2:	d06e      	beq.n	8011ed2 <__multiply+0x17e>
 8011df4:	4661      	mov	r1, ip
 8011df6:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8011dfa:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dfe:	b2ab      	uxth	r3, r5
 8011e00:	fa1f f886 	uxth.w	r8, r6
 8011e04:	0c2d      	lsrs	r5, r5, #16
 8011e06:	0c36      	lsrs	r6, r6, #16
 8011e08:	fb02 3308 	mla	r3, r2, r8, r3
 8011e0c:	fb02 5606 	mla	r6, r2, r6, r5
 8011e10:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8011e14:	ea6f 050c 	mvn.w	r5, ip
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011e1e:	1965      	adds	r5, r4, r5
 8011e20:	0c36      	lsrs	r6, r6, #16
 8011e22:	428c      	cmp	r4, r1
 8011e24:	f840 3c04 	str.w	r3, [r0, #-4]
 8011e28:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	d94d      	bls.n	8011ecc <__multiply+0x178>
 8011e30:	b1cd      	cbz	r5, 8011e66 <__multiply+0x112>
 8011e32:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8011e36:	6803      	ldr	r3, [r0, #0]
 8011e38:	fa1f f985 	uxth.w	r9, r5
 8011e3c:	fa1f f883 	uxth.w	r8, r3
 8011e40:	0c2d      	lsrs	r5, r5, #16
 8011e42:	0c1b      	lsrs	r3, r3, #16
 8011e44:	fb02 8809 	mla	r8, r2, r9, r8
 8011e48:	4446      	add	r6, r8
 8011e4a:	fb02 3505 	mla	r5, r2, r5, r3
 8011e4e:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8011e52:	4603      	mov	r3, r0
 8011e54:	b2b6      	uxth	r6, r6
 8011e56:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8011e5a:	3104      	adds	r1, #4
 8011e5c:	f843 6b04 	str.w	r6, [r3], #4
 8011e60:	0c2e      	lsrs	r6, r5, #16
 8011e62:	428c      	cmp	r4, r1
 8011e64:	d932      	bls.n	8011ecc <__multiply+0x178>
 8011e66:	460d      	mov	r5, r1
 8011e68:	f8d3 e000 	ldr.w	lr, [r3]
 8011e6c:	f855 9b04 	ldr.w	r9, [r5], #4
 8011e70:	fa1f fa8e 	uxth.w	sl, lr
 8011e74:	fa1f fb89 	uxth.w	fp, r9
 8011e78:	fb02 aa0b 	mla	sl, r2, fp, sl
 8011e7c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8011e80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8011e84:	4456      	add	r6, sl
 8011e86:	fb02 8e09 	mla	lr, r2, r9, r8
 8011e8a:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 8011e8e:	4698      	mov	r8, r3
 8011e90:	b2b6      	uxth	r6, r6
 8011e92:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8011e96:	f848 6b04 	str.w	r6, [r8], #4
 8011e9a:	684e      	ldr	r6, [r1, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	fa1f fa86 	uxth.w	sl, r6
 8011ea2:	b299      	uxth	r1, r3
 8011ea4:	0c36      	lsrs	r6, r6, #16
 8011ea6:	0c1b      	lsrs	r3, r3, #16
 8011ea8:	fb02 110a 	mla	r1, r2, sl, r1
 8011eac:	eb01 4119 	add.w	r1, r1, r9, lsr #16
 8011eb0:	fb02 3606 	mla	r6, r2, r6, r3
 8011eb4:	eb06 4611 	add.w	r6, r6, r1, lsr #16
 8011eb8:	b289      	uxth	r1, r1
 8011eba:	4643      	mov	r3, r8
 8011ebc:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 8011ec0:	1d29      	adds	r1, r5, #4
 8011ec2:	0c36      	lsrs	r6, r6, #16
 8011ec4:	428c      	cmp	r4, r1
 8011ec6:	f843 8b04 	str.w	r8, [r3], #4
 8011eca:	d8cc      	bhi.n	8011e66 <__multiply+0x112>
 8011ecc:	601e      	str	r6, [r3, #0]
 8011ece:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8011ed2:	0c1a      	lsrs	r2, r3, #16
 8011ed4:	d07a      	beq.n	8011fcc <__multiply+0x278>
 8011ed6:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8011eda:	f8bc 5000 	ldrh.w	r5, [ip]
 8011ede:	0c31      	lsrs	r1, r6, #16
 8011ee0:	fb02 1505 	mla	r5, r2, r5, r1
 8011ee4:	b2b3      	uxth	r3, r6
 8011ee6:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 8011eea:	46e1      	mov	r9, ip
 8011eec:	4603      	mov	r3, r0
 8011eee:	f840 6c04 	str.w	r6, [r0, #-4]
 8011ef2:	f859 1b04 	ldr.w	r1, [r9], #4
 8011ef6:	f853 6b04 	ldr.w	r6, [r3], #4
 8011efa:	0c09      	lsrs	r1, r1, #16
 8011efc:	fa1f fa86 	uxth.w	sl, r6
 8011f00:	fb02 a101 	mla	r1, r2, r1, sl
 8011f04:	ea6f 0e0c 	mvn.w	lr, ip
 8011f08:	eb04 080e 	add.w	r8, r4, lr
 8011f0c:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8011f10:	454c      	cmp	r4, r9
 8011f12:	f3c8 0a80 	ubfx	sl, r8, #2, #1
 8011f16:	4605      	mov	r5, r0
 8011f18:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8011f1c:	d955      	bls.n	8011fca <__multiply+0x276>
 8011f1e:	f1ba 0f00 	cmp.w	sl, #0
 8011f22:	d01b      	beq.n	8011f5c <__multiply+0x208>
 8011f24:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8011f28:	0c36      	lsrs	r6, r6, #16
 8011f2a:	fb02 6505 	mla	r5, r2, r5, r6
 8011f2e:	eb05 0e08 	add.w	lr, r5, r8
 8011f32:	b289      	uxth	r1, r1
 8011f34:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 8011f38:	f843 6c04 	str.w	r6, [r3, #-4]
 8011f3c:	f859 1b04 	ldr.w	r1, [r9], #4
 8011f40:	461d      	mov	r5, r3
 8011f42:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f46:	0c09      	lsrs	r1, r1, #16
 8011f48:	fa1f fa86 	uxth.w	sl, r6
 8011f4c:	fb02 a101 	mla	r1, r2, r1, sl
 8011f50:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 8011f54:	454c      	cmp	r4, r9
 8011f56:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8011f5a:	d936      	bls.n	8011fca <__multiply+0x276>
 8011f5c:	f8b9 b000 	ldrh.w	fp, [r9]
 8011f60:	0c35      	lsrs	r5, r6, #16
 8011f62:	fb02 5a0b 	mla	sl, r2, fp, r5
 8011f66:	44c2      	add	sl, r8
 8011f68:	b289      	uxth	r1, r1
 8011f6a:	461d      	mov	r5, r3
 8011f6c:	464e      	mov	r6, r9
 8011f6e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011f72:	f843 1c04 	str.w	r1, [r3, #-4]
 8011f76:	f856 eb04 	ldr.w	lr, [r6], #4
 8011f7a:	f855 1b04 	ldr.w	r1, [r5], #4
 8011f7e:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8011f82:	fa1f fb81 	uxth.w	fp, r1
 8011f86:	ea4f 491e 	mov.w	r9, lr, lsr #16
 8011f8a:	0c09      	lsrs	r1, r1, #16
 8011f8c:	fb02 be09 	mla	lr, r2, r9, fp
 8011f90:	fa1f f888 	uxth.w	r8, r8
 8011f94:	eb0e 491a 	add.w	r9, lr, sl, lsr #16
 8011f98:	fb02 1e08 	mla	lr, r2, r8, r1
 8011f9c:	eb0e 4819 	add.w	r8, lr, r9, lsr #16
 8011fa0:	fa1f f189 	uxth.w	r1, r9
 8011fa4:	46b1      	mov	r9, r6
 8011fa6:	ea41 4608 	orr.w	r6, r1, r8, lsl #16
 8011faa:	f845 6c04 	str.w	r6, [r5, #-4]
 8011fae:	f859 1b04 	ldr.w	r1, [r9], #4
 8011fb2:	685e      	ldr	r6, [r3, #4]
 8011fb4:	0c09      	lsrs	r1, r1, #16
 8011fb6:	b2b3      	uxth	r3, r6
 8011fb8:	fb02 3301 	mla	r3, r2, r1, r3
 8011fbc:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 8011fc0:	1d2b      	adds	r3, r5, #4
 8011fc2:	454c      	cmp	r4, r9
 8011fc4:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8011fc8:	d8c8      	bhi.n	8011f5c <__multiply+0x208>
 8011fca:	6029      	str	r1, [r5, #0]
 8011fcc:	9a00      	ldr	r2, [sp, #0]
 8011fce:	3004      	adds	r0, #4
 8011fd0:	42ba      	cmp	r2, r7
 8011fd2:	f63f af0a 	bhi.w	8011dea <__multiply+0x96>
 8011fd6:	9901      	ldr	r1, [sp, #4]
 8011fd8:	2900      	cmp	r1, #0
 8011fda:	dd1a      	ble.n	8012012 <__multiply+0x2be>
 8011fdc:	9b02      	ldr	r3, [sp, #8]
 8011fde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011fe2:	3b04      	subs	r3, #4
 8011fe4:	b9a8      	cbnz	r0, 8012012 <__multiply+0x2be>
 8011fe6:	9901      	ldr	r1, [sp, #4]
 8011fe8:	1e4a      	subs	r2, r1, #1
 8011fea:	07d0      	lsls	r0, r2, #31
 8011fec:	d517      	bpl.n	801201e <__multiply+0x2ca>
 8011fee:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011ff2:	9201      	str	r2, [sp, #4]
 8011ff4:	b968      	cbnz	r0, 8012012 <__multiply+0x2be>
 8011ff6:	9a01      	ldr	r2, [sp, #4]
 8011ff8:	e008      	b.n	801200c <__multiply+0x2b8>
 8011ffa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011ffe:	3b04      	subs	r3, #4
 8012000:	b931      	cbnz	r1, 8012010 <__multiply+0x2bc>
 8012002:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012006:	3a01      	subs	r2, #1
 8012008:	3b04      	subs	r3, #4
 801200a:	b908      	cbnz	r0, 8012010 <__multiply+0x2bc>
 801200c:	3a01      	subs	r2, #1
 801200e:	d1f4      	bne.n	8011ffa <__multiply+0x2a6>
 8012010:	9201      	str	r2, [sp, #4]
 8012012:	9901      	ldr	r1, [sp, #4]
 8012014:	9803      	ldr	r0, [sp, #12]
 8012016:	6101      	str	r1, [r0, #16]
 8012018:	b005      	add	sp, #20
 801201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201e:	460a      	mov	r2, r1
 8012020:	e7f4      	b.n	801200c <__multiply+0x2b8>
 8012022:	bf00      	nop

08012024 <__pow5mult>:
 8012024:	f012 0303 	ands.w	r3, r2, #3
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202c:	4614      	mov	r4, r2
 801202e:	4680      	mov	r8, r0
 8012030:	460f      	mov	r7, r1
 8012032:	d12b      	bne.n	801208c <__pow5mult+0x68>
 8012034:	10a4      	asrs	r4, r4, #2
 8012036:	d01b      	beq.n	8012070 <__pow5mult+0x4c>
 8012038:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 801203c:	b92e      	cbnz	r6, 801204a <__pow5mult+0x26>
 801203e:	e02e      	b.n	801209e <__pow5mult+0x7a>
 8012040:	1064      	asrs	r4, r4, #1
 8012042:	d015      	beq.n	8012070 <__pow5mult+0x4c>
 8012044:	6835      	ldr	r5, [r6, #0]
 8012046:	b1b5      	cbz	r5, 8012076 <__pow5mult+0x52>
 8012048:	462e      	mov	r6, r5
 801204a:	07e3      	lsls	r3, r4, #31
 801204c:	d5f8      	bpl.n	8012040 <__pow5mult+0x1c>
 801204e:	4639      	mov	r1, r7
 8012050:	4632      	mov	r2, r6
 8012052:	4640      	mov	r0, r8
 8012054:	f7ff fe7e 	bl	8011d54 <__multiply>
 8012058:	b1b7      	cbz	r7, 8012088 <__pow5mult+0x64>
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8012060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012064:	1064      	asrs	r4, r4, #1
 8012066:	6039      	str	r1, [r7, #0]
 8012068:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 801206c:	4607      	mov	r7, r0
 801206e:	d1e9      	bne.n	8012044 <__pow5mult+0x20>
 8012070:	4638      	mov	r0, r7
 8012072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012076:	4631      	mov	r1, r6
 8012078:	4632      	mov	r2, r6
 801207a:	4640      	mov	r0, r8
 801207c:	f7ff fe6a 	bl	8011d54 <__multiply>
 8012080:	6030      	str	r0, [r6, #0]
 8012082:	6005      	str	r5, [r0, #0]
 8012084:	4606      	mov	r6, r0
 8012086:	e7e0      	b.n	801204a <__pow5mult+0x26>
 8012088:	4607      	mov	r7, r0
 801208a:	e7d9      	b.n	8012040 <__pow5mult+0x1c>
 801208c:	1e5d      	subs	r5, r3, #1
 801208e:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <__pow5mult+0x90>)
 8012090:	2300      	movs	r3, #0
 8012092:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012096:	f7ff fd8b 	bl	8011bb0 <__multadd>
 801209a:	4607      	mov	r7, r0
 801209c:	e7ca      	b.n	8012034 <__pow5mult+0x10>
 801209e:	4640      	mov	r0, r8
 80120a0:	f240 2171 	movw	r1, #625	; 0x271
 80120a4:	f7ff fe4c 	bl	8011d40 <__i2b>
 80120a8:	4606      	mov	r6, r0
 80120aa:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 80120ae:	2000      	movs	r0, #0
 80120b0:	6030      	str	r0, [r6, #0]
 80120b2:	e7ca      	b.n	801204a <__pow5mult+0x26>
 80120b4:	080135c8 	.word	0x080135c8

080120b8 <__lshift>:
 80120b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	4617      	mov	r7, r2
 80120be:	690a      	ldr	r2, [r1, #16]
 80120c0:	688b      	ldr	r3, [r1, #8]
 80120c2:	117e      	asrs	r6, r7, #5
 80120c4:	b083      	sub	sp, #12
 80120c6:	18b4      	adds	r4, r6, r2
 80120c8:	9401      	str	r4, [sp, #4]
 80120ca:	3401      	adds	r4, #1
 80120cc:	429c      	cmp	r4, r3
 80120ce:	460d      	mov	r5, r1
 80120d0:	4680      	mov	r8, r0
 80120d2:	6849      	ldr	r1, [r1, #4]
 80120d4:	dd03      	ble.n	80120de <__lshift+0x26>
 80120d6:	005b      	lsls	r3, r3, #1
 80120d8:	3101      	adds	r1, #1
 80120da:	429c      	cmp	r4, r3
 80120dc:	dcfb      	bgt.n	80120d6 <__lshift+0x1e>
 80120de:	4640      	mov	r0, r8
 80120e0:	f7ff fd36 	bl	8011b50 <_Balloc>
 80120e4:	2e00      	cmp	r6, #0
 80120e6:	f100 0114 	add.w	r1, r0, #20
 80120ea:	dd1f      	ble.n	801212c <__lshift+0x74>
 80120ec:	2301      	movs	r3, #1
 80120ee:	1e72      	subs	r2, r6, #1
 80120f0:	f04f 0c00 	mov.w	ip, #0
 80120f4:	42b3      	cmp	r3, r6
 80120f6:	f8c1 c000 	str.w	ip, [r1]
 80120fa:	ea02 0103 	and.w	r1, r2, r3
 80120fe:	f100 0218 	add.w	r2, r0, #24
 8012102:	d010      	beq.n	8012126 <__lshift+0x6e>
 8012104:	b131      	cbz	r1, 8012114 <__lshift+0x5c>
 8012106:	2302      	movs	r3, #2
 8012108:	42b3      	cmp	r3, r6
 801210a:	f8c2 c000 	str.w	ip, [r2]
 801210e:	f100 021c 	add.w	r2, r0, #28
 8012112:	d008      	beq.n	8012126 <__lshift+0x6e>
 8012114:	4611      	mov	r1, r2
 8012116:	3302      	adds	r3, #2
 8012118:	f841 cb04 	str.w	ip, [r1], #4
 801211c:	f8c2 c004 	str.w	ip, [r2, #4]
 8012120:	1d0a      	adds	r2, r1, #4
 8012122:	42b3      	cmp	r3, r6
 8012124:	d1f6      	bne.n	8012114 <__lshift+0x5c>
 8012126:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801212a:	3114      	adds	r1, #20
 801212c:	692e      	ldr	r6, [r5, #16]
 801212e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8012132:	3614      	adds	r6, #20
 8012134:	f017 071f 	ands.w	r7, r7, #31
 8012138:	f105 0e14 	add.w	lr, r5, #20
 801213c:	9700      	str	r7, [sp, #0]
 801213e:	d05b      	beq.n	80121f8 <__lshift+0x140>
 8012140:	f8de 2000 	ldr.w	r2, [lr]
 8012144:	fa02 f207 	lsl.w	r2, r2, r7
 8012148:	f105 0318 	add.w	r3, r5, #24
 801214c:	f841 2b04 	str.w	r2, [r1], #4
 8012150:	ea6f 090e 	mvn.w	r9, lr
 8012154:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8012158:	eb06 0a09 	add.w	sl, r6, r9
 801215c:	f1c7 0e20 	rsb	lr, r7, #32
 8012160:	429e      	cmp	r6, r3
 8012162:	f3ca 0a80 	ubfx	sl, sl, #2, #1
 8012166:	fa22 f90e 	lsr.w	r9, r2, lr
 801216a:	d931      	bls.n	80121d0 <__lshift+0x118>
 801216c:	f1ba 0f00 	cmp.w	sl, #0
 8012170:	d00f      	beq.n	8012192 <__lshift+0xda>
 8012172:	681f      	ldr	r7, [r3, #0]
 8012174:	9b00      	ldr	r3, [sp, #0]
 8012176:	fa07 f703 	lsl.w	r7, r7, r3
 801217a:	ea49 0207 	orr.w	r2, r9, r7
 801217e:	f105 031c 	add.w	r3, r5, #28
 8012182:	f841 2b04 	str.w	r2, [r1], #4
 8012186:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801218a:	429e      	cmp	r6, r3
 801218c:	fa27 f90e 	lsr.w	r9, r7, lr
 8012190:	d91e      	bls.n	80121d0 <__lshift+0x118>
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	f8dd b000 	ldr.w	fp, [sp]
 8012198:	460f      	mov	r7, r1
 801219a:	fa02 fc0b 	lsl.w	ip, r2, fp
 801219e:	ea49 090c 	orr.w	r9, r9, ip
 80121a2:	f847 9b04 	str.w	r9, [r7], #4
 80121a6:	461a      	mov	r2, r3
 80121a8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80121ac:	f852 3b04 	ldr.w	r3, [r2], #4
 80121b0:	fa0a fc0b 	lsl.w	ip, sl, fp
 80121b4:	fa23 fb0e 	lsr.w	fp, r3, lr
 80121b8:	ea4b 0a0c 	orr.w	sl, fp, ip
 80121bc:	4613      	mov	r3, r2
 80121be:	f8c1 a004 	str.w	sl, [r1, #4]
 80121c2:	f853 9b04 	ldr.w	r9, [r3], #4
 80121c6:	1d39      	adds	r1, r7, #4
 80121c8:	429e      	cmp	r6, r3
 80121ca:	fa29 f90e 	lsr.w	r9, r9, lr
 80121ce:	d8e0      	bhi.n	8012192 <__lshift+0xda>
 80121d0:	f8c1 9000 	str.w	r9, [r1]
 80121d4:	f1b9 0f00 	cmp.w	r9, #0
 80121d8:	d001      	beq.n	80121de <__lshift+0x126>
 80121da:	9c01      	ldr	r4, [sp, #4]
 80121dc:	3402      	adds	r4, #2
 80121de:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80121e2:	686a      	ldr	r2, [r5, #4]
 80121e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121e8:	3c01      	subs	r4, #1
 80121ea:	6104      	str	r4, [r0, #16]
 80121ec:	6029      	str	r1, [r5, #0]
 80121ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80121f2:	b003      	add	sp, #12
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	ea6f 030e 	mvn.w	r3, lr
 80121fc:	f8de 7000 	ldr.w	r7, [lr]
 8012200:	f105 0218 	add.w	r2, r5, #24
 8012204:	18f3      	adds	r3, r6, r3
 8012206:	4296      	cmp	r6, r2
 8012208:	f841 7b04 	str.w	r7, [r1], #4
 801220c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8012210:	d9e5      	bls.n	80121de <__lshift+0x126>
 8012212:	b133      	cbz	r3, 8012222 <__lshift+0x16a>
 8012214:	6813      	ldr	r3, [r2, #0]
 8012216:	f105 021c 	add.w	r2, r5, #28
 801221a:	4296      	cmp	r6, r2
 801221c:	f841 3b04 	str.w	r3, [r1], #4
 8012220:	d9dd      	bls.n	80121de <__lshift+0x126>
 8012222:	4694      	mov	ip, r2
 8012224:	460f      	mov	r7, r1
 8012226:	f85c 3b04 	ldr.w	r3, [ip], #4
 801222a:	f847 3b04 	str.w	r3, [r7], #4
 801222e:	6853      	ldr	r3, [r2, #4]
 8012230:	f10c 0204 	add.w	r2, ip, #4
 8012234:	604b      	str	r3, [r1, #4]
 8012236:	1d39      	adds	r1, r7, #4
 8012238:	4296      	cmp	r6, r2
 801223a:	d8f2      	bhi.n	8012222 <__lshift+0x16a>
 801223c:	e7cf      	b.n	80121de <__lshift+0x126>
 801223e:	bf00      	nop

08012240 <__mcmp>:
 8012240:	b4f0      	push	{r4, r5, r6, r7}
 8012242:	690b      	ldr	r3, [r1, #16]
 8012244:	4605      	mov	r5, r0
 8012246:	6900      	ldr	r0, [r0, #16]
 8012248:	1ac0      	subs	r0, r0, r3
 801224a:	d124      	bne.n	8012296 <__mcmp+0x56>
 801224c:	1d1a      	adds	r2, r3, #4
 801224e:	0094      	lsls	r4, r2, #2
 8012250:	192b      	adds	r3, r5, r4
 8012252:	1d1e      	adds	r6, r3, #4
 8012254:	1909      	adds	r1, r1, r4
 8012256:	3514      	adds	r5, #20
 8012258:	f856 4c04 	ldr.w	r4, [r6, #-4]
 801225c:	680a      	ldr	r2, [r1, #0]
 801225e:	43ef      	mvns	r7, r5
 8012260:	19be      	adds	r6, r7, r6
 8012262:	4294      	cmp	r4, r2
 8012264:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8012268:	d110      	bne.n	801228c <__mcmp+0x4c>
 801226a:	429d      	cmp	r5, r3
 801226c:	d213      	bcs.n	8012296 <__mcmp+0x56>
 801226e:	b13e      	cbz	r6, 8012280 <__mcmp+0x40>
 8012270:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8012274:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012278:	4294      	cmp	r4, r2
 801227a:	d107      	bne.n	801228c <__mcmp+0x4c>
 801227c:	429d      	cmp	r5, r3
 801227e:	d20a      	bcs.n	8012296 <__mcmp+0x56>
 8012280:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8012284:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012288:	4294      	cmp	r4, r2
 801228a:	d0f1      	beq.n	8012270 <__mcmp+0x30>
 801228c:	42a2      	cmp	r2, r4
 801228e:	bf94      	ite	ls
 8012290:	2001      	movls	r0, #1
 8012292:	f04f 30ff 	movhi.w	r0, #4294967295
 8012296:	bcf0      	pop	{r4, r5, r6, r7}
 8012298:	4770      	bx	lr
 801229a:	bf00      	nop

0801229c <__mdiff>:
 801229c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a0:	460f      	mov	r7, r1
 80122a2:	4605      	mov	r5, r0
 80122a4:	4611      	mov	r1, r2
 80122a6:	4638      	mov	r0, r7
 80122a8:	4693      	mov	fp, r2
 80122aa:	f7ff ffc9 	bl	8012240 <__mcmp>
 80122ae:	1e04      	subs	r4, r0, #0
 80122b0:	f000 80f1 	beq.w	8012496 <__mdiff+0x1fa>
 80122b4:	f2c0 80ea 	blt.w	801248c <__mdiff+0x1f0>
 80122b8:	2400      	movs	r4, #0
 80122ba:	4628      	mov	r0, r5
 80122bc:	6879      	ldr	r1, [r7, #4]
 80122be:	f7ff fc47 	bl	8011b50 <_Balloc>
 80122c2:	f8db 6014 	ldr.w	r6, [fp, #20]
 80122c6:	697a      	ldr	r2, [r7, #20]
 80122c8:	f8db 5010 	ldr.w	r5, [fp, #16]
 80122cc:	60c4      	str	r4, [r0, #12]
 80122ce:	fa1f fc82 	uxth.w	ip, r2
 80122d2:	ea4f 4a16 	mov.w	sl, r6, lsr #16
 80122d6:	b2b4      	uxth	r4, r6
 80122d8:	ebc4 060c 	rsb	r6, r4, ip
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80122e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80122e6:	f10b 0114 	add.w	r1, fp, #20
 80122ea:	eb02 4a26 	add.w	sl, r2, r6, asr #16
 80122ee:	f105 0814 	add.w	r8, r5, #20
 80122f2:	43c9      	mvns	r1, r1
 80122f4:	b2b4      	uxth	r4, r6
 80122f6:	f10b 0618 	add.w	r6, fp, #24
 80122fa:	eb08 0201 	add.w	r2, r8, r1
 80122fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012302:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 8012306:	f100 0518 	add.w	r5, r0, #24
 801230a:	45b0      	cmp	r8, r6
 801230c:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8012310:	6144      	str	r4, [r0, #20]
 8012312:	f109 0914 	add.w	r9, r9, #20
 8012316:	f107 0c18 	add.w	ip, r7, #24
 801231a:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 801231e:	462a      	mov	r2, r5
 8012320:	d952      	bls.n	80123c8 <__mdiff+0x12c>
 8012322:	b1d9      	cbz	r1, 801235c <__mdiff+0xc0>
 8012324:	f8dc 2000 	ldr.w	r2, [ip]
 8012328:	6836      	ldr	r6, [r6, #0]
 801232a:	fa1a fe82 	uxtah	lr, sl, r2
 801232e:	0c31      	lsrs	r1, r6, #16
 8012330:	b2b4      	uxth	r4, r6
 8012332:	ebc4 060e 	rsb	r6, r4, lr
 8012336:	ebc1 4c12 	rsb	ip, r1, r2, lsr #16
 801233a:	eb0c 4a26 	add.w	sl, ip, r6, asr #16
 801233e:	b2b2      	uxth	r2, r6
 8012340:	ea42 440a 	orr.w	r4, r2, sl, lsl #16
 8012344:	f10b 061c 	add.w	r6, fp, #28
 8012348:	602c      	str	r4, [r5, #0]
 801234a:	45b0      	cmp	r8, r6
 801234c:	f100 051c 	add.w	r5, r0, #28
 8012350:	f107 0c1c 	add.w	ip, r7, #28
 8012354:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 8012358:	462a      	mov	r2, r5
 801235a:	d935      	bls.n	80123c8 <__mdiff+0x12c>
 801235c:	4662      	mov	r2, ip
 801235e:	4637      	mov	r7, r6
 8012360:	f852 1b04 	ldr.w	r1, [r2], #4
 8012364:	f857 4b04 	ldr.w	r4, [r7], #4
 8012368:	fa1a fe81 	uxtah	lr, sl, r1
 801236c:	fa1f fb84 	uxth.w	fp, r4
 8012370:	0c24      	lsrs	r4, r4, #16
 8012372:	ebcb 0a0e 	rsb	sl, fp, lr
 8012376:	ebc4 4111 	rsb	r1, r4, r1, lsr #16
 801237a:	eb01 442a 	add.w	r4, r1, sl, asr #16
 801237e:	fa1f fe8a 	uxth.w	lr, sl
 8012382:	4629      	mov	r1, r5
 8012384:	ea4e 4b04 	orr.w	fp, lr, r4, lsl #16
 8012388:	f841 bb04 	str.w	fp, [r1], #4
 801238c:	f8dc c004 	ldr.w	ip, [ip, #4]
 8012390:	6876      	ldr	r6, [r6, #4]
 8012392:	fa1f fa8c 	uxth.w	sl, ip
 8012396:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 801239a:	fa1f fb86 	uxth.w	fp, r6
 801239e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80123a2:	ebcb 0404 	rsb	r4, fp, r4
 80123a6:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 80123aa:	eb0e 4a24 	add.w	sl, lr, r4, asr #16
 80123ae:	b2a6      	uxth	r6, r4
 80123b0:	ea46 440a 	orr.w	r4, r6, sl, lsl #16
 80123b4:	1d3e      	adds	r6, r7, #4
 80123b6:	606c      	str	r4, [r5, #4]
 80123b8:	1d0d      	adds	r5, r1, #4
 80123ba:	45b0      	cmp	r8, r6
 80123bc:	f102 0c04 	add.w	ip, r2, #4
 80123c0:	ea4f 4a2a 	mov.w	sl, sl, asr #16
 80123c4:	462a      	mov	r2, r5
 80123c6:	d8c9      	bhi.n	801235c <__mdiff+0xc0>
 80123c8:	45e1      	cmp	r9, ip
 80123ca:	d955      	bls.n	8012478 <__mdiff+0x1dc>
 80123cc:	4662      	mov	r2, ip
 80123ce:	ea6f 040c 	mvn.w	r4, ip
 80123d2:	f852 1b04 	ldr.w	r1, [r2], #4
 80123d6:	fa1a fe81 	uxtah	lr, sl, r1
 80123da:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80123de:	eb08 482e 	add.w	r8, r8, lr, asr #16
 80123e2:	fa1f fa8e 	uxth.w	sl, lr
 80123e6:	4629      	mov	r1, r5
 80123e8:	eb09 0604 	add.w	r6, r9, r4
 80123ec:	4591      	cmp	r9, r2
 80123ee:	ea4a 4408 	orr.w	r4, sl, r8, lsl #16
 80123f2:	f841 4b04 	str.w	r4, [r1], #4
 80123f6:	f3c6 0680 	ubfx	r6, r6, #2, #1
 80123fa:	ea4f 4828 	mov.w	r8, r8, asr #16
 80123fe:	d933      	bls.n	8012468 <__mdiff+0x1cc>
 8012400:	b186      	cbz	r6, 8012424 <__mdiff+0x188>
 8012402:	f852 4b04 	ldr.w	r4, [r2], #4
 8012406:	fa18 fe84 	uxtah	lr, r8, r4
 801240a:	0c26      	lsrs	r6, r4, #16
 801240c:	eb06 462e 	add.w	r6, r6, lr, asr #16
 8012410:	fa1f f88e 	uxth.w	r8, lr
 8012414:	ea48 4406 	orr.w	r4, r8, r6, lsl #16
 8012418:	4591      	cmp	r9, r2
 801241a:	f841 4b04 	str.w	r4, [r1], #4
 801241e:	ea4f 4826 	mov.w	r8, r6, asr #16
 8012422:	d921      	bls.n	8012468 <__mdiff+0x1cc>
 8012424:	4617      	mov	r7, r2
 8012426:	460e      	mov	r6, r1
 8012428:	f857 4b04 	ldr.w	r4, [r7], #4
 801242c:	fa18 fe84 	uxtah	lr, r8, r4
 8012430:	0c24      	lsrs	r4, r4, #16
 8012432:	eb04 442e 	add.w	r4, r4, lr, asr #16
 8012436:	fa1f f88e 	uxth.w	r8, lr
 801243a:	ea48 4e04 	orr.w	lr, r8, r4, lsl #16
 801243e:	f846 eb04 	str.w	lr, [r6], #4
 8012442:	6852      	ldr	r2, [r2, #4]
 8012444:	fa1f f882 	uxth.w	r8, r2
 8012448:	eb08 4424 	add.w	r4, r8, r4, asr #16
 801244c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8012450:	eb02 4e24 	add.w	lr, r2, r4, asr #16
 8012454:	b2a4      	uxth	r4, r4
 8012456:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801245a:	1d3a      	adds	r2, r7, #4
 801245c:	604c      	str	r4, [r1, #4]
 801245e:	1d31      	adds	r1, r6, #4
 8012460:	4591      	cmp	r9, r2
 8012462:	ea4f 482e 	mov.w	r8, lr, asr #16
 8012466:	d8dd      	bhi.n	8012424 <__mdiff+0x188>
 8012468:	ea6f 010c 	mvn.w	r1, ip
 801246c:	eb01 0209 	add.w	r2, r1, r9
 8012470:	f022 0103 	bic.w	r1, r2, #3
 8012474:	1d0a      	adds	r2, r1, #4
 8012476:	18aa      	adds	r2, r5, r2
 8012478:	3a04      	subs	r2, #4
 801247a:	b924      	cbnz	r4, 8012486 <__mdiff+0x1ea>
 801247c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012480:	3b01      	subs	r3, #1
 8012482:	2900      	cmp	r1, #0
 8012484:	d0fa      	beq.n	801247c <__mdiff+0x1e0>
 8012486:	6103      	str	r3, [r0, #16]
 8012488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801248c:	463b      	mov	r3, r7
 801248e:	2401      	movs	r4, #1
 8012490:	465f      	mov	r7, fp
 8012492:	469b      	mov	fp, r3
 8012494:	e711      	b.n	80122ba <__mdiff+0x1e>
 8012496:	4628      	mov	r0, r5
 8012498:	4621      	mov	r1, r4
 801249a:	f7ff fb59 	bl	8011b50 <_Balloc>
 801249e:	2201      	movs	r2, #1
 80124a0:	6102      	str	r2, [r0, #16]
 80124a2:	6144      	str	r4, [r0, #20]
 80124a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124a8 <__d2b>:
 80124a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124ac:	b083      	sub	sp, #12
 80124ae:	2101      	movs	r1, #1
 80124b0:	461d      	mov	r5, r3
 80124b2:	4614      	mov	r4, r2
 80124b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80124b6:	f7ff fb4b 	bl	8011b50 <_Balloc>
 80124ba:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80124be:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 80124c2:	4680      	mov	r8, r0
 80124c4:	46a9      	mov	r9, r5
 80124c6:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 80124ca:	b10e      	cbz	r6, 80124d0 <__d2b+0x28>
 80124cc:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80124d0:	9001      	str	r0, [sp, #4]
 80124d2:	2c00      	cmp	r4, #0
 80124d4:	d024      	beq.n	8012520 <__d2b+0x78>
 80124d6:	aa02      	add	r2, sp, #8
 80124d8:	4668      	mov	r0, sp
 80124da:	f842 4d08 	str.w	r4, [r2, #-8]!
 80124de:	f7ff fc01 	bl	8011ce4 <__lo0bits>
 80124e2:	9b01      	ldr	r3, [sp, #4]
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d131      	bne.n	801254c <__d2b+0xa4>
 80124e8:	9c00      	ldr	r4, [sp, #0]
 80124ea:	f8c8 4014 	str.w	r4, [r8, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	bf0c      	ite	eq
 80124f2:	2401      	moveq	r4, #1
 80124f4:	2402      	movne	r4, #2
 80124f6:	f8c8 3018 	str.w	r3, [r8, #24]
 80124fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80124fe:	b9de      	cbnz	r6, 8012538 <__d2b+0x90>
 8012500:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8012504:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8012508:	6910      	ldr	r0, [r2, #16]
 801250a:	603b      	str	r3, [r7, #0]
 801250c:	f7ff fbcc 	bl	8011ca8 <__hi0bits>
 8012510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012512:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8012516:	6008      	str	r0, [r1, #0]
 8012518:	4640      	mov	r0, r8
 801251a:	b003      	add	sp, #12
 801251c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012520:	a801      	add	r0, sp, #4
 8012522:	f7ff fbdf 	bl	8011ce4 <__lo0bits>
 8012526:	9901      	ldr	r1, [sp, #4]
 8012528:	2401      	movs	r4, #1
 801252a:	f8c8 1014 	str.w	r1, [r8, #20]
 801252e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012532:	3020      	adds	r0, #32
 8012534:	2e00      	cmp	r6, #0
 8012536:	d0e3      	beq.n	8012500 <__d2b+0x58>
 8012538:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 801253c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801253e:	eb09 0200 	add.w	r2, r9, r0
 8012542:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012546:	603a      	str	r2, [r7, #0]
 8012548:	6018      	str	r0, [r3, #0]
 801254a:	e7e5      	b.n	8012518 <__d2b+0x70>
 801254c:	f1c0 0120 	rsb	r1, r0, #32
 8012550:	9a00      	ldr	r2, [sp, #0]
 8012552:	fa03 f401 	lsl.w	r4, r3, r1
 8012556:	ea44 0102 	orr.w	r1, r4, r2
 801255a:	fa23 f300 	lsr.w	r3, r3, r0
 801255e:	f8c8 1014 	str.w	r1, [r8, #20]
 8012562:	9301      	str	r3, [sp, #4]
 8012564:	e7c3      	b.n	80124ee <__d2b+0x46>
 8012566:	bf00      	nop

08012568 <_sbrk_r>:
 8012568:	b538      	push	{r3, r4, r5, lr}
 801256a:	4c07      	ldr	r4, [pc, #28]	; (8012588 <_sbrk_r+0x20>)
 801256c:	2300      	movs	r3, #0
 801256e:	4605      	mov	r5, r0
 8012570:	4608      	mov	r0, r1
 8012572:	6023      	str	r3, [r4, #0]
 8012574:	f7f0 fa98 	bl	8002aa8 <_sbrk>
 8012578:	1c43      	adds	r3, r0, #1
 801257a:	d000      	beq.n	801257e <_sbrk_r+0x16>
 801257c:	bd38      	pop	{r3, r4, r5, pc}
 801257e:	6821      	ldr	r1, [r4, #0]
 8012580:	2900      	cmp	r1, #0
 8012582:	d0fb      	beq.n	801257c <_sbrk_r+0x14>
 8012584:	6029      	str	r1, [r5, #0]
 8012586:	bd38      	pop	{r3, r4, r5, pc}
 8012588:	20000a18 	.word	0x20000a18

0801258c <__sread>:
 801258c:	b510      	push	{r4, lr}
 801258e:	460c      	mov	r4, r1
 8012590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012594:	f000 fce4 	bl	8012f60 <_read_r>
 8012598:	2800      	cmp	r0, #0
 801259a:	db03      	blt.n	80125a4 <__sread+0x18>
 801259c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801259e:	1813      	adds	r3, r2, r0
 80125a0:	6523      	str	r3, [r4, #80]	; 0x50
 80125a2:	bd10      	pop	{r4, pc}
 80125a4:	89a3      	ldrh	r3, [r4, #12]
 80125a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80125aa:	81a1      	strh	r1, [r4, #12]
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	bf00      	nop

080125b0 <__swrite>:
 80125b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b4:	460c      	mov	r4, r1
 80125b6:	8989      	ldrh	r1, [r1, #12]
 80125b8:	f401 7c80 	and.w	ip, r1, #256	; 0x100
 80125bc:	fa0f fc8c 	sxth.w	ip, ip
 80125c0:	4607      	mov	r7, r0
 80125c2:	4616      	mov	r6, r2
 80125c4:	461d      	mov	r5, r3
 80125c6:	f1bc 0f00 	cmp.w	ip, #0
 80125ca:	d006      	beq.n	80125da <__swrite+0x2a>
 80125cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125d0:	2200      	movs	r2, #0
 80125d2:	2302      	movs	r3, #2
 80125d4:	f000 fbe4 	bl	8012da0 <_lseek_r>
 80125d8:	89a1      	ldrh	r1, [r4, #12]
 80125da:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 80125de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125e2:	81a0      	strh	r0, [r4, #12]
 80125e4:	4632      	mov	r2, r6
 80125e6:	4638      	mov	r0, r7
 80125e8:	462b      	mov	r3, r5
 80125ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	f000 b8a7 	b.w	8012740 <_write_r>
 80125f2:	bf00      	nop

080125f4 <__sseek>:
 80125f4:	b510      	push	{r4, lr}
 80125f6:	460c      	mov	r4, r1
 80125f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125fc:	f000 fbd0 	bl	8012da0 <_lseek_r>
 8012600:	1c42      	adds	r2, r0, #1
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	d004      	beq.n	8012610 <__sseek+0x1c>
 8012606:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 801260a:	6520      	str	r0, [r4, #80]	; 0x50
 801260c:	81a1      	strh	r1, [r4, #12]
 801260e:	bd10      	pop	{r4, pc}
 8012610:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012614:	81a2      	strh	r2, [r4, #12]
 8012616:	bd10      	pop	{r4, pc}

08012618 <__sclose>:
 8012618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801261c:	f000 b8d4 	b.w	80127c8 <_close_r>

08012620 <strlen>:
 8012620:	f020 0103 	bic.w	r1, r0, #3
 8012624:	f010 0003 	ands.w	r0, r0, #3
 8012628:	f1c0 0000 	rsb	r0, r0, #0
 801262c:	f851 3b04 	ldr.w	r3, [r1], #4
 8012630:	f100 0c04 	add.w	ip, r0, #4
 8012634:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012638:	f06f 0200 	mvn.w	r2, #0
 801263c:	bf1c      	itt	ne
 801263e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8012642:	4313      	orrne	r3, r2
 8012644:	f04f 0c01 	mov.w	ip, #1
 8012648:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 801264c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8012650:	eba3 020c 	sub.w	r2, r3, ip
 8012654:	ea22 0203 	bic.w	r2, r2, r3
 8012658:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 801265c:	bf04      	itt	eq
 801265e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8012662:	3004      	addeq	r0, #4
 8012664:	d0f4      	beq.n	8012650 <strlen+0x30>
 8012666:	f013 0fff 	tst.w	r3, #255	; 0xff
 801266a:	bf1f      	itttt	ne
 801266c:	3001      	addne	r0, #1
 801266e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8012672:	3001      	addne	r0, #1
 8012674:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8012678:	bf18      	it	ne
 801267a:	3001      	addne	r0, #1
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop

08012680 <__sprint_r>:
 8012680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	6893      	ldr	r3, [r2, #8]
 8012686:	4692      	mov	sl, r2
 8012688:	4680      	mov	r8, r0
 801268a:	460f      	mov	r7, r1
 801268c:	2b00      	cmp	r3, #0
 801268e:	d050      	beq.n	8012732 <__sprint_r+0xb2>
 8012690:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8012692:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8012696:	d050      	beq.n	801273a <__sprint_r+0xba>
 8012698:	6812      	ldr	r2, [r2, #0]
 801269a:	f102 0b08 	add.w	fp, r2, #8
 801269e:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80126a2:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 80126a6:	ea5f 0990 	movs.w	r9, r0, lsr #2
 80126aa:	d038      	beq.n	801271e <__sprint_r+0x9e>
 80126ac:	f109 33ff 	add.w	r3, r9, #4294967295
 80126b0:	4640      	mov	r0, r8
 80126b2:	6821      	ldr	r1, [r4, #0]
 80126b4:	463a      	mov	r2, r7
 80126b6:	f003 0601 	and.w	r6, r3, #1
 80126ba:	f000 f8e9 	bl	8012890 <_fputwc_r>
 80126be:	3001      	adds	r0, #1
 80126c0:	d022      	beq.n	8012708 <__sprint_r+0x88>
 80126c2:	2501      	movs	r5, #1
 80126c4:	45a9      	cmp	r9, r5
 80126c6:	d028      	beq.n	801271a <__sprint_r+0x9a>
 80126c8:	b196      	cbz	r6, 80126f0 <__sprint_r+0x70>
 80126ca:	4640      	mov	r0, r8
 80126cc:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80126d0:	463a      	mov	r2, r7
 80126d2:	f000 f8dd 	bl	8012890 <_fputwc_r>
 80126d6:	3001      	adds	r0, #1
 80126d8:	d016      	beq.n	8012708 <__sprint_r+0x88>
 80126da:	2502      	movs	r5, #2
 80126dc:	45a9      	cmp	r9, r5
 80126de:	d107      	bne.n	80126f0 <__sprint_r+0x70>
 80126e0:	e01b      	b.n	801271a <__sprint_r+0x9a>
 80126e2:	6871      	ldr	r1, [r6, #4]
 80126e4:	f000 f8d4 	bl	8012890 <_fputwc_r>
 80126e8:	3001      	adds	r0, #1
 80126ea:	d00d      	beq.n	8012708 <__sprint_r+0x88>
 80126ec:	45a9      	cmp	r9, r5
 80126ee:	d014      	beq.n	801271a <__sprint_r+0x9a>
 80126f0:	6861      	ldr	r1, [r4, #4]
 80126f2:	463a      	mov	r2, r7
 80126f4:	4640      	mov	r0, r8
 80126f6:	f000 f8cb 	bl	8012890 <_fputwc_r>
 80126fa:	1d26      	adds	r6, r4, #4
 80126fc:	3502      	adds	r5, #2
 80126fe:	3408      	adds	r4, #8
 8012700:	3001      	adds	r0, #1
 8012702:	463a      	mov	r2, r7
 8012704:	4640      	mov	r0, r8
 8012706:	d1ec      	bne.n	80126e2 <__sprint_r+0x62>
 8012708:	f04f 30ff 	mov.w	r0, #4294967295
 801270c:	2100      	movs	r1, #0
 801270e:	f8ca 1008 	str.w	r1, [sl, #8]
 8012712:	f8ca 1004 	str.w	r1, [sl, #4]
 8012716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801271e:	eba3 0389 	sub.w	r3, r3, r9, lsl #2
 8012722:	f8ca 3008 	str.w	r3, [sl, #8]
 8012726:	f10b 0b08 	add.w	fp, fp, #8
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1b7      	bne.n	801269e <__sprint_r+0x1e>
 801272e:	4618      	mov	r0, r3
 8012730:	e7ec      	b.n	801270c <__sprint_r+0x8c>
 8012732:	6053      	str	r3, [r2, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273a:	f000 f995 	bl	8012a68 <__sfvwrite_r>
 801273e:	e7e5      	b.n	801270c <__sprint_r+0x8c>

08012740 <_write_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4c08      	ldr	r4, [pc, #32]	; (8012764 <_write_r+0x24>)
 8012744:	4605      	mov	r5, r0
 8012746:	4608      	mov	r0, r1
 8012748:	4611      	mov	r1, r2
 801274a:	461a      	mov	r2, r3
 801274c:	2300      	movs	r3, #0
 801274e:	6023      	str	r3, [r4, #0]
 8012750:	f7f0 fa84 	bl	8002c5c <_write>
 8012754:	1c43      	adds	r3, r0, #1
 8012756:	d000      	beq.n	801275a <_write_r+0x1a>
 8012758:	bd38      	pop	{r3, r4, r5, pc}
 801275a:	6821      	ldr	r1, [r4, #0]
 801275c:	2900      	cmp	r1, #0
 801275e:	d0fb      	beq.n	8012758 <_write_r+0x18>
 8012760:	6029      	str	r1, [r5, #0]
 8012762:	bd38      	pop	{r3, r4, r5, pc}
 8012764:	20000a18 	.word	0x20000a18

08012768 <_calloc_r>:
 8012768:	b510      	push	{r4, lr}
 801276a:	fb01 f102 	mul.w	r1, r1, r2
 801276e:	f7fe fdfb 	bl	8011368 <_malloc_r>
 8012772:	4604      	mov	r4, r0
 8012774:	b168      	cbz	r0, 8012792 <_calloc_r+0x2a>
 8012776:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801277a:	f022 0103 	bic.w	r1, r2, #3
 801277e:	1f0a      	subs	r2, r1, #4
 8012780:	2a24      	cmp	r2, #36	; 0x24
 8012782:	d818      	bhi.n	80127b6 <_calloc_r+0x4e>
 8012784:	2a13      	cmp	r2, #19
 8012786:	d806      	bhi.n	8012796 <_calloc_r+0x2e>
 8012788:	4603      	mov	r3, r0
 801278a:	2000      	movs	r0, #0
 801278c:	6018      	str	r0, [r3, #0]
 801278e:	6058      	str	r0, [r3, #4]
 8012790:	6098      	str	r0, [r3, #8]
 8012792:	4620      	mov	r0, r4
 8012794:	bd10      	pop	{r4, pc}
 8012796:	2300      	movs	r3, #0
 8012798:	2a1b      	cmp	r2, #27
 801279a:	6003      	str	r3, [r0, #0]
 801279c:	6043      	str	r3, [r0, #4]
 801279e:	d90f      	bls.n	80127c0 <_calloc_r+0x58>
 80127a0:	2a24      	cmp	r2, #36	; 0x24
 80127a2:	6083      	str	r3, [r0, #8]
 80127a4:	60c3      	str	r3, [r0, #12]
 80127a6:	bf05      	ittet	eq
 80127a8:	6103      	streq	r3, [r0, #16]
 80127aa:	6143      	streq	r3, [r0, #20]
 80127ac:	f100 0310 	addne.w	r3, r0, #16
 80127b0:	f100 0318 	addeq.w	r3, r0, #24
 80127b4:	e7e9      	b.n	801278a <_calloc_r+0x22>
 80127b6:	2100      	movs	r1, #0
 80127b8:	f7fa ffca 	bl	800d750 <memset>
 80127bc:	4620      	mov	r0, r4
 80127be:	bd10      	pop	{r4, pc}
 80127c0:	f100 0308 	add.w	r3, r0, #8
 80127c4:	e7e1      	b.n	801278a <_calloc_r+0x22>
 80127c6:	bf00      	nop

080127c8 <_close_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4c07      	ldr	r4, [pc, #28]	; (80127e8 <_close_r+0x20>)
 80127cc:	2300      	movs	r3, #0
 80127ce:	4605      	mov	r5, r0
 80127d0:	4608      	mov	r0, r1
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	f7f0 f8ca 	bl	800296c <_close>
 80127d8:	1c43      	adds	r3, r0, #1
 80127da:	d000      	beq.n	80127de <_close_r+0x16>
 80127dc:	bd38      	pop	{r3, r4, r5, pc}
 80127de:	6821      	ldr	r1, [r4, #0]
 80127e0:	2900      	cmp	r1, #0
 80127e2:	d0fb      	beq.n	80127dc <_close_r+0x14>
 80127e4:	6029      	str	r1, [r5, #0]
 80127e6:	bd38      	pop	{r3, r4, r5, pc}
 80127e8:	20000a18 	.word	0x20000a18

080127ec <_fclose_r>:
 80127ec:	b570      	push	{r4, r5, r6, lr}
 80127ee:	460c      	mov	r4, r1
 80127f0:	4605      	mov	r5, r0
 80127f2:	2900      	cmp	r1, #0
 80127f4:	d034      	beq.n	8012860 <_fclose_r+0x74>
 80127f6:	f7fe fbbb 	bl	8010f70 <__sfp_lock_acquire>
 80127fa:	b115      	cbz	r5, 8012802 <_fclose_r+0x16>
 80127fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d031      	beq.n	8012866 <_fclose_r+0x7a>
 8012802:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012806:	b33e      	cbz	r6, 8012858 <_fclose_r+0x6c>
 8012808:	4628      	mov	r0, r5
 801280a:	4621      	mov	r1, r4
 801280c:	f7fe faa8 	bl	8010d60 <_fflush_r>
 8012810:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012812:	4606      	mov	r6, r0
 8012814:	b13a      	cbz	r2, 8012826 <_fclose_r+0x3a>
 8012816:	4628      	mov	r0, r5
 8012818:	69e1      	ldr	r1, [r4, #28]
 801281a:	4790      	blx	r2
 801281c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8012820:	bf28      	it	cs
 8012822:	f04f 36ff 	movcs.w	r6, #4294967295
 8012826:	89a0      	ldrh	r0, [r4, #12]
 8012828:	f000 0180 	and.w	r1, r0, #128	; 0x80
 801282c:	b20b      	sxth	r3, r1
 801282e:	bb13      	cbnz	r3, 8012876 <_fclose_r+0x8a>
 8012830:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012832:	b141      	cbz	r1, 8012846 <_fclose_r+0x5a>
 8012834:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012838:	4291      	cmp	r1, r2
 801283a:	d002      	beq.n	8012842 <_fclose_r+0x56>
 801283c:	4628      	mov	r0, r5
 801283e:	f7fe fbe7 	bl	8011010 <_free_r>
 8012842:	2000      	movs	r0, #0
 8012844:	6320      	str	r0, [r4, #48]	; 0x30
 8012846:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012848:	b121      	cbz	r1, 8012854 <_fclose_r+0x68>
 801284a:	4628      	mov	r0, r5
 801284c:	f7fe fbe0 	bl	8011010 <_free_r>
 8012850:	2100      	movs	r1, #0
 8012852:	6461      	str	r1, [r4, #68]	; 0x44
 8012854:	2300      	movs	r3, #0
 8012856:	81a3      	strh	r3, [r4, #12]
 8012858:	f7fe fb8c 	bl	8010f74 <__sfp_lock_release>
 801285c:	4630      	mov	r0, r6
 801285e:	bd70      	pop	{r4, r5, r6, pc}
 8012860:	460e      	mov	r6, r1
 8012862:	4630      	mov	r0, r6
 8012864:	bd70      	pop	{r4, r5, r6, pc}
 8012866:	4628      	mov	r0, r5
 8012868:	f7fe fb5c 	bl	8010f24 <__sinit>
 801286c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012870:	2e00      	cmp	r6, #0
 8012872:	d1c9      	bne.n	8012808 <_fclose_r+0x1c>
 8012874:	e7f0      	b.n	8012858 <_fclose_r+0x6c>
 8012876:	4628      	mov	r0, r5
 8012878:	6921      	ldr	r1, [r4, #16]
 801287a:	f7fe fbc9 	bl	8011010 <_free_r>
 801287e:	e7d7      	b.n	8012830 <_fclose_r+0x44>

08012880 <fclose>:
 8012880:	f240 4390 	movw	r3, #1168	; 0x490
 8012884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012888:	4601      	mov	r1, r0
 801288a:	6818      	ldr	r0, [r3, #0]
 801288c:	f7ff bfae 	b.w	80127ec <_fclose_r>

08012890 <_fputwc_r>:
 8012890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012894:	8993      	ldrh	r3, [r2, #12]
 8012896:	4614      	mov	r4, r2
 8012898:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801289c:	4680      	mov	r8, r0
 801289e:	b210      	sxth	r0, r2
 80128a0:	b082      	sub	sp, #8
 80128a2:	460f      	mov	r7, r1
 80128a4:	b930      	cbnz	r0, 80128b4 <_fputwc_r+0x24>
 80128a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80128a8:	f443 5600 	orr.w	r6, r3, #8192	; 0x2000
 80128ac:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 80128b0:	81a6      	strh	r6, [r4, #12]
 80128b2:	6663      	str	r3, [r4, #100]	; 0x64
 80128b4:	f7fe fcd8 	bl	8011268 <__locale_mb_cur_max>
 80128b8:	2801      	cmp	r0, #1
 80128ba:	d079      	beq.n	80129b0 <_fputwc_r+0x120>
 80128bc:	ae01      	add	r6, sp, #4
 80128be:	4640      	mov	r0, r8
 80128c0:	4631      	mov	r1, r6
 80128c2:	463a      	mov	r2, r7
 80128c4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80128c8:	f000 fdaa 	bl	8013420 <_wcrtomb_r>
 80128cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80128d0:	4681      	mov	r9, r0
 80128d2:	d053      	beq.n	801297c <_fputwc_r+0xec>
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d03d      	beq.n	8012954 <_fputwc_r+0xc4>
 80128d8:	68a1      	ldr	r1, [r4, #8]
 80128da:	1e4b      	subs	r3, r1, #1
 80128dc:	f109 32ff 	add.w	r2, r9, #4294967295
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	60a3      	str	r3, [r4, #8]
 80128e4:	f002 0a01 	and.w	sl, r2, #1
 80128e8:	f2c0 8085 	blt.w	80129f6 <_fputwc_r+0x166>
 80128ec:	6825      	ldr	r5, [r4, #0]
 80128ee:	7830      	ldrb	r0, [r6, #0]
 80128f0:	7028      	strb	r0, [r5, #0]
 80128f2:	6821      	ldr	r1, [r4, #0]
 80128f4:	1c4a      	adds	r2, r1, #1
 80128f6:	6022      	str	r2, [r4, #0]
 80128f8:	2501      	movs	r5, #1
 80128fa:	454d      	cmp	r5, r9
 80128fc:	d22a      	bcs.n	8012954 <_fputwc_r+0xc4>
 80128fe:	f1ba 0f00 	cmp.w	sl, #0
 8012902:	d00d      	beq.n	8012920 <_fputwc_r+0x90>
 8012904:	68a3      	ldr	r3, [r4, #8]
 8012906:	1e58      	subs	r0, r3, #1
 8012908:	2800      	cmp	r0, #0
 801290a:	60a0      	str	r0, [r4, #8]
 801290c:	db24      	blt.n	8012958 <_fputwc_r+0xc8>
 801290e:	6821      	ldr	r1, [r4, #0]
 8012910:	5d72      	ldrb	r2, [r6, r5]
 8012912:	700a      	strb	r2, [r1, #0]
 8012914:	6823      	ldr	r3, [r4, #0]
 8012916:	1958      	adds	r0, r3, r5
 8012918:	6020      	str	r0, [r4, #0]
 801291a:	3501      	adds	r5, #1
 801291c:	454d      	cmp	r5, r9
 801291e:	d219      	bcs.n	8012954 <_fputwc_r+0xc4>
 8012920:	68a1      	ldr	r1, [r4, #8]
 8012922:	1e4b      	subs	r3, r1, #1
 8012924:	2b00      	cmp	r3, #0
 8012926:	60a3      	str	r3, [r4, #8]
 8012928:	db30      	blt.n	801298c <_fputwc_r+0xfc>
 801292a:	6820      	ldr	r0, [r4, #0]
 801292c:	5d72      	ldrb	r2, [r6, r5]
 801292e:	7002      	strb	r2, [r0, #0]
 8012930:	6821      	ldr	r1, [r4, #0]
 8012932:	1c4b      	adds	r3, r1, #1
 8012934:	6023      	str	r3, [r4, #0]
 8012936:	68a1      	ldr	r1, [r4, #8]
 8012938:	1e48      	subs	r0, r1, #1
 801293a:	3501      	adds	r5, #1
 801293c:	2800      	cmp	r0, #0
 801293e:	60a0      	str	r0, [r4, #8]
 8012940:	db0a      	blt.n	8012958 <_fputwc_r+0xc8>
 8012942:	6820      	ldr	r0, [r4, #0]
 8012944:	5d72      	ldrb	r2, [r6, r5]
 8012946:	7002      	strb	r2, [r0, #0]
 8012948:	6823      	ldr	r3, [r4, #0]
 801294a:	3501      	adds	r5, #1
 801294c:	1c59      	adds	r1, r3, #1
 801294e:	454d      	cmp	r5, r9
 8012950:	6021      	str	r1, [r4, #0]
 8012952:	d3e5      	bcc.n	8012920 <_fputwc_r+0x90>
 8012954:	4638      	mov	r0, r7
 8012956:	e016      	b.n	8012986 <_fputwc_r+0xf6>
 8012958:	69a1      	ldr	r1, [r4, #24]
 801295a:	4288      	cmp	r0, r1
 801295c:	db31      	blt.n	80129c2 <_fputwc_r+0x132>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	5d72      	ldrb	r2, [r6, r5]
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	6820      	ldr	r0, [r4, #0]
 8012966:	7801      	ldrb	r1, [r0, #0]
 8012968:	290a      	cmp	r1, #10
 801296a:	d055      	beq.n	8012a18 <_fputwc_r+0x188>
 801296c:	1c42      	adds	r2, r0, #1
 801296e:	2000      	movs	r0, #0
 8012970:	6022      	str	r2, [r4, #0]
 8012972:	2800      	cmp	r0, #0
 8012974:	d0d1      	beq.n	801291a <_fputwc_r+0x8a>
 8012976:	f04f 30ff 	mov.w	r0, #4294967295
 801297a:	e004      	b.n	8012986 <_fputwc_r+0xf6>
 801297c:	89a2      	ldrh	r2, [r4, #12]
 801297e:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 8012982:	81a0      	strh	r0, [r4, #12]
 8012984:	4648      	mov	r0, r9
 8012986:	b002      	add	sp, #8
 8012988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801298c:	69a0      	ldr	r0, [r4, #24]
 801298e:	4283      	cmp	r3, r0
 8012990:	db24      	blt.n	80129dc <_fputwc_r+0x14c>
 8012992:	6821      	ldr	r1, [r4, #0]
 8012994:	5d72      	ldrb	r2, [r6, r5]
 8012996:	700a      	strb	r2, [r1, #0]
 8012998:	6823      	ldr	r3, [r4, #0]
 801299a:	7819      	ldrb	r1, [r3, #0]
 801299c:	290a      	cmp	r1, #10
 801299e:	d03d      	beq.n	8012a1c <_fputwc_r+0x18c>
 80129a0:	3301      	adds	r3, #1
 80129a2:	2200      	movs	r2, #0
 80129a4:	6023      	str	r3, [r4, #0]
 80129a6:	2a00      	cmp	r2, #0
 80129a8:	d0c5      	beq.n	8012936 <_fputwc_r+0xa6>
 80129aa:	f04f 30ff 	mov.w	r0, #4294967295
 80129ae:	e7ea      	b.n	8012986 <_fputwc_r+0xf6>
 80129b0:	2f00      	cmp	r7, #0
 80129b2:	d083      	beq.n	80128bc <_fputwc_r+0x2c>
 80129b4:	2fff      	cmp	r7, #255	; 0xff
 80129b6:	d881      	bhi.n	80128bc <_fputwc_r+0x2c>
 80129b8:	ae02      	add	r6, sp, #8
 80129ba:	4681      	mov	r9, r0
 80129bc:	f806 7d04 	strb.w	r7, [r6, #-4]!
 80129c0:	e78a      	b.n	80128d8 <_fputwc_r+0x48>
 80129c2:	5d71      	ldrb	r1, [r6, r5]
 80129c4:	4640      	mov	r0, r8
 80129c6:	4622      	mov	r2, r4
 80129c8:	f000 fccc 	bl	8013364 <__swbuf_r>
 80129cc:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 80129d0:	424b      	negs	r3, r1
 80129d2:	eb53 0001 	adcs.w	r0, r3, r1
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d09f      	beq.n	801291a <_fputwc_r+0x8a>
 80129da:	e7cc      	b.n	8012976 <_fputwc_r+0xe6>
 80129dc:	5d71      	ldrb	r1, [r6, r5]
 80129de:	4640      	mov	r0, r8
 80129e0:	4622      	mov	r2, r4
 80129e2:	f000 fcbf 	bl	8013364 <__swbuf_r>
 80129e6:	f1b0 31ff 	subs.w	r1, r0, #4294967295
 80129ea:	4248      	negs	r0, r1
 80129ec:	eb50 0201 	adcs.w	r2, r0, r1
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	d0a0      	beq.n	8012936 <_fputwc_r+0xa6>
 80129f4:	e7d9      	b.n	80129aa <_fputwc_r+0x11a>
 80129f6:	69a0      	ldr	r0, [r4, #24]
 80129f8:	4283      	cmp	r3, r0
 80129fa:	db11      	blt.n	8012a20 <_fputwc_r+0x190>
 80129fc:	7831      	ldrb	r1, [r6, #0]
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	7019      	strb	r1, [r3, #0]
 8012a02:	6822      	ldr	r2, [r4, #0]
 8012a04:	7811      	ldrb	r1, [r2, #0]
 8012a06:	290a      	cmp	r1, #10
 8012a08:	d018      	beq.n	8012a3c <_fputwc_r+0x1ac>
 8012a0a:	1c51      	adds	r1, r2, #1
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	6021      	str	r1, [r4, #0]
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	f43f af71 	beq.w	80128f8 <_fputwc_r+0x68>
 8012a16:	e7ae      	b.n	8012976 <_fputwc_r+0xe6>
 8012a18:	4640      	mov	r0, r8
 8012a1a:	e7d4      	b.n	80129c6 <_fputwc_r+0x136>
 8012a1c:	4640      	mov	r0, r8
 8012a1e:	e7df      	b.n	80129e0 <_fputwc_r+0x150>
 8012a20:	7831      	ldrb	r1, [r6, #0]
 8012a22:	4640      	mov	r0, r8
 8012a24:	4622      	mov	r2, r4
 8012a26:	f000 fc9d 	bl	8013364 <__swbuf_r>
 8012a2a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 8012a2e:	4258      	negs	r0, r3
 8012a30:	eb50 0203 	adcs.w	r2, r0, r3
 8012a34:	2a00      	cmp	r2, #0
 8012a36:	f43f af5f 	beq.w	80128f8 <_fputwc_r+0x68>
 8012a3a:	e79c      	b.n	8012976 <_fputwc_r+0xe6>
 8012a3c:	4640      	mov	r0, r8
 8012a3e:	e7f1      	b.n	8012a24 <_fputwc_r+0x194>

08012a40 <_fstat_r>:
 8012a40:	b538      	push	{r3, r4, r5, lr}
 8012a42:	4c08      	ldr	r4, [pc, #32]	; (8012a64 <_fstat_r+0x24>)
 8012a44:	2300      	movs	r3, #0
 8012a46:	4605      	mov	r5, r0
 8012a48:	4608      	mov	r0, r1
 8012a4a:	4611      	mov	r1, r2
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	f7ef ffbf 	bl	80029d0 <_fstat>
 8012a52:	1c43      	adds	r3, r0, #1
 8012a54:	d000      	beq.n	8012a58 <_fstat_r+0x18>
 8012a56:	bd38      	pop	{r3, r4, r5, pc}
 8012a58:	6821      	ldr	r1, [r4, #0]
 8012a5a:	2900      	cmp	r1, #0
 8012a5c:	d0fb      	beq.n	8012a56 <_fstat_r+0x16>
 8012a5e:	6029      	str	r1, [r5, #0]
 8012a60:	bd38      	pop	{r3, r4, r5, pc}
 8012a62:	bf00      	nop
 8012a64:	20000a18 	.word	0x20000a18

08012a68 <__sfvwrite_r>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	6893      	ldr	r3, [r2, #8]
 8012a6e:	b085      	sub	sp, #20
 8012a70:	4690      	mov	r8, r2
 8012a72:	4681      	mov	r9, r0
 8012a74:	460c      	mov	r4, r1
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d02a      	beq.n	8012ad0 <__sfvwrite_r+0x68>
 8012a7a:	898b      	ldrh	r3, [r1, #12]
 8012a7c:	f003 0208 	and.w	r2, r3, #8
 8012a80:	b210      	sxth	r0, r2
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d028      	beq.n	8012ad8 <__sfvwrite_r+0x70>
 8012a86:	6909      	ldr	r1, [r1, #16]
 8012a88:	2900      	cmp	r1, #0
 8012a8a:	d025      	beq.n	8012ad8 <__sfvwrite_r+0x70>
 8012a8c:	f003 0502 	and.w	r5, r3, #2
 8012a90:	b22e      	sxth	r6, r5
 8012a92:	f8d8 5000 	ldr.w	r5, [r8]
 8012a96:	2e00      	cmp	r6, #0
 8012a98:	d033      	beq.n	8012b02 <__sfvwrite_r+0x9a>
 8012a9a:	f04f 0a00 	mov.w	sl, #0
 8012a9e:	4657      	mov	r7, sl
 8012aa0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8012aa4:	bf34      	ite	cc
 8012aa6:	463b      	movcc	r3, r7
 8012aa8:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8012aac:	4652      	mov	r2, sl
 8012aae:	4648      	mov	r0, r9
 8012ab0:	2f00      	cmp	r7, #0
 8012ab2:	d021      	beq.n	8012af8 <__sfvwrite_r+0x90>
 8012ab4:	69e1      	ldr	r1, [r4, #28]
 8012ab6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012ab8:	47b0      	blx	r6
 8012aba:	2800      	cmp	r0, #0
 8012abc:	dd6a      	ble.n	8012b94 <__sfvwrite_r+0x12c>
 8012abe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012ac2:	1a13      	subs	r3, r2, r0
 8012ac4:	4482      	add	sl, r0
 8012ac6:	1a3f      	subs	r7, r7, r0
 8012ac8:	f8c8 3008 	str.w	r3, [r8, #8]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d1e7      	bne.n	8012aa0 <__sfvwrite_r+0x38>
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	b005      	add	sp, #20
 8012ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad8:	4648      	mov	r0, r9
 8012ada:	4621      	mov	r1, r4
 8012adc:	f7fc fe26 	bl	800f72c <__swsetup_r>
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d0d2      	beq.n	8012a8c <__sfvwrite_r+0x24>
 8012ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012aea:	2309      	movs	r3, #9
 8012aec:	81a2      	strh	r2, [r4, #12]
 8012aee:	f04f 30ff 	mov.w	r0, #4294967295
 8012af2:	f8c9 3000 	str.w	r3, [r9]
 8012af6:	e7ec      	b.n	8012ad2 <__sfvwrite_r+0x6a>
 8012af8:	f8d5 a000 	ldr.w	sl, [r5]
 8012afc:	686f      	ldr	r7, [r5, #4]
 8012afe:	3508      	adds	r5, #8
 8012b00:	e7ce      	b.n	8012aa0 <__sfvwrite_r+0x38>
 8012b02:	f013 0a01 	ands.w	sl, r3, #1
 8012b06:	d14c      	bne.n	8012ba2 <__sfvwrite_r+0x13a>
 8012b08:	4656      	mov	r6, sl
 8012b0a:	2e00      	cmp	r6, #0
 8012b0c:	d030      	beq.n	8012b70 <__sfvwrite_r+0x108>
 8012b0e:	f403 7700 	and.w	r7, r3, #512	; 0x200
 8012b12:	b238      	sxth	r0, r7
 8012b14:	4619      	mov	r1, r3
 8012b16:	68a7      	ldr	r7, [r4, #8]
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d07f      	beq.n	8012c1c <__sfvwrite_r+0x1b4>
 8012b1c:	42be      	cmp	r6, r7
 8012b1e:	46be      	mov	lr, r7
 8012b20:	f0c0 80ac 	bcc.w	8012c7c <__sfvwrite_r+0x214>
 8012b24:	f401 6090 	and.w	r0, r1, #1152	; 0x480
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	f040 80c8 	bne.w	8012cbe <__sfvwrite_r+0x256>
 8012b2e:	6820      	ldr	r0, [r4, #0]
 8012b30:	9703      	str	r7, [sp, #12]
 8012b32:	46b3      	mov	fp, r6
 8012b34:	4637      	mov	r7, r6
 8012b36:	4651      	mov	r1, sl
 8012b38:	4672      	mov	r2, lr
 8012b3a:	f8cd e004 	str.w	lr, [sp, #4]
 8012b3e:	f000 f943 	bl	8012dc8 <memmove>
 8012b42:	68a0      	ldr	r0, [r4, #8]
 8012b44:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012b48:	6822      	ldr	r2, [r4, #0]
 8012b4a:	9903      	ldr	r1, [sp, #12]
 8012b4c:	1a43      	subs	r3, r0, r1
 8012b4e:	eb02 000c 	add.w	r0, r2, ip
 8012b52:	60a3      	str	r3, [r4, #8]
 8012b54:	6020      	str	r0, [r4, #0]
 8012b56:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012b5a:	1bd7      	subs	r7, r2, r7
 8012b5c:	44da      	add	sl, fp
 8012b5e:	ebcb 0606 	rsb	r6, fp, r6
 8012b62:	f8c8 7008 	str.w	r7, [r8, #8]
 8012b66:	2f00      	cmp	r7, #0
 8012b68:	d0b2      	beq.n	8012ad0 <__sfvwrite_r+0x68>
 8012b6a:	89a3      	ldrh	r3, [r4, #12]
 8012b6c:	2e00      	cmp	r6, #0
 8012b6e:	d1ce      	bne.n	8012b0e <__sfvwrite_r+0xa6>
 8012b70:	f8d5 a000 	ldr.w	sl, [r5]
 8012b74:	686e      	ldr	r6, [r5, #4]
 8012b76:	3508      	adds	r5, #8
 8012b78:	e7c7      	b.n	8012b0a <__sfvwrite_r+0xa2>
 8012b7a:	f000 fa05 	bl	8012f88 <_realloc_r>
 8012b7e:	4601      	mov	r1, r0
 8012b80:	2800      	cmp	r0, #0
 8012b82:	f040 80c7 	bne.w	8012d14 <__sfvwrite_r+0x2ac>
 8012b86:	4648      	mov	r0, r9
 8012b88:	6921      	ldr	r1, [r4, #16]
 8012b8a:	f7fe fa41 	bl	8011010 <_free_r>
 8012b8e:	210c      	movs	r1, #12
 8012b90:	f8c9 1000 	str.w	r1, [r9]
 8012b94:	89a0      	ldrh	r0, [r4, #12]
 8012b96:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8012b9a:	81a1      	strh	r1, [r4, #12]
 8012b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba0:	e797      	b.n	8012ad2 <__sfvwrite_r+0x6a>
 8012ba2:	46b2      	mov	sl, r6
 8012ba4:	46b4      	mov	ip, r6
 8012ba6:	46b3      	mov	fp, r6
 8012ba8:	4637      	mov	r7, r6
 8012baa:	2f00      	cmp	r7, #0
 8012bac:	d02f      	beq.n	8012c0e <__sfvwrite_r+0x1a6>
 8012bae:	f1bc 0f00 	cmp.w	ip, #0
 8012bb2:	d076      	beq.n	8012ca2 <__sfvwrite_r+0x23a>
 8012bb4:	6820      	ldr	r0, [r4, #0]
 8012bb6:	6922      	ldr	r2, [r4, #16]
 8012bb8:	68a1      	ldr	r1, [r4, #8]
 8012bba:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8012bbe:	45ba      	cmp	sl, r7
 8012bc0:	bf34      	ite	cc
 8012bc2:	4653      	movcc	r3, sl
 8012bc4:	463b      	movcs	r3, r7
 8012bc6:	4290      	cmp	r0, r2
 8012bc8:	d904      	bls.n	8012bd4 <__sfvwrite_r+0x16c>
 8012bca:	eb01 060e 	add.w	r6, r1, lr
 8012bce:	42b3      	cmp	r3, r6
 8012bd0:	f300 80ad 	bgt.w	8012d2e <__sfvwrite_r+0x2c6>
 8012bd4:	4573      	cmp	r3, lr
 8012bd6:	db35      	blt.n	8012c44 <__sfvwrite_r+0x1dc>
 8012bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012bda:	69e1      	ldr	r1, [r4, #28]
 8012bdc:	f8cd c004 	str.w	ip, [sp, #4]
 8012be0:	4648      	mov	r0, r9
 8012be2:	465a      	mov	r2, fp
 8012be4:	4673      	mov	r3, lr
 8012be6:	47b0      	blx	r6
 8012be8:	1e06      	subs	r6, r0, #0
 8012bea:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012bee:	ddd1      	ble.n	8012b94 <__sfvwrite_r+0x12c>
 8012bf0:	ebba 0a06 	subs.w	sl, sl, r6
 8012bf4:	d03a      	beq.n	8012c6c <__sfvwrite_r+0x204>
 8012bf6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012bfa:	1b8a      	subs	r2, r1, r6
 8012bfc:	44b3      	add	fp, r6
 8012bfe:	1bbf      	subs	r7, r7, r6
 8012c00:	f8c8 2008 	str.w	r2, [r8, #8]
 8012c04:	2a00      	cmp	r2, #0
 8012c06:	f43f af63 	beq.w	8012ad0 <__sfvwrite_r+0x68>
 8012c0a:	2f00      	cmp	r7, #0
 8012c0c:	d1cf      	bne.n	8012bae <__sfvwrite_r+0x146>
 8012c0e:	f8d5 b000 	ldr.w	fp, [r5]
 8012c12:	686f      	ldr	r7, [r5, #4]
 8012c14:	f04f 0c00 	mov.w	ip, #0
 8012c18:	3508      	adds	r5, #8
 8012c1a:	e7c6      	b.n	8012baa <__sfvwrite_r+0x142>
 8012c1c:	6820      	ldr	r0, [r4, #0]
 8012c1e:	6923      	ldr	r3, [r4, #16]
 8012c20:	4298      	cmp	r0, r3
 8012c22:	d903      	bls.n	8012c2c <__sfvwrite_r+0x1c4>
 8012c24:	42be      	cmp	r6, r7
 8012c26:	46bb      	mov	fp, r7
 8012c28:	f200 8094 	bhi.w	8012d54 <__sfvwrite_r+0x2ec>
 8012c2c:	6963      	ldr	r3, [r4, #20]
 8012c2e:	429e      	cmp	r6, r3
 8012c30:	d32a      	bcc.n	8012c88 <__sfvwrite_r+0x220>
 8012c32:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012c34:	69e1      	ldr	r1, [r4, #28]
 8012c36:	4648      	mov	r0, r9
 8012c38:	4652      	mov	r2, sl
 8012c3a:	47b8      	blx	r7
 8012c3c:	1e07      	subs	r7, r0, #0
 8012c3e:	dda9      	ble.n	8012b94 <__sfvwrite_r+0x12c>
 8012c40:	46bb      	mov	fp, r7
 8012c42:	e788      	b.n	8012b56 <__sfvwrite_r+0xee>
 8012c44:	461a      	mov	r2, r3
 8012c46:	4659      	mov	r1, fp
 8012c48:	9302      	str	r3, [sp, #8]
 8012c4a:	f8cd c004 	str.w	ip, [sp, #4]
 8012c4e:	f000 f8bb 	bl	8012dc8 <memmove>
 8012c52:	9b02      	ldr	r3, [sp, #8]
 8012c54:	6826      	ldr	r6, [r4, #0]
 8012c56:	68a0      	ldr	r0, [r4, #8]
 8012c58:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012c5c:	18f2      	adds	r2, r6, r3
 8012c5e:	461e      	mov	r6, r3
 8012c60:	1ac1      	subs	r1, r0, r3
 8012c62:	ebba 0a06 	subs.w	sl, sl, r6
 8012c66:	60a1      	str	r1, [r4, #8]
 8012c68:	6022      	str	r2, [r4, #0]
 8012c6a:	d1c4      	bne.n	8012bf6 <__sfvwrite_r+0x18e>
 8012c6c:	4648      	mov	r0, r9
 8012c6e:	4621      	mov	r1, r4
 8012c70:	f7fe f876 	bl	8010d60 <_fflush_r>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d18d      	bne.n	8012b94 <__sfvwrite_r+0x12c>
 8012c78:	46d4      	mov	ip, sl
 8012c7a:	e7bc      	b.n	8012bf6 <__sfvwrite_r+0x18e>
 8012c7c:	6820      	ldr	r0, [r4, #0]
 8012c7e:	9603      	str	r6, [sp, #12]
 8012c80:	46b3      	mov	fp, r6
 8012c82:	4637      	mov	r7, r6
 8012c84:	46b6      	mov	lr, r6
 8012c86:	e756      	b.n	8012b36 <__sfvwrite_r+0xce>
 8012c88:	4651      	mov	r1, sl
 8012c8a:	4632      	mov	r2, r6
 8012c8c:	f000 f89c 	bl	8012dc8 <memmove>
 8012c90:	6827      	ldr	r7, [r4, #0]
 8012c92:	68a2      	ldr	r2, [r4, #8]
 8012c94:	19b9      	adds	r1, r7, r6
 8012c96:	1b90      	subs	r0, r2, r6
 8012c98:	4637      	mov	r7, r6
 8012c9a:	60a0      	str	r0, [r4, #8]
 8012c9c:	6021      	str	r1, [r4, #0]
 8012c9e:	46b3      	mov	fp, r6
 8012ca0:	e759      	b.n	8012b56 <__sfvwrite_r+0xee>
 8012ca2:	4658      	mov	r0, fp
 8012ca4:	210a      	movs	r1, #10
 8012ca6:	463a      	mov	r2, r7
 8012ca8:	f7fe fe0c 	bl	80118c4 <memchr>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d060      	beq.n	8012d72 <__sfvwrite_r+0x30a>
 8012cb0:	f100 0a01 	add.w	sl, r0, #1
 8012cb4:	ebcb 0a0a 	rsb	sl, fp, sl
 8012cb8:	f04f 0c01 	mov.w	ip, #1
 8012cbc:	e77a      	b.n	8012bb4 <__sfvwrite_r+0x14c>
 8012cbe:	6822      	ldr	r2, [r4, #0]
 8012cc0:	6967      	ldr	r7, [r4, #20]
 8012cc2:	6921      	ldr	r1, [r4, #16]
 8012cc4:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8012cc8:	ebc1 0b02 	rsb	fp, r1, r2
 8012ccc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8012cd0:	f10b 0001 	add.w	r0, fp, #1
 8012cd4:	1057      	asrs	r7, r2, #1
 8012cd6:	1980      	adds	r0, r0, r6
 8012cd8:	4287      	cmp	r7, r0
 8012cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012cde:	463a      	mov	r2, r7
 8012ce0:	b21b      	sxth	r3, r3
 8012ce2:	bf3c      	itt	cc
 8012ce4:	4607      	movcc	r7, r0
 8012ce6:	463a      	movcc	r2, r7
 8012ce8:	4648      	mov	r0, r9
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f43f af45 	beq.w	8012b7a <__sfvwrite_r+0x112>
 8012cf0:	4611      	mov	r1, r2
 8012cf2:	f7fe fb39 	bl	8011368 <_malloc_r>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f43f af49 	beq.w	8012b8e <__sfvwrite_r+0x126>
 8012cfc:	6921      	ldr	r1, [r4, #16]
 8012cfe:	9002      	str	r0, [sp, #8]
 8012d00:	465a      	mov	r2, fp
 8012d02:	f7fe fe7f 	bl	8011a04 <memcpy>
 8012d06:	89a2      	ldrh	r2, [r4, #12]
 8012d08:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 8012d0c:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8012d10:	81a1      	strh	r1, [r4, #12]
 8012d12:	9902      	ldr	r1, [sp, #8]
 8012d14:	ebcb 0307 	rsb	r3, fp, r7
 8012d18:	eb01 000b 	add.w	r0, r1, fp
 8012d1c:	6167      	str	r7, [r4, #20]
 8012d1e:	6121      	str	r1, [r4, #16]
 8012d20:	6020      	str	r0, [r4, #0]
 8012d22:	9603      	str	r6, [sp, #12]
 8012d24:	60a3      	str	r3, [r4, #8]
 8012d26:	46b3      	mov	fp, r6
 8012d28:	4637      	mov	r7, r6
 8012d2a:	46b6      	mov	lr, r6
 8012d2c:	e703      	b.n	8012b36 <__sfvwrite_r+0xce>
 8012d2e:	4659      	mov	r1, fp
 8012d30:	4632      	mov	r2, r6
 8012d32:	f8cd c004 	str.w	ip, [sp, #4]
 8012d36:	f000 f847 	bl	8012dc8 <memmove>
 8012d3a:	6820      	ldr	r0, [r4, #0]
 8012d3c:	1983      	adds	r3, r0, r6
 8012d3e:	6023      	str	r3, [r4, #0]
 8012d40:	4648      	mov	r0, r9
 8012d42:	4621      	mov	r1, r4
 8012d44:	f7fe f80c 	bl	8010d60 <_fflush_r>
 8012d48:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f43f af4f 	beq.w	8012bf0 <__sfvwrite_r+0x188>
 8012d52:	e71f      	b.n	8012b94 <__sfvwrite_r+0x12c>
 8012d54:	4651      	mov	r1, sl
 8012d56:	463a      	mov	r2, r7
 8012d58:	f000 f836 	bl	8012dc8 <memmove>
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	19da      	adds	r2, r3, r7
 8012d60:	6022      	str	r2, [r4, #0]
 8012d62:	4648      	mov	r0, r9
 8012d64:	4621      	mov	r1, r4
 8012d66:	f7fd fffb 	bl	8010d60 <_fflush_r>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	f43f aef3 	beq.w	8012b56 <__sfvwrite_r+0xee>
 8012d70:	e710      	b.n	8012b94 <__sfvwrite_r+0x12c>
 8012d72:	f107 0a01 	add.w	sl, r7, #1
 8012d76:	f04f 0c01 	mov.w	ip, #1
 8012d7a:	e71b      	b.n	8012bb4 <__sfvwrite_r+0x14c>

08012d7c <_isatty_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4c07      	ldr	r4, [pc, #28]	; (8012d9c <_isatty_r+0x20>)
 8012d80:	2300      	movs	r3, #0
 8012d82:	4605      	mov	r5, r0
 8012d84:	4608      	mov	r0, r1
 8012d86:	6023      	str	r3, [r4, #0]
 8012d88:	f7ef fe3c 	bl	8002a04 <_isatty>
 8012d8c:	1c43      	adds	r3, r0, #1
 8012d8e:	d000      	beq.n	8012d92 <_isatty_r+0x16>
 8012d90:	bd38      	pop	{r3, r4, r5, pc}
 8012d92:	6821      	ldr	r1, [r4, #0]
 8012d94:	2900      	cmp	r1, #0
 8012d96:	d0fb      	beq.n	8012d90 <_isatty_r+0x14>
 8012d98:	6029      	str	r1, [r5, #0]
 8012d9a:	bd38      	pop	{r3, r4, r5, pc}
 8012d9c:	20000a18 	.word	0x20000a18

08012da0 <_lseek_r>:
 8012da0:	b538      	push	{r3, r4, r5, lr}
 8012da2:	4c08      	ldr	r4, [pc, #32]	; (8012dc4 <_lseek_r+0x24>)
 8012da4:	4605      	mov	r5, r0
 8012da6:	4608      	mov	r0, r1
 8012da8:	4611      	mov	r1, r2
 8012daa:	461a      	mov	r2, r3
 8012dac:	2300      	movs	r3, #0
 8012dae:	6023      	str	r3, [r4, #0]
 8012db0:	f7ef fe6c 	bl	8002a8c <_lseek>
 8012db4:	1c43      	adds	r3, r0, #1
 8012db6:	d000      	beq.n	8012dba <_lseek_r+0x1a>
 8012db8:	bd38      	pop	{r3, r4, r5, pc}
 8012dba:	6821      	ldr	r1, [r4, #0]
 8012dbc:	2900      	cmp	r1, #0
 8012dbe:	d0fb      	beq.n	8012db8 <_lseek_r+0x18>
 8012dc0:	6029      	str	r1, [r5, #0]
 8012dc2:	bd38      	pop	{r3, r4, r5, pc}
 8012dc4:	20000a18 	.word	0x20000a18

08012dc8 <memmove>:
 8012dc8:	4288      	cmp	r0, r1
 8012dca:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8012dce:	d926      	bls.n	8012e1e <memmove+0x56>
 8012dd0:	188c      	adds	r4, r1, r2
 8012dd2:	42a0      	cmp	r0, r4
 8012dd4:	d223      	bcs.n	8012e1e <memmove+0x56>
 8012dd6:	1883      	adds	r3, r0, r2
 8012dd8:	1e55      	subs	r5, r2, #1
 8012dda:	b1ea      	cbz	r2, 8012e18 <memmove+0x50>
 8012ddc:	4622      	mov	r2, r4
 8012dde:	f005 0401 	and.w	r4, r5, #1
 8012de2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8012de6:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8012dea:	1e69      	subs	r1, r5, #1
 8012dec:	b1a5      	cbz	r5, 8012e18 <memmove+0x50>
 8012dee:	b13c      	cbz	r4, 8012e00 <memmove+0x38>
 8012df0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012df4:	3901      	subs	r1, #1
 8012df6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012dfa:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012dfe:	d00b      	beq.n	8012e18 <memmove+0x50>
 8012e00:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012e04:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012e08:	3902      	subs	r1, #2
 8012e0a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8012e0e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012e12:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8012e16:	d1f3      	bne.n	8012e00 <memmove+0x38>
 8012e18:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8012e1c:	4770      	bx	lr
 8012e1e:	2a0f      	cmp	r2, #15
 8012e20:	f240 8096 	bls.w	8012f50 <memmove+0x188>
 8012e24:	ea41 0300 	orr.w	r3, r1, r0
 8012e28:	079b      	lsls	r3, r3, #30
 8012e2a:	f040 8093 	bne.w	8012f54 <memmove+0x18c>
 8012e2e:	680c      	ldr	r4, [r1, #0]
 8012e30:	6004      	str	r4, [r0, #0]
 8012e32:	684d      	ldr	r5, [r1, #4]
 8012e34:	6045      	str	r5, [r0, #4]
 8012e36:	688e      	ldr	r6, [r1, #8]
 8012e38:	f1a2 0310 	sub.w	r3, r2, #16
 8012e3c:	6086      	str	r6, [r0, #8]
 8012e3e:	68cc      	ldr	r4, [r1, #12]
 8012e40:	461d      	mov	r5, r3
 8012e42:	2d0f      	cmp	r5, #15
 8012e44:	60c4      	str	r4, [r0, #12]
 8012e46:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8012e4a:	f101 0410 	add.w	r4, r1, #16
 8012e4e:	f100 0310 	add.w	r3, r0, #16
 8012e52:	d922      	bls.n	8012e9a <memmove+0xd2>
 8012e54:	b166      	cbz	r6, 8012e70 <memmove+0xa8>
 8012e56:	6826      	ldr	r6, [r4, #0]
 8012e58:	601e      	str	r6, [r3, #0]
 8012e5a:	6866      	ldr	r6, [r4, #4]
 8012e5c:	605e      	str	r6, [r3, #4]
 8012e5e:	68a6      	ldr	r6, [r4, #8]
 8012e60:	609e      	str	r6, [r3, #8]
 8012e62:	68e6      	ldr	r6, [r4, #12]
 8012e64:	3d10      	subs	r5, #16
 8012e66:	60de      	str	r6, [r3, #12]
 8012e68:	3410      	adds	r4, #16
 8012e6a:	3310      	adds	r3, #16
 8012e6c:	2d0f      	cmp	r5, #15
 8012e6e:	d914      	bls.n	8012e9a <memmove+0xd2>
 8012e70:	6826      	ldr	r6, [r4, #0]
 8012e72:	601e      	str	r6, [r3, #0]
 8012e74:	6866      	ldr	r6, [r4, #4]
 8012e76:	605e      	str	r6, [r3, #4]
 8012e78:	68a6      	ldr	r6, [r4, #8]
 8012e7a:	609e      	str	r6, [r3, #8]
 8012e7c:	68e6      	ldr	r6, [r4, #12]
 8012e7e:	60de      	str	r6, [r3, #12]
 8012e80:	6926      	ldr	r6, [r4, #16]
 8012e82:	611e      	str	r6, [r3, #16]
 8012e84:	6966      	ldr	r6, [r4, #20]
 8012e86:	615e      	str	r6, [r3, #20]
 8012e88:	69a6      	ldr	r6, [r4, #24]
 8012e8a:	619e      	str	r6, [r3, #24]
 8012e8c:	69e6      	ldr	r6, [r4, #28]
 8012e8e:	3d20      	subs	r5, #32
 8012e90:	61de      	str	r6, [r3, #28]
 8012e92:	3420      	adds	r4, #32
 8012e94:	3320      	adds	r3, #32
 8012e96:	2d0f      	cmp	r5, #15
 8012e98:	d8ea      	bhi.n	8012e70 <memmove+0xa8>
 8012e9a:	f1a2 0310 	sub.w	r3, r2, #16
 8012e9e:	f023 040f 	bic.w	r4, r3, #15
 8012ea2:	f002 030f 	and.w	r3, r2, #15
 8012ea6:	3410      	adds	r4, #16
 8012ea8:	2b03      	cmp	r3, #3
 8012eaa:	eb00 0804 	add.w	r8, r0, r4
 8012eae:	4421      	add	r1, r4
 8012eb0:	d952      	bls.n	8012f58 <memmove+0x190>
 8012eb2:	f1a3 0904 	sub.w	r9, r3, #4
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8012ebc:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 8012ec0:	f853 6b04 	ldr.w	r6, [r3], #4
 8012ec4:	ebc1 050c 	rsb	r5, r1, ip
 8012ec8:	4644      	mov	r4, r8
 8012eca:	f10c 0c04 	add.w	ip, ip, #4
 8012ece:	4563      	cmp	r3, ip
 8012ed0:	f844 6b04 	str.w	r6, [r4], #4
 8012ed4:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8012ed8:	d012      	beq.n	8012f00 <memmove+0x138>
 8012eda:	b12d      	cbz	r5, 8012ee8 <memmove+0x120>
 8012edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ee0:	4563      	cmp	r3, ip
 8012ee2:	f844 5b04 	str.w	r5, [r4], #4
 8012ee6:	d00b      	beq.n	8012f00 <memmove+0x138>
 8012ee8:	461e      	mov	r6, r3
 8012eea:	4625      	mov	r5, r4
 8012eec:	f856 7b04 	ldr.w	r7, [r6], #4
 8012ef0:	f845 7b04 	str.w	r7, [r5], #4
 8012ef4:	685f      	ldr	r7, [r3, #4]
 8012ef6:	1d33      	adds	r3, r6, #4
 8012ef8:	6067      	str	r7, [r4, #4]
 8012efa:	1d2c      	adds	r4, r5, #4
 8012efc:	4563      	cmp	r3, ip
 8012efe:	d1f3      	bne.n	8012ee8 <memmove+0x120>
 8012f00:	f109 0301 	add.w	r3, r9, #1
 8012f04:	009c      	lsls	r4, r3, #2
 8012f06:	1909      	adds	r1, r1, r4
 8012f08:	f002 0203 	and.w	r2, r2, #3
 8012f0c:	4444      	add	r4, r8
 8012f0e:	2a00      	cmp	r2, #0
 8012f10:	d082      	beq.n	8012e18 <memmove+0x50>
 8012f12:	4623      	mov	r3, r4
 8012f14:	780d      	ldrb	r5, [r1, #0]
 8012f16:	f803 5b01 	strb.w	r5, [r3], #1
 8012f1a:	18a2      	adds	r2, r4, r2
 8012f1c:	43e4      	mvns	r4, r4
 8012f1e:	1914      	adds	r4, r2, r4
 8012f20:	4293      	cmp	r3, r2
 8012f22:	f004 0401 	and.w	r4, r4, #1
 8012f26:	f43f af77 	beq.w	8012e18 <memmove+0x50>
 8012f2a:	b134      	cbz	r4, 8012f3a <memmove+0x172>
 8012f2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f30:	f803 4b01 	strb.w	r4, [r3], #1
 8012f34:	4293      	cmp	r3, r2
 8012f36:	f43f af6f 	beq.w	8012e18 <memmove+0x50>
 8012f3a:	784d      	ldrb	r5, [r1, #1]
 8012f3c:	461c      	mov	r4, r3
 8012f3e:	f804 5b01 	strb.w	r5, [r4], #1
 8012f42:	788d      	ldrb	r5, [r1, #2]
 8012f44:	705d      	strb	r5, [r3, #1]
 8012f46:	1c63      	adds	r3, r4, #1
 8012f48:	3102      	adds	r1, #2
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	d1f5      	bne.n	8012f3a <memmove+0x172>
 8012f4e:	e763      	b.n	8012e18 <memmove+0x50>
 8012f50:	4604      	mov	r4, r0
 8012f52:	e7dc      	b.n	8012f0e <memmove+0x146>
 8012f54:	4604      	mov	r4, r0
 8012f56:	e7dc      	b.n	8012f12 <memmove+0x14a>
 8012f58:	4644      	mov	r4, r8
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	e7d7      	b.n	8012f0e <memmove+0x146>
 8012f5e:	bf00      	nop

08012f60 <_read_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4c08      	ldr	r4, [pc, #32]	; (8012f84 <_read_r+0x24>)
 8012f64:	4605      	mov	r5, r0
 8012f66:	4608      	mov	r0, r1
 8012f68:	4611      	mov	r1, r2
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	6023      	str	r3, [r4, #0]
 8012f70:	f7ef fde8 	bl	8002b44 <_read>
 8012f74:	1c43      	adds	r3, r0, #1
 8012f76:	d000      	beq.n	8012f7a <_read_r+0x1a>
 8012f78:	bd38      	pop	{r3, r4, r5, pc}
 8012f7a:	6821      	ldr	r1, [r4, #0]
 8012f7c:	2900      	cmp	r1, #0
 8012f7e:	d0fb      	beq.n	8012f78 <_read_r+0x18>
 8012f80:	6029      	str	r1, [r5, #0]
 8012f82:	bd38      	pop	{r3, r4, r5, pc}
 8012f84:	20000a18 	.word	0x20000a18

08012f88 <_realloc_r>:
 8012f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8c:	460c      	mov	r4, r1
 8012f8e:	b083      	sub	sp, #12
 8012f90:	4681      	mov	r9, r0
 8012f92:	4617      	mov	r7, r2
 8012f94:	2900      	cmp	r1, #0
 8012f96:	f000 80c5 	beq.w	8013124 <_realloc_r+0x19c>
 8012f9a:	f7fe fdd5 	bl	8011b48 <__malloc_lock>
 8012f9e:	f107 050b 	add.w	r5, r7, #11
 8012fa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012fa6:	2d16      	cmp	r5, #22
 8012fa8:	f1a4 0a08 	sub.w	sl, r4, #8
 8012fac:	f023 0603 	bic.w	r6, r3, #3
 8012fb0:	d84f      	bhi.n	8013052 <_realloc_r+0xca>
 8012fb2:	2110      	movs	r1, #16
 8012fb4:	460d      	mov	r5, r1
 8012fb6:	42af      	cmp	r7, r5
 8012fb8:	d850      	bhi.n	801305c <_realloc_r+0xd4>
 8012fba:	428e      	cmp	r6, r1
 8012fbc:	da53      	bge.n	8013066 <_realloc_r+0xde>
 8012fbe:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8013360 <_realloc_r+0x3d8>
 8012fc2:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8012fc6:	eb0a 0206 	add.w	r2, sl, r6
 8012fca:	4290      	cmp	r0, r2
 8012fcc:	f000 80b0 	beq.w	8013130 <_realloc_r+0x1a8>
 8012fd0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012fd4:	f02e 0801 	bic.w	r8, lr, #1
 8012fd8:	4490      	add	r8, r2
 8012fda:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8012fde:	f018 0f01 	tst.w	r8, #1
 8012fe2:	d059      	beq.n	8013098 <_realloc_r+0x110>
 8012fe4:	f04f 0e00 	mov.w	lr, #0
 8012fe8:	4672      	mov	r2, lr
 8012fea:	07db      	lsls	r3, r3, #31
 8012fec:	d476      	bmi.n	80130dc <_realloc_r+0x154>
 8012fee:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8012ff2:	ebc3 0b0a 	rsb	fp, r3, sl
 8012ff6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012ffa:	f023 0303 	bic.w	r3, r3, #3
 8012ffe:	199b      	adds	r3, r3, r6
 8013000:	9301      	str	r3, [sp, #4]
 8013002:	2a00      	cmp	r2, #0
 8013004:	d067      	beq.n	80130d6 <_realloc_r+0x14e>
 8013006:	4282      	cmp	r2, r0
 8013008:	eb0e 0803 	add.w	r8, lr, r3
 801300c:	f000 80f1 	beq.w	80131f2 <_realloc_r+0x26a>
 8013010:	4588      	cmp	r8, r1
 8013012:	db60      	blt.n	80130d6 <_realloc_r+0x14e>
 8013014:	68d1      	ldr	r1, [r2, #12]
 8013016:	6890      	ldr	r0, [r2, #8]
 8013018:	465f      	mov	r7, fp
 801301a:	60c1      	str	r1, [r0, #12]
 801301c:	6088      	str	r0, [r1, #8]
 801301e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8013022:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013026:	1f32      	subs	r2, r6, #4
 8013028:	2a24      	cmp	r2, #36	; 0x24
 801302a:	60cb      	str	r3, [r1, #12]
 801302c:	6099      	str	r1, [r3, #8]
 801302e:	f200 812a 	bhi.w	8013286 <_realloc_r+0x2fe>
 8013032:	2a13      	cmp	r2, #19
 8013034:	f240 80b9 	bls.w	80131aa <_realloc_r+0x222>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	f8cb 3008 	str.w	r3, [fp, #8]
 801303e:	6861      	ldr	r1, [r4, #4]
 8013040:	2a1b      	cmp	r2, #27
 8013042:	f8cb 100c 	str.w	r1, [fp, #12]
 8013046:	f200 8134 	bhi.w	80132b2 <_realloc_r+0x32a>
 801304a:	f10b 0010 	add.w	r0, fp, #16
 801304e:	3408      	adds	r4, #8
 8013050:	e0ac      	b.n	80131ac <_realloc_r+0x224>
 8013052:	f025 0507 	bic.w	r5, r5, #7
 8013056:	2d00      	cmp	r5, #0
 8013058:	4629      	mov	r1, r5
 801305a:	daac      	bge.n	8012fb6 <_realloc_r+0x2e>
 801305c:	270c      	movs	r7, #12
 801305e:	f8c9 7000 	str.w	r7, [r9]
 8013062:	2700      	movs	r7, #0
 8013064:	e014      	b.n	8013090 <_realloc_r+0x108>
 8013066:	46b0      	mov	r8, r6
 8013068:	ebc5 0708 	rsb	r7, r5, r8
 801306c:	2f0f      	cmp	r7, #15
 801306e:	d81e      	bhi.n	80130ae <_realloc_r+0x126>
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	eb0a 0108 	add.w	r1, sl, r8
 8013078:	ea43 0008 	orr.w	r0, r3, r8
 801307c:	f8ca 0004 	str.w	r0, [sl, #4]
 8013080:	684a      	ldr	r2, [r1, #4]
 8013082:	f042 0701 	orr.w	r7, r2, #1
 8013086:	604f      	str	r7, [r1, #4]
 8013088:	4648      	mov	r0, r9
 801308a:	f7fe fd5f 	bl	8011b4c <__malloc_unlock>
 801308e:	4627      	mov	r7, r4
 8013090:	4638      	mov	r0, r7
 8013092:	b003      	add	sp, #12
 8013094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013098:	f02e 0e03 	bic.w	lr, lr, #3
 801309c:	eb0e 0806 	add.w	r8, lr, r6
 80130a0:	4588      	cmp	r8, r1
 80130a2:	dba2      	blt.n	8012fea <_realloc_r+0x62>
 80130a4:	68d7      	ldr	r7, [r2, #12]
 80130a6:	6892      	ldr	r2, [r2, #8]
 80130a8:	60d7      	str	r7, [r2, #12]
 80130aa:	60ba      	str	r2, [r7, #8]
 80130ac:	e7dc      	b.n	8013068 <_realloc_r+0xe0>
 80130ae:	eb0a 0105 	add.w	r1, sl, r5
 80130b2:	f003 0301 	and.w	r3, r3, #1
 80130b6:	19c8      	adds	r0, r1, r7
 80130b8:	431d      	orrs	r5, r3
 80130ba:	f047 0201 	orr.w	r2, r7, #1
 80130be:	f8ca 5004 	str.w	r5, [sl, #4]
 80130c2:	604a      	str	r2, [r1, #4]
 80130c4:	6847      	ldr	r7, [r0, #4]
 80130c6:	f047 0301 	orr.w	r3, r7, #1
 80130ca:	6043      	str	r3, [r0, #4]
 80130cc:	3108      	adds	r1, #8
 80130ce:	4648      	mov	r0, r9
 80130d0:	f7fd ff9e 	bl	8011010 <_free_r>
 80130d4:	e7d8      	b.n	8013088 <_realloc_r+0x100>
 80130d6:	9b01      	ldr	r3, [sp, #4]
 80130d8:	428b      	cmp	r3, r1
 80130da:	da34      	bge.n	8013146 <_realloc_r+0x1be>
 80130dc:	4639      	mov	r1, r7
 80130de:	4648      	mov	r0, r9
 80130e0:	f7fe f942 	bl	8011368 <_malloc_r>
 80130e4:	4607      	mov	r7, r0
 80130e6:	b1c8      	cbz	r0, 801311c <_realloc_r+0x194>
 80130e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80130ec:	f023 0201 	bic.w	r2, r3, #1
 80130f0:	f1a0 0108 	sub.w	r1, r0, #8
 80130f4:	4452      	add	r2, sl
 80130f6:	4291      	cmp	r1, r2
 80130f8:	f000 80be 	beq.w	8013278 <_realloc_r+0x2f0>
 80130fc:	1f32      	subs	r2, r6, #4
 80130fe:	2a24      	cmp	r2, #36	; 0x24
 8013100:	d873      	bhi.n	80131ea <_realloc_r+0x262>
 8013102:	2a13      	cmp	r2, #19
 8013104:	d846      	bhi.n	8013194 <_realloc_r+0x20c>
 8013106:	4623      	mov	r3, r4
 8013108:	6819      	ldr	r1, [r3, #0]
 801310a:	6001      	str	r1, [r0, #0]
 801310c:	685a      	ldr	r2, [r3, #4]
 801310e:	6042      	str	r2, [r0, #4]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	6083      	str	r3, [r0, #8]
 8013114:	4648      	mov	r0, r9
 8013116:	4621      	mov	r1, r4
 8013118:	f7fd ff7a 	bl	8011010 <_free_r>
 801311c:	4648      	mov	r0, r9
 801311e:	f7fe fd15 	bl	8011b4c <__malloc_unlock>
 8013122:	e7b5      	b.n	8013090 <_realloc_r+0x108>
 8013124:	4611      	mov	r1, r2
 8013126:	b003      	add	sp, #12
 8013128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	f7fe b91c 	b.w	8011368 <_malloc_r>
 8013130:	6842      	ldr	r2, [r0, #4]
 8013132:	f022 0e03 	bic.w	lr, r2, #3
 8013136:	eb0e 0206 	add.w	r2, lr, r6
 801313a:	f105 0810 	add.w	r8, r5, #16
 801313e:	4542      	cmp	r2, r8
 8013140:	da3f      	bge.n	80131c2 <_realloc_r+0x23a>
 8013142:	4602      	mov	r2, r0
 8013144:	e751      	b.n	8012fea <_realloc_r+0x62>
 8013146:	465f      	mov	r7, fp
 8013148:	f8db 000c 	ldr.w	r0, [fp, #12]
 801314c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013150:	1f32      	subs	r2, r6, #4
 8013152:	2a24      	cmp	r2, #36	; 0x24
 8013154:	60c8      	str	r0, [r1, #12]
 8013156:	6081      	str	r1, [r0, #8]
 8013158:	f200 80a0 	bhi.w	801329c <_realloc_r+0x314>
 801315c:	2a13      	cmp	r2, #19
 801315e:	f240 809b 	bls.w	8013298 <_realloc_r+0x310>
 8013162:	6820      	ldr	r0, [r4, #0]
 8013164:	f8cb 0008 	str.w	r0, [fp, #8]
 8013168:	6861      	ldr	r1, [r4, #4]
 801316a:	2a1b      	cmp	r2, #27
 801316c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013170:	f200 80b4 	bhi.w	80132dc <_realloc_r+0x354>
 8013174:	f10b 0310 	add.w	r3, fp, #16
 8013178:	3408      	adds	r4, #8
 801317a:	6820      	ldr	r0, [r4, #0]
 801317c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013180:	6018      	str	r0, [r3, #0]
 8013182:	6862      	ldr	r2, [r4, #4]
 8013184:	605a      	str	r2, [r3, #4]
 8013186:	68a4      	ldr	r4, [r4, #8]
 8013188:	609c      	str	r4, [r3, #8]
 801318a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801318e:	463c      	mov	r4, r7
 8013190:	46da      	mov	sl, fp
 8013192:	e769      	b.n	8013068 <_realloc_r+0xe0>
 8013194:	6821      	ldr	r1, [r4, #0]
 8013196:	6001      	str	r1, [r0, #0]
 8013198:	6860      	ldr	r0, [r4, #4]
 801319a:	2a1b      	cmp	r2, #27
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	d860      	bhi.n	8013262 <_realloc_r+0x2da>
 80131a0:	f107 0008 	add.w	r0, r7, #8
 80131a4:	f104 0308 	add.w	r3, r4, #8
 80131a8:	e7ae      	b.n	8013108 <_realloc_r+0x180>
 80131aa:	4638      	mov	r0, r7
 80131ac:	6823      	ldr	r3, [r4, #0]
 80131ae:	6003      	str	r3, [r0, #0]
 80131b0:	6862      	ldr	r2, [r4, #4]
 80131b2:	6042      	str	r2, [r0, #4]
 80131b4:	68a4      	ldr	r4, [r4, #8]
 80131b6:	6084      	str	r4, [r0, #8]
 80131b8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80131bc:	463c      	mov	r4, r7
 80131be:	46da      	mov	sl, fp
 80131c0:	e752      	b.n	8013068 <_realloc_r+0xe0>
 80131c2:	eb0a 0705 	add.w	r7, sl, r5
 80131c6:	1b50      	subs	r0, r2, r5
 80131c8:	f040 0201 	orr.w	r2, r0, #1
 80131cc:	607a      	str	r2, [r7, #4]
 80131ce:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80131d2:	f8cc 7008 	str.w	r7, [ip, #8]
 80131d6:	f001 0301 	and.w	r3, r1, #1
 80131da:	431d      	orrs	r5, r3
 80131dc:	f844 5c04 	str.w	r5, [r4, #-4]
 80131e0:	4648      	mov	r0, r9
 80131e2:	f7fe fcb3 	bl	8011b4c <__malloc_unlock>
 80131e6:	4627      	mov	r7, r4
 80131e8:	e752      	b.n	8013090 <_realloc_r+0x108>
 80131ea:	4621      	mov	r1, r4
 80131ec:	f7ff fdec 	bl	8012dc8 <memmove>
 80131f0:	e790      	b.n	8013114 <_realloc_r+0x18c>
 80131f2:	f105 0010 	add.w	r0, r5, #16
 80131f6:	4580      	cmp	r8, r0
 80131f8:	f6ff af6d 	blt.w	80130d6 <_realloc_r+0x14e>
 80131fc:	465f      	mov	r7, fp
 80131fe:	f8db 000c 	ldr.w	r0, [fp, #12]
 8013202:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8013206:	1f32      	subs	r2, r6, #4
 8013208:	2a24      	cmp	r2, #36	; 0x24
 801320a:	60c8      	str	r0, [r1, #12]
 801320c:	6081      	str	r1, [r0, #8]
 801320e:	f200 8087 	bhi.w	8013320 <_realloc_r+0x398>
 8013212:	2a13      	cmp	r2, #19
 8013214:	d978      	bls.n	8013308 <_realloc_r+0x380>
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	f8cb 0008 	str.w	r0, [fp, #8]
 801321c:	6861      	ldr	r1, [r4, #4]
 801321e:	2a1b      	cmp	r2, #27
 8013220:	f8cb 100c 	str.w	r1, [fp, #12]
 8013224:	f200 8085 	bhi.w	8013332 <_realloc_r+0x3aa>
 8013228:	f10b 0310 	add.w	r3, fp, #16
 801322c:	3408      	adds	r4, #8
 801322e:	6820      	ldr	r0, [r4, #0]
 8013230:	6018      	str	r0, [r3, #0]
 8013232:	6862      	ldr	r2, [r4, #4]
 8013234:	605a      	str	r2, [r3, #4]
 8013236:	68a1      	ldr	r1, [r4, #8]
 8013238:	6099      	str	r1, [r3, #8]
 801323a:	eb0b 0305 	add.w	r3, fp, r5
 801323e:	ebc5 0008 	rsb	r0, r5, r8
 8013242:	f040 0201 	orr.w	r2, r0, #1
 8013246:	605a      	str	r2, [r3, #4]
 8013248:	f8db 1004 	ldr.w	r1, [fp, #4]
 801324c:	f8cc 3008 	str.w	r3, [ip, #8]
 8013250:	f001 0301 	and.w	r3, r1, #1
 8013254:	431d      	orrs	r5, r3
 8013256:	f8cb 5004 	str.w	r5, [fp, #4]
 801325a:	4648      	mov	r0, r9
 801325c:	f7fe fc76 	bl	8011b4c <__malloc_unlock>
 8013260:	e716      	b.n	8013090 <_realloc_r+0x108>
 8013262:	68a3      	ldr	r3, [r4, #8]
 8013264:	60bb      	str	r3, [r7, #8]
 8013266:	68e1      	ldr	r1, [r4, #12]
 8013268:	2a24      	cmp	r2, #36	; 0x24
 801326a:	60f9      	str	r1, [r7, #12]
 801326c:	d02d      	beq.n	80132ca <_realloc_r+0x342>
 801326e:	f107 0010 	add.w	r0, r7, #16
 8013272:	f104 0310 	add.w	r3, r4, #16
 8013276:	e747      	b.n	8013108 <_realloc_r+0x180>
 8013278:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801327c:	f027 0c03 	bic.w	ip, r7, #3
 8013280:	eb0c 0806 	add.w	r8, ip, r6
 8013284:	e6f0      	b.n	8013068 <_realloc_r+0xe0>
 8013286:	4621      	mov	r1, r4
 8013288:	4638      	mov	r0, r7
 801328a:	f7ff fd9d 	bl	8012dc8 <memmove>
 801328e:	463c      	mov	r4, r7
 8013290:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013294:	46da      	mov	sl, fp
 8013296:	e6e7      	b.n	8013068 <_realloc_r+0xe0>
 8013298:	463b      	mov	r3, r7
 801329a:	e76e      	b.n	801317a <_realloc_r+0x1f2>
 801329c:	4621      	mov	r1, r4
 801329e:	4638      	mov	r0, r7
 80132a0:	f7ff fd92 	bl	8012dc8 <memmove>
 80132a4:	463c      	mov	r4, r7
 80132a6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80132aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80132ae:	46da      	mov	sl, fp
 80132b0:	e6da      	b.n	8013068 <_realloc_r+0xe0>
 80132b2:	68a0      	ldr	r0, [r4, #8]
 80132b4:	f8cb 0010 	str.w	r0, [fp, #16]
 80132b8:	68e3      	ldr	r3, [r4, #12]
 80132ba:	2a24      	cmp	r2, #36	; 0x24
 80132bc:	f8cb 3014 	str.w	r3, [fp, #20]
 80132c0:	d018      	beq.n	80132f4 <_realloc_r+0x36c>
 80132c2:	f10b 0018 	add.w	r0, fp, #24
 80132c6:	3410      	adds	r4, #16
 80132c8:	e770      	b.n	80131ac <_realloc_r+0x224>
 80132ca:	6922      	ldr	r2, [r4, #16]
 80132cc:	613a      	str	r2, [r7, #16]
 80132ce:	6963      	ldr	r3, [r4, #20]
 80132d0:	f107 0018 	add.w	r0, r7, #24
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	f104 0318 	add.w	r3, r4, #24
 80132da:	e715      	b.n	8013108 <_realloc_r+0x180>
 80132dc:	68a3      	ldr	r3, [r4, #8]
 80132de:	f8cb 3010 	str.w	r3, [fp, #16]
 80132e2:	68e0      	ldr	r0, [r4, #12]
 80132e4:	2a24      	cmp	r2, #36	; 0x24
 80132e6:	f8cb 0014 	str.w	r0, [fp, #20]
 80132ea:	d00f      	beq.n	801330c <_realloc_r+0x384>
 80132ec:	f10b 0318 	add.w	r3, fp, #24
 80132f0:	3410      	adds	r4, #16
 80132f2:	e742      	b.n	801317a <_realloc_r+0x1f2>
 80132f4:	6922      	ldr	r2, [r4, #16]
 80132f6:	f8cb 2018 	str.w	r2, [fp, #24]
 80132fa:	6961      	ldr	r1, [r4, #20]
 80132fc:	f10b 0020 	add.w	r0, fp, #32
 8013300:	f8cb 101c 	str.w	r1, [fp, #28]
 8013304:	3418      	adds	r4, #24
 8013306:	e751      	b.n	80131ac <_realloc_r+0x224>
 8013308:	463b      	mov	r3, r7
 801330a:	e790      	b.n	801322e <_realloc_r+0x2a6>
 801330c:	6922      	ldr	r2, [r4, #16]
 801330e:	f8cb 2018 	str.w	r2, [fp, #24]
 8013312:	6961      	ldr	r1, [r4, #20]
 8013314:	f10b 0320 	add.w	r3, fp, #32
 8013318:	f8cb 101c 	str.w	r1, [fp, #28]
 801331c:	3418      	adds	r4, #24
 801331e:	e72c      	b.n	801317a <_realloc_r+0x1f2>
 8013320:	4638      	mov	r0, r7
 8013322:	4621      	mov	r1, r4
 8013324:	f8cd c000 	str.w	ip, [sp]
 8013328:	f7ff fd4e 	bl	8012dc8 <memmove>
 801332c:	f8dd c000 	ldr.w	ip, [sp]
 8013330:	e783      	b.n	801323a <_realloc_r+0x2b2>
 8013332:	68a3      	ldr	r3, [r4, #8]
 8013334:	f8cb 3010 	str.w	r3, [fp, #16]
 8013338:	68e0      	ldr	r0, [r4, #12]
 801333a:	2a24      	cmp	r2, #36	; 0x24
 801333c:	f8cb 0014 	str.w	r0, [fp, #20]
 8013340:	d003      	beq.n	801334a <_realloc_r+0x3c2>
 8013342:	f10b 0318 	add.w	r3, fp, #24
 8013346:	3410      	adds	r4, #16
 8013348:	e771      	b.n	801322e <_realloc_r+0x2a6>
 801334a:	6922      	ldr	r2, [r4, #16]
 801334c:	f8cb 2018 	str.w	r2, [fp, #24]
 8013350:	6961      	ldr	r1, [r4, #20]
 8013352:	f10b 0320 	add.w	r3, fp, #32
 8013356:	f8cb 101c 	str.w	r1, [fp, #28]
 801335a:	3418      	adds	r4, #24
 801335c:	e767      	b.n	801322e <_realloc_r+0x2a6>
 801335e:	bf00      	nop
 8013360:	200004f0 	.word	0x200004f0

08013364 <__swbuf_r>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	460d      	mov	r5, r1
 8013368:	4614      	mov	r4, r2
 801336a:	4606      	mov	r6, r0
 801336c:	b110      	cbz	r0, 8013374 <__swbuf_r+0x10>
 801336e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013370:	2b00      	cmp	r3, #0
 8013372:	d04a      	beq.n	801340a <__swbuf_r+0xa6>
 8013374:	89a3      	ldrh	r3, [r4, #12]
 8013376:	69a2      	ldr	r2, [r4, #24]
 8013378:	f003 0008 	and.w	r0, r3, #8
 801337c:	b201      	sxth	r1, r0
 801337e:	60a2      	str	r2, [r4, #8]
 8013380:	2900      	cmp	r1, #0
 8013382:	d03a      	beq.n	80133fa <__swbuf_r+0x96>
 8013384:	6922      	ldr	r2, [r4, #16]
 8013386:	2a00      	cmp	r2, #0
 8013388:	d037      	beq.n	80133fa <__swbuf_r+0x96>
 801338a:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 801338e:	b201      	sxth	r1, r0
 8013390:	b2ed      	uxtb	r5, r5
 8013392:	b1a9      	cbz	r1, 80133c0 <__swbuf_r+0x5c>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	6960      	ldr	r0, [r4, #20]
 8013398:	1a9a      	subs	r2, r3, r2
 801339a:	4282      	cmp	r2, r0
 801339c:	da1c      	bge.n	80133d8 <__swbuf_r+0x74>
 801339e:	1c50      	adds	r0, r2, #1
 80133a0:	68a1      	ldr	r1, [r4, #8]
 80133a2:	1e4a      	subs	r2, r1, #1
 80133a4:	60a2      	str	r2, [r4, #8]
 80133a6:	f803 5b01 	strb.w	r5, [r3], #1
 80133aa:	6961      	ldr	r1, [r4, #20]
 80133ac:	6023      	str	r3, [r4, #0]
 80133ae:	4281      	cmp	r1, r0
 80133b0:	d01a      	beq.n	80133e8 <__swbuf_r+0x84>
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	07db      	lsls	r3, r3, #31
 80133b6:	d501      	bpl.n	80133bc <__swbuf_r+0x58>
 80133b8:	2d0a      	cmp	r5, #10
 80133ba:	d015      	beq.n	80133e8 <__swbuf_r+0x84>
 80133bc:	4628      	mov	r0, r5
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80133c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80133c6:	81a3      	strh	r3, [r4, #12]
 80133c8:	6823      	ldr	r3, [r4, #0]
 80133ca:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 80133ce:	6960      	ldr	r0, [r4, #20]
 80133d0:	6661      	str	r1, [r4, #100]	; 0x64
 80133d2:	1a9a      	subs	r2, r3, r2
 80133d4:	4282      	cmp	r2, r0
 80133d6:	dbe2      	blt.n	801339e <__swbuf_r+0x3a>
 80133d8:	4630      	mov	r0, r6
 80133da:	4621      	mov	r1, r4
 80133dc:	f7fd fcc0 	bl	8010d60 <_fflush_r>
 80133e0:	b940      	cbnz	r0, 80133f4 <__swbuf_r+0x90>
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	2001      	movs	r0, #1
 80133e6:	e7db      	b.n	80133a0 <__swbuf_r+0x3c>
 80133e8:	4630      	mov	r0, r6
 80133ea:	4621      	mov	r1, r4
 80133ec:	f7fd fcb8 	bl	8010d60 <_fflush_r>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d0e3      	beq.n	80133bc <__swbuf_r+0x58>
 80133f4:	f04f 35ff 	mov.w	r5, #4294967295
 80133f8:	e7e0      	b.n	80133bc <__swbuf_r+0x58>
 80133fa:	4630      	mov	r0, r6
 80133fc:	4621      	mov	r1, r4
 80133fe:	f7fc f995 	bl	800f72c <__swsetup_r>
 8013402:	89a3      	ldrh	r3, [r4, #12]
 8013404:	b920      	cbnz	r0, 8013410 <__swbuf_r+0xac>
 8013406:	6922      	ldr	r2, [r4, #16]
 8013408:	e7bf      	b.n	801338a <__swbuf_r+0x26>
 801340a:	f7fd fd8b 	bl	8010f24 <__sinit>
 801340e:	e7b1      	b.n	8013374 <__swbuf_r+0x10>
 8013410:	f043 0540 	orr.w	r5, r3, #64	; 0x40
 8013414:	2009      	movs	r0, #9
 8013416:	81a5      	strh	r5, [r4, #12]
 8013418:	f04f 35ff 	mov.w	r5, #4294967295
 801341c:	6030      	str	r0, [r6, #0]
 801341e:	e7cd      	b.n	80133bc <__swbuf_r+0x58>

08013420 <_wcrtomb_r>:
 8013420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013424:	461e      	mov	r6, r3
 8013426:	b086      	sub	sp, #24
 8013428:	460c      	mov	r4, r1
 801342a:	4605      	mov	r5, r0
 801342c:	4617      	mov	r7, r2
 801342e:	4b0f      	ldr	r3, [pc, #60]	; (801346c <_wcrtomb_r+0x4c>)
 8013430:	b191      	cbz	r1, 8013458 <_wcrtomb_r+0x38>
 8013432:	f8d3 8000 	ldr.w	r8, [r3]
 8013436:	f7fd ff11 	bl	801125c <__locale_charset>
 801343a:	9600      	str	r6, [sp, #0]
 801343c:	4603      	mov	r3, r0
 801343e:	4621      	mov	r1, r4
 8013440:	4628      	mov	r0, r5
 8013442:	463a      	mov	r2, r7
 8013444:	47c0      	blx	r8
 8013446:	1c43      	adds	r3, r0, #1
 8013448:	d103      	bne.n	8013452 <_wcrtomb_r+0x32>
 801344a:	2100      	movs	r1, #0
 801344c:	228a      	movs	r2, #138	; 0x8a
 801344e:	6031      	str	r1, [r6, #0]
 8013450:	602a      	str	r2, [r5, #0]
 8013452:	b006      	add	sp, #24
 8013454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013458:	681f      	ldr	r7, [r3, #0]
 801345a:	f7fd feff 	bl	801125c <__locale_charset>
 801345e:	9600      	str	r6, [sp, #0]
 8013460:	4603      	mov	r3, r0
 8013462:	a903      	add	r1, sp, #12
 8013464:	4628      	mov	r0, r5
 8013466:	4622      	mov	r2, r4
 8013468:	47b8      	blx	r7
 801346a:	e7ec      	b.n	8013446 <_wcrtomb_r+0x26>
 801346c:	20000900 	.word	0x20000900

08013470 <__ascii_wctomb>:
 8013470:	b121      	cbz	r1, 801347c <__ascii_wctomb+0xc>
 8013472:	2aff      	cmp	r2, #255	; 0xff
 8013474:	d804      	bhi.n	8013480 <__ascii_wctomb+0x10>
 8013476:	700a      	strb	r2, [r1, #0]
 8013478:	2001      	movs	r0, #1
 801347a:	4770      	bx	lr
 801347c:	4608      	mov	r0, r1
 801347e:	4770      	bx	lr
 8013480:	238a      	movs	r3, #138	; 0x8a
 8013482:	6003      	str	r3, [r0, #0]
 8013484:	f04f 30ff 	mov.w	r0, #4294967295
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	4447334c 	.word	0x4447334c
 8013490:	72203032 	.word	0x72203032
 8013494:	20646165 	.word	0x20646165
 8013498:	65747461 	.word	0x65747461
 801349c:	2074706d 	.word	0x2074706d
 80134a0:	656d6974 	.word	0x656d6974
 80134a4:	756f2064 	.word	0x756f2064
 80134a8:	2e2e2e74 	.word	0x2e2e2e74
 80134ac:	65686320 	.word	0x65686320
 80134b0:	79206b63 	.word	0x79206b63
 80134b4:	2072756f 	.word	0x2072756f
 80134b8:	69726977 	.word	0x69726977
 80134bc:	632f676e 	.word	0x632f676e
 80134c0:	2165646f 	.word	0x2165646f
 80134c4:	0d0a2121 	.word	0x0d0a2121
 80134c8:	00000000 	.word	0x00000000
 80134cc:	74697865 	.word	0x74697865
 80134d0:	00000000 	.word	0x00000000
 80134d4:	70616548 	.word	0x70616548
 80134d8:	646e6120 	.word	0x646e6120
 80134dc:	61747320 	.word	0x61747320
 80134e0:	63206b63 	.word	0x63206b63
 80134e4:	696c6c6f 	.word	0x696c6c6f
 80134e8:	6e6f6973 	.word	0x6e6f6973
 80134ec:	0000000a 	.word	0x0000000a
 80134f0:	00776f70 	.word	0x00776f70
 80134f4:	74727173 	.word	0x74727173
	...

08013500 <dp_h>:
	...
 8013508:	40000000 3fe2b803                       ...@...?

08013510 <dp_l>:
	...
 8013518:	43cfd006 3e4cfdeb                       ...C..L>

08013520 <bp>:
 8013520:	00000000 3ff00000 00000000 3ff80000     .......?.......?

08013530 <TWO52>:
 8013530:	00000000 43300000 00000000 c3300000     ......0C......0.
 8013540:	00000043                                C...

08013544 <_global_impure_ptr>:
 8013544:	20000068                                h.. 

08013548 <blanks.6735>:
 8013548:	20202020 20202020 20202020 20202020                     
 8013558:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8013568:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8013578:	00000000 33323130 37363534 62613938     ....0123456789ab
 8013588:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8013598:	00000030                                0...

0801359c <zeroes.6736>:
 801359c:	30303030 30303030 30303030 30303030     0000000000000000
 80135ac:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80135bc:	49534f50 00000058 0000002e              POSIX.......

080135c8 <p05.5242>:
 80135c8:	00000005 00000019 0000007d 00000000     ........}.......

080135d8 <__mprec_tens>:
 80135d8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80135e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80135f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8013608:	00000000 412e8480 00000000 416312d0     .......A......cA
 8013618:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8013628:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8013638:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8013648:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8013658:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8013668:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8013678:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8013688:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8013698:	79d99db4 44ea7843                       ...yCx.D

080136a0 <__mprec_bigtens>:
 80136a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 80136b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80136c0:	7f73bf3c 75154fdd                       <.s..O.u

080136c8 <_init>:
 80136c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ca:	bf00      	nop
 80136cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ce:	bc08      	pop	{r3}
 80136d0:	469e      	mov	lr, r3
 80136d2:	4770      	bx	lr

080136d4 <_fini>:
 80136d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136d6:	bf00      	nop
 80136d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136da:	bc08      	pop	{r3}
 80136dc:	469e      	mov	lr, r3
 80136de:	4770      	bx	lr
