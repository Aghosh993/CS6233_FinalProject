   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"pwm.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	_ZL5stack:
  22 0000 00000000 		.space	4
  23              		.text
  24              		.align	2
  25              		.global	_Z13pwm_out1_initt
  26              		.thumb
  27              		.thumb_func
  29              	_Z13pwm_out1_initt:
  30              	.LFB111:
  31              		.file 1 "../src/pwm.cpp"
   1:../src/pwm.cpp **** /*
   2:../src/pwm.cpp ****  * pwm.cpp
   3:../src/pwm.cpp ****  *
   4:../src/pwm.cpp ****  *  Created on: Feb 19, 2013
   5:../src/pwm.cpp ****  *      Author: root
   6:../src/pwm.cpp ****  */
   7:../src/pwm.cpp **** 
   8:../src/pwm.cpp **** #include "pwm.h"
   9:../src/pwm.cpp **** 
  10:../src/pwm.cpp **** void pwm_out1_init(uint16_t frequency)
  11:../src/pwm.cpp **** {
  32              		.loc 1 11 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 56
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 8EB0     		sub	sp, sp, #56
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 0346     		mov	r3, r0
  48 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  49              	.LBB2:
  12:../src/pwm.cpp **** 	int period = 0;
  50              		.loc 1 12 0
  51 000a 4FF00003 		mov	r3, #0
  52 000e 7B63     		str	r3, [r7, #52]
  13:../src/pwm.cpp **** 	int psc = 0;
  53              		.loc 1 13 0
  54 0010 4FF00003 		mov	r3, #0
  55 0014 3B63     		str	r3, [r7, #48]
  14:../src/pwm.cpp **** 	config_pwm_freq((int)frequency, &period, &psc);
  56              		.loc 1 14 0
  57 0016 F988     		ldrh	r1, [r7, #6]
  58 0018 07F13402 		add	r2, r7, #52
  59 001c 07F13003 		add	r3, r7, #48
  60 0020 0846     		mov	r0, r1
  61 0022 1146     		mov	r1, r2
  62 0024 1A46     		mov	r2, r3
  63 0026 FFF7FEFF 		bl	_Z15config_pwm_freqiPiS_
  15:../src/pwm.cpp **** 
  16:../src/pwm.cpp **** 
  17:../src/pwm.cpp **** 	TIM_TimeBaseInitTypeDef i;
  18:../src/pwm.cpp **** 	TIM_OCInitTypeDef j;
  19:../src/pwm.cpp **** 	GPIO_InitTypeDef g;
  20:../src/pwm.cpp **** 
  21:../src/pwm.cpp **** 	i.TIM_CounterMode = TIM_CounterMode_Up;
  64              		.loc 1 21 0
  65 002a 4FF00003 		mov	r3, #0
  66 002e FB84     		strh	r3, [r7, #38]	@ movhi
  22:../src/pwm.cpp **** 	i.TIM_ClockDivision = 0;//clk_div;
  67              		.loc 1 22 0
  68 0030 4FF00003 		mov	r3, #0
  69 0034 BB85     		strh	r3, [r7, #44]	@ movhi
  23:../src/pwm.cpp **** 	i.TIM_RepetitionCounter = 0;
  70              		.loc 1 23 0
  71 0036 4FF00003 		mov	r3, #0
  72 003a 87F82E30 		strb	r3, [r7, #46]
  24:../src/pwm.cpp **** 	i.TIM_Prescaler = ((uint16_t)psc)-1;
  73              		.loc 1 24 0
  74 003e 3B6B     		ldr	r3, [r7, #48]
  75 0040 9BB2     		uxth	r3, r3
  76 0042 03F1FF33 		add	r3, r3, #-1
  77 0046 9BB2     		uxth	r3, r3
  78 0048 BB84     		strh	r3, [r7, #36]	@ movhi
  25:../src/pwm.cpp **** 	i.TIM_Period = ((uint16_t)period)-1;
  79              		.loc 1 25 0
  80 004a 7B6B     		ldr	r3, [r7, #52]
  81 004c 9BB2     		uxth	r3, r3
  82 004e 03F1FF33 		add	r3, r3, #-1
  83 0052 BB62     		str	r3, [r7, #40]
  26:../src/pwm.cpp **** 
  27:../src/pwm.cpp **** 	j.TIM_OCMode = TIM_OCMode_PWM1;
  84              		.loc 1 27 0
  85 0054 4FF06003 		mov	r3, #96
  86 0058 3B61     		str	r3, [r7, #16]
  28:../src/pwm.cpp **** 	j.TIM_OutputState = TIM_OutputState_Enable;
  87              		.loc 1 28 0
  88 005a 4FF00103 		mov	r3, #1
  89 005e BB82     		strh	r3, [r7, #20]	@ movhi
  29:../src/pwm.cpp **** 	j.TIM_Pulse = 8191;//25000;
  90              		.loc 1 29 0
  91 0060 41F6FF73 		movw	r3, #8191
  92 0064 BB61     		str	r3, [r7, #24]
  30:../src/pwm.cpp **** 	j.TIM_OCPolarity = TIM_OCPolarity_High;
  93              		.loc 1 30 0
  94 0066 4FF00003 		mov	r3, #0
  95 006a BB83     		strh	r3, [r7, #28]	@ movhi
  31:../src/pwm.cpp **** 
  32:../src/pwm.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
  96              		.loc 1 32 0
  97 006c 4FF00203 		mov	r3, #2
  98 0070 3B73     		strb	r3, [r7, #12]
  33:../src/pwm.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
  99              		.loc 1 33 0
 100 0072 4FF00003 		mov	r3, #0
 101 0076 BB73     		strb	r3, [r7, #14]
  34:../src/pwm.cpp **** 	g.GPIO_Pin = GPIO_Pin_4;
 102              		.loc 1 34 0
 103 0078 4FF01003 		mov	r3, #16
 104 007c BB60     		str	r3, [r7, #8]
  35:../src/pwm.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_UP;
 105              		.loc 1 35 0
 106 007e 4FF00103 		mov	r3, #1
 107 0082 FB73     		strb	r3, [r7, #15]
  36:../src/pwm.cpp **** 	g.GPIO_Speed = GPIO_Speed_50MHz;
 108              		.loc 1 36 0
 109 0084 4FF00303 		mov	r3, #3
 110 0088 7B73     		strb	r3, [r7, #13]
  37:../src/pwm.cpp **** 
  38:../src/pwm.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 111              		.loc 1 38 0
 112 008a 4FF48020 		mov	r0, #262144
 113 008e 4FF00101 		mov	r1, #1
 114 0092 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
  39:../src/pwm.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_2); // AF2, 10:
 115              		.loc 1 39 0
 116 0096 4FF48060 		mov	r0, #1024
 117 009a C4F60000 		movt	r0, 18432
 118 009e 4FF00401 		mov	r1, #4
 119 00a2 4FF00202 		mov	r2, #2
 120 00a6 FFF7FEFF 		bl	GPIO_PinAFConfig
  40:../src/pwm.cpp **** 	GPIO_Init(GPIOB, &g);
 121              		.loc 1 40 0
 122 00aa 07F10803 		add	r3, r7, #8
 123 00ae 4FF48060 		mov	r0, #1024
 124 00b2 C4F60000 		movt	r0, 18432
 125 00b6 1946     		mov	r1, r3
 126 00b8 FFF7FEFF 		bl	GPIO_Init
  41:../src/pwm.cpp **** 
  42:../src/pwm.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 127              		.loc 1 42 0
 128 00bc 4FF00200 		mov	r0, #2
 129 00c0 4FF00101 		mov	r1, #1
 130 00c4 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  43:../src/pwm.cpp **** 	TIM_InternalClockConfig(TIM3);
 131              		.loc 1 43 0
 132 00c8 4FF48060 		mov	r0, #1024
 133 00cc C4F20000 		movt	r0, 16384
 134 00d0 FFF7FEFF 		bl	TIM_InternalClockConfig
  44:../src/pwm.cpp **** 	TIM_TimeBaseInit(TIM3, &i);
 135              		.loc 1 44 0
 136 00d4 07F12403 		add	r3, r7, #36
 137 00d8 4FF48060 		mov	r0, #1024
 138 00dc C4F20000 		movt	r0, 16384
 139 00e0 1946     		mov	r1, r3
 140 00e2 FFF7FEFF 		bl	TIM_TimeBaseInit
  45:../src/pwm.cpp **** 	TIM_OC1Init(TIM3, &j);
 141              		.loc 1 45 0
 142 00e6 07F11003 		add	r3, r7, #16
 143 00ea 4FF48060 		mov	r0, #1024
 144 00ee C4F20000 		movt	r0, 16384
 145 00f2 1946     		mov	r1, r3
 146 00f4 FFF7FEFF 		bl	TIM_OC1Init
  46:../src/pwm.cpp **** 	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 147              		.loc 1 46 0
 148 00f8 4FF48060 		mov	r0, #1024
 149 00fc C4F20000 		movt	r0, 16384
 150 0100 4FF00801 		mov	r1, #8
 151 0104 FFF7FEFF 		bl	TIM_OC1PreloadConfig
  47:../src/pwm.cpp **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 152              		.loc 1 47 0
 153 0108 4FF48060 		mov	r0, #1024
 154 010c C4F20000 		movt	r0, 16384
 155 0110 4FF00101 		mov	r1, #1
 156 0114 FFF7FEFF 		bl	TIM_ARRPreloadConfig
  48:../src/pwm.cpp **** 
  49:../src/pwm.cpp **** 	TIM_CCxCmd(TIM3, TIM_Channel_1, TIM_CCx_Enable);
 157              		.loc 1 49 0
 158 0118 4FF48060 		mov	r0, #1024
 159 011c C4F20000 		movt	r0, 16384
 160 0120 4FF00001 		mov	r1, #0
 161 0124 4FF00102 		mov	r2, #1
 162 0128 FFF7FEFF 		bl	TIM_CCxCmd
  50:../src/pwm.cpp **** 	TIM_Cmd(TIM3, ENABLE);
 163              		.loc 1 50 0
 164 012c 4FF48060 		mov	r0, #1024
 165 0130 C4F20000 		movt	r0, 16384
 166 0134 4FF00101 		mov	r1, #1
 167 0138 FFF7FEFF 		bl	TIM_Cmd
  51:../src/pwm.cpp **** 	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 168              		.loc 1 51 0
 169 013c 4FF48060 		mov	r0, #1024
 170 0140 C4F20000 		movt	r0, 16384
 171 0144 4FF00101 		mov	r1, #1
 172 0148 FFF7FEFF 		bl	TIM_GenerateEvent
 173              	.LBE2:
  52:../src/pwm.cpp **** }
 174              		.loc 1 52 0
 175 014c 07F13807 		add	r7, r7, #56
 176 0150 BD46     		mov	sp, r7
 177 0152 80BD     		pop	{r7, pc}
 178              		.cfi_endproc
 179              	.LFE111:
 181              		.align	2
 182              		.global	_Z11pwm1_outputf
 183              		.thumb
 184              		.thumb_func
 186              	_Z11pwm1_outputf:
 187              	.LFB112:
  53:../src/pwm.cpp **** 
  54:../src/pwm.cpp **** void pwm1_output(float duty)
  55:../src/pwm.cpp **** {
 188              		.loc 1 55 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 16
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0154 80B5     		push	{r7, lr}
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0156 84B0     		sub	sp, sp, #16
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 24
 200 0158 00AF     		add	r7, sp, #0
 201              	.LCFI5:
 202              		.cfi_def_cfa_register 7
 203 015a 7860     		str	r0, [r7, #4]	@ float
 204              	.LBB3:
  56:../src/pwm.cpp **** 	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 205              		.loc 1 56 0
 206 015c 4FF48063 		mov	r3, #1024
 207 0160 C4F20003 		movt	r3, 16384
 208 0164 D3ED0B7A 		flds	s15, [r3, #44]	@ int
 209 0168 B8EE677A 		fuitos	s14, s15
 210 016c D7ED017A 		flds	s15, [r7, #4]
 211 0170 67EE277A 		fmuls	s15, s14, s15
 212 0174 FCEEE77A 		ftouizs	s15, s15
 213 0178 17EE903A 		fmrs	r3, s15	@ int
 214 017c FB81     		strh	r3, [r7, #14]	@ movhi
  57:../src/pwm.cpp **** 	TIM_SetCompare1(TIM3, setval);
 215              		.loc 1 57 0
 216 017e FB89     		ldrh	r3, [r7, #14]
 217 0180 4FF48060 		mov	r0, #1024
 218 0184 C4F20000 		movt	r0, 16384
 219 0188 1946     		mov	r1, r3
 220 018a FFF7FEFF 		bl	TIM_SetCompare1
 221              	.LBE3:
  58:../src/pwm.cpp **** }
 222              		.loc 1 58 0
 223 018e 07F11007 		add	r7, r7, #16
 224 0192 BD46     		mov	sp, r7
 225 0194 80BD     		pop	{r7, pc}
 226              		.cfi_endproc
 227              	.LFE112:
 229 0196 00BF     		.align	2
 230              		.global	_Z13pwm_out2_initt
 231              		.thumb
 232              		.thumb_func
 234              	_Z13pwm_out2_initt:
 235              	.LFB113:
  59:../src/pwm.cpp **** 
  60:../src/pwm.cpp **** void pwm_out2_init(uint16_t frequency)
  61:../src/pwm.cpp **** {
 236              		.loc 1 61 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 56
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240 0198 80B5     		push	{r7, lr}
 241              	.LCFI6:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 019a 8EB0     		sub	sp, sp, #56
 246              	.LCFI7:
 247              		.cfi_def_cfa_offset 64
 248 019c 00AF     		add	r7, sp, #0
 249              	.LCFI8:
 250              		.cfi_def_cfa_register 7
 251 019e 0346     		mov	r3, r0
 252 01a0 FB80     		strh	r3, [r7, #6]	@ movhi
 253              	.LBB4:
  62:../src/pwm.cpp **** 	int period = 0;
 254              		.loc 1 62 0
 255 01a2 4FF00003 		mov	r3, #0
 256 01a6 7B63     		str	r3, [r7, #52]
  63:../src/pwm.cpp **** 	int psc = 0;
 257              		.loc 1 63 0
 258 01a8 4FF00003 		mov	r3, #0
 259 01ac 3B63     		str	r3, [r7, #48]
  64:../src/pwm.cpp **** 	config_pwm_freq((int)frequency, &period, &psc);
 260              		.loc 1 64 0
 261 01ae F988     		ldrh	r1, [r7, #6]
 262 01b0 07F13402 		add	r2, r7, #52
 263 01b4 07F13003 		add	r3, r7, #48
 264 01b8 0846     		mov	r0, r1
 265 01ba 1146     		mov	r1, r2
 266 01bc 1A46     		mov	r2, r3
 267 01be FFF7FEFF 		bl	_Z15config_pwm_freqiPiS_
  65:../src/pwm.cpp **** 
  66:../src/pwm.cpp **** 
  67:../src/pwm.cpp **** 	TIM_TimeBaseInitTypeDef i;
  68:../src/pwm.cpp **** 	TIM_OCInitTypeDef j;
  69:../src/pwm.cpp **** 	GPIO_InitTypeDef g;
  70:../src/pwm.cpp **** 
  71:../src/pwm.cpp **** 	i.TIM_CounterMode = TIM_CounterMode_Up;
 268              		.loc 1 71 0
 269 01c2 4FF00003 		mov	r3, #0
 270 01c6 FB84     		strh	r3, [r7, #38]	@ movhi
  72:../src/pwm.cpp **** 	i.TIM_ClockDivision = 0;//clk_div;
 271              		.loc 1 72 0
 272 01c8 4FF00003 		mov	r3, #0
 273 01cc BB85     		strh	r3, [r7, #44]	@ movhi
  73:../src/pwm.cpp **** 	i.TIM_RepetitionCounter = 0;
 274              		.loc 1 73 0
 275 01ce 4FF00003 		mov	r3, #0
 276 01d2 87F82E30 		strb	r3, [r7, #46]
  74:../src/pwm.cpp **** 	i.TIM_Prescaler = ((uint16_t)psc)-1;
 277              		.loc 1 74 0
 278 01d6 3B6B     		ldr	r3, [r7, #48]
 279 01d8 9BB2     		uxth	r3, r3
 280 01da 03F1FF33 		add	r3, r3, #-1
 281 01de 9BB2     		uxth	r3, r3
 282 01e0 BB84     		strh	r3, [r7, #36]	@ movhi
  75:../src/pwm.cpp **** 	i.TIM_Period = ((uint16_t)period)-1;
 283              		.loc 1 75 0
 284 01e2 7B6B     		ldr	r3, [r7, #52]
 285 01e4 9BB2     		uxth	r3, r3
 286 01e6 03F1FF33 		add	r3, r3, #-1
 287 01ea BB62     		str	r3, [r7, #40]
  76:../src/pwm.cpp **** 
  77:../src/pwm.cpp **** 	j.TIM_OCMode = TIM_OCMode_PWM1;
 288              		.loc 1 77 0
 289 01ec 4FF06003 		mov	r3, #96
 290 01f0 3B61     		str	r3, [r7, #16]
  78:../src/pwm.cpp **** 	j.TIM_OutputState = TIM_OutputState_Enable;
 291              		.loc 1 78 0
 292 01f2 4FF00103 		mov	r3, #1
 293 01f6 BB82     		strh	r3, [r7, #20]	@ movhi
  79:../src/pwm.cpp **** 	j.TIM_Pulse = 8191;
 294              		.loc 1 79 0
 295 01f8 41F6FF73 		movw	r3, #8191
 296 01fc BB61     		str	r3, [r7, #24]
  80:../src/pwm.cpp **** 	j.TIM_OCPolarity = TIM_OCPolarity_High;
 297              		.loc 1 80 0
 298 01fe 4FF00003 		mov	r3, #0
 299 0202 BB83     		strh	r3, [r7, #28]	@ movhi
  81:../src/pwm.cpp **** 
  82:../src/pwm.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 300              		.loc 1 82 0
 301 0204 4FF00203 		mov	r3, #2
 302 0208 3B73     		strb	r3, [r7, #12]
  83:../src/pwm.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 303              		.loc 1 83 0
 304 020a 4FF00003 		mov	r3, #0
 305 020e BB73     		strb	r3, [r7, #14]
  84:../src/pwm.cpp **** 	g.GPIO_Pin = GPIO_Pin_5;
 306              		.loc 1 84 0
 307 0210 4FF02003 		mov	r3, #32
 308 0214 BB60     		str	r3, [r7, #8]
  85:../src/pwm.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_UP;
 309              		.loc 1 85 0
 310 0216 4FF00103 		mov	r3, #1
 311 021a FB73     		strb	r3, [r7, #15]
  86:../src/pwm.cpp **** 	g.GPIO_Speed = GPIO_Speed_50MHz;
 312              		.loc 1 86 0
 313 021c 4FF00303 		mov	r3, #3
 314 0220 7B73     		strb	r3, [r7, #13]
  87:../src/pwm.cpp **** 
  88:../src/pwm.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 315              		.loc 1 88 0
 316 0222 4FF48020 		mov	r0, #262144
 317 0226 4FF00101 		mov	r1, #1
 318 022a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
  89:../src/pwm.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_2); // AF 2, 10:
 319              		.loc 1 89 0
 320 022e 4FF48060 		mov	r0, #1024
 321 0232 C4F60000 		movt	r0, 18432
 322 0236 4FF00501 		mov	r1, #5
 323 023a 4FF00202 		mov	r2, #2
 324 023e FFF7FEFF 		bl	GPIO_PinAFConfig
  90:../src/pwm.cpp **** 	GPIO_Init(GPIOB, &g);
 325              		.loc 1 90 0
 326 0242 07F10803 		add	r3, r7, #8
 327 0246 4FF48060 		mov	r0, #1024
 328 024a C4F60000 		movt	r0, 18432
 329 024e 1946     		mov	r1, r3
 330 0250 FFF7FEFF 		bl	GPIO_Init
  91:../src/pwm.cpp **** 
  92:../src/pwm.cpp **** 
  93:../src/pwm.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 331              		.loc 1 93 0
 332 0254 4FF00200 		mov	r0, #2
 333 0258 4FF00101 		mov	r1, #1
 334 025c FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  94:../src/pwm.cpp **** 	TIM_InternalClockConfig(TIM3);
 335              		.loc 1 94 0
 336 0260 4FF48060 		mov	r0, #1024
 337 0264 C4F20000 		movt	r0, 16384
 338 0268 FFF7FEFF 		bl	TIM_InternalClockConfig
  95:../src/pwm.cpp **** 	TIM_TimeBaseInit(TIM3, &i);
 339              		.loc 1 95 0
 340 026c 07F12403 		add	r3, r7, #36
 341 0270 4FF48060 		mov	r0, #1024
 342 0274 C4F20000 		movt	r0, 16384
 343 0278 1946     		mov	r1, r3
 344 027a FFF7FEFF 		bl	TIM_TimeBaseInit
  96:../src/pwm.cpp **** 	TIM_OC2Init(TIM3, &j);
 345              		.loc 1 96 0
 346 027e 07F11003 		add	r3, r7, #16
 347 0282 4FF48060 		mov	r0, #1024
 348 0286 C4F20000 		movt	r0, 16384
 349 028a 1946     		mov	r1, r3
 350 028c FFF7FEFF 		bl	TIM_OC2Init
  97:../src/pwm.cpp **** 	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 351              		.loc 1 97 0
 352 0290 4FF48060 		mov	r0, #1024
 353 0294 C4F20000 		movt	r0, 16384
 354 0298 4FF00801 		mov	r1, #8
 355 029c FFF7FEFF 		bl	TIM_OC2PreloadConfig
  98:../src/pwm.cpp **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 356              		.loc 1 98 0
 357 02a0 4FF48060 		mov	r0, #1024
 358 02a4 C4F20000 		movt	r0, 16384
 359 02a8 4FF00101 		mov	r1, #1
 360 02ac FFF7FEFF 		bl	TIM_ARRPreloadConfig
  99:../src/pwm.cpp **** 
 100:../src/pwm.cpp **** 	TIM_CCxCmd(TIM3, TIM_Channel_2, TIM_CCx_Enable);
 361              		.loc 1 100 0
 362 02b0 4FF48060 		mov	r0, #1024
 363 02b4 C4F20000 		movt	r0, 16384
 364 02b8 4FF00401 		mov	r1, #4
 365 02bc 4FF00102 		mov	r2, #1
 366 02c0 FFF7FEFF 		bl	TIM_CCxCmd
 101:../src/pwm.cpp **** 	TIM_Cmd(TIM3, ENABLE);
 367              		.loc 1 101 0
 368 02c4 4FF48060 		mov	r0, #1024
 369 02c8 C4F20000 		movt	r0, 16384
 370 02cc 4FF00101 		mov	r1, #1
 371 02d0 FFF7FEFF 		bl	TIM_Cmd
 102:../src/pwm.cpp **** 	TIM_GenerateEvent(TIM3, TIM_EventSource_Update);
 372              		.loc 1 102 0
 373 02d4 4FF48060 		mov	r0, #1024
 374 02d8 C4F20000 		movt	r0, 16384
 375 02dc 4FF00101 		mov	r1, #1
 376 02e0 FFF7FEFF 		bl	TIM_GenerateEvent
 377              	.LBE4:
 103:../src/pwm.cpp **** }
 378              		.loc 1 103 0
 379 02e4 07F13807 		add	r7, r7, #56
 380 02e8 BD46     		mov	sp, r7
 381 02ea 80BD     		pop	{r7, pc}
 382              		.cfi_endproc
 383              	.LFE113:
 385              		.align	2
 386              		.global	_Z11pwm2_outputf
 387              		.thumb
 388              		.thumb_func
 390              	_Z11pwm2_outputf:
 391              	.LFB114:
 104:../src/pwm.cpp **** 
 105:../src/pwm.cpp **** void pwm2_output(float duty)
 106:../src/pwm.cpp **** {
 392              		.loc 1 106 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 16
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396 02ec 80B5     		push	{r7, lr}
 397              	.LCFI9:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 02ee 84B0     		sub	sp, sp, #16
 402              	.LCFI10:
 403              		.cfi_def_cfa_offset 24
 404 02f0 00AF     		add	r7, sp, #0
 405              	.LCFI11:
 406              		.cfi_def_cfa_register 7
 407 02f2 7860     		str	r0, [r7, #4]	@ float
 408              	.LBB5:
 107:../src/pwm.cpp **** 	uint16_t setval = (uint16_t)((float)TIM3->ARR * duty);
 409              		.loc 1 107 0
 410 02f4 4FF48063 		mov	r3, #1024
 411 02f8 C4F20003 		movt	r3, 16384
 412 02fc D3ED0B7A 		flds	s15, [r3, #44]	@ int
 413 0300 B8EE677A 		fuitos	s14, s15
 414 0304 D7ED017A 		flds	s15, [r7, #4]
 415 0308 67EE277A 		fmuls	s15, s14, s15
 416 030c FCEEE77A 		ftouizs	s15, s15
 417 0310 17EE903A 		fmrs	r3, s15	@ int
 418 0314 FB81     		strh	r3, [r7, #14]	@ movhi
 108:../src/pwm.cpp **** 	TIM_SetCompare2(TIM3, setval);
 419              		.loc 1 108 0
 420 0316 FB89     		ldrh	r3, [r7, #14]
 421 0318 4FF48060 		mov	r0, #1024
 422 031c C4F20000 		movt	r0, 16384
 423 0320 1946     		mov	r1, r3
 424 0322 FFF7FEFF 		bl	TIM_SetCompare2
 425              	.LBE5:
 109:../src/pwm.cpp **** }
 426              		.loc 1 109 0
 427 0326 07F11007 		add	r7, r7, #16
 428 032a BD46     		mov	sp, r7
 429 032c 80BD     		pop	{r7, pc}
 430              		.cfi_endproc
 431              	.LFE114:
 433 032e 00BF     		.align	2
 434              		.global	_Z13pwm_out3_initt
 435              		.thumb
 436              		.thumb_func
 438              	_Z13pwm_out3_initt:
 439              	.LFB115:
 110:../src/pwm.cpp **** // PE0, TIM16:
 111:../src/pwm.cpp **** void pwm_out3_init(uint16_t frequency)
 112:../src/pwm.cpp **** {
 440              		.loc 1 112 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 56
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0330 80B5     		push	{r7, lr}
 445              	.LCFI12:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0332 8EB0     		sub	sp, sp, #56
 450              	.LCFI13:
 451              		.cfi_def_cfa_offset 64
 452 0334 00AF     		add	r7, sp, #0
 453              	.LCFI14:
 454              		.cfi_def_cfa_register 7
 455 0336 0346     		mov	r3, r0
 456 0338 FB80     		strh	r3, [r7, #6]	@ movhi
 457              	.LBB6:
 113:../src/pwm.cpp **** 	/*
 114:../src/pwm.cpp **** 	int period = 0;
 115:../src/pwm.cpp **** 	int psc = 0;
 116:../src/pwm.cpp **** 	config_pwm_freq((int)frequency, &period, &psc);
 117:../src/pwm.cpp **** 
 118:../src/pwm.cpp **** 
 119:../src/pwm.cpp **** 	TIM_TimeBaseInitTypeDef i;
 120:../src/pwm.cpp **** 	TIM_OCInitTypeDef j;
 121:../src/pwm.cpp **** 	GPIO_InitTypeDef g;
 122:../src/pwm.cpp **** 
 123:../src/pwm.cpp **** 	i.TIM_CounterMode = TIM_CounterMode_Up;
 124:../src/pwm.cpp **** 	i.TIM_ClockDivision = 0;
 125:../src/pwm.cpp **** 	i.TIM_RepetitionCounter = 0;
 126:../src/pwm.cpp **** 	i.TIM_Prescaler = ((uint16_t)psc)-1;
 127:../src/pwm.cpp **** 	i.TIM_Period = ((uint16_t)period)-1;
 128:../src/pwm.cpp **** 
 129:../src/pwm.cpp **** 	j.TIM_OCMode = TIM_OCMode_PWM1;
 130:../src/pwm.cpp **** 	j.TIM_OutputState = TIM_OutputState_Enable;
 131:../src/pwm.cpp **** 	j.TIM_Pulse = 8191;
 132:../src/pwm.cpp **** 	j.TIM_OCPolarity = TIM_OCPolarity_High;
 133:../src/pwm.cpp **** 
 134:../src/pwm.cpp **** 	// PE0
 135:../src/pwm.cpp **** 
 136:../src/pwm.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 137:../src/pwm.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 138:../src/pwm.cpp **** 	g.GPIO_Pin = GPIO_Pin_12;
 139:../src/pwm.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 140:../src/pwm.cpp **** 	g.GPIO_Speed = GPIO_Speed_50MHz;
 141:../src/pwm.cpp **** 
 142:../src/pwm.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 143:../src/pwm.cpp **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_4); // AF 1, 2, 3, or 9 (TIM15); 1, 4 (TIM16); 1
 144:../src/pwm.cpp **** 	GPIO_Init(GPIOA, &g);
 145:../src/pwm.cpp **** 
 146:../src/pwm.cpp **** 
 147:../src/pwm.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
 148:../src/pwm.cpp **** 	TIM_InternalClockConfig(TIM16);
 149:../src/pwm.cpp **** 	TIM_TimeBaseInit(TIM16, &i);
 150:../src/pwm.cpp **** 	TIM_OC1Init(TIM16, &j);
 151:../src/pwm.cpp **** 	TIM_OC1PreloadConfig(TIM16, TIM_OCPreload_Enable);
 152:../src/pwm.cpp **** 	TIM_ARRPreloadConfig(TIM16, ENABLE);
 153:../src/pwm.cpp **** 
 154:../src/pwm.cpp **** 	TIM_CtrlPWMOutputs(TIM16, ENABLE);
 155:../src/pwm.cpp **** 	TIM_CCPreloadControl(TIM16, ENABLE);
 156:../src/pwm.cpp **** 
 157:../src/pwm.cpp **** 	TIM_CCxCmd(TIM16, TIM_Channel_1, TIM_CCx_Enable);
 158:../src/pwm.cpp **** 	TIM_Cmd(TIM16, ENABLE);
 159:../src/pwm.cpp **** 	TIM_GenerateEvent(TIM16, TIM_EventSource_Update);
 160:../src/pwm.cpp **** 	*/
 161:../src/pwm.cpp **** 
 162:../src/pwm.cpp **** 	///////////////////////////////////////////////////
 163:../src/pwm.cpp **** 
 164:../src/pwm.cpp **** 	int period = 0;
 458              		.loc 1 164 0
 459 033a 4FF00003 		mov	r3, #0
 460 033e 7B63     		str	r3, [r7, #52]
 165:../src/pwm.cpp **** 	int psc = 0;
 461              		.loc 1 165 0
 462 0340 4FF00003 		mov	r3, #0
 463 0344 3B63     		str	r3, [r7, #48]
 166:../src/pwm.cpp **** 	config_pwm_freq((int)frequency, &period, &psc);
 464              		.loc 1 166 0
 465 0346 F988     		ldrh	r1, [r7, #6]
 466 0348 07F13402 		add	r2, r7, #52
 467 034c 07F13003 		add	r3, r7, #48
 468 0350 0846     		mov	r0, r1
 469 0352 1146     		mov	r1, r2
 470 0354 1A46     		mov	r2, r3
 471 0356 FFF7FEFF 		bl	_Z15config_pwm_freqiPiS_
 167:../src/pwm.cpp **** 
 168:../src/pwm.cpp **** 
 169:../src/pwm.cpp **** 	TIM_TimeBaseInitTypeDef i;
 170:../src/pwm.cpp **** 	TIM_OCInitTypeDef j;
 171:../src/pwm.cpp **** 	GPIO_InitTypeDef g;
 172:../src/pwm.cpp **** 
 173:../src/pwm.cpp **** 	i.TIM_CounterMode = TIM_CounterMode_Up;
 472              		.loc 1 173 0
 473 035a 4FF00003 		mov	r3, #0
 474 035e FB84     		strh	r3, [r7, #38]	@ movhi
 174:../src/pwm.cpp **** 	i.TIM_ClockDivision = 0;
 475              		.loc 1 174 0
 476 0360 4FF00003 		mov	r3, #0
 477 0364 BB85     		strh	r3, [r7, #44]	@ movhi
 175:../src/pwm.cpp **** 	i.TIM_RepetitionCounter = 0;
 478              		.loc 1 175 0
 479 0366 4FF00003 		mov	r3, #0
 480 036a 87F82E30 		strb	r3, [r7, #46]
 176:../src/pwm.cpp **** 	i.TIM_Prescaler = ((uint16_t)psc)-1;
 481              		.loc 1 176 0
 482 036e 3B6B     		ldr	r3, [r7, #48]
 483 0370 9BB2     		uxth	r3, r3
 484 0372 03F1FF33 		add	r3, r3, #-1
 485 0376 9BB2     		uxth	r3, r3
 486 0378 BB84     		strh	r3, [r7, #36]	@ movhi
 177:../src/pwm.cpp **** 	i.TIM_Period = ((uint16_t)period)-1;
 487              		.loc 1 177 0
 488 037a 7B6B     		ldr	r3, [r7, #52]
 489 037c 9BB2     		uxth	r3, r3
 490 037e 03F1FF33 		add	r3, r3, #-1
 491 0382 BB62     		str	r3, [r7, #40]
 178:../src/pwm.cpp **** 
 179:../src/pwm.cpp **** 	j.TIM_OCMode = TIM_OCMode_PWM1;
 492              		.loc 1 179 0
 493 0384 4FF06003 		mov	r3, #96
 494 0388 3B61     		str	r3, [r7, #16]
 180:../src/pwm.cpp **** 	j.TIM_OutputState = TIM_OutputState_Enable;
 495              		.loc 1 180 0
 496 038a 4FF00103 		mov	r3, #1
 497 038e BB82     		strh	r3, [r7, #20]	@ movhi
 181:../src/pwm.cpp **** 	j.TIM_Pulse = 8191;
 498              		.loc 1 181 0
 499 0390 41F6FF73 		movw	r3, #8191
 500 0394 BB61     		str	r3, [r7, #24]
 182:../src/pwm.cpp **** 	j.TIM_OCPolarity = TIM_OCPolarity_High;
 501              		.loc 1 182 0
 502 0396 4FF00003 		mov	r3, #0
 503 039a BB83     		strh	r3, [r7, #28]	@ movhi
 183:../src/pwm.cpp **** 
 184:../src/pwm.cpp **** 	// PE0
 185:../src/pwm.cpp **** 
 186:../src/pwm.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 504              		.loc 1 186 0
 505 039c 4FF00203 		mov	r3, #2
 506 03a0 3B73     		strb	r3, [r7, #12]
 187:../src/pwm.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 507              		.loc 1 187 0
 508 03a2 4FF00003 		mov	r3, #0
 509 03a6 BB73     		strb	r3, [r7, #14]
 188:../src/pwm.cpp **** 	g.GPIO_Pin = GPIO_Pin_14;
 510              		.loc 1 188 0
 511 03a8 4FF48043 		mov	r3, #16384
 512 03ac BB60     		str	r3, [r7, #8]
 189:../src/pwm.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 513              		.loc 1 189 0
 514 03ae 4FF00003 		mov	r3, #0
 515 03b2 FB73     		strb	r3, [r7, #15]
 190:../src/pwm.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;//GPIO_Speed_50MHz;
 516              		.loc 1 190 0
 517 03b4 4FF00103 		mov	r3, #1
 518 03b8 7B73     		strb	r3, [r7, #13]
 191:../src/pwm.cpp **** 
 192:../src/pwm.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 519              		.loc 1 192 0
 520 03ba 4FF40010 		mov	r0, #2097152
 521 03be 4FF00101 		mov	r1, #1
 522 03c2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 193:../src/pwm.cpp **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_2); // AF 1, 2, 3, or 9 (TIM15); 1, 4 (TIM16); 1
 523              		.loc 1 193 0
 524 03c6 4FF48050 		mov	r0, #4096
 525 03ca C4F60000 		movt	r0, 18432
 526 03ce 4FF00E01 		mov	r1, #14
 527 03d2 4FF00202 		mov	r2, #2
 528 03d6 FFF7FEFF 		bl	GPIO_PinAFConfig
 194:../src/pwm.cpp **** 	GPIO_Init(GPIOE, &g);
 529              		.loc 1 194 0
 530 03da 07F10803 		add	r3, r7, #8
 531 03de 4FF48050 		mov	r0, #4096
 532 03e2 C4F60000 		movt	r0, 18432
 533 03e6 1946     		mov	r1, r3
 534 03e8 FFF7FEFF 		bl	GPIO_Init
 195:../src/pwm.cpp **** 
 196:../src/pwm.cpp **** 
 197:../src/pwm.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 535              		.loc 1 197 0
 536 03ec 4FF40060 		mov	r0, #2048
 537 03f0 4FF00101 		mov	r1, #1
 538 03f4 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 198:../src/pwm.cpp **** 	TIM_InternalClockConfig(TIM1);
 539              		.loc 1 198 0
 540 03f8 4FF43050 		mov	r0, #11264
 541 03fc C4F20100 		movt	r0, 16385
 542 0400 FFF7FEFF 		bl	TIM_InternalClockConfig
 199:../src/pwm.cpp **** 	TIM_TimeBaseInit(TIM1, &i);
 543              		.loc 1 199 0
 544 0404 07F12403 		add	r3, r7, #36
 545 0408 4FF43050 		mov	r0, #11264
 546 040c C4F20100 		movt	r0, 16385
 547 0410 1946     		mov	r1, r3
 548 0412 FFF7FEFF 		bl	TIM_TimeBaseInit
 200:../src/pwm.cpp **** 	TIM_OC4Init(TIM1, &j);
 549              		.loc 1 200 0
 550 0416 07F11003 		add	r3, r7, #16
 551 041a 4FF43050 		mov	r0, #11264
 552 041e C4F20100 		movt	r0, 16385
 553 0422 1946     		mov	r1, r3
 554 0424 FFF7FEFF 		bl	TIM_OC4Init
 201:../src/pwm.cpp **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 555              		.loc 1 201 0
 556 0428 4FF43050 		mov	r0, #11264
 557 042c C4F20100 		movt	r0, 16385
 558 0430 4FF00801 		mov	r1, #8
 559 0434 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 202:../src/pwm.cpp **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 560              		.loc 1 202 0
 561 0438 4FF43050 		mov	r0, #11264
 562 043c C4F20100 		movt	r0, 16385
 563 0440 4FF00101 		mov	r1, #1
 564 0444 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 203:../src/pwm.cpp **** 
 204:../src/pwm.cpp **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 565              		.loc 1 204 0
 566 0448 4FF43050 		mov	r0, #11264
 567 044c C4F20100 		movt	r0, 16385
 568 0450 4FF00101 		mov	r1, #1
 569 0454 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 205:../src/pwm.cpp **** //	TIM_CCPreloadControl(TIM1, ENABLE);
 206:../src/pwm.cpp **** 
 207:../src/pwm.cpp **** 	TIM_CCxCmd(TIM1, TIM_Channel_4, TIM_CCx_Enable);
 570              		.loc 1 207 0
 571 0458 4FF43050 		mov	r0, #11264
 572 045c C4F20100 		movt	r0, 16385
 573 0460 4FF00C01 		mov	r1, #12
 574 0464 4FF00102 		mov	r2, #1
 575 0468 FFF7FEFF 		bl	TIM_CCxCmd
 208:../src/pwm.cpp **** 	TIM_Cmd(TIM1, ENABLE);
 576              		.loc 1 208 0
 577 046c 4FF43050 		mov	r0, #11264
 578 0470 C4F20100 		movt	r0, 16385
 579 0474 4FF00101 		mov	r1, #1
 580 0478 FFF7FEFF 		bl	TIM_Cmd
 209:../src/pwm.cpp **** 	TIM_GenerateEvent(TIM1, TIM_EventSource_Update);
 581              		.loc 1 209 0
 582 047c 4FF43050 		mov	r0, #11264
 583 0480 C4F20100 		movt	r0, 16385
 584 0484 4FF00101 		mov	r1, #1
 585 0488 FFF7FEFF 		bl	TIM_GenerateEvent
 586              	.LBE6:
 210:../src/pwm.cpp **** }
 587              		.loc 1 210 0
 588 048c 07F13807 		add	r7, r7, #56
 589 0490 BD46     		mov	sp, r7
 590 0492 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE115:
 594              		.align	2
 595              		.global	_Z11pwm3_outputf
 596              		.thumb
 597              		.thumb_func
 599              	_Z11pwm3_outputf:
 600              	.LFB116:
 211:../src/pwm.cpp **** void pwm3_output(float duty)
 212:../src/pwm.cpp **** {
 601              		.loc 1 212 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 16
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605 0494 80B5     		push	{r7, lr}
 606              	.LCFI15:
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0496 84B0     		sub	sp, sp, #16
 611              	.LCFI16:
 612              		.cfi_def_cfa_offset 24
 613 0498 00AF     		add	r7, sp, #0
 614              	.LCFI17:
 615              		.cfi_def_cfa_register 7
 616 049a 7860     		str	r0, [r7, #4]	@ float
 617              	.LBB7:
 213:../src/pwm.cpp **** 	uint16_t setval = (uint16_t)((float)TIM1->ARR * duty);
 618              		.loc 1 213 0
 619 049c 4FF43053 		mov	r3, #11264
 620 04a0 C4F20103 		movt	r3, 16385
 621 04a4 D3ED0B7A 		flds	s15, [r3, #44]	@ int
 622 04a8 B8EE677A 		fuitos	s14, s15
 623 04ac D7ED017A 		flds	s15, [r7, #4]
 624 04b0 67EE277A 		fmuls	s15, s14, s15
 625 04b4 FCEEE77A 		ftouizs	s15, s15
 626 04b8 17EE903A 		fmrs	r3, s15	@ int
 627 04bc FB81     		strh	r3, [r7, #14]	@ movhi
 214:../src/pwm.cpp **** 	TIM_SetCompare4(TIM1, setval);
 628              		.loc 1 214 0
 629 04be FB89     		ldrh	r3, [r7, #14]
 630 04c0 4FF43050 		mov	r0, #11264
 631 04c4 C4F20100 		movt	r0, 16385
 632 04c8 1946     		mov	r1, r3
 633 04ca FFF7FEFF 		bl	TIM_SetCompare4
 634              	.LBE7:
 215:../src/pwm.cpp **** }
 635              		.loc 1 215 0
 636 04ce 07F11007 		add	r7, r7, #16
 637 04d2 BD46     		mov	sp, r7
 638 04d4 80BD     		pop	{r7, pc}
 639              		.cfi_endproc
 640              	.LFE116:
 642              		.global	__aeabi_i2d
 643              		.global	__aeabi_d2iz
 644 04d6 00BF     		.align	2
 645              		.global	_Z15config_pwm_freqiPiS_
 646              		.thumb
 647              		.thumb_func
 649              	_Z15config_pwm_freqiPiS_:
 650              	.LFB117:
 216:../src/pwm.cpp **** 
 217:../src/pwm.cpp **** void config_pwm_freq(int frequency, int* period, int* prescaler)
 218:../src/pwm.cpp **** {
 651              		.loc 1 218 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 64
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655 04d8 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 656              	.LCFI18:
 657              		.cfi_def_cfa_offset 36
 658              		.cfi_offset 4, -36
 659              		.cfi_offset 5, -32
 660              		.cfi_offset 6, -28
 661              		.cfi_offset 7, -24
 662              		.cfi_offset 8, -20
 663              		.cfi_offset 9, -16
 664              		.cfi_offset 10, -12
 665              		.cfi_offset 11, -8
 666              		.cfi_offset 14, -4
 667 04dc 91B0     		sub	sp, sp, #68
 668              	.LCFI19:
 669              		.cfi_def_cfa_offset 104
 670 04de 00AF     		add	r7, sp, #0
 671              	.LCFI20:
 672              		.cfi_def_cfa_register 7
 673 04e0 F860     		str	r0, [r7, #12]
 674 04e2 B960     		str	r1, [r7, #8]
 675 04e4 7A60     		str	r2, [r7, #4]
 676 04e6 6B46     		mov	r3, sp
 677 04e8 1E46     		mov	r6, r3
 678              	.LBB8:
 219:../src/pwm.cpp **** 	int max = (int)((float)72000000/(float)frequency);
 679              		.loc 1 219 0
 680 04ea D7ED037A 		flds	s15, [r7, #12]	@ int
 681 04ee F8EEE77A 		fsitos	s15, s15
 682 04f2 9FEDA97A 		flds	s14, .L32
 683 04f6 C7EE277A 		fdivs	s15, s14, s15
 684 04fa FDEEE77A 		ftosizs	s15, s15
 685 04fe C7ED097A 		fsts	s15, [r7, #36]	@ int
 220:../src/pwm.cpp **** 
 221:../src/pwm.cpp **** 	int max_num = (int)sqrt(max);
 686              		.loc 1 221 0
 687 0502 786A     		ldr	r0, [r7, #36]
 688 0504 FFF7FEFF 		bl	__aeabi_i2d
 689 0508 0246     		mov	r2, r0
 690 050a 0B46     		mov	r3, r1
 691 050c 1046     		mov	r0, r2
 692 050e 1946     		mov	r1, r3
 693 0510 FFF7FEFF 		bl	sqrt
 694 0514 0246     		mov	r2, r0
 695 0516 0B46     		mov	r3, r1
 696 0518 1046     		mov	r0, r2
 697 051a 1946     		mov	r1, r3
 698 051c FFF7FEFF 		bl	__aeabi_d2iz
 699 0520 0346     		mov	r3, r0
 700 0522 3B62     		str	r3, [r7, #32]
 222:../src/pwm.cpp **** 
 223:../src/pwm.cpp **** 	int seive[max_num];
 701              		.loc 1 223 0
 702 0524 3B6A     		ldr	r3, [r7, #32]
 703 0526 03F1FF31 		add	r1, r3, #-1
 704 052a F961     		str	r1, [r7, #28]
 705 052c 0846     		mov	r0, r1
 706 052e 0246     		mov	r2, r0
 707 0530 4FF00003 		mov	r3, #0
 708 0534 4FF0010A 		mov	sl, #1
 709 0538 4FF0000B 		mov	fp, #0
 710 053c 12EB0A02 		adds	r2, r2, sl
 711 0540 43EB0B03 		adc	r3, r3, fp
 712 0544 4FEAD260 		lsr	r0, r2, #27
 713 0548 4FEA4319 		lsl	r9, r3, #5
 714 054c 40EA0909 		orr	r9, r0, r9
 715 0550 4FEA4218 		lsl	r8, r2, #5
 716 0554 0846     		mov	r0, r1
 717 0556 0246     		mov	r2, r0
 718 0558 4FF00003 		mov	r3, #0
 719 055c 4FF00108 		mov	r8, #1
 720 0560 4FF00009 		mov	r9, #0
 721 0564 12EB0802 		adds	r2, r2, r8
 722 0568 43EB0903 		adc	r3, r3, r9
 723 056c 4FEAD260 		lsr	r0, r2, #27
 724 0570 4FEA4315 		lsl	r5, r3, #5
 725 0574 0543     		orrs	r5, r5, r0
 726 0576 4FEA4214 		lsl	r4, r2, #5
 727 057a 0B46     		mov	r3, r1
 728 057c 03F10103 		add	r3, r3, #1
 729 0580 4FEA8303 		lsl	r3, r3, #2
 730 0584 03F10303 		add	r3, r3, #3
 731 0588 03F10703 		add	r3, r3, #7
 732 058c 4FEAD303 		lsr	r3, r3, #3
 733 0590 4FEAC303 		lsl	r3, r3, #3
 734 0594 ADEB030D 		sub	sp, sp, r3
 735 0598 6B46     		mov	r3, sp
 736 059a 03F10303 		add	r3, r3, #3
 737 059e 4FEA9303 		lsr	r3, r3, #2
 738 05a2 4FEA8303 		lsl	r3, r3, #2
 739 05a6 BB61     		str	r3, [r7, #24]
 224:../src/pwm.cpp **** 
 225:../src/pwm.cpp **** 	int startpos = 1;
 740              		.loc 1 225 0
 741 05a8 4FF00103 		mov	r3, #1
 742 05ac FB63     		str	r3, [r7, #60]
 226:../src/pwm.cpp **** 	int testval = 1;
 743              		.loc 1 226 0
 744 05ae 4FF00103 		mov	r3, #1
 745 05b2 7B61     		str	r3, [r7, #20]
 227:../src/pwm.cpp **** 
 228:../src/pwm.cpp **** 	int iter = 0;
 746              		.loc 1 228 0
 747 05b4 4FF00003 		mov	r3, #0
 748 05b8 BB63     		str	r3, [r7, #56]
 229:../src/pwm.cpp **** 	int iter2;
 230:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 749              		.loc 1 230 0
 750 05ba 4FF00003 		mov	r3, #0
 751 05be BB63     		str	r3, [r7, #56]
 752 05c0 0AE0     		b	.L8
 753              	.L9:
 231:../src/pwm.cpp **** 	{
 232:../src/pwm.cpp **** 		seive[iter] = iter+1;
 754              		.loc 1 232 0 discriminator 2
 755 05c2 BB6B     		ldr	r3, [r7, #56]
 756 05c4 03F10101 		add	r1, r3, #1
 757 05c8 BB69     		ldr	r3, [r7, #24]
 758 05ca BA6B     		ldr	r2, [r7, #56]
 759 05cc 43F82210 		str	r1, [r3, r2, lsl #2]
 230:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 760              		.loc 1 230 0 discriminator 2
 761 05d0 BB6B     		ldr	r3, [r7, #56]
 762 05d2 03F10103 		add	r3, r3, #1
 763 05d6 BB63     		str	r3, [r7, #56]
 764              	.L8:
 230:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 765              		.loc 1 230 0 is_stmt 0 discriminator 1
 766 05d8 BA6B     		ldr	r2, [r7, #56]
 767 05da 3B6A     		ldr	r3, [r7, #32]
 768 05dc 9A42     		cmp	r2, r3
 769 05de ACBF     		ite	ge
 770 05e0 0023     		movge	r3, #0
 771 05e2 0123     		movlt	r3, #1
 772 05e4 DBB2     		uxtb	r3, r3
 773 05e6 002B     		cmp	r3, #0
 774 05e8 EBD1     		bne	.L9
 233:../src/pwm.cpp **** 	}
 234:../src/pwm.cpp **** 
 235:../src/pwm.cpp **** 	while(startpos < max_num)
 775              		.loc 1 235 0 is_stmt 1
 776 05ea 38E0     		b	.L10
 777              	.L15:
 236:../src/pwm.cpp **** 	{
 237:../src/pwm.cpp **** 		testval = seive[startpos];
 778              		.loc 1 237 0
 779 05ec BB69     		ldr	r3, [r7, #24]
 780 05ee FA6B     		ldr	r2, [r7, #60]
 781 05f0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 782 05f4 7B61     		str	r3, [r7, #20]
 238:../src/pwm.cpp **** 		if(testval != -1)
 783              		.loc 1 238 0
 784 05f6 7B69     		ldr	r3, [r7, #20]
 785 05f8 B3F1FF3F 		cmp	r3, #-1
 786 05fc 2BD0     		beq	.L11
 239:../src/pwm.cpp **** 		{
 240:../src/pwm.cpp **** 		for(iter = startpos+1; iter < max_num; ++iter)
 787              		.loc 1 240 0
 788 05fe FB6B     		ldr	r3, [r7, #60]
 789 0600 03F10103 		add	r3, r3, #1
 790 0604 BB63     		str	r3, [r7, #56]
 791 0606 1DE0     		b	.L12
 792              	.L14:
 241:../src/pwm.cpp **** 		{
 242:../src/pwm.cpp **** 			if((seive[iter] != -1) && ((seive[iter])%testval == 0))
 793              		.loc 1 242 0
 794 0608 BB69     		ldr	r3, [r7, #24]
 795 060a BA6B     		ldr	r2, [r7, #56]
 796 060c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 797 0610 B3F1FF3F 		cmp	r3, #-1
 798 0614 12D0     		beq	.L13
 799              		.loc 1 242 0 is_stmt 0 discriminator 1
 800 0616 BB69     		ldr	r3, [r7, #24]
 801 0618 BA6B     		ldr	r2, [r7, #56]
 802 061a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 803 061e 7A69     		ldr	r2, [r7, #20]
 804 0620 93FBF2F2 		sdiv	r2, r3, r2
 805 0624 7969     		ldr	r1, [r7, #20]
 806 0626 01FB02F2 		mul	r2, r1, r2
 807 062a 9B1A     		subs	r3, r3, r2
 808 062c 002B     		cmp	r3, #0
 809 062e 05D1     		bne	.L13
 243:../src/pwm.cpp **** 			{
 244:../src/pwm.cpp **** 				seive[iter] = -1;
 810              		.loc 1 244 0 is_stmt 1
 811 0630 BB69     		ldr	r3, [r7, #24]
 812 0632 BA6B     		ldr	r2, [r7, #56]
 813 0634 4FF0FF31 		mov	r1, #-1
 814 0638 43F82210 		str	r1, [r3, r2, lsl #2]
 815              	.L13:
 240:../src/pwm.cpp **** 		for(iter = startpos+1; iter < max_num; ++iter)
 816              		.loc 1 240 0
 817 063c BB6B     		ldr	r3, [r7, #56]
 818 063e 03F10103 		add	r3, r3, #1
 819 0642 BB63     		str	r3, [r7, #56]
 820              	.L12:
 240:../src/pwm.cpp **** 		for(iter = startpos+1; iter < max_num; ++iter)
 821              		.loc 1 240 0 is_stmt 0 discriminator 1
 822 0644 BA6B     		ldr	r2, [r7, #56]
 823 0646 3B6A     		ldr	r3, [r7, #32]
 824 0648 9A42     		cmp	r2, r3
 825 064a ACBF     		ite	ge
 826 064c 0023     		movge	r3, #0
 827 064e 0123     		movlt	r3, #1
 828 0650 DBB2     		uxtb	r3, r3
 829 0652 002B     		cmp	r3, #0
 830 0654 D8D1     		bne	.L14
 831              	.L11:
 245:../src/pwm.cpp **** 			}
 246:../src/pwm.cpp **** 		}
 247:../src/pwm.cpp **** 		}
 248:../src/pwm.cpp **** 		++startpos;
 832              		.loc 1 248 0 is_stmt 1
 833 0656 FB6B     		ldr	r3, [r7, #60]
 834 0658 03F10103 		add	r3, r3, #1
 835 065c FB63     		str	r3, [r7, #60]
 836              	.L10:
 235:../src/pwm.cpp **** 	while(startpos < max_num)
 837              		.loc 1 235 0 discriminator 1
 838 065e FA6B     		ldr	r2, [r7, #60]
 839 0660 3B6A     		ldr	r3, [r7, #32]
 840 0662 9A42     		cmp	r2, r3
 841 0664 ACBF     		ite	ge
 842 0666 0023     		movge	r3, #0
 843 0668 0123     		movlt	r3, #1
 844 066a DBB2     		uxtb	r3, r3
 845 066c 002B     		cmp	r3, #0
 846 066e BDD1     		bne	.L15
 249:../src/pwm.cpp **** 	}
 250:../src/pwm.cpp **** 
 251:../src/pwm.cpp **** 	int last_valid_iter;
 252:../src/pwm.cpp **** 
 253:../src/pwm.cpp **** 	iter = 0;
 847              		.loc 1 253 0
 848 0670 4FF00003 		mov	r3, #0
 849 0674 BB63     		str	r3, [r7, #56]
 254:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 850              		.loc 1 254 0
 851 0676 4FF00003 		mov	r3, #0
 852 067a BB63     		str	r3, [r7, #56]
 853 067c 3EE0     		b	.L16
 854              	.L22:
 255:../src/pwm.cpp **** 	{
 256:../src/pwm.cpp **** 		if(seive[iter] != -1)
 855              		.loc 1 256 0
 856 067e BB69     		ldr	r3, [r7, #24]
 857 0680 BA6B     		ldr	r2, [r7, #56]
 858 0682 53F82230 		ldr	r3, [r3, r2, lsl #2]
 859 0686 B3F1FF3F 		cmp	r3, #-1
 860 068a 02D0     		beq	.L17
 257:../src/pwm.cpp **** 		{
 258:../src/pwm.cpp **** 		last_valid_iter = iter;
 861              		.loc 1 258 0
 862 068c BB6B     		ldr	r3, [r7, #56]
 863 068e 3B63     		str	r3, [r7, #48]
 864 0690 30E0     		b	.L18
 865              	.L17:
 259:../src/pwm.cpp **** 		}
 260:../src/pwm.cpp **** 		else
 261:../src/pwm.cpp **** 		{
 262:../src/pwm.cpp **** 			for(iter2 = iter; iter2<max_num; ++iter2)
 866              		.loc 1 262 0
 867 0692 BB6B     		ldr	r3, [r7, #56]
 868 0694 7B63     		str	r3, [r7, #52]
 869 0696 24E0     		b	.L19
 870              	.L21:
 263:../src/pwm.cpp **** 			{
 264:../src/pwm.cpp **** 				if(seive[iter2] != -1)
 871              		.loc 1 264 0
 872 0698 BB69     		ldr	r3, [r7, #24]
 873 069a 7A6B     		ldr	r2, [r7, #52]
 874 069c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 875 06a0 B3F1FF3F 		cmp	r3, #-1
 876 06a4 19D0     		beq	.L20
 265:../src/pwm.cpp **** 				{
 266:../src/pwm.cpp **** 				seive[last_valid_iter+1] = seive[iter2];
 877              		.loc 1 266 0
 878 06a6 3B6B     		ldr	r3, [r7, #48]
 879 06a8 03F10102 		add	r2, r3, #1
 880 06ac BB69     		ldr	r3, [r7, #24]
 881 06ae 796B     		ldr	r1, [r7, #52]
 882 06b0 53F82110 		ldr	r1, [r3, r1, lsl #2]
 883 06b4 BB69     		ldr	r3, [r7, #24]
 884 06b6 43F82210 		str	r1, [r3, r2, lsl #2]
 267:../src/pwm.cpp **** 				seive[iter2] = -1;
 885              		.loc 1 267 0
 886 06ba BB69     		ldr	r3, [r7, #24]
 887 06bc 7A6B     		ldr	r2, [r7, #52]
 888 06be 4FF0FF31 		mov	r1, #-1
 889 06c2 43F82210 		str	r1, [r3, r2, lsl #2]
 268:../src/pwm.cpp **** 				iter = iter2;
 890              		.loc 1 268 0
 891 06c6 7B6B     		ldr	r3, [r7, #52]
 892 06c8 BB63     		str	r3, [r7, #56]
 269:../src/pwm.cpp **** 				last_valid_iter += 1;
 893              		.loc 1 269 0
 894 06ca 3B6B     		ldr	r3, [r7, #48]
 895 06cc 03F10103 		add	r3, r3, #1
 896 06d0 3B63     		str	r3, [r7, #48]
 270:../src/pwm.cpp **** 				iter2 = max_num+1;
 897              		.loc 1 270 0
 898 06d2 3B6A     		ldr	r3, [r7, #32]
 899 06d4 03F10103 		add	r3, r3, #1
 900 06d8 7B63     		str	r3, [r7, #52]
 901              	.L20:
 262:../src/pwm.cpp **** 			for(iter2 = iter; iter2<max_num; ++iter2)
 902              		.loc 1 262 0
 903 06da 7B6B     		ldr	r3, [r7, #52]
 904 06dc 03F10103 		add	r3, r3, #1
 905 06e0 7B63     		str	r3, [r7, #52]
 906              	.L19:
 262:../src/pwm.cpp **** 			for(iter2 = iter; iter2<max_num; ++iter2)
 907              		.loc 1 262 0 is_stmt 0 discriminator 1
 908 06e2 7A6B     		ldr	r2, [r7, #52]
 909 06e4 3B6A     		ldr	r3, [r7, #32]
 910 06e6 9A42     		cmp	r2, r3
 911 06e8 ACBF     		ite	ge
 912 06ea 0023     		movge	r3, #0
 913 06ec 0123     		movlt	r3, #1
 914 06ee DBB2     		uxtb	r3, r3
 915 06f0 002B     		cmp	r3, #0
 916 06f2 D1D1     		bne	.L21
 917              	.L18:
 254:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 918              		.loc 1 254 0 is_stmt 1
 919 06f4 BB6B     		ldr	r3, [r7, #56]
 920 06f6 03F10103 		add	r3, r3, #1
 921 06fa BB63     		str	r3, [r7, #56]
 922              	.L16:
 254:../src/pwm.cpp **** 	for(iter = 0; iter < max_num; ++iter)
 923              		.loc 1 254 0 is_stmt 0 discriminator 1
 924 06fc BA6B     		ldr	r2, [r7, #56]
 925 06fe 3B6A     		ldr	r3, [r7, #32]
 926 0700 9A42     		cmp	r2, r3
 927 0702 ACBF     		ite	ge
 928 0704 0023     		movge	r3, #0
 929 0706 0123     		movlt	r3, #1
 930 0708 DBB2     		uxtb	r3, r3
 931 070a 002B     		cmp	r3, #0
 932 070c B7D1     		bne	.L22
 271:../src/pwm.cpp **** 				}
 272:../src/pwm.cpp **** 			}
 273:../src/pwm.cpp **** 		}
 274:../src/pwm.cpp **** 	}
 275:../src/pwm.cpp **** 
 276:../src/pwm.cpp **** 	int i = max;
 933              		.loc 1 276 0 is_stmt 1
 934 070e 7B6A     		ldr	r3, [r7, #36]
 935 0710 FB62     		str	r3, [r7, #44]
 277:../src/pwm.cpp **** 	int clkdiv = 1;
 936              		.loc 1 277 0
 937 0712 4FF00103 		mov	r3, #1
 938 0716 BB62     		str	r3, [r7, #40]
 278:../src/pwm.cpp **** 	int divisor = 1;
 939              		.loc 1 278 0
 940 0718 4FF00103 		mov	r3, #1
 941 071c 3B61     		str	r3, [r7, #16]
 279:../src/pwm.cpp **** 
 280:../src/pwm.cpp **** 	while(i > 1)
 942              		.loc 1 280 0
 943 071e 3EE0     		b	.L23
 944              	.L29:
 281:../src/pwm.cpp **** 	{
 282:../src/pwm.cpp **** 	for(iter = 1; iter < max_num; ++iter)
 945              		.loc 1 282 0
 946 0720 4FF00103 		mov	r3, #1
 947 0724 BB63     		str	r3, [r7, #56]
 948 0726 2CE0     		b	.L24
 949              	.L28:
 283:../src/pwm.cpp **** 	{
 284:../src/pwm.cpp **** 		divisor = seive[iter];
 950              		.loc 1 284 0
 951 0728 BB69     		ldr	r3, [r7, #24]
 952 072a BA6B     		ldr	r2, [r7, #56]
 953 072c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 954 0730 3B61     		str	r3, [r7, #16]
 285:../src/pwm.cpp **** 		if(divisor == -1){break;}
 955              		.loc 1 285 0
 956 0732 3B69     		ldr	r3, [r7, #16]
 957 0734 B3F1FF3F 		cmp	r3, #-1
 958 0738 30D0     		beq	.L31
 959              	.L25:
 286:../src/pwm.cpp **** 		else
 287:../src/pwm.cpp **** 		{
 288:../src/pwm.cpp **** 		if(i%divisor == 0)
 960              		.loc 1 288 0
 961 073a FB6A     		ldr	r3, [r7, #44]
 962 073c 3A69     		ldr	r2, [r7, #16]
 963 073e 93FBF2F2 		sdiv	r2, r3, r2
 964 0742 3969     		ldr	r1, [r7, #16]
 965 0744 01FB02F2 		mul	r2, r1, r2
 966 0748 9B1A     		subs	r3, r3, r2
 967 074a 002B     		cmp	r3, #0
 968 074c 15D1     		bne	.L26
 289:../src/pwm.cpp **** 			{
 290:../src/pwm.cpp **** 			i /= divisor;
 969              		.loc 1 290 0
 970 074e FA6A     		ldr	r2, [r7, #44]
 971 0750 3B69     		ldr	r3, [r7, #16]
 972 0752 92FBF3F3 		sdiv	r3, r2, r3
 973 0756 FB62     		str	r3, [r7, #44]
 291:../src/pwm.cpp **** 			clkdiv *= divisor;
 974              		.loc 1 291 0
 975 0758 BB6A     		ldr	r3, [r7, #40]
 976 075a 3A69     		ldr	r2, [r7, #16]
 977 075c 02FB03F3 		mul	r3, r2, r3
 978 0760 BB62     		str	r3, [r7, #40]
 292:../src/pwm.cpp **** 			if(i < 65536)
 979              		.loc 1 292 0
 980 0762 FA6A     		ldr	r2, [r7, #44]
 981 0764 4FF6FF73 		movw	r3, #65535
 982 0768 9A42     		cmp	r2, r3
 983 076a 06DC     		bgt	.L26
 293:../src/pwm.cpp **** 				{
 294:../src/pwm.cpp **** 				*period = i;
 984              		.loc 1 294 0
 985 076c BB68     		ldr	r3, [r7, #8]
 986 076e FA6A     		ldr	r2, [r7, #44]
 987 0770 1A60     		str	r2, [r3, #0]
 295:../src/pwm.cpp **** 				*prescaler = clkdiv;
 988              		.loc 1 295 0
 989 0772 7B68     		ldr	r3, [r7, #4]
 990 0774 BA6A     		ldr	r2, [r7, #40]
 991 0776 1A60     		str	r2, [r3, #0]
 992 0778 19E0     		b	.L27
 993              	.L26:
 282:../src/pwm.cpp **** 	for(iter = 1; iter < max_num; ++iter)
 994              		.loc 1 282 0
 995 077a BB6B     		ldr	r3, [r7, #56]
 996 077c 03F10103 		add	r3, r3, #1
 997 0780 BB63     		str	r3, [r7, #56]
 998              	.L24:
 282:../src/pwm.cpp **** 	for(iter = 1; iter < max_num; ++iter)
 999              		.loc 1 282 0 is_stmt 0 discriminator 1
 1000 0782 BA6B     		ldr	r2, [r7, #56]
 1001 0784 3B6A     		ldr	r3, [r7, #32]
 1002 0786 9A42     		cmp	r2, r3
 1003 0788 ACBF     		ite	ge
 1004 078a 0023     		movge	r3, #0
 1005 078c 0123     		movlt	r3, #1
 1006 078e DBB2     		uxtb	r3, r3
 1007 0790 002B     		cmp	r3, #0
 1008 0792 C9D1     		bne	.L28
 1009 0794 03E0     		b	.L23
 1010              	.L33:
 1011 0796 00BF     		.align	2
 1012              	.L32:
 1013 0798 4054894C 		.word	1284068416
 1014              	.L31:
 285:../src/pwm.cpp **** 		if(divisor == -1){break;}
 1015              		.loc 1 285 0 is_stmt 1
 1016 079c 00BF     		nop
 1017              	.L23:
 280:../src/pwm.cpp **** 	while(i > 1)
 1018              		.loc 1 280 0 discriminator 1
 1019 079e FB6A     		ldr	r3, [r7, #44]
 1020 07a0 012B     		cmp	r3, #1
 1021 07a2 D4BF     		ite	le
 1022 07a4 0023     		movle	r3, #0
 1023 07a6 0123     		movgt	r3, #1
 1024 07a8 DBB2     		uxtb	r3, r3
 1025 07aa 002B     		cmp	r3, #0
 1026 07ac B8D1     		bne	.L29
 1027              	.L27:
 1028 07ae B546     		mov	sp, r6
 1029              	.LBE8:
 296:../src/pwm.cpp **** 				return;
 297:../src/pwm.cpp **** 				}
 298:../src/pwm.cpp **** 			}
 299:../src/pwm.cpp **** 		}
 300:../src/pwm.cpp **** 	}
 301:../src/pwm.cpp **** 	}
 302:../src/pwm.cpp **** }
 1030              		.loc 1 302 0
 1031 07b0 07F14407 		add	r7, r7, #68
 1032 07b4 BD46     		mov	sp, r7
 1033 07b6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1034              		.cfi_endproc
 1035              	.LFE117:
 1037              	.Letext0:
 1038              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 1039              		.file 3 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x.h"
 1040              		.file 4 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_gpio.h"
 1041              		.file 5 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_tim.h"
 1042              		.file 6 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/os.h"
 1043              		.file 7 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pwm.cpp
     /tmp/ccT32AAg.s:20     .bss:00000000 $d
     /tmp/ccT32AAg.s:21     .bss:00000000 _ZL5stack
     /tmp/ccT32AAg.s:24     .text:00000000 $t
     /tmp/ccT32AAg.s:29     .text:00000000 _Z13pwm_out1_initt
     /tmp/ccT32AAg.s:649    .text:000004d8 _Z15config_pwm_freqiPiS_
     /tmp/ccT32AAg.s:186    .text:00000154 _Z11pwm1_outputf
     /tmp/ccT32AAg.s:234    .text:00000198 _Z13pwm_out2_initt
     /tmp/ccT32AAg.s:390    .text:000002ec _Z11pwm2_outputf
     /tmp/ccT32AAg.s:438    .text:00000330 _Z13pwm_out3_initt
     /tmp/ccT32AAg.s:599    .text:00000494 _Z11pwm3_outputf
     /tmp/ccT32AAg.s:1013   .text:00000798 $d
     /tmp/ccT32AAg.s:1016   .text:0000079c $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.common_headers.h.9.a77b7af68303fe0609f9dd844a078e2a
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a

UNDEFINED SYMBOLS
RCC_AHBPeriphClockCmd
GPIO_PinAFConfig
GPIO_Init
RCC_APB1PeriphClockCmd
TIM_InternalClockConfig
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_ARRPreloadConfig
TIM_CCxCmd
TIM_Cmd
TIM_GenerateEvent
TIM_SetCompare1
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_SetCompare2
RCC_APB2PeriphClockCmd
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_CtrlPWMOutputs
TIM_SetCompare4
__aeabi_i2d
__aeabi_d2iz
sqrt
