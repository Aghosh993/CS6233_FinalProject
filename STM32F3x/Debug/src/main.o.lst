   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	led_iter
  20              		.bss
  21              		.align	2
  24              	led_iter:
  25 0000 00000000 		.space	4
  26              		.global	led_matrix
  27              		.data
  28              		.align	2
  31              	led_matrix:
  32 0000 00020000 		.word	512
  33 0004 00010000 		.word	256
  34 0008 00800000 		.word	32768
  35 000c 00200000 		.word	8192
  36 0010 00100000 		.word	4096
  37 0014 00080000 		.word	2048
  38 0018 00040000 		.word	1024
  39              		.global	left_enc
  40              		.bss
  41              		.align	2
  44              	left_enc:
  45 0004 00000000 		.space	40
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	right_enc
  47              		.align	2
  50              	right_enc:
  51 002c 00000000 		.space	40
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	gyro_angle_x
  53              		.align	2
  56              	gyro_angle_x:
  57 0054 00000000 		.space	4
  58              		.global	gyro_bias_x
  59              		.align	2
  62              	gyro_bias_x:
  63 0058 00000000 		.space	4
  64              		.global	adcval
  65              		.align	2
  68              	adcval:
  69 005c 00000000 		.space	4
  70              		.global	adcData
  71              		.align	2
  74              	adcData:
  75 0060 00000000 		.space	8
  75      00000000 
  76              		.global	new_data
  77              		.align	2
  80              	new_data:
  81 0068 00000000 		.space	4
  82              		.global	adc2_data
  83              		.align	2
  86              	adc2_data:
  87 006c 00000000 		.space	16
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	adc2_new_data
  91              	adc2_new_data:
  92 007c 00       		.space	1
  93              		.global	adc3_awd1
  96              	adc3_awd1:
  97 007d 00       		.space	1
  98              		.global	adc3_awd2
 101              	adc3_awd2:
 102 007e 00       		.space	1
 103              		.global	count
 104 007f 00       		.align	2
 107              	count:
 108 0080 00000000 		.space	4
 109              		.global	stage
 110              		.align	2
 113              	stage:
 114 0084 00000000 		.space	4
 115              		.global	drive_cmd
 116              		.align	2
 119              	drive_cmd:
 120 0088 00000000 		.space	4
 121              		.global	err
 122              		.align	2
 125              	err:
 126 008c 00000000 		.space	4
 127              		.global	last_err
 128              		.align	2
 131              	last_err:
 132 0090 00000000 		.space	4
 133              		.global	diff_err
 134              		.align	2
 137              	diff_err:
 138 0094 00000000 		.space	4
 139              		.global	rt
 140              		.align	2
 143              	rt:
 144 0098 00000000 		.space	4
 145              		.global	d_front
 146              		.align	2
 149              	d_front:
 150 009c 00000000 		.space	4
 151              		.global	integral
 152              		.align	2
 155              	integral:
 156 00a0 00000000 		.space	4
 157              		.global	left
 158              		.align	2
 161              	left:
 162 00a4 00000000 		.space	4
 163              		.global	right
 164              		.align	2
 167              	right:
 168 00a8 00000000 		.space	4
 169              		.global	state
 170              		.align	2
 173              	state:
 174 00ac 00000000 		.space	4
 175              		.global	match_time_counter
 176              		.align	2
 179              	match_time_counter:
 180 00b0 00000000 		.space	4
 181              		.global	t_firefight_start
 182              		.align	2
 185              	t_firefight_start:
 186 00b4 00000000 		.space	4
 187              		.global	leds_on
 188              		.align	2
 191              	leds_on:
 192 00b8 00000000 		.space	4
 193              		.text
 194              		.align	2
 195              		.global	main
 196              		.thumb
 197              		.thumb_func
 199              	main:
 200              	.LFB111:
 201              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****     This program (program referring to all source and header files in this repository (repository
  17:../src/main.cpp ****     referring to https://github.com/Aghosh993/Trinity2013/tree) not containing code covered
  18:../src/main.cpp ****     under the terms of STMicroelectronic's Liberty v2 License) is free software: you can redistribu
  19:../src/main.cpp ****     it and/or modify it ("it" refers to all sections of this code as covered in the aforementioned 
  20:../src/main.cpp ****     under the terms of the GNU General Public License as published by the Free Software Foundation,
  21:../src/main.cpp ****     either version 3 of the License, or (at your option) any later version.
  22:../src/main.cpp **** 
  23:../src/main.cpp ****     This program is distributed in the hope that it will be useful,
  24:../src/main.cpp ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  25:../src/main.cpp ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26:../src/main.cpp ****     GNU General Public License for more details.
  27:../src/main.cpp **** 
  28:../src/main.cpp ****     You should have received a copy of the GNU General Public License
  29:../src/main.cpp ****     along with this program (please refer to the file COPYING in the root of
  30:../src/main.cpp ****     the repository).  If not, see <http://www.gnu.org/licenses/>.
  31:../src/main.cpp **** 
  32:../src/main.cpp ****     (c) Abhimanyu Ghosh, Polytechnic Institute of NYU (2013-2014)
  33:../src/main.cpp ****  */
  34:../src/main.cpp **** 
  35:../src/main.cpp **** /*
  36:../src/main.cpp ****  * All other code is covered by the following terms:
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  *   ******************************************************************************
  39:../src/main.cpp ****   * @attention
  40:../src/main.cpp ****   *
  41:../src/main.cpp ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  42:../src/main.cpp ****   *
  43:../src/main.cpp ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:../src/main.cpp ****   * You may not use this file except in compliance with the License.
  45:../src/main.cpp ****   * You may obtain a copy of the License at:
  46:../src/main.cpp ****   *
  47:../src/main.cpp ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:../src/main.cpp ****   *
  49:../src/main.cpp ****   * Unless required by applicable law or agreed to in writing, software
  50:../src/main.cpp ****   * distributed under the License is distributed on an "AS IS" BASIS,
  51:../src/main.cpp ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:../src/main.cpp ****   * See the License for the specific language governing permissions and
  53:../src/main.cpp ****   * limitations under the License.
  54:../src/main.cpp ****   *
  55:../src/main.cpp ****   ******************************************************************************
  56:../src/main.cpp ****  */
  57:../src/main.cpp **** 
  58:../src/main.cpp **** /*
  59:../src/main.cpp ****  * Timer usage manifest:
  60:../src/main.cpp ****  *
  61:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  62:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  63:../src/main.cpp ****  *
  64:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  65:../src/main.cpp ****  *
  66:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  67:../src/main.cpp ****  *
  68:../src/main.cpp ****  * TIM6: LED matrix ISR
  69:../src/main.cpp ****  * TIM7: Encoder update ISR
  70:../src/main.cpp ****  *
  71:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  72:../src/main.cpp ****  *
  73:../src/main.cpp ****  *
  74:../src/main.cpp ****  * TIM17: IMU update ISR
  75:../src/main.cpp ****  *
  76:../src/main.cpp ****  * Other pins/resources used:
  77:../src/main.cpp ****  *
  78:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  79:../src/main.cpp ****  * 			PA3: adcData[1]
  80:../src/main.cpp ****  *
  81:../src/main.cpp ****  * 			PA4: adc2_data[0]
  82:../src/main.cpp ****  * 			PC4: adc2_data[1]
  83:../src/main.cpp ****  * 			PC5: adc2_data[2]
  84:../src/main.cpp ****  * 			PB2: adc2_data[3]
  85:../src/main.cpp ****  *
  86:../src/main.cpp ****  * Digital:
  87:../src/main.cpp ****  *
  88:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  89:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  90:../src/main.cpp ****  *
  91:../src/main.cpp ****  * Purpose: CS6233 Final Project (Implementation of a simple round-robin scheduler and task switche
  92:../src/main.cpp ****  * 			using the STM32 SysTick interrupt)
  93:../src/main.cpp ****  *
  94:../src/main.cpp ****  */
  95:../src/main.cpp **** 
  96:../src/main.cpp **** /*
  97:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  98:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  99:../src/main.cpp ****  */
 100:../src/main.cpp **** 
 101:../src/main.cpp **** volatile int led_iter;
 102:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
 103:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
 104:../src/main.cpp **** 
 105:../src/main.cpp **** void imu_update_ISR_init(void);
 106:../src/main.cpp **** int16_t calc_gyro_bias(void);
 107:../src/main.cpp **** 
 108:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
 109:../src/main.cpp **** 
 110:../src/main.cpp **** void adc1_init_DMA(void);
 111:../src/main.cpp **** void adc2_init_DMA(void);
 112:../src/main.cpp **** void battery_watchdog_init(void);
 113:../src/main.cpp **** void adc1_init(void);
 114:../src/main.cpp **** 
 115:../src/main.cpp **** void brake_pins_init(void);
 116:../src/main.cpp **** 
 117:../src/main.cpp **** void ping_pin_init(void);
 118:../src/main.cpp **** void timer2_timebase_init(void);
 119:../src/main.cpp **** 
 120:../src/main.cpp **** void comp_init(void);
 121:../src/main.cpp **** 
 122:../src/main.cpp **** void trinity2013_waitForStart(void);
 123:../src/main.cpp **** 
 124:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
 125:../src/main.cpp **** 
 126:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
 127:../src/main.cpp **** 
 128:../src/main.cpp **** encoderState left_enc, right_enc;
 129:../src/main.cpp **** 
 130:../src/main.cpp **** volatile float gyro_angle_x;
 131:../src/main.cpp **** int gyro_bias_x, adcval;
 132:../src/main.cpp **** 
 133:../src/main.cpp **** __IO uint32_t adcData[2];
 134:../src/main.cpp **** int new_data;
 135:../src/main.cpp **** 
 136:../src/main.cpp **** __IO uint32_t adc2_data[4];
 137:../src/main.cpp **** uint8_t adc2_new_data;
 138:../src/main.cpp **** 
 139:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
 140:../src/main.cpp **** 
 141:../src/main.cpp **** int count, stage;
 142:../src/main.cpp **** 
 143:../src/main.cpp **** float drive_cmd;// = 0.0f;
 144:../src/main.cpp **** float err;// = 0.0f;
 145:../src/main.cpp **** float last_err;// = 0.0f;
 146:../src/main.cpp **** float diff_err;
 147:../src/main.cpp **** float rt;// = 0.0f;
 148:../src/main.cpp **** float d_front;// = 1.0f;
 149:../src/main.cpp **** float integral;
 150:../src/main.cpp **** 
 151:../src/main.cpp **** float left, right;
 152:../src/main.cpp **** 
 153:../src/main.cpp **** int state;
 154:../src/main.cpp **** 
 155:../src/main.cpp **** float match_time_counter;
 156:../src/main.cpp **** float t_firefight_start;
 157:../src/main.cpp **** int leds_on;
 158:../src/main.cpp **** 
 159:../src/main.cpp **** // Initialize all encoder data structures to zero:
 160:../src/main.cpp **** 
 161:../src/main.cpp **** int main(void)
 162:../src/main.cpp **** {
 202              		.loc 1 162 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI0:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 00AF     		add	r7, sp, #0
 212              	.LCFI1:
 213              		.cfi_def_cfa_register 7
 163:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 214              		.loc 1 163 0
 215 0004 FFF7FEFF 		bl	SystemInit
 164:../src/main.cpp **** 
 165:../src/main.cpp **** 	UART1_init(); // Debug bridge
 216              		.loc 1 165 0
 217 0008 FFF7FEFF 		bl	_Z10UART1_initv
 218              	.L2:
 166:../src/main.cpp **** 
 167:../src/main.cpp **** 	while(true);
 219              		.loc 1 167 0 discriminator 1
 220 000c FEE7     		b	.L2
 221              		.cfi_endproc
 222              	.LFE111:
 224 000e 00BF     		.align	2
 225              		.global	_Z24trinity2013_waitForStartv
 226              		.thumb
 227              		.thumb_func
 229              	_Z24trinity2013_waitForStartv:
 230              	.LFB112:
 168:../src/main.cpp **** 
 169:../src/main.cpp **** 	return 0; // We should never manage to get here...
 170:../src/main.cpp **** }
 171:../src/main.cpp **** 
 172:../src/main.cpp **** void trinity2013_waitForStart(void)
 173:../src/main.cpp **** {
 231              		.loc 1 173 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 8
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0010 80B5     		push	{r7, lr}
 236              	.LCFI2:
 237              		.cfi_def_cfa_offset 8
 238              		.cfi_offset 7, -8
 239              		.cfi_offset 14, -4
 240 0012 82B0     		sub	sp, sp, #8
 241              	.LCFI3:
 242              		.cfi_def_cfa_offset 16
 243 0014 00AF     		add	r7, sp, #0
 244              	.LCFI4:
 245              		.cfi_def_cfa_register 7
 246              	.LBB2:
 174:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 247              		.loc 1 174 0
 248 0016 4FF48010 		mov	r0, #1048576
 249 001a 4FF00101 		mov	r1, #1
 250 001e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 175:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 251              		.loc 1 175 0
 252 0022 4FF44060 		mov	r0, #3072
 253 0026 C4F60000 		movt	r0, 18432
 254 002a FFF7FEFF 		bl	GPIO_DeInit
 176:../src/main.cpp **** 	GPIO_InitTypeDef g;
 177:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 255              		.loc 1 177 0
 256 002e 4FF00003 		mov	r3, #0
 257 0032 3B71     		strb	r3, [r7, #4]
 178:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 258              		.loc 1 178 0
 259 0034 4FF00103 		mov	r3, #1
 260 0038 BB71     		strb	r3, [r7, #6]
 179:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 261              		.loc 1 179 0
 262 003a 4FF00803 		mov	r3, #8
 263 003e 3B60     		str	r3, [r7, #0]
 180:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 264              		.loc 1 180 0
 265 0040 4FF00203 		mov	r3, #2
 266 0044 FB71     		strb	r3, [r7, #7]
 181:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 267              		.loc 1 181 0
 268 0046 3B46     		mov	r3, r7
 269 0048 4FF44060 		mov	r0, #3072
 270 004c C4F60000 		movt	r0, 18432
 271 0050 1946     		mov	r1, r3
 272 0052 FFF7FEFF 		bl	GPIO_Init
 182:../src/main.cpp **** 
 183:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 273              		.loc 1 183 0
 274 0056 00BF     		nop
 275              	.L4:
 276              		.loc 1 183 0 is_stmt 0 discriminator 1
 277 0058 4FF44060 		mov	r0, #3072
 278 005c C4F60000 		movt	r0, 18432
 279 0060 4FF00801 		mov	r1, #8
 280 0064 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 281 0068 0346     		mov	r3, r0
 282 006a 002B     		cmp	r3, #0
 283 006c 14BF     		ite	ne
 284 006e 0023     		movne	r3, #0
 285 0070 0123     		moveq	r3, #1
 286 0072 DBB2     		uxtb	r3, r3
 287 0074 002B     		cmp	r3, #0
 288 0076 EFD1     		bne	.L4
 184:../src/main.cpp **** 	match_time_counter = 0.0f;
 289              		.loc 1 184 0 is_stmt 1
 290 0078 40F20003 		movw	r3, #:lower16:match_time_counter
 291 007c C0F20003 		movt	r3, #:upper16:match_time_counter
 292 0080 4FF00002 		mov	r2, #0
 293 0084 1A60     		str	r2, [r3, #0]	@ float
 185:../src/main.cpp **** 	state = ST_WANDER;
 294              		.loc 1 185 0
 295 0086 40F20003 		movw	r3, #:lower16:state
 296 008a C0F20003 		movt	r3, #:upper16:state
 297 008e 4FF00002 		mov	r2, #0
 298 0092 1A60     		str	r2, [r3, #0]
 299              	.LBE2:
 186:../src/main.cpp **** }
 300              		.loc 1 186 0
 301 0094 07F10807 		add	r7, r7, #8
 302 0098 BD46     		mov	sp, r7
 303 009a 80BD     		pop	{r7, pc}
 304              		.cfi_endproc
 305              	.LFE112:
 307              		.global	__aeabi_f2d
 308              		.global	__aeabi_d2f
 309              		.align	2
 310              		.global	_Z11IR_distancei
 311              		.thumb
 312              		.thumb_func
 314              	_Z11IR_distancei:
 315              	.LFB113:
 187:../src/main.cpp **** 
 188:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 189:../src/main.cpp **** {
 316              		.loc 1 189 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 16
 319              		@ frame_needed = 1, uses_anonymous_args = 0
 320 009c 80B5     		push	{r7, lr}
 321              	.LCFI5:
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 7, -8
 324              		.cfi_offset 14, -4
 325 009e 2DED028B 		fstmfdd	sp!, {d8}
 326              	.LCFI6:
 327              		.cfi_def_cfa_offset 16
 328              		.cfi_offset 80, -16
 329 00a2 84B0     		sub	sp, sp, #16
 330              	.LCFI7:
 331              		.cfi_def_cfa_offset 32
 332 00a4 00AF     		add	r7, sp, #0
 333              	.LCFI8:
 334              		.cfi_def_cfa_register 7
 335 00a6 7860     		str	r0, [r7, #4]
 336              	.LBB3:
 190:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 337              		.loc 1 190 0
 338 00a8 D7ED017A 		flds	s15, [r7, #4]	@ int
 339 00ac B8EEE77A 		fsitos	s14, s15
 340 00b0 DFED537A 		flds	s15, .L7
 341 00b4 67EE277A 		fmuls	s15, s14, s15
 342 00b8 C7ED037A 		fsts	s15, [r7, #12]
 191:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 343              		.loc 1 191 0
 344 00bc F868     		ldr	r0, [r7, #12]	@ float
 345 00be FFF7FEFF 		bl	__aeabi_f2d
 346 00c2 0246     		mov	r2, r0
 347 00c4 0B46     		mov	r3, r1
 348 00c6 1046     		mov	r0, r2
 349 00c8 1946     		mov	r1, r3
 350 00ca 4FF00002 		mov	r2, #0
 351 00ce 4FF00003 		mov	r3, #0
 352 00d2 C4F21803 		movt	r3, 16408
 353 00d6 FFF7FEFF 		bl	pow
 354 00da 0246     		mov	r2, r0
 355 00dc 0B46     		mov	r3, r1
 192:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 193:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 194:../src/main.cpp **** 			+ (float)60.24);
 356              		.loc 1 194 0
 357 00de 1046     		mov	r0, r2
 358 00e0 1946     		mov	r1, r3
 359 00e2 FFF7FEFF 		bl	__aeabi_d2f
 360 00e6 07EE100A 		fmsr	s14, r0
 361 00ea DFED467A 		flds	s15, .L7+4
 362 00ee 27EE278A 		fmuls	s16, s14, s15
 191:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 363              		.loc 1 191 0
 364 00f2 F868     		ldr	r0, [r7, #12]	@ float
 365 00f4 FFF7FEFF 		bl	__aeabi_f2d
 366 00f8 0246     		mov	r2, r0
 367 00fa 0B46     		mov	r3, r1
 368 00fc 1046     		mov	r0, r2
 369 00fe 1946     		mov	r1, r3
 370 0100 4FF00002 		mov	r2, #0
 371 0104 4FF00003 		mov	r3, #0
 372 0108 C4F21403 		movt	r3, 16404
 373 010c FFF7FEFF 		bl	pow
 374 0110 0246     		mov	r2, r0
 375 0112 0B46     		mov	r3, r1
 376              		.loc 1 194 0
 377 0114 1046     		mov	r0, r2
 378 0116 1946     		mov	r1, r3
 379 0118 FFF7FEFF 		bl	__aeabi_d2f
 380 011c 07EE100A 		fmsr	s14, r0
 381 0120 DFED397A 		flds	s15, .L7+8
 382 0124 67EE277A 		fmuls	s15, s14, s15
 383 0128 38EE678A 		fsubs	s16, s16, s15
 192:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 384              		.loc 1 192 0
 385 012c F868     		ldr	r0, [r7, #12]	@ float
 386 012e FFF7FEFF 		bl	__aeabi_f2d
 387 0132 0246     		mov	r2, r0
 388 0134 0B46     		mov	r3, r1
 389 0136 1046     		mov	r0, r2
 390 0138 1946     		mov	r1, r3
 391 013a 4FF00002 		mov	r2, #0
 392 013e 4FF00003 		mov	r3, #0
 393 0142 C4F21003 		movt	r3, 16400
 394 0146 FFF7FEFF 		bl	pow
 395 014a 0246     		mov	r2, r0
 396 014c 0B46     		mov	r3, r1
 397              		.loc 1 194 0
 398 014e 1046     		mov	r0, r2
 399 0150 1946     		mov	r1, r3
 400 0152 FFF7FEFF 		bl	__aeabi_d2f
 401 0156 07EE100A 		fmsr	s14, r0
 402 015a DFED2C7A 		flds	s15, .L7+12
 403 015e 67EE277A 		fmuls	s15, s14, s15
 404 0162 38EE278A 		fadds	s16, s16, s15
 192:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 405              		.loc 1 192 0
 406 0166 F868     		ldr	r0, [r7, #12]	@ float
 407 0168 FFF7FEFF 		bl	__aeabi_f2d
 408 016c 0246     		mov	r2, r0
 409 016e 0B46     		mov	r3, r1
 410 0170 1046     		mov	r0, r2
 411 0172 1946     		mov	r1, r3
 412 0174 4FF00002 		mov	r2, #0
 413 0178 4FF00003 		mov	r3, #0
 414 017c C4F20803 		movt	r3, 16392
 415 0180 FFF7FEFF 		bl	pow
 416 0184 0246     		mov	r2, r0
 417 0186 0B46     		mov	r3, r1
 418              		.loc 1 194 0
 419 0188 1046     		mov	r0, r2
 420 018a 1946     		mov	r1, r3
 421 018c FFF7FEFF 		bl	__aeabi_d2f
 422 0190 07EE100A 		fmsr	s14, r0
 423 0194 DFED1E7A 		flds	s15, .L7+16
 424 0198 67EE277A 		fmuls	s15, s14, s15
 425 019c 38EE678A 		fsubs	s16, s16, s15
 193:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 426              		.loc 1 193 0
 427 01a0 F868     		ldr	r0, [r7, #12]	@ float
 428 01a2 FFF7FEFF 		bl	__aeabi_f2d
 429 01a6 0246     		mov	r2, r0
 430 01a8 0B46     		mov	r3, r1
 431 01aa 1046     		mov	r0, r2
 432 01ac 1946     		mov	r1, r3
 433 01ae 4FF00002 		mov	r2, #0
 434 01b2 4FF08043 		mov	r3, #1073741824
 435 01b6 FFF7FEFF 		bl	pow
 436 01ba 0246     		mov	r2, r0
 437 01bc 0B46     		mov	r3, r1
 438              		.loc 1 194 0
 439 01be 1046     		mov	r0, r2
 440 01c0 1946     		mov	r1, r3
 441 01c2 FFF7FEFF 		bl	__aeabi_d2f
 442 01c6 07EE100A 		fmsr	s14, r0
 443 01ca DFED127A 		flds	s15, .L7+20
 444 01ce 67EE277A 		fmuls	s15, s14, s15
 445 01d2 38EE277A 		fadds	s14, s16, s15
 446 01d6 D7ED036A 		flds	s13, [r7, #12]
 447 01da DFED0F7A 		flds	s15, .L7+24
 448 01de 66EEA77A 		fmuls	s15, s13, s15
 449 01e2 37EE677A 		fsubs	s14, s14, s15
 450 01e6 DFED0D7A 		flds	s15, .L7+28
 451 01ea 77EE277A 		fadds	s15, s14, s15
 452 01ee 17EE903A 		fmrs	r3, s15
 453              	.LBE3:
 195:../src/main.cpp **** }
 454              		.loc 1 195 0
 455 01f2 1846     		mov	r0, r3	@ float
 456 01f4 07F11007 		add	r7, r7, #16
 457 01f8 BD46     		mov	sp, r7
 458 01fa BDEC028B 		fldmfdd	sp!, {d8}
 459 01fe 80BD     		pop	{r7, pc}
 460              	.L8:
 461              		.align	2
 462              	.L7:
 463 0200 4A03643A 		.word	979632970
 464 0204 C1CA213F 		.word	1059179201
 465 0208 27310041 		.word	1090531623
 466 020c 33332442 		.word	1109668659
 467 0210 6666DB42 		.word	1121674854
 468 0214 33B32443 		.word	1126478643
 469 0218 CDCC0A43 		.word	1124781261
 470 021c C3F57042 		.word	1114699203
 471              		.cfi_endproc
 472              	.LFE113:
 474              		.align	2
 475              		.global	_Z19imu_update_ISR_initv
 476              		.thumb
 477              		.thumb_func
 479              	_Z19imu_update_ISR_initv:
 480              	.LFB114:
 196:../src/main.cpp **** 
 197:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 198:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 199:../src/main.cpp **** 
 200:../src/main.cpp **** void imu_update_ISR_init(void)
 201:../src/main.cpp **** {
 481              		.loc 1 201 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 24
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0220 80B5     		push	{r7, lr}
 486              	.LCFI9:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0222 86B0     		sub	sp, sp, #24
 491              	.LCFI10:
 492              		.cfi_def_cfa_offset 32
 493 0224 00AF     		add	r7, sp, #0
 494              	.LCFI11:
 495              		.cfi_def_cfa_register 7
 496              	.LBB4:
 202:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 203:../src/main.cpp **** 
 204:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 497              		.loc 1 204 0
 498 0226 4FF00703 		mov	r3, #7
 499 022a BB74     		strb	r3, [r7, #18]
 205:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 500              		.loc 1 205 0
 501 022c 4FF00003 		mov	r3, #0
 502 0230 FB74     		strb	r3, [r7, #19]
 206:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 503              		.loc 1 206 0
 504 0232 4FF00003 		mov	r3, #0
 505 0236 3B75     		strb	r3, [r7, #20]
 207:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 506              		.loc 1 207 0
 507 0238 4FF00003 		mov	r3, #0
 508 023c 7B75     		strb	r3, [r7, #21]
 208:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 509              		.loc 1 208 0
 510 023e 4FF00003 		mov	r3, #0
 511 0242 BB75     		strb	r3, [r7, #22]
 209:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 512              		.loc 1 209 0
 513 0244 4FF00003 		mov	r3, #0
 514 0248 7B74     		strb	r3, [r7, #17]
 210:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 515              		.loc 1 210 0
 516 024a 4FF00803 		mov	r3, #8
 517 024e 3B74     		strb	r3, [r7, #16]
 211:../src/main.cpp **** 
 212:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 518              		.loc 1 212 0
 519 0250 07F11003 		add	r3, r7, #16
 520 0254 1846     		mov	r0, r3
 521 0256 FFF7FEFF 		bl	L3GD20_Init
 213:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 522              		.loc 1 213 0
 523 025a FFF7FEFF 		bl	_Z14calc_gyro_biasv
 524 025e 0346     		mov	r3, r0
 525 0260 1A46     		mov	r2, r3
 526 0262 40F20003 		movw	r3, #:lower16:gyro_bias_x
 527 0266 C0F20003 		movt	r3, #:upper16:gyro_bias_x
 528 026a 1A60     		str	r2, [r3, #0]
 214:../src/main.cpp **** 
 215:../src/main.cpp **** 	gyro_angle_x = 0;
 529              		.loc 1 215 0
 530 026c 40F20003 		movw	r3, #:lower16:gyro_angle_x
 531 0270 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 532 0274 4FF00002 		mov	r2, #0
 533 0278 1A60     		str	r2, [r3, #0]	@ float
 216:../src/main.cpp **** 
 217:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 218:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 219:../src/main.cpp **** 
 220:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 534              		.loc 1 220 0
 535 027a 4FF01A03 		mov	r3, #26
 536 027e 3B73     		strb	r3, [r7, #12]
 221:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 537              		.loc 1 221 0
 538 0280 4FF00003 		mov	r3, #0
 539 0284 7B73     		strb	r3, [r7, #13]
 222:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 540              		.loc 1 222 0
 541 0286 4FF00003 		mov	r3, #0
 542 028a BB73     		strb	r3, [r7, #14]
 223:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 543              		.loc 1 223 0
 544 028c 4FF00103 		mov	r3, #1
 545 0290 FB73     		strb	r3, [r7, #15]
 224:../src/main.cpp **** 
 225:../src/main.cpp **** 	NVIC_Init(&nv);
 546              		.loc 1 225 0
 547 0292 07F10C03 		add	r3, r7, #12
 548 0296 1846     		mov	r0, r3
 549 0298 FFF7FEFF 		bl	NVIC_Init
 226:../src/main.cpp **** 
 227:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 550              		.loc 1 227 0
 551 029c 4FF48020 		mov	r0, #262144
 552 02a0 4FF00101 		mov	r1, #1
 553 02a4 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 228:../src/main.cpp **** 
 229:../src/main.cpp **** 	/*
 230:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 231:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 232:../src/main.cpp **** 	 * 	  Period -> ARR
 233:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 234:../src/main.cpp **** 	 */
 235:../src/main.cpp **** 
 236:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 554              		.loc 1 236 0
 555 02a8 40F28F13 		movw	r3, #399
 556 02ac 7B60     		str	r3, [r7, #4]
 237:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 557              		.loc 1 237 0
 558 02ae 41F61F43 		movw	r3, #7199
 559 02b2 3B80     		strh	r3, [r7, #0]	@ movhi
 238:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 560              		.loc 1 238 0
 561 02b4 4FF00003 		mov	r3, #0
 562 02b8 BB72     		strb	r3, [r7, #10]
 239:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 563              		.loc 1 239 0
 564 02ba 4FF00003 		mov	r3, #0
 565 02be 3B81     		strh	r3, [r7, #8]	@ movhi
 240:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 566              		.loc 1 240 0
 567 02c0 4FF00003 		mov	r3, #0
 568 02c4 7B80     		strh	r3, [r7, #2]	@ movhi
 241:../src/main.cpp **** 
 242:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 569              		.loc 1 242 0
 570 02c6 3B46     		mov	r3, r7
 571 02c8 4FF49040 		mov	r0, #18432
 572 02cc C4F20100 		movt	r0, 16385
 573 02d0 1946     		mov	r1, r3
 574 02d2 FFF7FEFF 		bl	TIM_TimeBaseInit
 243:../src/main.cpp **** 
 244:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 575              		.loc 1 244 0
 576 02d6 4FF49040 		mov	r0, #18432
 577 02da C4F20100 		movt	r0, 16385
 578 02de 4FF00101 		mov	r1, #1
 579 02e2 4FF00102 		mov	r2, #1
 580 02e6 FFF7FEFF 		bl	TIM_ITConfig
 245:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 581              		.loc 1 245 0
 582 02ea 4FF49040 		mov	r0, #18432
 583 02ee C4F20100 		movt	r0, 16385
 584 02f2 4FF00101 		mov	r1, #1
 585 02f6 FFF7FEFF 		bl	TIM_Cmd
 586              	.LBE4:
 246:../src/main.cpp **** }
 587              		.loc 1 246 0
 588 02fa 07F11807 		add	r7, r7, #24
 589 02fe BD46     		mov	sp, r7
 590 0300 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE114:
 594              		.section	.rodata
 595              		.align	2
 596              	.LC0:
 597 0000 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 597      32302072 
 597      65616420 
 597      61747465 
 597      6D707420 
 598 0033 636F6465 		.ascii	"code!!!\012\015\000"
 598      2121210A 
 598      0D00
 599 003d 000000   		.text
 600 0302 00BF     		.align	2
 601              		.global	L3GD20_TIMEOUT_UserCallback
 602              		.thumb
 603              		.thumb_func
 605              	L3GD20_TIMEOUT_UserCallback:
 606              	.LFB115:
 247:../src/main.cpp **** 
 248:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 249:../src/main.cpp **** {
 607              		.loc 1 249 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0304 80B5     		push	{r7, lr}
 612              	.LCFI12:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 0306 00AF     		add	r7, sp, #0
 617              	.LCFI13:
 618              		.cfi_def_cfa_register 7
 250:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 619              		.loc 1 250 0
 620 0308 40F20000 		movw	r0, #:lower16:.LC0
 621 030c C0F20000 		movt	r0, #:upper16:.LC0
 622 0310 FFF7FEFF 		bl	printf
 251:../src/main.cpp **** 	return 0;
 623              		.loc 1 251 0
 624 0314 4FF00003 		mov	r3, #0
 252:../src/main.cpp **** }
 625              		.loc 1 252 0
 626 0318 1846     		mov	r0, r3
 627 031a 80BD     		pop	{r7, pc}
 628              		.cfi_endproc
 629              	.LFE115:
 631              		.align	2
 632              		.global	_Z15brake_pins_initv
 633              		.thumb
 634              		.thumb_func
 636              	_Z15brake_pins_initv:
 637              	.LFB116:
 253:../src/main.cpp **** 
 254:../src/main.cpp **** void brake_pins_init(void)
 255:../src/main.cpp **** {
 638              		.loc 1 255 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642 031c 80B5     		push	{r7, lr}
 643              	.LCFI14:
 644              		.cfi_def_cfa_offset 8
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 031e 82B0     		sub	sp, sp, #8
 648              	.LCFI15:
 649              		.cfi_def_cfa_offset 16
 650 0320 00AF     		add	r7, sp, #0
 651              	.LCFI16:
 652              		.cfi_def_cfa_register 7
 653              	.LBB5:
 256:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 654              		.loc 1 256 0
 655 0322 4FF40010 		mov	r0, #2097152
 656 0326 4FF00101 		mov	r1, #1
 657 032a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 257:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 258:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 658              		.loc 1 258 0
 659 032e 3B46     		mov	r3, r7
 660 0330 1846     		mov	r0, r3
 661 0332 FFF7FEFF 		bl	GPIO_StructInit
 259:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 662              		.loc 1 259 0
 663 0336 4FF00C03 		mov	r3, #12
 664 033a 3B60     		str	r3, [r7, #0]
 260:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 665              		.loc 1 260 0
 666 033c 4FF00003 		mov	r3, #0
 667 0340 BB71     		strb	r3, [r7, #6]
 261:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 668              		.loc 1 261 0
 669 0342 4FF00103 		mov	r3, #1
 670 0346 3B71     		strb	r3, [r7, #4]
 262:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 671              		.loc 1 262 0
 672 0348 4FF00003 		mov	r3, #0
 673 034c FB71     		strb	r3, [r7, #7]
 263:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 674              		.loc 1 263 0
 675 034e 4FF00203 		mov	r3, #2
 676 0352 7B71     		strb	r3, [r7, #5]
 264:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 677              		.loc 1 264 0
 678 0354 3B46     		mov	r3, r7
 679 0356 4FF48050 		mov	r0, #4096
 680 035a C4F60000 		movt	r0, 18432
 681 035e 1946     		mov	r1, r3
 682 0360 FFF7FEFF 		bl	GPIO_Init
 265:../src/main.cpp **** 
 266:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 683              		.loc 1 266 0
 684 0364 4FF48050 		mov	r0, #4096
 685 0368 C4F60000 		movt	r0, 18432
 686 036c 4FF00401 		mov	r1, #4
 687 0370 4FF00002 		mov	r2, #0
 688 0374 FFF7FEFF 		bl	GPIO_WriteBit
 267:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 689              		.loc 1 267 0
 690 0378 4FF48050 		mov	r0, #4096
 691 037c C4F60000 		movt	r0, 18432
 692 0380 4FF00801 		mov	r1, #8
 693 0384 4FF00002 		mov	r2, #0
 694 0388 FFF7FEFF 		bl	GPIO_WriteBit
 695              	.LBE5:
 268:../src/main.cpp **** }
 696              		.loc 1 268 0
 697 038c 07F10807 		add	r7, r7, #8
 698 0390 BD46     		mov	sp, r7
 699 0392 80BD     		pop	{r7, pc}
 700              		.cfi_endproc
 701              	.LFE116:
 703              		.align	2
 704              		.global	_Z13ping_pin_initv
 705              		.thumb
 706              		.thumb_func
 708              	_Z13ping_pin_initv:
 709              	.LFB117:
 269:../src/main.cpp **** /*
 270:../src/main.cpp ****  * PB0: OUTPUT
 271:../src/main.cpp ****  * PC1: INPUT
 272:../src/main.cpp ****  */
 273:../src/main.cpp **** void ping_pin_init(void)
 274:../src/main.cpp **** {
 710              		.loc 1 274 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0394 80B5     		push	{r7, lr}
 715              	.LCFI17:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0396 82B0     		sub	sp, sp, #8
 720              	.LCFI18:
 721              		.cfi_def_cfa_offset 16
 722 0398 00AF     		add	r7, sp, #0
 723              	.LCFI19:
 724              		.cfi_def_cfa_register 7
 725              	.LBB6:
 275:../src/main.cpp **** 
 276:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 726              		.loc 1 276 0
 727 039a 4FF48800 		mov	r0, #4456448
 728 039e 4FF00101 		mov	r1, #1
 729 03a2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 277:../src/main.cpp **** 
 278:../src/main.cpp **** 	GPIO_InitTypeDef g;
 279:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 730              		.loc 1 279 0
 731 03a6 4FF00003 		mov	r3, #0
 732 03aa 3B71     		strb	r3, [r7, #4]
 280:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 733              		.loc 1 280 0
 734 03ac 4FF00103 		mov	r3, #1
 735 03b0 BB71     		strb	r3, [r7, #6]
 281:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 736              		.loc 1 281 0
 737 03b2 4FF40073 		mov	r3, #512
 738 03b6 3B60     		str	r3, [r7, #0]
 282:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 739              		.loc 1 282 0
 740 03b8 4FF00003 		mov	r3, #0
 741 03bc FB71     		strb	r3, [r7, #7]
 283:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 742              		.loc 1 283 0
 743 03be 4FF00103 		mov	r3, #1
 744 03c2 7B71     		strb	r3, [r7, #5]
 284:../src/main.cpp **** 
 285:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 745              		.loc 1 285 0
 746 03c4 3B46     		mov	r3, r7
 747 03c6 4FF4A050 		mov	r0, #5120
 748 03ca C4F60000 		movt	r0, 18432
 749 03ce 1946     		mov	r1, r3
 750 03d0 FFF7FEFF 		bl	GPIO_Init
 286:../src/main.cpp **** 
 287:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 751              		.loc 1 287 0
 752 03d4 4FF00103 		mov	r3, #1
 753 03d8 3B71     		strb	r3, [r7, #4]
 288:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 754              		.loc 1 288 0
 755 03da 4FF00003 		mov	r3, #0
 756 03de BB71     		strb	r3, [r7, #6]
 289:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 757              		.loc 1 289 0
 758 03e0 4FF00103 		mov	r3, #1
 759 03e4 3B60     		str	r3, [r7, #0]
 290:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 760              		.loc 1 290 0
 761 03e6 4FF00003 		mov	r3, #0
 762 03ea FB71     		strb	r3, [r7, #7]
 291:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 763              		.loc 1 291 0
 764 03ec 4FF00103 		mov	r3, #1
 765 03f0 7B71     		strb	r3, [r7, #5]
 292:../src/main.cpp **** 
 293:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 766              		.loc 1 293 0
 767 03f2 3B46     		mov	r3, r7
 768 03f4 4FF48060 		mov	r0, #1024
 769 03f8 C4F60000 		movt	r0, 18432
 770 03fc 1946     		mov	r1, r3
 771 03fe FFF7FEFF 		bl	GPIO_Init
 294:../src/main.cpp **** 
 295:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 772              		.loc 1 295 0
 773 0402 4FF00100 		mov	r0, #1
 774 0406 4FF00101 		mov	r1, #1
 775 040a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 296:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 776              		.loc 1 296 0
 777 040e 4FF00500 		mov	r0, #5
 778 0412 4FF00901 		mov	r1, #9
 779 0416 FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 780              	.LBE6:
 297:../src/main.cpp **** 
 298:../src/main.cpp **** }
 781              		.loc 1 298 0
 782 041a 07F10807 		add	r7, r7, #8
 783 041e BD46     		mov	sp, r7
 784 0420 80BD     		pop	{r7, pc}
 785              		.cfi_endproc
 786              	.LFE117:
 788 0422 00BF     		.align	2
 789              		.global	_Z20timer2_timebase_initv
 790              		.thumb
 791              		.thumb_func
 793              	_Z20timer2_timebase_initv:
 794              	.LFB118:
 299:../src/main.cpp **** 
 300:../src/main.cpp **** void timer2_timebase_init(void)
 301:../src/main.cpp **** {
 795              		.loc 1 301 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 16
 798              		@ frame_needed = 1, uses_anonymous_args = 0
 799 0424 80B5     		push	{r7, lr}
 800              	.LCFI20:
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0426 84B0     		sub	sp, sp, #16
 805              	.LCFI21:
 806              		.cfi_def_cfa_offset 24
 807 0428 00AF     		add	r7, sp, #0
 808              	.LCFI22:
 809              		.cfi_def_cfa_register 7
 810              	.LBB7:
 302:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 303:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 811              		.loc 1 303 0
 812 042a 4FF00100 		mov	r0, #1
 813 042e 4FF00101 		mov	r1, #1
 814 0432 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 304:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 815              		.loc 1 304 0
 816 0436 44F24F63 		movw	r3, #17999
 817 043a BB60     		str	r3, [r7, #8]
 305:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 818              		.loc 1 305 0
 819 043c 4FF00003 		mov	r3, #0
 820 0440 BB73     		strb	r3, [r7, #14]
 306:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 821              		.loc 1 306 0
 822 0442 4FF04703 		mov	r3, #71
 823 0446 BB80     		strh	r3, [r7, #4]	@ movhi
 307:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 824              		.loc 1 307 0
 825 0448 4FF00003 		mov	r3, #0
 826 044c BB81     		strh	r3, [r7, #12]	@ movhi
 308:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 827              		.loc 1 308 0
 828 044e 4FF00003 		mov	r3, #0
 829 0452 FB80     		strh	r3, [r7, #6]	@ movhi
 309:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 830              		.loc 1 309 0
 831 0454 07F10403 		add	r3, r7, #4
 832 0458 4FF08040 		mov	r0, #1073741824
 833 045c 1946     		mov	r1, r3
 834 045e FFF7FEFF 		bl	TIM_TimeBaseInit
 310:../src/main.cpp **** 
 311:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 835              		.loc 1 311 0
 836 0462 4FF08040 		mov	r0, #1073741824
 837 0466 4FF00001 		mov	r1, #0
 838 046a FFF7FEFF 		bl	TIM_SetCounter
 839              	.LBE7:
 312:../src/main.cpp **** }
 840              		.loc 1 312 0
 841 046e 07F11007 		add	r7, r7, #16
 842 0472 BD46     		mov	sp, r7
 843 0474 80BD     		pop	{r7, pc}
 844              		.cfi_endproc
 845              	.LFE118:
 847 0476 00BF     		.align	2
 848              		.global	_Z9comp_initv
 849              		.thumb
 850              		.thumb_func
 852              	_Z9comp_initv:
 853              	.LFB119:
 313:../src/main.cpp **** 
 314:../src/main.cpp **** /*
 315:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 316:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 317:../src/main.cpp ****  * 			Output->	PB9
 318:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 319:../src/main.cpp ****  * 			Output->	PA8
 320:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 321:../src/main.cpp ****  * 			Output->	PB1
 322:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 323:../src/main.cpp ****  * 			Output->	PC2
 324:../src/main.cpp ****  */
 325:../src/main.cpp **** 
 326:../src/main.cpp **** void comp_init(void)
 327:../src/main.cpp **** {
 854              		.loc 1 327 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 40
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858 0478 80B5     		push	{r7, lr}
 859              	.LCFI23:
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 047a 8AB0     		sub	sp, sp, #40
 864              	.LCFI24:
 865              		.cfi_def_cfa_offset 48
 866 047c 00AF     		add	r7, sp, #0
 867              	.LCFI25:
 868              		.cfi_def_cfa_register 7
 869              	.LBB8:
 328:../src/main.cpp **** 	//COMP2 Init:
 329:../src/main.cpp **** 
 330:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 870              		.loc 1 330 0
 871 047e 4FF00100 		mov	r0, #1
 872 0482 4FF00101 		mov	r1, #1
 873 0486 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 331:../src/main.cpp **** 
 332:../src/main.cpp **** 	GPIO_InitTypeDef g;
 333:../src/main.cpp **** 
 334:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 874              		.loc 1 334 0
 875 048a 4FF00303 		mov	r3, #3
 876 048e 87F82430 		strb	r3, [r7, #36]
 335:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 877              		.loc 1 335 0
 878 0492 4FF00003 		mov	r3, #0
 879 0496 87F82730 		strb	r3, [r7, #39]
 336:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 880              		.loc 1 336 0
 881 049a 4FF08003 		mov	r3, #128
 882 049e 3B62     		str	r3, [r7, #32]
 337:../src/main.cpp **** 
 338:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 883              		.loc 1 338 0
 884 04a0 4FF40030 		mov	r0, #131072
 885 04a4 4FF00101 		mov	r1, #1
 886 04a8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 339:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 887              		.loc 1 339 0
 888 04ac 07F12003 		add	r3, r7, #32
 889 04b0 4FF09040 		mov	r0, #1207959552
 890 04b4 1946     		mov	r1, r3
 891 04b6 FFF7FEFF 		bl	GPIO_Init
 340:../src/main.cpp **** 
 341:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 892              		.loc 1 341 0
 893 04ba 4FF00203 		mov	r3, #2
 894 04be 87F82430 		strb	r3, [r7, #36]
 342:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 895              		.loc 1 342 0
 896 04c2 4FF00003 		mov	r3, #0
 897 04c6 87F82630 		strb	r3, [r7, #38]
 343:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 898              		.loc 1 343 0
 899 04ca 4FF00003 		mov	r3, #0
 900 04ce 87F82730 		strb	r3, [r7, #39]
 344:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 901              		.loc 1 344 0
 902 04d2 4FF40073 		mov	r3, #512
 903 04d6 3B62     		str	r3, [r7, #32]
 345:../src/main.cpp **** 
 346:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 904              		.loc 1 346 0
 905 04d8 4FF48060 		mov	r0, #1024
 906 04dc C4F60000 		movt	r0, 18432
 907 04e0 4FF00901 		mov	r1, #9
 908 04e4 4FF00802 		mov	r2, #8
 909 04e8 FFF7FEFF 		bl	GPIO_PinAFConfig
 347:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 910              		.loc 1 347 0
 911 04ec 07F12003 		add	r3, r7, #32
 912 04f0 4FF48060 		mov	r0, #1024
 913 04f4 C4F60000 		movt	r0, 18432
 914 04f8 1946     		mov	r1, r3
 915 04fa FFF7FEFF 		bl	GPIO_Init
 348:../src/main.cpp **** 
 349:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 916              		.loc 1 349 0
 917 04fe 4FF00000 		mov	r0, #0
 918 0502 FFF7FEFF 		bl	RCC_PCLK2Config
 350:../src/main.cpp **** 
 351:../src/main.cpp **** 	COMP_InitTypeDef c;
 352:../src/main.cpp **** 
 353:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 919              		.loc 1 353 0
 920 0506 4FF03003 		mov	r3, #48
 921 050a 7B60     		str	r3, [r7, #4]
 354:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 922              		.loc 1 354 0
 923 050c 4FF00003 		mov	r3, #0
 924 0510 BB60     		str	r3, [r7, #8]
 355:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 925              		.loc 1 355 0
 926 0512 4FF00403 		mov	r3, #4
 927 0516 FB61     		str	r3, [r7, #28]
 356:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 928              		.loc 1 356 0
 929 0518 4FF00003 		mov	r3, #0
 930 051c FB60     		str	r3, [r7, #12]
 357:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 931              		.loc 1 357 0
 932 051e 4FF00003 		mov	r3, #0
 933 0522 7B61     		str	r3, [r7, #20]
 358:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 934              		.loc 1 358 0
 935 0524 4FF48033 		mov	r3, #65536
 936 0528 BB61     		str	r3, [r7, #24]
 359:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 937              		.loc 1 359 0
 938 052a 4FF00003 		mov	r3, #0
 939 052e 3B61     		str	r3, [r7, #16]
 360:../src/main.cpp **** 
 361:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 940              		.loc 1 361 0
 941 0530 07F10403 		add	r3, r7, #4
 942 0534 4FF00400 		mov	r0, #4
 943 0538 1946     		mov	r1, r3
 944 053a FFF7FEFF 		bl	COMP_Init
 362:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 945              		.loc 1 362 0
 946 053e 4FF00400 		mov	r0, #4
 947 0542 4FF00101 		mov	r1, #1
 948 0546 FFF7FEFF 		bl	COMP_Cmd
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	//COMP3 Init:
 365:../src/main.cpp **** 
 366:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 949              		.loc 1 366 0
 950 054a 4FF00100 		mov	r0, #1
 951 054e 4FF00101 		mov	r1, #1
 952 0552 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 367:../src/main.cpp **** 
 368:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 953              		.loc 1 368 0
 954 0556 4FF00303 		mov	r3, #3
 955 055a 87F82430 		strb	r3, [r7, #36]
 369:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 956              		.loc 1 369 0
 957 055e 4FF00003 		mov	r3, #0
 958 0562 87F82730 		strb	r3, [r7, #39]
 370:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 959              		.loc 1 370 0
 960 0566 4FF48043 		mov	r3, #16384
 961 056a 3B62     		str	r3, [r7, #32]
 371:../src/main.cpp **** 
 372:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 962              		.loc 1 372 0
 963 056c 4FF4C020 		mov	r0, #393216
 964 0570 4FF00101 		mov	r1, #1
 965 0574 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 373:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 966              		.loc 1 373 0
 967 0578 07F12003 		add	r3, r7, #32
 968 057c 4FF48060 		mov	r0, #1024
 969 0580 C4F60000 		movt	r0, 18432
 970 0584 1946     		mov	r1, r3
 971 0586 FFF7FEFF 		bl	GPIO_Init
 374:../src/main.cpp **** 
 375:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 972              		.loc 1 375 0
 973 058a 4FF00203 		mov	r3, #2
 974 058e 87F82430 		strb	r3, [r7, #36]
 376:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 975              		.loc 1 376 0
 976 0592 4FF00003 		mov	r3, #0
 977 0596 87F82630 		strb	r3, [r7, #38]
 377:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 978              		.loc 1 377 0
 979 059a 4FF00003 		mov	r3, #0
 980 059e 87F82730 		strb	r3, [r7, #39]
 378:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 981              		.loc 1 378 0
 982 05a2 4FF48073 		mov	r3, #256
 983 05a6 3B62     		str	r3, [r7, #32]
 379:../src/main.cpp **** 
 380:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 984              		.loc 1 380 0
 985 05a8 4FF40060 		mov	r0, #2048
 986 05ac C4F60000 		movt	r0, 18432
 987 05b0 4FF00801 		mov	r1, #8
 988 05b4 4FF00702 		mov	r2, #7
 989 05b8 FFF7FEFF 		bl	GPIO_PinAFConfig
 381:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 990              		.loc 1 381 0
 991 05bc 07F12003 		add	r3, r7, #32
 992 05c0 4FF40060 		mov	r0, #2048
 993 05c4 C4F60000 		movt	r0, 18432
 994 05c8 1946     		mov	r1, r3
 995 05ca FFF7FEFF 		bl	GPIO_Init
 382:../src/main.cpp **** 
 383:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 996              		.loc 1 383 0
 997 05ce 4FF00000 		mov	r0, #0
 998 05d2 FFF7FEFF 		bl	RCC_PCLK2Config
 384:../src/main.cpp **** 
 385:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 999              		.loc 1 385 0
 1000 05d6 4FF03003 		mov	r3, #48
 1001 05da 7B60     		str	r3, [r7, #4]
 386:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1002              		.loc 1 386 0
 1003 05dc 4FF00003 		mov	r3, #0
 1004 05e0 BB60     		str	r3, [r7, #8]
 387:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1005              		.loc 1 387 0
 1006 05e2 4FF00403 		mov	r3, #4
 1007 05e6 FB61     		str	r3, [r7, #28]
 388:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1008              		.loc 1 388 0
 1009 05e8 4FF00003 		mov	r3, #0
 1010 05ec FB60     		str	r3, [r7, #12]
 389:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1011              		.loc 1 389 0
 1012 05ee 4FF00003 		mov	r3, #0
 1013 05f2 7B61     		str	r3, [r7, #20]
 390:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1014              		.loc 1 390 0
 1015 05f4 4FF48033 		mov	r3, #65536
 1016 05f8 BB61     		str	r3, [r7, #24]
 391:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1017              		.loc 1 391 0
 1018 05fa 4FF00003 		mov	r3, #0
 1019 05fe 3B61     		str	r3, [r7, #16]
 392:../src/main.cpp **** 
 393:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1020              		.loc 1 393 0
 1021 0600 07F10403 		add	r3, r7, #4
 1022 0604 4FF00800 		mov	r0, #8
 1023 0608 1946     		mov	r1, r3
 1024 060a FFF7FEFF 		bl	COMP_Init
 394:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1025              		.loc 1 394 0
 1026 060e 4FF00800 		mov	r0, #8
 1027 0612 4FF00101 		mov	r1, #1
 1028 0616 FFF7FEFF 		bl	COMP_Cmd
 395:../src/main.cpp **** 
 396:../src/main.cpp **** 	//COMP4 Init:
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1029              		.loc 1 398 0
 1030 061a 4FF00100 		mov	r0, #1
 1031 061e 4FF00101 		mov	r1, #1
 1032 0622 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 399:../src/main.cpp **** 
 400:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1033              		.loc 1 400 0
 1034 0626 4FF00303 		mov	r3, #3
 1035 062a 87F82430 		strb	r3, [r7, #36]
 401:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1036              		.loc 1 401 0
 1037 062e 4FF00003 		mov	r3, #0
 1038 0632 87F82730 		strb	r3, [r7, #39]
 402:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1039              		.loc 1 402 0
 1040 0636 4FF08003 		mov	r3, #128
 1041 063a 3B62     		str	r3, [r7, #32]
 403:../src/main.cpp **** 
 404:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1042              		.loc 1 404 0
 1043 063c 4FF41010 		mov	r0, #2359296
 1044 0640 4FF00101 		mov	r1, #1
 1045 0644 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 405:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1046              		.loc 1 405 0
 1047 0648 07F12003 		add	r3, r7, #32
 1048 064c 4FF48050 		mov	r0, #4096
 1049 0650 C4F60000 		movt	r0, 18432
 1050 0654 1946     		mov	r1, r3
 1051 0656 FFF7FEFF 		bl	GPIO_Init
 406:../src/main.cpp **** 
 407:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1052              		.loc 1 407 0
 1053 065a 4FF00203 		mov	r3, #2
 1054 065e 87F82430 		strb	r3, [r7, #36]
 408:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1055              		.loc 1 408 0
 1056 0662 4FF00003 		mov	r3, #0
 1057 0666 87F82630 		strb	r3, [r7, #38]
 409:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1058              		.loc 1 409 0
 1059 066a 4FF00003 		mov	r3, #0
 1060 066e 87F82730 		strb	r3, [r7, #39]
 410:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1061              		.loc 1 410 0
 1062 0672 4FF00203 		mov	r3, #2
 1063 0676 3B62     		str	r3, [r7, #32]
 411:../src/main.cpp **** 
 412:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1064              		.loc 1 412 0
 1065 0678 4FF48060 		mov	r0, #1024
 1066 067c C4F60000 		movt	r0, 18432
 1067 0680 4FF00101 		mov	r1, #1
 1068 0684 4FF00802 		mov	r2, #8
 1069 0688 FFF7FEFF 		bl	GPIO_PinAFConfig
 413:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1070              		.loc 1 413 0
 1071 068c 07F12003 		add	r3, r7, #32
 1072 0690 4FF48060 		mov	r0, #1024
 1073 0694 C4F60000 		movt	r0, 18432
 1074 0698 1946     		mov	r1, r3
 1075 069a FFF7FEFF 		bl	GPIO_Init
 414:../src/main.cpp **** 
 415:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1076              		.loc 1 415 0
 1077 069e 4FF00000 		mov	r0, #0
 1078 06a2 FFF7FEFF 		bl	RCC_PCLK2Config
 416:../src/main.cpp **** 
 417:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1079              		.loc 1 417 0
 1080 06a6 4FF03003 		mov	r3, #48
 1081 06aa 7B60     		str	r3, [r7, #4]
 418:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1082              		.loc 1 418 0
 1083 06ac 4FF08003 		mov	r3, #128
 1084 06b0 BB60     		str	r3, [r7, #8]
 419:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1085              		.loc 1 419 0
 1086 06b2 4FF00403 		mov	r3, #4
 1087 06b6 FB61     		str	r3, [r7, #28]
 420:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1088              		.loc 1 420 0
 1089 06b8 4FF00003 		mov	r3, #0
 1090 06bc FB60     		str	r3, [r7, #12]
 421:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1091              		.loc 1 421 0
 1092 06be 4FF00003 		mov	r3, #0
 1093 06c2 7B61     		str	r3, [r7, #20]
 422:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1094              		.loc 1 422 0
 1095 06c4 4FF48033 		mov	r3, #65536
 1096 06c8 BB61     		str	r3, [r7, #24]
 423:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1097              		.loc 1 423 0
 1098 06ca 4FF00003 		mov	r3, #0
 1099 06ce 3B61     		str	r3, [r7, #16]
 424:../src/main.cpp **** 
 425:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1100              		.loc 1 425 0
 1101 06d0 07F10403 		add	r3, r7, #4
 1102 06d4 4FF00C00 		mov	r0, #12
 1103 06d8 1946     		mov	r1, r3
 1104 06da FFF7FEFF 		bl	COMP_Init
 426:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1105              		.loc 1 426 0
 1106 06de 4FF00C00 		mov	r0, #12
 1107 06e2 4FF00101 		mov	r1, #1
 1108 06e6 FFF7FEFF 		bl	COMP_Cmd
 427:../src/main.cpp **** 
 428:../src/main.cpp **** 	//COMP7 Init:
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1109              		.loc 1 430 0
 1110 06ea 4FF00100 		mov	r0, #1
 1111 06ee 4FF00101 		mov	r1, #1
 1112 06f2 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 431:../src/main.cpp **** 
 432:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1113              		.loc 1 432 0
 1114 06f6 4FF00303 		mov	r3, #3
 1115 06fa 87F82430 		strb	r3, [r7, #36]
 433:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1116              		.loc 1 433 0
 1117 06fe 4FF00003 		mov	r3, #0
 1118 0702 87F82730 		strb	r3, [r7, #39]
 434:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1119              		.loc 1 434 0
 1120 0706 4FF00203 		mov	r3, #2
 1121 070a 3B62     		str	r3, [r7, #32]
 435:../src/main.cpp **** 
 436:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1122              		.loc 1 436 0
 1123 070c 4FF40020 		mov	r0, #524288
 1124 0710 4FF00101 		mov	r1, #1
 1125 0714 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 437:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1126              		.loc 1 437 0
 1127 0718 07F12003 		add	r3, r7, #32
 1128 071c 4FF40060 		mov	r0, #2048
 1129 0720 C4F60000 		movt	r0, 18432
 1130 0724 1946     		mov	r1, r3
 1131 0726 FFF7FEFF 		bl	GPIO_Init
 438:../src/main.cpp **** 
 439:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1132              		.loc 1 439 0
 1133 072a 4FF00203 		mov	r3, #2
 1134 072e 87F82430 		strb	r3, [r7, #36]
 440:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1135              		.loc 1 440 0
 1136 0732 4FF00003 		mov	r3, #0
 1137 0736 87F82630 		strb	r3, [r7, #38]
 441:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1138              		.loc 1 441 0
 1139 073a 4FF00003 		mov	r3, #0
 1140 073e 87F82730 		strb	r3, [r7, #39]
 442:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1141              		.loc 1 442 0
 1142 0742 4FF00403 		mov	r3, #4
 1143 0746 3B62     		str	r3, [r7, #32]
 443:../src/main.cpp **** 
 444:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1144              		.loc 1 444 0
 1145 0748 4FF40060 		mov	r0, #2048
 1146 074c C4F60000 		movt	r0, 18432
 1147 0750 4FF00201 		mov	r1, #2
 1148 0754 4FF00302 		mov	r2, #3
 1149 0758 FFF7FEFF 		bl	GPIO_PinAFConfig
 445:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1150              		.loc 1 445 0
 1151 075c 07F12003 		add	r3, r7, #32
 1152 0760 4FF40060 		mov	r0, #2048
 1153 0764 C4F60000 		movt	r0, 18432
 1154 0768 1946     		mov	r1, r3
 1155 076a FFF7FEFF 		bl	GPIO_Init
 446:../src/main.cpp **** 
 447:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1156              		.loc 1 447 0
 1157 076e 4FF00000 		mov	r0, #0
 1158 0772 FFF7FEFF 		bl	RCC_PCLK2Config
 448:../src/main.cpp **** 
 449:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1159              		.loc 1 449 0
 1160 0776 4FF03003 		mov	r3, #48
 1161 077a 7B60     		str	r3, [r7, #4]
 450:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1162              		.loc 1 450 0
 1163 077c 4FF08003 		mov	r3, #128
 1164 0780 BB60     		str	r3, [r7, #8]
 451:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1165              		.loc 1 451 0
 1166 0782 4FF00403 		mov	r3, #4
 1167 0786 FB61     		str	r3, [r7, #28]
 452:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1168              		.loc 1 452 0
 1169 0788 4FF00003 		mov	r3, #0
 1170 078c FB60     		str	r3, [r7, #12]
 453:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1171              		.loc 1 453 0
 1172 078e 4FF00003 		mov	r3, #0
 1173 0792 7B61     		str	r3, [r7, #20]
 454:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1174              		.loc 1 454 0
 1175 0794 4FF48033 		mov	r3, #65536
 1176 0798 BB61     		str	r3, [r7, #24]
 455:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1177              		.loc 1 455 0
 1178 079a 4FF00003 		mov	r3, #0
 1179 079e 3B61     		str	r3, [r7, #16]
 456:../src/main.cpp **** 
 457:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1180              		.loc 1 457 0
 1181 07a0 07F10403 		add	r3, r7, #4
 1182 07a4 4FF01800 		mov	r0, #24
 1183 07a8 1946     		mov	r1, r3
 1184 07aa FFF7FEFF 		bl	COMP_Init
 458:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1185              		.loc 1 458 0
 1186 07ae 4FF01800 		mov	r0, #24
 1187 07b2 4FF00101 		mov	r1, #1
 1188 07b6 FFF7FEFF 		bl	COMP_Cmd
 1189              	.LBE8:
 459:../src/main.cpp **** }
 1190              		.loc 1 459 0
 1191 07ba 07F12807 		add	r7, r7, #40
 1192 07be BD46     		mov	sp, r7
 1193 07c0 80BD     		pop	{r7, pc}
 1194              		.cfi_endproc
 1195              	.LFE119:
 1197 07c2 00BF     		.align	2
 1198              		.global	_Z14calc_gyro_biasv
 1199              		.thumb
 1200              		.thumb_func
 1202              	_Z14calc_gyro_biasv:
 1203              	.LFB120:
 460:../src/main.cpp **** 
 461:../src/main.cpp **** int16_t calc_gyro_bias(void)
 462:../src/main.cpp **** {
 1204              		.loc 1 462 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 16
 1207              		@ frame_needed = 1, uses_anonymous_args = 0
 1208 07c4 80B5     		push	{r7, lr}
 1209              	.LCFI26:
 1210              		.cfi_def_cfa_offset 8
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 07c6 84B0     		sub	sp, sp, #16
 1214              	.LCFI27:
 1215              		.cfi_def_cfa_offset 24
 1216 07c8 00AF     		add	r7, sp, #0
 1217              	.LCFI28:
 1218              		.cfi_def_cfa_register 7
 1219              	.LBB9:
 463:../src/main.cpp **** 	int i = 0;
 1220              		.loc 1 463 0
 1221 07ca 4FF00003 		mov	r3, #0
 1222 07ce FB60     		str	r3, [r7, #12]
 464:../src/main.cpp **** 	int accum_x = 0;
 1223              		.loc 1 464 0
 1224 07d0 4FF00003 		mov	r3, #0
 1225 07d4 BB60     		str	r3, [r7, #8]
 465:../src/main.cpp **** 
 466:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 467:../src/main.cpp **** 		uint16_t un_signed;
 468:../src/main.cpp **** 		int16_t output;
 469:../src/main.cpp **** 	} convert;
 470:../src/main.cpp **** 
 471:../src/main.cpp **** 	uint8_t bytes[2];
 472:../src/main.cpp **** 
 473:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1226              		.loc 1 473 0
 1227 07d6 4FF00003 		mov	r3, #0
 1228 07da FB60     		str	r3, [r7, #12]
 1229 07dc 19E0     		b	.L17
 1230              	.L18:
 474:../src/main.cpp **** 	{
 475:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1231              		.loc 1 475 0 discriminator 2
 1232 07de 3B46     		mov	r3, r7
 1233 07e0 1846     		mov	r0, r3
 1234 07e2 4FF02801 		mov	r1, #40
 1235 07e6 4FF00202 		mov	r2, #2
 1236 07ea FFF7FEFF 		bl	L3GD20_Read
 476:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1237              		.loc 1 476 0 discriminator 2
 1238 07ee 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1239 07f0 4FEA0323 		lsl	r3, r3, #8
 1240 07f4 9AB2     		uxth	r2, r3
 1241 07f6 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1242 07f8 1343     		orrs	r3, r3, r2
 1243 07fa 9BB2     		uxth	r3, r3
 1244 07fc 9BB2     		uxth	r3, r3
 1245 07fe BB80     		strh	r3, [r7, #4]	@ movhi
 477:../src/main.cpp **** 		accum_x += convert.output;
 1246              		.loc 1 477 0 discriminator 2
 1247 0800 BB88     		ldrh	r3, [r7, #4]
 1248 0802 1BB2     		sxth	r3, r3
 1249 0804 BA68     		ldr	r2, [r7, #8]
 1250 0806 D318     		adds	r3, r2, r3
 1251 0808 BB60     		str	r3, [r7, #8]
 473:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1252              		.loc 1 473 0 discriminator 2
 1253 080a FB68     		ldr	r3, [r7, #12]
 1254 080c 03F10103 		add	r3, r3, #1
 1255 0810 FB60     		str	r3, [r7, #12]
 1256              	.L17:
 473:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1257              		.loc 1 473 0 is_stmt 0 discriminator 1
 1258 0812 FB68     		ldr	r3, [r7, #12]
 1259 0814 F92B     		cmp	r3, #249
 1260 0816 CCBF     		ite	gt
 1261 0818 0023     		movgt	r3, #0
 1262 081a 0123     		movle	r3, #1
 1263 081c DBB2     		uxtb	r3, r3
 1264 081e 002B     		cmp	r3, #0
 1265 0820 DDD1     		bne	.L18
 478:../src/main.cpp **** 	}
 479:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1266              		.loc 1 479 0 is_stmt 1
 1267 0822 D7ED027A 		flds	s15, [r7, #8]	@ int
 1268 0826 B8EEE77A 		fsitos	s14, s15
 1269 082a DFED077A 		flds	s15, .L20
 1270 082e C7EE277A 		fdivs	s15, s14, s15
 1271 0832 FDEEE77A 		ftosizs	s15, s15
 1272 0836 17EE903A 		fmrs	r3, s15	@ int
 1273 083a 9BB2     		uxth	r3, r3
 1274 083c 1BB2     		sxth	r3, r3
 1275              	.LBE9:
 480:../src/main.cpp **** }
 1276              		.loc 1 480 0
 1277 083e 1846     		mov	r0, r3
 1278 0840 07F11007 		add	r7, r7, #16
 1279 0844 BD46     		mov	sp, r7
 1280 0846 80BD     		pop	{r7, pc}
 1281              	.L21:
 1282              		.align	2
 1283              	.L20:
 1284 0848 00007A43 		.word	1132068864
 1285              		.cfi_endproc
 1286              	.LFE120:
 1288              		.align	2
 1289              		.global	_Z13adc1_init_DMAv
 1290              		.thumb
 1291              		.thumb_func
 1293              	_Z13adc1_init_DMAv:
 1294              	.LFB121:
 481:../src/main.cpp **** 
 482:../src/main.cpp **** /*
 483:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 484:../src/main.cpp ****  * a user-supplied location in memory
 485:../src/main.cpp ****  * @Args: None
 486:../src/main.cpp ****  * @Return Val: None
 487:../src/main.cpp ****  */
 488:../src/main.cpp **** 
 489:../src/main.cpp **** void adc1_init_DMA(void)
 490:../src/main.cpp **** {
 1295              		.loc 1 490 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 112
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299 084c 80B5     		push	{r7, lr}
 1300              	.LCFI29:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 084e 9CB0     		sub	sp, sp, #112
 1305              	.LCFI30:
 1306              		.cfi_def_cfa_offset 120
 1307 0850 00AF     		add	r7, sp, #0
 1308              	.LCFI31:
 1309              		.cfi_def_cfa_register 7
 1310              	.LBB10:
 491:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 492:../src/main.cpp **** 
 493:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 494:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 495:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 496:../src/main.cpp **** 
 497:../src/main.cpp **** 	/* Configure the ADC clock */
 498:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1311              		.loc 1 498 0
 1312 0852 4FF48870 		mov	r0, #272
 1313 0856 FFF7FEFF 		bl	RCC_ADCCLKConfig
 499:../src/main.cpp **** 	/* Enable ADC1 clock */
 500:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1314              		.loc 1 500 0
 1315 085a 4FF08050 		mov	r0, #268435456
 1316 085e 4FF00101 		mov	r1, #1
 1317 0862 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 501:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 502:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1318              		.loc 1 502 0
 1319 0866 4FF40030 		mov	r0, #131072
 1320 086a 4FF00101 		mov	r1, #1
 1321 086e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 503:../src/main.cpp **** 
 504:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 505:../src/main.cpp **** 
 506:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1322              		.loc 1 506 0
 1323 0872 07F15003 		add	r3, r7, #80
 1324 0876 1846     		mov	r0, r3
 1325 0878 FFF7FEFF 		bl	GPIO_StructInit
 507:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1326              		.loc 1 507 0
 1327 087c 4FF00C03 		mov	r3, #12
 1328 0880 3B65     		str	r3, [r7, #80]
 508:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1329              		.loc 1 508 0
 1330 0882 4FF00303 		mov	r3, #3
 1331 0886 87F85430 		strb	r3, [r7, #84]
 509:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1332              		.loc 1 509 0
 1333 088a 4FF00003 		mov	r3, #0
 1334 088e 87F85730 		strb	r3, [r7, #87]
 510:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1335              		.loc 1 510 0
 1336 0892 07F15003 		add	r3, r7, #80
 1337 0896 4FF09040 		mov	r0, #1207959552
 1338 089a 1946     		mov	r1, r3
 1339 089c FFF7FEFF 		bl	GPIO_Init
 511:../src/main.cpp **** 
 512:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1340              		.loc 1 512 0
 1341 08a0 3B46     		mov	r3, r7
 1342 08a2 1846     		mov	r0, r3
 1343 08a4 FFF7FEFF 		bl	ADC_StructInit
 513:../src/main.cpp **** 
 514:../src/main.cpp **** 	/* Calibration procedure */
 515:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1344              		.loc 1 515 0
 1345 08a8 4FF0A040 		mov	r0, #1342177280
 1346 08ac 4FF00101 		mov	r1, #1
 1347 08b0 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 516:../src/main.cpp **** 
 517:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 518:../src/main.cpp **** 	int foo;
 519:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1348              		.loc 1 519 0
 1349 08b4 4FF00003 		mov	r3, #0
 1350 08b8 FB66     		str	r3, [r7, #108]
 1351 08ba 07E0     		b	.L23
 1352              	.L24:
 520:../src/main.cpp **** 	{
 521:../src/main.cpp **** 	  ++foo;
 1353              		.loc 1 521 0 discriminator 2
 1354 08bc FB6E     		ldr	r3, [r7, #108]
 1355 08be 03F10103 		add	r3, r3, #1
 1356 08c2 FB66     		str	r3, [r7, #108]
 519:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1357              		.loc 1 519 0 discriminator 2
 1358 08c4 FB6E     		ldr	r3, [r7, #108]
 1359 08c6 03F10103 		add	r3, r3, #1
 1360 08ca FB66     		str	r3, [r7, #108]
 1361              	.L23:
 519:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1362              		.loc 1 519 0 is_stmt 0 discriminator 1
 1363 08cc FA6E     		ldr	r2, [r7, #108]
 1364 08ce 4FF6FF13 		movw	r3, #63999
 1365 08d2 9A42     		cmp	r2, r3
 1366 08d4 CCBF     		ite	gt
 1367 08d6 0023     		movgt	r3, #0
 1368 08d8 0123     		movle	r3, #1
 1369 08da DBB2     		uxtb	r3, r3
 1370 08dc 002B     		cmp	r3, #0
 1371 08de EDD1     		bne	.L24
 522:../src/main.cpp **** 	}
 523:../src/main.cpp **** 
 524:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1372              		.loc 1 524 0 is_stmt 1
 1373 08e0 4FF0A040 		mov	r0, #1342177280
 1374 08e4 4FF00001 		mov	r1, #0
 1375 08e8 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 525:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1376              		.loc 1 525 0
 1377 08ec 4FF0A040 		mov	r0, #1342177280
 1378 08f0 FFF7FEFF 		bl	ADC_StartCalibration
 526:../src/main.cpp **** 
 527:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1379              		.loc 1 527 0
 1380 08f4 00BF     		nop
 1381              	.L25:
 1382              		.loc 1 527 0 is_stmt 0 discriminator 1
 1383 08f6 4FF0A040 		mov	r0, #1342177280
 1384 08fa FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1385 08fe 0346     		mov	r3, r0
 1386 0900 002B     		cmp	r3, #0
 1387 0902 0CBF     		ite	eq
 1388 0904 0023     		moveq	r3, #0
 1389 0906 0123     		movne	r3, #1
 1390 0908 DBB2     		uxtb	r3, r3
 1391 090a 002B     		cmp	r3, #0
 1392 090c F3D1     		bne	.L25
 528:../src/main.cpp **** 
 529:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1393              		.loc 1 529 0 is_stmt 1
 1394 090e 4FF00003 		mov	r3, #0
 1395 0912 BB65     		str	r3, [r7, #88]
 530:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1396              		.loc 1 530 0
 1397 0914 4FF00003 		mov	r3, #0
 1398 0918 FB65     		str	r3, [r7, #92]
 531:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1399              		.loc 1 531 0
 1400 091a 4FF40043 		mov	r3, #32768
 1401 091e 3B66     		str	r3, [r7, #96]
 532:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1402              		.loc 1 532 0
 1403 0920 4FF00203 		mov	r3, #2
 1404 0924 7B66     		str	r3, [r7, #100]
 533:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1405              		.loc 1 533 0
 1406 0926 4FF00F03 		mov	r3, #15
 1407 092a 87F86830 		strb	r3, [r7, #104]
 534:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1408              		.loc 1 534 0
 1409 092e 07F15803 		add	r3, r7, #88
 1410 0932 4FF0A040 		mov	r0, #1342177280
 1411 0936 1946     		mov	r1, r3
 1412 0938 FFF7FEFF 		bl	ADC_CommonInit
 535:../src/main.cpp **** 
 536:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1413              		.loc 1 536 0
 1414 093c 4FF40053 		mov	r3, #8192
 1415 0940 3B60     		str	r3, [r7, #0]
 537:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1416              		.loc 1 537 0
 1417 0942 4FF00003 		mov	r3, #0
 1418 0946 7B60     		str	r3, [r7, #4]
 538:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1419              		.loc 1 538 0
 1420 0948 4FF00003 		mov	r3, #0
 1421 094c BB60     		str	r3, [r7, #8]
 539:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1422              		.loc 1 539 0
 1423 094e 4FF00003 		mov	r3, #0
 1424 0952 FB60     		str	r3, [r7, #12]
 540:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1425              		.loc 1 540 0
 1426 0954 4FF00003 		mov	r3, #0
 1427 0958 3B61     		str	r3, [r7, #16]
 541:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1428              		.loc 1 541 0
 1429 095a 4FF00003 		mov	r3, #0
 1430 095e 7B61     		str	r3, [r7, #20]
 542:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1431              		.loc 1 542 0
 1432 0960 4FF00003 		mov	r3, #0
 1433 0964 BB61     		str	r3, [r7, #24]
 543:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1434              		.loc 1 543 0
 1435 0966 4FF00203 		mov	r3, #2
 1436 096a 3B77     		strb	r3, [r7, #28]
 544:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1437              		.loc 1 544 0
 1438 096c 3B46     		mov	r3, r7
 1439 096e 4FF0A040 		mov	r0, #1342177280
 1440 0972 1946     		mov	r1, r3
 1441 0974 FFF7FEFF 		bl	ADC_Init
 545:../src/main.cpp **** 
 546:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 547:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1442              		.loc 1 547 0
 1443 0978 4FF0A040 		mov	r0, #1342177280
 1444 097c 4FF00301 		mov	r1, #3
 1445 0980 4FF00102 		mov	r2, #1
 1446 0984 4FF00703 		mov	r3, #7
 1447 0988 FFF7FEFF 		bl	ADC_RegularChannelConfig
 548:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1448              		.loc 1 548 0
 1449 098c 4FF0A040 		mov	r0, #1342177280
 1450 0990 4FF00401 		mov	r1, #4
 1451 0994 4FF00202 		mov	r2, #2
 1452 0998 4FF00703 		mov	r3, #7
 1453 099c FFF7FEFF 		bl	ADC_RegularChannelConfig
 549:../src/main.cpp **** 
 550:../src/main.cpp **** 	/* Enable ADC1 */
 551:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1454              		.loc 1 551 0
 1455 09a0 4FF0A040 		mov	r0, #1342177280
 1456 09a4 4FF00101 		mov	r1, #1
 1457 09a8 FFF7FEFF 		bl	ADC_Cmd
 552:../src/main.cpp **** 
 553:../src/main.cpp **** 	/* wait for ADRDY */
 554:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1458              		.loc 1 554 0
 1459 09ac 00BF     		nop
 1460              	.L26:
 1461              		.loc 1 554 0 is_stmt 0 discriminator 1
 1462 09ae 4FF0A040 		mov	r0, #1342177280
 1463 09b2 4FF00101 		mov	r1, #1
 1464 09b6 FFF7FEFF 		bl	ADC_GetFlagStatus
 1465 09ba 0346     		mov	r3, r0
 1466 09bc 002B     		cmp	r3, #0
 1467 09be 14BF     		ite	ne
 1468 09c0 0023     		movne	r3, #0
 1469 09c2 0123     		moveq	r3, #1
 1470 09c4 DBB2     		uxtb	r3, r3
 1471 09c6 002B     		cmp	r3, #0
 1472 09c8 F1D1     		bne	.L26
 555:../src/main.cpp **** 
 556:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 557:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1473              		.loc 1 557 0 is_stmt 1
 1474 09ca 4FF0A040 		mov	r0, #1342177280
 1475 09ce FFF7FEFF 		bl	ADC_StartConversion
 558:../src/main.cpp **** 
 559:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1476              		.loc 1 559 0
 1477 09d2 4FF00100 		mov	r0, #1
 1478 09d6 4FF00101 		mov	r1, #1
 1479 09da FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 560:../src/main.cpp **** 
 561:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 562:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1480              		.loc 1 562 0
 1481 09de 07F12003 		add	r3, r7, #32
 1482 09e2 1846     		mov	r0, r3
 1483 09e4 FFF7FEFF 		bl	DMA_StructInit
 563:../src/main.cpp **** 
 564:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1484              		.loc 1 564 0
 1485 09e8 4FF00800 		mov	r0, #8
 1486 09ec C4F20200 		movt	r0, 16386
 1487 09f0 FFF7FEFF 		bl	DMA_DeInit
 565:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1488              		.loc 1 565 0
 1489 09f4 4FF04003 		mov	r3, #64
 1490 09f8 C5F20003 		movt	r3, 20480
 1491 09fc 3B62     		str	r3, [r7, #32]
 566:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1492              		.loc 1 566 0
 1493 09fe 40F20003 		movw	r3, #:lower16:adcData
 1494 0a02 C0F20003 		movt	r3, #:upper16:adcData
 1495 0a06 7B62     		str	r3, [r7, #36]
 567:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1496              		.loc 1 567 0
 1497 0a08 4FF00003 		mov	r3, #0
 1498 0a0c BB62     		str	r3, [r7, #40]
 568:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1499              		.loc 1 568 0
 1500 0a0e 4FF00203 		mov	r3, #2
 1501 0a12 BB85     		strh	r3, [r7, #44]	@ movhi
 569:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1502              		.loc 1 569 0
 1503 0a14 4FF00003 		mov	r3, #0
 1504 0a18 3B63     		str	r3, [r7, #48]
 570:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1505              		.loc 1 570 0
 1506 0a1a 4FF08003 		mov	r3, #128
 1507 0a1e 7B63     		str	r3, [r7, #52]
 571:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1508              		.loc 1 571 0
 1509 0a20 4FF40073 		mov	r3, #512
 1510 0a24 BB63     		str	r3, [r7, #56]
 572:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1511              		.loc 1 572 0
 1512 0a26 4FF40063 		mov	r3, #2048
 1513 0a2a FB63     		str	r3, [r7, #60]
 573:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1514              		.loc 1 573 0
 1515 0a2c 4FF02003 		mov	r3, #32
 1516 0a30 3B64     		str	r3, [r7, #64]
 574:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1517              		.loc 1 574 0
 1518 0a32 4FF40053 		mov	r3, #8192
 1519 0a36 7B64     		str	r3, [r7, #68]
 575:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1520              		.loc 1 575 0
 1521 0a38 4FF00003 		mov	r3, #0
 1522 0a3c BB64     		str	r3, [r7, #72]
 576:../src/main.cpp **** 
 577:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1523              		.loc 1 577 0
 1524 0a3e 07F12003 		add	r3, r7, #32
 1525 0a42 4FF00800 		mov	r0, #8
 1526 0a46 C4F20200 		movt	r0, 16386
 1527 0a4a 1946     		mov	r1, r3
 1528 0a4c FFF7FEFF 		bl	DMA_Init
 578:../src/main.cpp **** 
 579:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 580:../src/main.cpp **** 
 581:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1529              		.loc 1 581 0
 1530 0a50 4FF00B03 		mov	r3, #11
 1531 0a54 87F84C30 		strb	r3, [r7, #76]
 582:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1532              		.loc 1 582 0
 1533 0a58 4FF00203 		mov	r3, #2
 1534 0a5c 87F84D30 		strb	r3, [r7, #77]
 583:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1535              		.loc 1 583 0
 1536 0a60 4FF00003 		mov	r3, #0
 1537 0a64 87F84E30 		strb	r3, [r7, #78]
 584:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1538              		.loc 1 584 0
 1539 0a68 4FF00103 		mov	r3, #1
 1540 0a6c 87F84F30 		strb	r3, [r7, #79]
 585:../src/main.cpp **** 
 586:../src/main.cpp **** 	NVIC_Init(&nv);
 1541              		.loc 1 586 0
 1542 0a70 07F14C03 		add	r3, r7, #76
 1543 0a74 1846     		mov	r0, r3
 1544 0a76 FFF7FEFF 		bl	NVIC_Init
 587:../src/main.cpp **** 
 588:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1545              		.loc 1 588 0
 1546 0a7a 4FF00800 		mov	r0, #8
 1547 0a7e C4F20200 		movt	r0, 16386
 1548 0a82 4FF00201 		mov	r1, #2
 1549 0a86 4FF00102 		mov	r2, #1
 1550 0a8a FFF7FEFF 		bl	DMA_ITConfig
 589:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1551              		.loc 1 589 0
 1552 0a8e 4FF00800 		mov	r0, #8
 1553 0a92 C4F20200 		movt	r0, 16386
 1554 0a96 4FF00101 		mov	r1, #1
 1555 0a9a FFF7FEFF 		bl	DMA_Cmd
 590:../src/main.cpp **** 
 591:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1556              		.loc 1 591 0
 1557 0a9e 4FF0A040 		mov	r0, #1342177280
 1558 0aa2 4FF00201 		mov	r1, #2
 1559 0aa6 FFF7FEFF 		bl	ADC_DMAConfig
 592:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1560              		.loc 1 592 0
 1561 0aaa 4FF0A040 		mov	r0, #1342177280
 1562 0aae 4FF00101 		mov	r1, #1
 1563 0ab2 FFF7FEFF 		bl	ADC_DMACmd
 1564              	.LBE10:
 593:../src/main.cpp **** }
 1565              		.loc 1 593 0
 1566 0ab6 07F17007 		add	r7, r7, #112
 1567 0aba BD46     		mov	sp, r7
 1568 0abc 80BD     		pop	{r7, pc}
 1569              		.cfi_endproc
 1570              	.LFE121:
 1572 0abe 00BF     		.align	2
 1573              		.global	_Z13adc2_init_DMAv
 1574              		.thumb
 1575              		.thumb_func
 1577              	_Z13adc2_init_DMAv:
 1578              	.LFB122:
 594:../src/main.cpp **** 
 595:../src/main.cpp **** void adc2_init_DMA(void)
 596:../src/main.cpp **** {
 1579              		.loc 1 596 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 112
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583 0ac0 80B5     		push	{r7, lr}
 1584              	.LCFI32:
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 7, -8
 1587              		.cfi_offset 14, -4
 1588 0ac2 9CB0     		sub	sp, sp, #112
 1589              	.LCFI33:
 1590              		.cfi_def_cfa_offset 120
 1591 0ac4 00AF     		add	r7, sp, #0
 1592              	.LCFI34:
 1593              		.cfi_def_cfa_register 7
 1594              	.LBB11:
 597:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 598:../src/main.cpp **** 
 599:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 600:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 601:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 602:../src/main.cpp **** 
 603:../src/main.cpp **** 	/* Configure the ADC clock */
 604:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1595              		.loc 1 604 0
 1596 0ac6 4FF48870 		mov	r0, #272
 1597 0aca FFF7FEFF 		bl	RCC_ADCCLKConfig
 605:../src/main.cpp **** 	/* Enable ADC2 clock */
 606:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1598              		.loc 1 606 0
 1599 0ace 4FF08050 		mov	r0, #268435456
 1600 0ad2 4FF00101 		mov	r1, #1
 1601 0ad6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 607:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 608:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1602              		.loc 1 608 0
 1603 0ada 4FF46020 		mov	r0, #917504
 1604 0ade 4FF00101 		mov	r1, #1
 1605 0ae2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 609:../src/main.cpp **** 
 610:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 611:../src/main.cpp **** 
 612:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1606              		.loc 1 612 0
 1607 0ae6 07F15003 		add	r3, r7, #80
 1608 0aea 1846     		mov	r0, r3
 1609 0aec FFF7FEFF 		bl	GPIO_StructInit
 613:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1610              		.loc 1 613 0
 1611 0af0 4FF01003 		mov	r3, #16
 1612 0af4 3B65     		str	r3, [r7, #80]
 614:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1613              		.loc 1 614 0
 1614 0af6 4FF00303 		mov	r3, #3
 1615 0afa 87F85430 		strb	r3, [r7, #84]
 615:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1616              		.loc 1 615 0
 1617 0afe 4FF00003 		mov	r3, #0
 1618 0b02 87F85730 		strb	r3, [r7, #87]
 616:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1619              		.loc 1 616 0
 1620 0b06 4FF00303 		mov	r3, #3
 1621 0b0a 87F85530 		strb	r3, [r7, #85]
 617:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1622              		.loc 1 617 0
 1623 0b0e 07F15003 		add	r3, r7, #80
 1624 0b12 4FF09040 		mov	r0, #1207959552
 1625 0b16 1946     		mov	r1, r3
 1626 0b18 FFF7FEFF 		bl	GPIO_Init
 618:../src/main.cpp **** 
 619:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1627              		.loc 1 619 0
 1628 0b1c 07F15003 		add	r3, r7, #80
 1629 0b20 1846     		mov	r0, r3
 1630 0b22 FFF7FEFF 		bl	GPIO_StructInit
 620:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1631              		.loc 1 620 0
 1632 0b26 4FF00403 		mov	r3, #4
 1633 0b2a 3B65     		str	r3, [r7, #80]
 621:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1634              		.loc 1 621 0
 1635 0b2c 4FF00303 		mov	r3, #3
 1636 0b30 87F85430 		strb	r3, [r7, #84]
 622:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1637              		.loc 1 622 0
 1638 0b34 4FF00003 		mov	r3, #0
 1639 0b38 87F85730 		strb	r3, [r7, #87]
 623:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1640              		.loc 1 623 0
 1641 0b3c 07F15003 		add	r3, r7, #80
 1642 0b40 4FF48060 		mov	r0, #1024
 1643 0b44 C4F60000 		movt	r0, 18432
 1644 0b48 1946     		mov	r1, r3
 1645 0b4a FFF7FEFF 		bl	GPIO_Init
 624:../src/main.cpp **** 
 625:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1646              		.loc 1 625 0
 1647 0b4e 07F15003 		add	r3, r7, #80
 1648 0b52 1846     		mov	r0, r3
 1649 0b54 FFF7FEFF 		bl	GPIO_StructInit
 626:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1650              		.loc 1 626 0
 1651 0b58 4FF03003 		mov	r3, #48
 1652 0b5c 3B65     		str	r3, [r7, #80]
 627:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1653              		.loc 1 627 0
 1654 0b5e 4FF00303 		mov	r3, #3
 1655 0b62 87F85430 		strb	r3, [r7, #84]
 628:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1656              		.loc 1 628 0
 1657 0b66 4FF00003 		mov	r3, #0
 1658 0b6a 87F85730 		strb	r3, [r7, #87]
 629:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1659              		.loc 1 629 0
 1660 0b6e 07F15003 		add	r3, r7, #80
 1661 0b72 4FF40060 		mov	r0, #2048
 1662 0b76 C4F60000 		movt	r0, 18432
 1663 0b7a 1946     		mov	r1, r3
 1664 0b7c FFF7FEFF 		bl	GPIO_Init
 630:../src/main.cpp **** 
 631:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1665              		.loc 1 631 0
 1666 0b80 3B46     		mov	r3, r7
 1667 0b82 1846     		mov	r0, r3
 1668 0b84 FFF7FEFF 		bl	ADC_StructInit
 632:../src/main.cpp **** 
 633:../src/main.cpp **** 	/* Calibration procedure */
 634:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1669              		.loc 1 634 0
 1670 0b88 4FF48070 		mov	r0, #256
 1671 0b8c C5F20000 		movt	r0, 20480
 1672 0b90 4FF00101 		mov	r1, #1
 1673 0b94 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 635:../src/main.cpp **** 
 636:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 637:../src/main.cpp **** 	int foo;
 638:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1674              		.loc 1 638 0
 1675 0b98 4FF00003 		mov	r3, #0
 1676 0b9c FB66     		str	r3, [r7, #108]
 1677 0b9e 07E0     		b	.L28
 1678              	.L29:
 639:../src/main.cpp **** 	{
 640:../src/main.cpp **** 	  ++foo;
 1679              		.loc 1 640 0 discriminator 2
 1680 0ba0 FB6E     		ldr	r3, [r7, #108]
 1681 0ba2 03F10103 		add	r3, r3, #1
 1682 0ba6 FB66     		str	r3, [r7, #108]
 638:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1683              		.loc 1 638 0 discriminator 2
 1684 0ba8 FB6E     		ldr	r3, [r7, #108]
 1685 0baa 03F10103 		add	r3, r3, #1
 1686 0bae FB66     		str	r3, [r7, #108]
 1687              	.L28:
 638:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1688              		.loc 1 638 0 is_stmt 0 discriminator 1
 1689 0bb0 FA6E     		ldr	r2, [r7, #108]
 1690 0bb2 4FF6FF13 		movw	r3, #63999
 1691 0bb6 9A42     		cmp	r2, r3
 1692 0bb8 CCBF     		ite	gt
 1693 0bba 0023     		movgt	r3, #0
 1694 0bbc 0123     		movle	r3, #1
 1695 0bbe DBB2     		uxtb	r3, r3
 1696 0bc0 002B     		cmp	r3, #0
 1697 0bc2 EDD1     		bne	.L29
 641:../src/main.cpp **** 	}
 642:../src/main.cpp **** 
 643:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1698              		.loc 1 643 0 is_stmt 1
 1699 0bc4 4FF48070 		mov	r0, #256
 1700 0bc8 C5F20000 		movt	r0, 20480
 1701 0bcc 4FF00001 		mov	r1, #0
 1702 0bd0 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 644:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1703              		.loc 1 644 0
 1704 0bd4 4FF48070 		mov	r0, #256
 1705 0bd8 C5F20000 		movt	r0, 20480
 1706 0bdc FFF7FEFF 		bl	ADC_StartCalibration
 645:../src/main.cpp **** 
 646:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1707              		.loc 1 646 0
 1708 0be0 00BF     		nop
 1709              	.L30:
 1710              		.loc 1 646 0 is_stmt 0 discriminator 1
 1711 0be2 4FF48070 		mov	r0, #256
 1712 0be6 C5F20000 		movt	r0, 20480
 1713 0bea FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1714 0bee 0346     		mov	r3, r0
 1715 0bf0 002B     		cmp	r3, #0
 1716 0bf2 0CBF     		ite	eq
 1717 0bf4 0023     		moveq	r3, #0
 1718 0bf6 0123     		movne	r3, #1
 1719 0bf8 DBB2     		uxtb	r3, r3
 1720 0bfa 002B     		cmp	r3, #0
 1721 0bfc F1D1     		bne	.L30
 647:../src/main.cpp **** 
 648:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1722              		.loc 1 648 0 is_stmt 1
 1723 0bfe 4FF00003 		mov	r3, #0
 1724 0c02 BB65     		str	r3, [r7, #88]
 649:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1725              		.loc 1 649 0
 1726 0c04 4FF00003 		mov	r3, #0
 1727 0c08 FB65     		str	r3, [r7, #92]
 650:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1728              		.loc 1 650 0
 1729 0c0a 4FF40043 		mov	r3, #32768
 1730 0c0e 3B66     		str	r3, [r7, #96]
 651:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1731              		.loc 1 651 0
 1732 0c10 4FF00203 		mov	r3, #2
 1733 0c14 7B66     		str	r3, [r7, #100]
 652:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1734              		.loc 1 652 0
 1735 0c16 4FF00F03 		mov	r3, #15
 1736 0c1a 87F86830 		strb	r3, [r7, #104]
 653:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1737              		.loc 1 653 0
 1738 0c1e 07F15803 		add	r3, r7, #88
 1739 0c22 4FF48070 		mov	r0, #256
 1740 0c26 C5F20000 		movt	r0, 20480
 1741 0c2a 1946     		mov	r1, r3
 1742 0c2c FFF7FEFF 		bl	ADC_CommonInit
 654:../src/main.cpp **** 
 655:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1743              		.loc 1 655 0
 1744 0c30 4FF40053 		mov	r3, #8192
 1745 0c34 3B60     		str	r3, [r7, #0]
 656:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1746              		.loc 1 656 0
 1747 0c36 4FF00003 		mov	r3, #0
 1748 0c3a 7B60     		str	r3, [r7, #4]
 657:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1749              		.loc 1 657 0
 1750 0c3c 4FF00003 		mov	r3, #0
 1751 0c40 BB60     		str	r3, [r7, #8]
 658:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1752              		.loc 1 658 0
 1753 0c42 4FF00003 		mov	r3, #0
 1754 0c46 FB60     		str	r3, [r7, #12]
 659:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1755              		.loc 1 659 0
 1756 0c48 4FF00003 		mov	r3, #0
 1757 0c4c 3B61     		str	r3, [r7, #16]
 660:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1758              		.loc 1 660 0
 1759 0c4e 4FF00003 		mov	r3, #0
 1760 0c52 7B61     		str	r3, [r7, #20]
 661:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1761              		.loc 1 661 0
 1762 0c54 4FF00003 		mov	r3, #0
 1763 0c58 BB61     		str	r3, [r7, #24]
 662:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1764              		.loc 1 662 0
 1765 0c5a 4FF00403 		mov	r3, #4
 1766 0c5e 3B77     		strb	r3, [r7, #28]
 663:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1767              		.loc 1 663 0
 1768 0c60 3B46     		mov	r3, r7
 1769 0c62 4FF48070 		mov	r0, #256
 1770 0c66 C5F20000 		movt	r0, 20480
 1771 0c6a 1946     		mov	r1, r3
 1772 0c6c FFF7FEFF 		bl	ADC_Init
 664:../src/main.cpp **** 
 665:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 666:../src/main.cpp **** 
 667:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1773              		.loc 1 667 0
 1774 0c70 4FF48070 		mov	r0, #256
 1775 0c74 C5F20000 		movt	r0, 20480
 1776 0c78 4FF00101 		mov	r1, #1
 1777 0c7c 4FF00102 		mov	r2, #1
 1778 0c80 4FF00703 		mov	r3, #7
 1779 0c84 FFF7FEFF 		bl	ADC_RegularChannelConfig
 668:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1780              		.loc 1 668 0
 1781 0c88 4FF48070 		mov	r0, #256
 1782 0c8c C5F20000 		movt	r0, 20480
 1783 0c90 4FF00501 		mov	r1, #5
 1784 0c94 4FF00202 		mov	r2, #2
 1785 0c98 4FF00703 		mov	r3, #7
 1786 0c9c FFF7FEFF 		bl	ADC_RegularChannelConfig
 669:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1787              		.loc 1 669 0
 1788 0ca0 4FF48070 		mov	r0, #256
 1789 0ca4 C5F20000 		movt	r0, 20480
 1790 0ca8 4FF00B01 		mov	r1, #11
 1791 0cac 4FF00302 		mov	r2, #3
 1792 0cb0 4FF00703 		mov	r3, #7
 1793 0cb4 FFF7FEFF 		bl	ADC_RegularChannelConfig
 670:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1794              		.loc 1 670 0
 1795 0cb8 4FF48070 		mov	r0, #256
 1796 0cbc C5F20000 		movt	r0, 20480
 1797 0cc0 4FF00C01 		mov	r1, #12
 1798 0cc4 4FF00402 		mov	r2, #4
 1799 0cc8 4FF00703 		mov	r3, #7
 1800 0ccc FFF7FEFF 		bl	ADC_RegularChannelConfig
 671:../src/main.cpp **** 
 672:../src/main.cpp **** 	/* Enable ADC2 */
 673:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1801              		.loc 1 673 0
 1802 0cd0 4FF48070 		mov	r0, #256
 1803 0cd4 C5F20000 		movt	r0, 20480
 1804 0cd8 4FF00101 		mov	r1, #1
 1805 0cdc FFF7FEFF 		bl	ADC_Cmd
 674:../src/main.cpp **** 
 675:../src/main.cpp **** 	/* wait for ADRDY */
 676:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1806              		.loc 1 676 0
 1807 0ce0 00BF     		nop
 1808              	.L31:
 1809              		.loc 1 676 0 is_stmt 0 discriminator 1
 1810 0ce2 4FF48070 		mov	r0, #256
 1811 0ce6 C5F20000 		movt	r0, 20480
 1812 0cea 4FF00101 		mov	r1, #1
 1813 0cee FFF7FEFF 		bl	ADC_GetFlagStatus
 1814 0cf2 0346     		mov	r3, r0
 1815 0cf4 002B     		cmp	r3, #0
 1816 0cf6 14BF     		ite	ne
 1817 0cf8 0023     		movne	r3, #0
 1818 0cfa 0123     		moveq	r3, #1
 1819 0cfc DBB2     		uxtb	r3, r3
 1820 0cfe 002B     		cmp	r3, #0
 1821 0d00 EFD1     		bne	.L31
 677:../src/main.cpp **** 
 678:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 679:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1822              		.loc 1 679 0 is_stmt 1
 1823 0d02 4FF48070 		mov	r0, #256
 1824 0d06 C5F20000 		movt	r0, 20480
 1825 0d0a FFF7FEFF 		bl	ADC_StartConversion
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1826              		.loc 1 681 0
 1827 0d0e 4FF00200 		mov	r0, #2
 1828 0d12 4FF00101 		mov	r1, #1
 1829 0d16 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 682:../src/main.cpp **** 
 683:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 684:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1830              		.loc 1 684 0
 1831 0d1a 07F12003 		add	r3, r7, #32
 1832 0d1e 1846     		mov	r0, r3
 1833 0d20 FFF7FEFF 		bl	DMA_StructInit
 685:../src/main.cpp **** 
 686:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1834              		.loc 1 686 0
 1835 0d24 4FF48160 		mov	r0, #1032
 1836 0d28 C4F20200 		movt	r0, 16386
 1837 0d2c FFF7FEFF 		bl	DMA_DeInit
 687:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1838              		.loc 1 687 0
 1839 0d30 4FF4A073 		mov	r3, #320
 1840 0d34 C5F20003 		movt	r3, 20480
 1841 0d38 3B62     		str	r3, [r7, #32]
 688:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1842              		.loc 1 688 0
 1843 0d3a 40F20003 		movw	r3, #:lower16:adc2_data
 1844 0d3e C0F20003 		movt	r3, #:upper16:adc2_data
 1845 0d42 7B62     		str	r3, [r7, #36]
 689:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1846              		.loc 1 689 0
 1847 0d44 4FF00003 		mov	r3, #0
 1848 0d48 BB62     		str	r3, [r7, #40]
 690:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1849              		.loc 1 690 0
 1850 0d4a 4FF00403 		mov	r3, #4
 1851 0d4e BB85     		strh	r3, [r7, #44]	@ movhi
 691:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1852              		.loc 1 691 0
 1853 0d50 4FF00003 		mov	r3, #0
 1854 0d54 3B63     		str	r3, [r7, #48]
 692:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1855              		.loc 1 692 0
 1856 0d56 4FF08003 		mov	r3, #128
 1857 0d5a 7B63     		str	r3, [r7, #52]
 693:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1858              		.loc 1 693 0
 1859 0d5c 4FF40073 		mov	r3, #512
 1860 0d60 BB63     		str	r3, [r7, #56]
 694:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1861              		.loc 1 694 0
 1862 0d62 4FF40063 		mov	r3, #2048
 1863 0d66 FB63     		str	r3, [r7, #60]
 695:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1864              		.loc 1 695 0
 1865 0d68 4FF02003 		mov	r3, #32
 1866 0d6c 3B64     		str	r3, [r7, #64]
 696:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1867              		.loc 1 696 0
 1868 0d6e 4FF40053 		mov	r3, #8192
 1869 0d72 7B64     		str	r3, [r7, #68]
 697:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1870              		.loc 1 697 0
 1871 0d74 4FF00003 		mov	r3, #0
 1872 0d78 BB64     		str	r3, [r7, #72]
 698:../src/main.cpp **** 
 699:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 1873              		.loc 1 699 0
 1874 0d7a 07F12003 		add	r3, r7, #32
 1875 0d7e 4FF48160 		mov	r0, #1032
 1876 0d82 C4F20200 		movt	r0, 16386
 1877 0d86 1946     		mov	r1, r3
 1878 0d88 FFF7FEFF 		bl	DMA_Init
 700:../src/main.cpp **** 
 701:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 702:../src/main.cpp **** 
 703:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 1879              		.loc 1 703 0
 1880 0d8c 4FF03803 		mov	r3, #56
 1881 0d90 87F84C30 		strb	r3, [r7, #76]
 704:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1882              		.loc 1 704 0
 1883 0d94 4FF00203 		mov	r3, #2
 1884 0d98 87F84D30 		strb	r3, [r7, #77]
 705:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1885              		.loc 1 705 0
 1886 0d9c 4FF00003 		mov	r3, #0
 1887 0da0 87F84E30 		strb	r3, [r7, #78]
 706:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1888              		.loc 1 706 0
 1889 0da4 4FF00103 		mov	r3, #1
 1890 0da8 87F84F30 		strb	r3, [r7, #79]
 707:../src/main.cpp **** 
 708:../src/main.cpp **** 	NVIC_Init(&nv);
 1891              		.loc 1 708 0
 1892 0dac 07F14C03 		add	r3, r7, #76
 1893 0db0 1846     		mov	r0, r3
 1894 0db2 FFF7FEFF 		bl	NVIC_Init
 709:../src/main.cpp **** 
 710:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 1895              		.loc 1 710 0
 1896 0db6 4FF48160 		mov	r0, #1032
 1897 0dba C4F20200 		movt	r0, 16386
 1898 0dbe 4FF00201 		mov	r1, #2
 1899 0dc2 4FF00102 		mov	r2, #1
 1900 0dc6 FFF7FEFF 		bl	DMA_ITConfig
 711:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 1901              		.loc 1 711 0
 1902 0dca 4FF48160 		mov	r0, #1032
 1903 0dce C4F20200 		movt	r0, 16386
 1904 0dd2 4FF00101 		mov	r1, #1
 1905 0dd6 FFF7FEFF 		bl	DMA_Cmd
 712:../src/main.cpp **** 
 713:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 1906              		.loc 1 713 0
 1907 0dda 4FF48070 		mov	r0, #256
 1908 0dde C5F20000 		movt	r0, 20480
 1909 0de2 4FF00201 		mov	r1, #2
 1910 0de6 FFF7FEFF 		bl	ADC_DMAConfig
 714:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 1911              		.loc 1 714 0
 1912 0dea 4FF48070 		mov	r0, #256
 1913 0dee C5F20000 		movt	r0, 20480
 1914 0df2 4FF00101 		mov	r1, #1
 1915 0df6 FFF7FEFF 		bl	ADC_DMACmd
 1916              	.LBE11:
 715:../src/main.cpp **** }
 1917              		.loc 1 715 0
 1918 0dfa 07F17007 		add	r7, r7, #112
 1919 0dfe BD46     		mov	sp, r7
 1920 0e00 80BD     		pop	{r7, pc}
 1921              		.cfi_endproc
 1922              	.LFE122:
 1924 0e02 00BF     		.align	2
 1925              		.global	_Z21battery_watchdog_initv
 1926              		.thumb
 1927              		.thumb_func
 1929              	_Z21battery_watchdog_initv:
 1930              	.LFB123:
 716:../src/main.cpp **** 
 717:../src/main.cpp **** void battery_watchdog_init(void)
 718:../src/main.cpp **** {
 1931              		.loc 1 718 0
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 72
 1934              		@ frame_needed = 1, uses_anonymous_args = 0
 1935 0e04 80B5     		push	{r7, lr}
 1936              	.LCFI35:
 1937              		.cfi_def_cfa_offset 8
 1938              		.cfi_offset 7, -8
 1939              		.cfi_offset 14, -4
 1940 0e06 92B0     		sub	sp, sp, #72
 1941              	.LCFI36:
 1942              		.cfi_def_cfa_offset 80
 1943 0e08 00AF     		add	r7, sp, #0
 1944              	.LCFI37:
 1945              		.cfi_def_cfa_register 7
 1946              	.LBB12:
 719:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 720:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 721:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 722:../src/main.cpp **** 	/* Configure the ADC clock */
 723:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 1947              		.loc 1 723 0
 1948 0e0a 4FF45050 		mov	r0, #13312
 1949 0e0e C1F20000 		movt	r0, 4096
 1950 0e12 FFF7FEFF 		bl	RCC_ADCCLKConfig
 724:../src/main.cpp **** 
 725:../src/main.cpp **** 	/* Enable ADC1 clock */
 726:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 1951              		.loc 1 726 0
 1952 0e16 4FF00050 		mov	r0, #536870912
 1953 0e1a 4FF00101 		mov	r1, #1
 1954 0e1e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 727:../src/main.cpp **** 	/* ADC Channel configuration */
 728:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 729:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 1955              		.loc 1 729 0
 1956 0e22 4FF41010 		mov	r0, #2359296
 1957 0e26 4FF00101 		mov	r1, #1
 1958 0e2a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 730:../src/main.cpp **** 
 731:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 732:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1959              		.loc 1 732 0
 1960 0e2e 07F12803 		add	r3, r7, #40
 1961 0e32 1846     		mov	r0, r3
 1962 0e34 FFF7FEFF 		bl	GPIO_StructInit
 733:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 1963              		.loc 1 733 0
 1964 0e38 42F20203 		movw	r3, #8194
 1965 0e3c BB62     		str	r3, [r7, #40]
 734:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1966              		.loc 1 734 0
 1967 0e3e 4FF00303 		mov	r3, #3
 1968 0e42 87F82C30 		strb	r3, [r7, #44]
 735:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1969              		.loc 1 735 0
 1970 0e46 4FF00003 		mov	r3, #0
 1971 0e4a 87F82F30 		strb	r3, [r7, #47]
 736:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1972              		.loc 1 736 0
 1973 0e4e 07F12803 		add	r3, r7, #40
 1974 0e52 4FF48060 		mov	r0, #1024
 1975 0e56 C4F60000 		movt	r0, 18432
 1976 0e5a 1946     		mov	r1, r3
 1977 0e5c FFF7FEFF 		bl	GPIO_Init
 737:../src/main.cpp **** /*
 738:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 739:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 740:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 741:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 742:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 743:../src/main.cpp **** */
 744:../src/main.cpp **** 
 745:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1978              		.loc 1 745 0
 1979 0e60 07F10403 		add	r3, r7, #4
 1980 0e64 1846     		mov	r0, r3
 1981 0e66 FFF7FEFF 		bl	ADC_StructInit
 746:../src/main.cpp **** 
 747:../src/main.cpp **** 	/* Calibration procedure */
 748:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 1982              		.loc 1 748 0
 1983 0e6a 4FF48060 		mov	r0, #1024
 1984 0e6e C5F20000 		movt	r0, 20480
 1985 0e72 4FF00101 		mov	r1, #1
 1986 0e76 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 749:../src/main.cpp **** 
 750:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 751:../src/main.cpp **** 	int foo;
 752:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1987              		.loc 1 752 0
 1988 0e7a 4FF00003 		mov	r3, #0
 1989 0e7e 7B64     		str	r3, [r7, #68]
 1990 0e80 07E0     		b	.L33
 1991              	.L34:
 753:../src/main.cpp **** 	{
 754:../src/main.cpp **** 	  ++foo;
 1992              		.loc 1 754 0 discriminator 2
 1993 0e82 7B6C     		ldr	r3, [r7, #68]
 1994 0e84 03F10103 		add	r3, r3, #1
 1995 0e88 7B64     		str	r3, [r7, #68]
 752:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 1996              		.loc 1 752 0 discriminator 2
 1997 0e8a 7B6C     		ldr	r3, [r7, #68]
 1998 0e8c 03F10103 		add	r3, r3, #1
 1999 0e90 7B64     		str	r3, [r7, #68]
 2000              	.L33:
 752:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2001              		.loc 1 752 0 is_stmt 0 discriminator 1
 2002 0e92 7A6C     		ldr	r2, [r7, #68]
 2003 0e94 47F6FF43 		movw	r3, #31999
 2004 0e98 9A42     		cmp	r2, r3
 2005 0e9a CCBF     		ite	gt
 2006 0e9c 0023     		movgt	r3, #0
 2007 0e9e 0123     		movle	r3, #1
 2008 0ea0 DBB2     		uxtb	r3, r3
 2009 0ea2 002B     		cmp	r3, #0
 2010 0ea4 EDD1     		bne	.L34
 755:../src/main.cpp **** 	}
 756:../src/main.cpp **** 
 757:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2011              		.loc 1 757 0 is_stmt 1
 2012 0ea6 4FF48060 		mov	r0, #1024
 2013 0eaa C5F20000 		movt	r0, 20480
 2014 0eae 4FF00001 		mov	r1, #0
 2015 0eb2 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 758:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2016              		.loc 1 758 0
 2017 0eb6 4FF48060 		mov	r0, #1024
 2018 0eba C5F20000 		movt	r0, 20480
 2019 0ebe FFF7FEFF 		bl	ADC_StartCalibration
 759:../src/main.cpp **** 
 760:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2020              		.loc 1 760 0
 2021 0ec2 00BF     		nop
 2022              	.L35:
 2023              		.loc 1 760 0 is_stmt 0 discriminator 1
 2024 0ec4 4FF48060 		mov	r0, #1024
 2025 0ec8 C5F20000 		movt	r0, 20480
 2026 0ecc FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2027 0ed0 0346     		mov	r3, r0
 2028 0ed2 002B     		cmp	r3, #0
 2029 0ed4 0CBF     		ite	eq
 2030 0ed6 0023     		moveq	r3, #0
 2031 0ed8 0123     		movne	r3, #1
 2032 0eda DBB2     		uxtb	r3, r3
 2033 0edc 002B     		cmp	r3, #0
 2034 0ede F1D1     		bne	.L35
 761:../src/main.cpp **** 
 762:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2035              		.loc 1 762 0 is_stmt 1
 2036 0ee0 4FF00003 		mov	r3, #0
 2037 0ee4 3B63     		str	r3, [r7, #48]
 763:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2038              		.loc 1 763 0
 2039 0ee6 4FF44033 		mov	r3, #196608
 2040 0eea 7B63     		str	r3, [r7, #52]
 764:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2041              		.loc 1 764 0
 2042 0eec 4FF00003 		mov	r3, #0
 2043 0ef0 BB63     		str	r3, [r7, #56]
 765:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2044              		.loc 1 765 0
 2045 0ef2 4FF00003 		mov	r3, #0
 2046 0ef6 FB63     		str	r3, [r7, #60]
 766:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2047              		.loc 1 766 0
 2048 0ef8 4FF00003 		mov	r3, #0
 2049 0efc 87F84030 		strb	r3, [r7, #64]
 767:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2050              		.loc 1 767 0
 2051 0f00 07F13003 		add	r3, r7, #48
 2052 0f04 4FF48060 		mov	r0, #1024
 2053 0f08 C5F20000 		movt	r0, 20480
 2054 0f0c 1946     		mov	r1, r3
 2055 0f0e FFF7FEFF 		bl	ADC_CommonInit
 768:../src/main.cpp **** 
 769:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2056              		.loc 1 769 0
 2057 0f12 4FF40053 		mov	r3, #8192
 2058 0f16 7B60     		str	r3, [r7, #4]
 770:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2059              		.loc 1 770 0
 2060 0f18 4FF00003 		mov	r3, #0
 2061 0f1c BB60     		str	r3, [r7, #8]
 771:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2062              		.loc 1 771 0
 2063 0f1e 4FF00003 		mov	r3, #0
 2064 0f22 FB60     		str	r3, [r7, #12]
 772:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2065              		.loc 1 772 0
 2066 0f24 4FF00003 		mov	r3, #0
 2067 0f28 3B61     		str	r3, [r7, #16]
 773:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2068              		.loc 1 773 0
 2069 0f2a 4FF00003 		mov	r3, #0
 2070 0f2e 7B61     		str	r3, [r7, #20]
 774:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2071              		.loc 1 774 0
 2072 0f30 4FF00003 		mov	r3, #0
 2073 0f34 BB61     		str	r3, [r7, #24]
 775:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2074              		.loc 1 775 0
 2075 0f36 4FF00003 		mov	r3, #0
 2076 0f3a FB61     		str	r3, [r7, #28]
 776:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2077              		.loc 1 776 0
 2078 0f3c 4FF00203 		mov	r3, #2
 2079 0f40 87F82030 		strb	r3, [r7, #32]
 777:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2080              		.loc 1 777 0
 2081 0f44 07F10403 		add	r3, r7, #4
 2082 0f48 4FF48060 		mov	r0, #1024
 2083 0f4c C5F20000 		movt	r0, 20480
 2084 0f50 1946     		mov	r1, r3
 2085 0f52 FFF7FEFF 		bl	ADC_Init
 778:../src/main.cpp **** 
 779:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 780:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2086              		.loc 1 780 0
 2087 0f56 4FF48060 		mov	r0, #1024
 2088 0f5a C5F20000 		movt	r0, 20480
 2089 0f5e 4FF00101 		mov	r1, #1
 2090 0f62 4FF00102 		mov	r2, #1
 2091 0f66 4FF00703 		mov	r3, #7
 2092 0f6a FFF7FEFF 		bl	ADC_RegularChannelConfig
 781:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2093              		.loc 1 781 0
 2094 0f6e 4FF48060 		mov	r0, #1024
 2095 0f72 C5F20000 		movt	r0, 20480
 2096 0f76 4FF00501 		mov	r1, #5
 2097 0f7a 4FF00202 		mov	r2, #2
 2098 0f7e 4FF00703 		mov	r3, #7
 2099 0f82 FFF7FEFF 		bl	ADC_RegularChannelConfig
 782:../src/main.cpp **** 
 783:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2100              		.loc 1 783 0
 2101 0f86 4FF48060 		mov	r0, #1024
 2102 0f8a C5F20000 		movt	r0, 20480
 2103 0f8e 4FF00101 		mov	r1, #1
 2104 0f92 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 784:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2105              		.loc 1 784 0
 2106 0f96 4FF48060 		mov	r0, #1024
 2107 0f9a C5F20000 		movt	r0, 20480
 2108 0f9e 4FF00501 		mov	r1, #5
 2109 0fa2 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 785:../src/main.cpp **** 
 786:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 787:../src/main.cpp **** 
 788:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2110              		.loc 1 788 0
 2111 0fa6 4FF48060 		mov	r0, #1024
 2112 0faa C5F20000 		movt	r0, 20480
 2113 0fae 4FF40061 		mov	r1, #2048
 2114 0fb2 4FF00A02 		mov	r2, #10
 2115 0fb6 FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 789:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2116              		.loc 1 789 0
 2117 0fba 4FF48060 		mov	r0, #1024
 2118 0fbe C5F20000 		movt	r0, 20480
 2119 0fc2 4FF08001 		mov	r1, #128
 2120 0fc6 4FF00002 		mov	r2, #0
 2121 0fca FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 790:../src/main.cpp **** 
 791:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2122              		.loc 1 791 0
 2123 0fce 4FF48060 		mov	r0, #1024
 2124 0fd2 C5F20000 		movt	r0, 20480
 2125 0fd6 4FF44001 		mov	r1, #12582912
 2126 0fda FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 792:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 793:../src/main.cpp **** 
 794:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 795:../src/main.cpp **** 
 796:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 797:../src/main.cpp **** 
 798:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2127              		.loc 1 798 0
 2128 0fde 4FF02F03 		mov	r3, #47
 2129 0fe2 87F82430 		strb	r3, [r7, #36]
 799:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2130              		.loc 1 799 0
 2131 0fe6 4FF00003 		mov	r3, #0
 2132 0fea 87F82530 		strb	r3, [r7, #37]
 800:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2133              		.loc 1 800 0
 2134 0fee 4FF00003 		mov	r3, #0
 2135 0ff2 87F82630 		strb	r3, [r7, #38]
 801:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2136              		.loc 1 801 0
 2137 0ff6 4FF00103 		mov	r3, #1
 2138 0ffa 87F82730 		strb	r3, [r7, #39]
 802:../src/main.cpp **** 
 803:../src/main.cpp **** 	NVIC_Init(&nv);
 2139              		.loc 1 803 0
 2140 0ffe 07F12403 		add	r3, r7, #36
 2141 1002 1846     		mov	r0, r3
 2142 1004 FFF7FEFF 		bl	NVIC_Init
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 806:../src/main.cpp **** 
 807:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2143              		.loc 1 807 0
 2144 1008 4FF48060 		mov	r0, #1024
 2145 100c C5F20000 		movt	r0, 20480
 2146 1010 4FF4C071 		mov	r1, #384
 2147 1014 4FF00102 		mov	r2, #1
 2148 1018 FFF7FEFF 		bl	ADC_ITConfig
 808:../src/main.cpp **** 
 809:../src/main.cpp **** 	/* Enable ADC3 */
 810:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2149              		.loc 1 810 0
 2150 101c 4FF48060 		mov	r0, #1024
 2151 1020 C5F20000 		movt	r0, 20480
 2152 1024 4FF00101 		mov	r1, #1
 2153 1028 FFF7FEFF 		bl	ADC_Cmd
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	/* wait for ADRDY */
 813:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2154              		.loc 1 813 0
 2155 102c 00BF     		nop
 2156              	.L36:
 2157              		.loc 1 813 0 is_stmt 0 discriminator 1
 2158 102e 4FF48060 		mov	r0, #1024
 2159 1032 C5F20000 		movt	r0, 20480
 2160 1036 4FF00101 		mov	r1, #1
 2161 103a FFF7FEFF 		bl	ADC_GetFlagStatus
 2162 103e 0346     		mov	r3, r0
 2163 1040 002B     		cmp	r3, #0
 2164 1042 14BF     		ite	ne
 2165 1044 0023     		movne	r3, #0
 2166 1046 0123     		moveq	r3, #1
 2167 1048 DBB2     		uxtb	r3, r3
 2168 104a 002B     		cmp	r3, #0
 2169 104c EFD1     		bne	.L36
 814:../src/main.cpp **** 
 815:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 816:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2170              		.loc 1 816 0 is_stmt 1
 2171 104e 4FF48060 		mov	r0, #1024
 2172 1052 C5F20000 		movt	r0, 20480
 2173 1056 FFF7FEFF 		bl	ADC_StartConversion
 2174              	.LBE12:
 817:../src/main.cpp **** }
 2175              		.loc 1 817 0
 2176 105a 07F14807 		add	r7, r7, #72
 2177 105e BD46     		mov	sp, r7
 2178 1060 80BD     		pop	{r7, pc}
 2179              		.cfi_endproc
 2180              	.LFE123:
 2182 1062 00BF     		.align	2
 2183              		.global	_Z9adc1_initv
 2184              		.thumb
 2185              		.thumb_func
 2187              	_Z9adc1_initv:
 2188              	.LFB124:
 818:../src/main.cpp **** 
 819:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 820:../src/main.cpp ****  * @Args: Nothing
 821:../src/main.cpp ****  * @Return Val: Nothing
 822:../src/main.cpp ****  */
 823:../src/main.cpp **** 
 824:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 825:../src/main.cpp **** {
 2189              		.loc 1 825 0
 2190              		.cfi_startproc
 2191              		@ args = 0, pretend = 0, frame = 72
 2192              		@ frame_needed = 1, uses_anonymous_args = 0
 2193 1064 80B5     		push	{r7, lr}
 2194              	.LCFI38:
 2195              		.cfi_def_cfa_offset 8
 2196              		.cfi_offset 7, -8
 2197              		.cfi_offset 14, -4
 2198 1066 92B0     		sub	sp, sp, #72
 2199              	.LCFI39:
 2200              		.cfi_def_cfa_offset 80
 2201 1068 00AF     		add	r7, sp, #0
 2202              	.LCFI40:
 2203              		.cfi_def_cfa_register 7
 2204              	.LBB13:
 826:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 827:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 828:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 829:../src/main.cpp **** 	/* Configure the ADC clock */
 830:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2205              		.loc 1 830 0
 2206 106a 4FF48870 		mov	r0, #272
 2207 106e FFF7FEFF 		bl	RCC_ADCCLKConfig
 831:../src/main.cpp **** 
 832:../src/main.cpp **** 	/* Enable ADC1 clock */
 833:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2208              		.loc 1 833 0
 2209 1072 4FF08050 		mov	r0, #268435456
 2210 1076 4FF00101 		mov	r1, #1
 2211 107a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 834:../src/main.cpp **** 	/* ADC Channel configuration */
 835:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 836:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2212              		.loc 1 836 0
 2213 107e 4FF40030 		mov	r0, #131072
 2214 1082 4FF00101 		mov	r1, #1
 2215 1086 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 837:../src/main.cpp **** 
 838:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 839:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2216              		.loc 1 839 0
 2217 108a 4FF00403 		mov	r3, #4
 2218 108e BB62     		str	r3, [r7, #40]
 840:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2219              		.loc 1 840 0
 2220 1090 4FF00303 		mov	r3, #3
 2221 1094 87F82C30 		strb	r3, [r7, #44]
 841:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2222              		.loc 1 841 0
 2223 1098 4FF00003 		mov	r3, #0
 2224 109c 87F82F30 		strb	r3, [r7, #47]
 842:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2225              		.loc 1 842 0
 2226 10a0 07F12803 		add	r3, r7, #40
 2227 10a4 4FF09040 		mov	r0, #1207959552
 2228 10a8 1946     		mov	r1, r3
 2229 10aa FFF7FEFF 		bl	GPIO_Init
 843:../src/main.cpp **** 
 844:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2230              		.loc 1 844 0
 2231 10ae 07F10403 		add	r3, r7, #4
 2232 10b2 1846     		mov	r0, r3
 2233 10b4 FFF7FEFF 		bl	ADC_StructInit
 845:../src/main.cpp **** 
 846:../src/main.cpp **** 	/* Calibration procedure */
 847:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2234              		.loc 1 847 0
 2235 10b8 4FF0A040 		mov	r0, #1342177280
 2236 10bc 4FF00101 		mov	r1, #1
 2237 10c0 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 848:../src/main.cpp **** 
 849:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 850:../src/main.cpp **** 	int foo;
 851:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2238              		.loc 1 851 0
 2239 10c4 4FF00003 		mov	r3, #0
 2240 10c8 7B64     		str	r3, [r7, #68]
 2241 10ca 07E0     		b	.L38
 2242              	.L39:
 852:../src/main.cpp **** 	{
 853:../src/main.cpp **** 	  ++foo;
 2243              		.loc 1 853 0 discriminator 2
 2244 10cc 7B6C     		ldr	r3, [r7, #68]
 2245 10ce 03F10103 		add	r3, r3, #1
 2246 10d2 7B64     		str	r3, [r7, #68]
 851:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2247              		.loc 1 851 0 discriminator 2
 2248 10d4 7B6C     		ldr	r3, [r7, #68]
 2249 10d6 03F10103 		add	r3, r3, #1
 2250 10da 7B64     		str	r3, [r7, #68]
 2251              	.L38:
 851:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2252              		.loc 1 851 0 is_stmt 0 discriminator 1
 2253 10dc 7A6C     		ldr	r2, [r7, #68]
 2254 10de 47F6FF43 		movw	r3, #31999
 2255 10e2 9A42     		cmp	r2, r3
 2256 10e4 CCBF     		ite	gt
 2257 10e6 0023     		movgt	r3, #0
 2258 10e8 0123     		movle	r3, #1
 2259 10ea DBB2     		uxtb	r3, r3
 2260 10ec 002B     		cmp	r3, #0
 2261 10ee EDD1     		bne	.L39
 854:../src/main.cpp **** 	}
 855:../src/main.cpp **** 
 856:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2262              		.loc 1 856 0 is_stmt 1
 2263 10f0 4FF0A040 		mov	r0, #1342177280
 2264 10f4 4FF00001 		mov	r1, #0
 2265 10f8 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 857:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2266              		.loc 1 857 0
 2267 10fc 4FF0A040 		mov	r0, #1342177280
 2268 1100 FFF7FEFF 		bl	ADC_StartCalibration
 858:../src/main.cpp **** 
 859:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2269              		.loc 1 859 0
 2270 1104 00BF     		nop
 2271              	.L40:
 2272              		.loc 1 859 0 is_stmt 0 discriminator 1
 2273 1106 4FF0A040 		mov	r0, #1342177280
 2274 110a FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2275 110e 0346     		mov	r3, r0
 2276 1110 002B     		cmp	r3, #0
 2277 1112 0CBF     		ite	eq
 2278 1114 0023     		moveq	r3, #0
 2279 1116 0123     		movne	r3, #1
 2280 1118 DBB2     		uxtb	r3, r3
 2281 111a 002B     		cmp	r3, #0
 2282 111c F3D1     		bne	.L40
 860:../src/main.cpp **** 
 861:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2283              		.loc 1 861 0 is_stmt 1
 2284 111e 4FF00003 		mov	r3, #0
 2285 1122 3B63     		str	r3, [r7, #48]
 862:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2286              		.loc 1 862 0
 2287 1124 4FF00003 		mov	r3, #0
 2288 1128 7B63     		str	r3, [r7, #52]
 863:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2289              		.loc 1 863 0
 2290 112a 4FF00003 		mov	r3, #0
 2291 112e BB63     		str	r3, [r7, #56]
 864:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2292              		.loc 1 864 0
 2293 1130 4FF00003 		mov	r3, #0
 2294 1134 FB63     		str	r3, [r7, #60]
 865:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2295              		.loc 1 865 0
 2296 1136 4FF00003 		mov	r3, #0
 2297 113a 87F84030 		strb	r3, [r7, #64]
 866:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2298              		.loc 1 866 0
 2299 113e 07F13003 		add	r3, r7, #48
 2300 1142 4FF0A040 		mov	r0, #1342177280
 2301 1146 1946     		mov	r1, r3
 2302 1148 FFF7FEFF 		bl	ADC_CommonInit
 867:../src/main.cpp **** 
 868:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2303              		.loc 1 868 0
 2304 114c 4FF40053 		mov	r3, #8192
 2305 1150 7B60     		str	r3, [r7, #4]
 869:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2306              		.loc 1 869 0
 2307 1152 4FF00003 		mov	r3, #0
 2308 1156 BB60     		str	r3, [r7, #8]
 870:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2309              		.loc 1 870 0
 2310 1158 4FF00003 		mov	r3, #0
 2311 115c FB60     		str	r3, [r7, #12]
 871:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2312              		.loc 1 871 0
 2313 115e 4FF00003 		mov	r3, #0
 2314 1162 3B61     		str	r3, [r7, #16]
 872:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2315              		.loc 1 872 0
 2316 1164 4FF00003 		mov	r3, #0
 2317 1168 7B61     		str	r3, [r7, #20]
 873:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2318              		.loc 1 873 0
 2319 116a 4FF00003 		mov	r3, #0
 2320 116e BB61     		str	r3, [r7, #24]
 874:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2321              		.loc 1 874 0
 2322 1170 4FF00003 		mov	r3, #0
 2323 1174 FB61     		str	r3, [r7, #28]
 875:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2324              		.loc 1 875 0
 2325 1176 4FF00103 		mov	r3, #1
 2326 117a 87F82030 		strb	r3, [r7, #32]
 876:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2327              		.loc 1 876 0
 2328 117e 07F10403 		add	r3, r7, #4
 2329 1182 4FF0A040 		mov	r0, #1342177280
 2330 1186 1946     		mov	r1, r3
 2331 1188 FFF7FEFF 		bl	ADC_Init
 877:../src/main.cpp **** 
 878:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 879:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2332              		.loc 1 879 0
 2333 118c 4FF0A040 		mov	r0, #1342177280
 2334 1190 4FF00301 		mov	r1, #3
 2335 1194 4FF00102 		mov	r2, #1
 2336 1198 4FF00703 		mov	r3, #7
 2337 119c FFF7FEFF 		bl	ADC_RegularChannelConfig
 880:../src/main.cpp **** 
 881:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 882:../src/main.cpp **** 
 883:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 884:../src/main.cpp **** 
 885:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2338              		.loc 1 885 0
 2339 11a0 4FF01203 		mov	r3, #18
 2340 11a4 87F82430 		strb	r3, [r7, #36]
 886:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2341              		.loc 1 886 0
 2342 11a8 4FF00203 		mov	r3, #2
 2343 11ac 87F82530 		strb	r3, [r7, #37]
 887:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2344              		.loc 1 887 0
 2345 11b0 4FF00003 		mov	r3, #0
 2346 11b4 87F82630 		strb	r3, [r7, #38]
 888:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2347              		.loc 1 888 0
 2348 11b8 4FF00103 		mov	r3, #1
 2349 11bc 87F82730 		strb	r3, [r7, #39]
 889:../src/main.cpp **** 
 890:../src/main.cpp **** 	NVIC_Init(&nv);
 2350              		.loc 1 890 0
 2351 11c0 07F12403 		add	r3, r7, #36
 2352 11c4 1846     		mov	r0, r3
 2353 11c6 FFF7FEFF 		bl	NVIC_Init
 891:../src/main.cpp **** 
 892:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2354              		.loc 1 894 0
 2355 11ca 4FF0A040 		mov	r0, #1342177280
 2356 11ce 4FF00401 		mov	r1, #4
 2357 11d2 4FF00102 		mov	r2, #1
 2358 11d6 FFF7FEFF 		bl	ADC_ITConfig
 895:../src/main.cpp **** 
 896:../src/main.cpp **** 	/* Enable ADC1 */
 897:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2359              		.loc 1 897 0
 2360 11da 4FF0A040 		mov	r0, #1342177280
 2361 11de 4FF00101 		mov	r1, #1
 2362 11e2 FFF7FEFF 		bl	ADC_Cmd
 898:../src/main.cpp **** 
 899:../src/main.cpp **** 	/* wait for ADRDY */
 900:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2363              		.loc 1 900 0
 2364 11e6 00BF     		nop
 2365              	.L41:
 2366              		.loc 1 900 0 is_stmt 0 discriminator 1
 2367 11e8 4FF0A040 		mov	r0, #1342177280
 2368 11ec 4FF00101 		mov	r1, #1
 2369 11f0 FFF7FEFF 		bl	ADC_GetFlagStatus
 2370 11f4 0346     		mov	r3, r0
 2371 11f6 002B     		cmp	r3, #0
 2372 11f8 14BF     		ite	ne
 2373 11fa 0023     		movne	r3, #0
 2374 11fc 0123     		moveq	r3, #1
 2375 11fe DBB2     		uxtb	r3, r3
 2376 1200 002B     		cmp	r3, #0
 2377 1202 F1D1     		bne	.L41
 901:../src/main.cpp **** 
 902:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 903:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2378              		.loc 1 903 0 is_stmt 1
 2379 1204 4FF0A040 		mov	r0, #1342177280
 2380 1208 FFF7FEFF 		bl	ADC_StartConversion
 2381              	.LBE13:
 904:../src/main.cpp **** }
 2382              		.loc 1 904 0
 2383 120c 07F14807 		add	r7, r7, #72
 2384 1210 BD46     		mov	sp, r7
 2385 1212 80BD     		pop	{r7, pc}
 2386              		.cfi_endproc
 2387              	.LFE124:
 2389              	.Letext0:
 2390              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2391              		.file 3 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x.h"
 2392              		.file 4 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_comp.h"
 2393              		.file 5 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_dma.h"
 2394              		.file 6 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_gpio.h"
 2395              		.file 7 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_tim.h"
 2396              		.file 8 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_misc.h"
 2397              		.file 9 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f30x_adc.h"
 2398              		.file 10 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2399              		.file 11 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/Robot/encoder.h"
 2400              		.file 12 "/home/aghosh01/git/Trinity2013/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccqLa9oJ.s:24     .bss:00000000 led_iter
     /tmp/ccqLa9oJ.s:21     .bss:00000000 $d
     /tmp/ccqLa9oJ.s:31     .data:00000000 led_matrix
     /tmp/ccqLa9oJ.s:28     .data:00000000 $d
     /tmp/ccqLa9oJ.s:44     .bss:00000004 left_enc
     /tmp/ccqLa9oJ.s:50     .bss:0000002c right_enc
     /tmp/ccqLa9oJ.s:56     .bss:00000054 gyro_angle_x
     /tmp/ccqLa9oJ.s:62     .bss:00000058 gyro_bias_x
     /tmp/ccqLa9oJ.s:68     .bss:0000005c adcval
     /tmp/ccqLa9oJ.s:74     .bss:00000060 adcData
     /tmp/ccqLa9oJ.s:80     .bss:00000068 new_data
     /tmp/ccqLa9oJ.s:86     .bss:0000006c adc2_data
     /tmp/ccqLa9oJ.s:91     .bss:0000007c adc2_new_data
     /tmp/ccqLa9oJ.s:96     .bss:0000007d adc3_awd1
     /tmp/ccqLa9oJ.s:101    .bss:0000007e adc3_awd2
     /tmp/ccqLa9oJ.s:107    .bss:00000080 count
     /tmp/ccqLa9oJ.s:113    .bss:00000084 stage
     /tmp/ccqLa9oJ.s:119    .bss:00000088 drive_cmd
     /tmp/ccqLa9oJ.s:125    .bss:0000008c err
     /tmp/ccqLa9oJ.s:131    .bss:00000090 last_err
     /tmp/ccqLa9oJ.s:137    .bss:00000094 diff_err
     /tmp/ccqLa9oJ.s:143    .bss:00000098 rt
     /tmp/ccqLa9oJ.s:149    .bss:0000009c d_front
     /tmp/ccqLa9oJ.s:155    .bss:000000a0 integral
     /tmp/ccqLa9oJ.s:161    .bss:000000a4 left
     /tmp/ccqLa9oJ.s:167    .bss:000000a8 right
     /tmp/ccqLa9oJ.s:173    .bss:000000ac state
     /tmp/ccqLa9oJ.s:179    .bss:000000b0 match_time_counter
     /tmp/ccqLa9oJ.s:185    .bss:000000b4 t_firefight_start
     /tmp/ccqLa9oJ.s:191    .bss:000000b8 leds_on
     /tmp/ccqLa9oJ.s:194    .text:00000000 $t
     /tmp/ccqLa9oJ.s:199    .text:00000000 main
     /tmp/ccqLa9oJ.s:229    .text:00000010 _Z24trinity2013_waitForStartv
     /tmp/ccqLa9oJ.s:314    .text:0000009c _Z11IR_distancei
     /tmp/ccqLa9oJ.s:463    .text:00000200 $d
     /tmp/ccqLa9oJ.s:474    .text:00000220 $t
     /tmp/ccqLa9oJ.s:479    .text:00000220 _Z19imu_update_ISR_initv
     /tmp/ccqLa9oJ.s:1202   .text:000007c4 _Z14calc_gyro_biasv
     /tmp/ccqLa9oJ.s:595    .rodata:00000000 $d
     /tmp/ccqLa9oJ.s:596    .rodata:00000000 .LC0
     /tmp/ccqLa9oJ.s:605    .text:00000304 L3GD20_TIMEOUT_UserCallback
     /tmp/ccqLa9oJ.s:636    .text:0000031c _Z15brake_pins_initv
     /tmp/ccqLa9oJ.s:708    .text:00000394 _Z13ping_pin_initv
     /tmp/ccqLa9oJ.s:793    .text:00000424 _Z20timer2_timebase_initv
     /tmp/ccqLa9oJ.s:852    .text:00000478 _Z9comp_initv
     /tmp/ccqLa9oJ.s:1284   .text:00000848 $d
     /tmp/ccqLa9oJ.s:1288   .text:0000084c $t
     /tmp/ccqLa9oJ.s:1293   .text:0000084c _Z13adc1_init_DMAv
     /tmp/ccqLa9oJ.s:1577   .text:00000ac0 _Z13adc2_init_DMAv
     /tmp/ccqLa9oJ.s:1929   .text:00000e04 _Z21battery_watchdog_initv
     /tmp/ccqLa9oJ.s:2187   .text:00001064 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.a77b7af68303fe0609f9dd844a078e2a
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
printf
GPIO_StructInit
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
