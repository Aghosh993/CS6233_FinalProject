   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	_ZL5stack:
  22 0000 00000000 		.space	4
  23              		.global	led_iter
  24              		.align	2
  27              	led_iter:
  28 0004 00000000 		.space	4
  29              		.global	led_matrix
  30              		.data
  31              		.align	2
  34              	led_matrix:
  35 0000 00020000 		.word	512
  36 0004 00010000 		.word	256
  37 0008 00800000 		.word	32768
  38 000c 00200000 		.word	8192
  39 0010 00100000 		.word	4096
  40 0014 00080000 		.word	2048
  41 0018 00040000 		.word	1024
  42              		.global	left_enc
  43              		.bss
  44              		.align	2
  47              	left_enc:
  48 0008 00000000 		.space	40
  48      00000000 
  48      00000000 
  48      00000000 
  48      00000000 
  49              		.global	right_enc
  50              		.align	2
  53              	right_enc:
  54 0030 00000000 		.space	40
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	gyro_angle_x
  56              		.align	2
  59              	gyro_angle_x:
  60 0058 00000000 		.space	4
  61              		.global	gyro_bias_x
  62              		.align	2
  65              	gyro_bias_x:
  66 005c 00000000 		.space	4
  67              		.global	adcval
  68              		.align	2
  71              	adcval:
  72 0060 00000000 		.space	4
  73              		.global	adcData
  74              		.align	2
  77              	adcData:
  78 0064 00000000 		.space	8
  78      00000000 
  79              		.global	new_data
  80              		.align	2
  83              	new_data:
  84 006c 00000000 		.space	4
  85              		.global	adc2_data
  86              		.align	2
  89              	adc2_data:
  90 0070 00000000 		.space	16
  90      00000000 
  90      00000000 
  90      00000000 
  91              		.global	adc2_new_data
  94              	adc2_new_data:
  95 0080 00       		.space	1
  96              		.global	adc3_awd1
  99              	adc3_awd1:
 100 0081 00       		.space	1
 101              		.global	adc3_awd2
 104              	adc3_awd2:
 105 0082 00       		.space	1
 106              		.global	count
 107 0083 00       		.align	2
 110              	count:
 111 0084 00000000 		.space	4
 112              		.global	stage
 113              		.align	2
 116              	stage:
 117 0088 00000000 		.space	4
 118              		.global	drive_cmd
 119              		.align	2
 122              	drive_cmd:
 123 008c 00000000 		.space	4
 124              		.global	err
 125              		.align	2
 128              	err:
 129 0090 00000000 		.space	4
 130              		.global	last_err
 131              		.align	2
 134              	last_err:
 135 0094 00000000 		.space	4
 136              		.global	diff_err
 137              		.align	2
 140              	diff_err:
 141 0098 00000000 		.space	4
 142              		.global	rt
 143              		.align	2
 146              	rt:
 147 009c 00000000 		.space	4
 148              		.global	d_front
 149              		.align	2
 152              	d_front:
 153 00a0 00000000 		.space	4
 154              		.global	integral
 155              		.align	2
 158              	integral:
 159 00a4 00000000 		.space	4
 160              		.global	left
 161              		.align	2
 164              	left:
 165 00a8 00000000 		.space	4
 166              		.global	right
 167              		.align	2
 170              	right:
 171 00ac 00000000 		.space	4
 172              		.global	state
 173              		.align	2
 176              	state:
 177 00b0 00000000 		.space	4
 178              		.global	match_time_counter
 179              		.align	2
 182              	match_time_counter:
 183 00b4 00000000 		.space	4
 184              		.global	t_firefight_start
 185              		.align	2
 188              	t_firefight_start:
 189 00b8 00000000 		.space	4
 190              		.global	leds_on
 191              		.align	2
 194              	leds_on:
 195 00bc 00000000 		.space	4
 196              		.global	current_process
 197              		.align	2
 200              	current_process:
 201 00c0 00000000 		.space	4
 202              		.global	process_list
 203              		.align	2
 206              	process_list:
 207 00c4 00000000 		.space	40
 207      00000000 
 207      00000000 
 207      00000000 
 207      00000000 
 208              		.global	msp_res
 209              		.align	2
 212              	msp_res:
 213 00ec 00000000 		.space	4
 214              		.global	pList
 215              		.align	2
 218              	pList:
 219 00f0 00000000 		.space	20
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
 220              		.global	task1_iter
 221              		.align	2
 224              	task1_iter:
 225 0104 00000000 		.space	4
 226              		.global	task2_iter
 227              		.align	2
 230              	task2_iter:
 231 0108 00000000 		.space	4
 232              		.text
 233              		.align	2
 234              		.global	_Z5task1v
 235              		.thumb
 236              		.thumb_func
 238              	_Z5task1v:
 239              	.LFB111:
 240              		.file 1 "../src/main.cpp"
   1:../src/main.cpp **** #include "stm32f30x_adc.h"
   2:../src/main.cpp **** #include "stm32f30x_gpio.h"
   3:../src/main.cpp **** #include "stm32f30x_dma.h"
   4:../src/main.cpp **** 
   5:../src/main.cpp **** #include "stm32f3_discovery_l3gd20.h"
   6:../src/main.cpp **** 
   7:../src/main.cpp **** #include "encoder.h"
   8:../src/main.cpp **** #include "pwm.h"
   9:../src/main.cpp **** #include "debug.h"
  10:../src/main.cpp **** 
  11:../src/main.cpp **** #include <stdio.h>
  12:../src/main.cpp **** #include <stdint.h>
  13:../src/main.cpp **** #include <math.h>
  14:../src/main.cpp **** 
  15:../src/main.cpp **** /*
  16:../src/main.cpp ****     This program (program referring to all source and header files in this repository (repository
  17:../src/main.cpp ****     referring to https://github.com/Aghosh993/Trinity2013/tree) not containing code covered
  18:../src/main.cpp ****     under the terms of STMicroelectronic's Liberty v2 License) is free software: you can redistribu
  19:../src/main.cpp ****     it and/or modify it ("it" refers to all sections of this code as covered in the aforementioned 
  20:../src/main.cpp ****     under the terms of the GNU General Public License as published by the Free Software Foundation,
  21:../src/main.cpp ****     either version 3 of the License, or (at your option) any later version.
  22:../src/main.cpp **** 
  23:../src/main.cpp ****     This program is distributed in the hope that it will be useful,
  24:../src/main.cpp ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  25:../src/main.cpp ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26:../src/main.cpp ****     GNU General Public License for more details.
  27:../src/main.cpp **** 
  28:../src/main.cpp ****     You should have received a copy of the GNU General Public License
  29:../src/main.cpp ****     along with this program (please refer to the file COPYING in the root of
  30:../src/main.cpp ****     the repository).  If not, see <http://www.gnu.org/licenses/>.
  31:../src/main.cpp **** 
  32:../src/main.cpp ****     (c) Abhimanyu Ghosh, Polytechnic Institute of NYU (2013-2014)
  33:../src/main.cpp ****  */
  34:../src/main.cpp **** 
  35:../src/main.cpp **** /*
  36:../src/main.cpp ****  * All other code is covered by the following terms:
  37:../src/main.cpp ****  *
  38:../src/main.cpp ****  *   ******************************************************************************
  39:../src/main.cpp ****   * @attention
  40:../src/main.cpp ****   *
  41:../src/main.cpp ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  42:../src/main.cpp ****   *
  43:../src/main.cpp ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:../src/main.cpp ****   * You may not use this file except in compliance with the License.
  45:../src/main.cpp ****   * You may obtain a copy of the License at:
  46:../src/main.cpp ****   *
  47:../src/main.cpp ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:../src/main.cpp ****   *
  49:../src/main.cpp ****   * Unless required by applicable law or agreed to in writing, software
  50:../src/main.cpp ****   * distributed under the License is distributed on an "AS IS" BASIS,
  51:../src/main.cpp ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:../src/main.cpp ****   * See the License for the specific language governing permissions and
  53:../src/main.cpp ****   * limitations under the License.
  54:../src/main.cpp ****   *
  55:../src/main.cpp ****   ******************************************************************************
  56:../src/main.cpp ****  */
  57:../src/main.cpp **** 
  58:../src/main.cpp **** /*
  59:../src/main.cpp ****  * Timer usage manifest:
  60:../src/main.cpp ****  *
  61:../src/main.cpp ****  * TIM1: 16-bit PWM output mode (PE14) [for BLDC control...]
  62:../src/main.cpp ****  * TIM2: 32-bit encoder interface input (PC6, PC7) (NOT ON TRINITY BOARD DUE TO HARDWARE FAULT!!)
  63:../src/main.cpp ****  *
  64:../src/main.cpp ****  * TIM3: PWM Output Channels 1 and 2 	(PB4, PB5)
  65:../src/main.cpp ****  *
  66:../src/main.cpp ****  * TIM4: 16-bit encoder interface input (PD12, PD13) (ONLY ON TRINITY BOARD, DUE TO ABOVE!!)
  67:../src/main.cpp ****  *
  68:../src/main.cpp ****  * TIM6: LED matrix ISR
  69:../src/main.cpp ****  * TIM7: Encoder update ISR
  70:../src/main.cpp ****  *
  71:../src/main.cpp ****  * TIM8: 16-bit encoder interface input (PA0, PA1)
  72:../src/main.cpp ****  *
  73:../src/main.cpp ****  *
  74:../src/main.cpp ****  * TIM17: IMU update ISR
  75:../src/main.cpp ****  *
  76:../src/main.cpp ****  * Other pins/resources used:
  77:../src/main.cpp ****  *
  78:../src/main.cpp ****  * Analog: 	PA2: adcData[0]
  79:../src/main.cpp ****  * 			PA3: adcData[1]
  80:../src/main.cpp ****  *
  81:../src/main.cpp ****  * 			PA4: adc2_data[0]
  82:../src/main.cpp ****  * 			PC4: adc2_data[1]
  83:../src/main.cpp ****  * 			PC5: adc2_data[2]
  84:../src/main.cpp ****  * 			PB2: adc2_data[3]
  85:../src/main.cpp ****  *
  86:../src/main.cpp ****  * Digital:
  87:../src/main.cpp ****  *
  88:../src/main.cpp ****  * Debug port information: Baud Rate=115200, 8n1 UART (TTL pins PA9, PA10)
  89:../src/main.cpp ****  * 							PA9 = TX, PA10 = RX (W/respect to STM32 device)
  90:../src/main.cpp ****  *
  91:../src/main.cpp ****  * Purpose: CS6233 Final Project (Implementation of a simple round-robin scheduler and task switche
  92:../src/main.cpp ****  * 			using the STM32 SysTick interrupt)
  93:../src/main.cpp ****  *
  94:../src/main.cpp ****  */
  95:../src/main.cpp **** 
  96:../src/main.cpp **** /*
  97:../src/main.cpp ****  * ADC TODO: Use PF4 for third channel in DMA setup for ADC1, then attempt to get DMA + continuous
  98:../src/main.cpp ****  * conversion up and running in ADC3...? (Need more detailed datasheet reference...)
  99:../src/main.cpp ****  */
 100:../src/main.cpp **** 
 101:../src/main.cpp **** volatile int led_iter;
 102:../src/main.cpp **** volatile int led_matrix[7] = {GPIO_Pin_9, GPIO_Pin_8, GPIO_Pin_15, GPIO_Pin_13,
 103:../src/main.cpp **** 										GPIO_Pin_12, GPIO_Pin_11, GPIO_Pin_10};
 104:../src/main.cpp **** 
 105:../src/main.cpp **** void imu_update_ISR_init(void);
 106:../src/main.cpp **** int16_t calc_gyro_bias(void);
 107:../src/main.cpp **** 
 108:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void);
 109:../src/main.cpp **** 
 110:../src/main.cpp **** void adc1_init_DMA(void);
 111:../src/main.cpp **** void adc2_init_DMA(void);
 112:../src/main.cpp **** void battery_watchdog_init(void);
 113:../src/main.cpp **** void adc1_init(void);
 114:../src/main.cpp **** 
 115:../src/main.cpp **** void brake_pins_init(void);
 116:../src/main.cpp **** 
 117:../src/main.cpp **** void ping_pin_init(void);
 118:../src/main.cpp **** void timer2_timebase_init(void);
 119:../src/main.cpp **** 
 120:../src/main.cpp **** void comp_init(void);
 121:../src/main.cpp **** 
 122:../src/main.cpp **** void trinity2013_waitForStart(void);
 123:../src/main.cpp **** 
 124:../src/main.cpp **** float IR_distance(int IR_ADC_VAL);
 125:../src/main.cpp **** 
 126:../src/main.cpp **** // Global variables to keep track of encoders and inertial sensors:
 127:../src/main.cpp **** 
 128:../src/main.cpp **** encoderState left_enc, right_enc;
 129:../src/main.cpp **** 
 130:../src/main.cpp **** volatile float gyro_angle_x;
 131:../src/main.cpp **** int gyro_bias_x, adcval;
 132:../src/main.cpp **** 
 133:../src/main.cpp **** __IO uint32_t adcData[2];
 134:../src/main.cpp **** int new_data;
 135:../src/main.cpp **** 
 136:../src/main.cpp **** __IO uint32_t adc2_data[4];
 137:../src/main.cpp **** uint8_t adc2_new_data;
 138:../src/main.cpp **** 
 139:../src/main.cpp **** uint8_t adc3_awd1, adc3_awd2;
 140:../src/main.cpp **** 
 141:../src/main.cpp **** int count, stage;
 142:../src/main.cpp **** 
 143:../src/main.cpp **** float drive_cmd;// = 0.0f;
 144:../src/main.cpp **** float err;// = 0.0f;
 145:../src/main.cpp **** float last_err;// = 0.0f;
 146:../src/main.cpp **** float diff_err;
 147:../src/main.cpp **** float rt;// = 0.0f;
 148:../src/main.cpp **** float d_front;// = 1.0f;
 149:../src/main.cpp **** float integral;
 150:../src/main.cpp **** 
 151:../src/main.cpp **** float left, right;
 152:../src/main.cpp **** 
 153:../src/main.cpp **** int state;
 154:../src/main.cpp **** 
 155:../src/main.cpp **** float match_time_counter;
 156:../src/main.cpp **** float t_firefight_start;
 157:../src/main.cpp **** int leds_on;
 158:../src/main.cpp **** 
 159:../src/main.cpp **** // Initialize all encoder data structures to zero:
 160:../src/main.cpp **** 
 161:../src/main.cpp **** int current_process;
 162:../src/main.cpp **** process_block process_list[MAX_NUM_PROCESSES];
 163:../src/main.cpp **** 
 164:../src/main.cpp **** uint32_t msp_res;
 165:../src/main.cpp **** process_block pList;
 166:../src/main.cpp **** 
 167:../src/main.cpp **** int task1_iter, task2_iter;
 168:../src/main.cpp **** 
 169:../src/main.cpp **** void task1(void)
 170:../src/main.cpp **** {
 241              		.loc 1 170 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 80B4     		push	{r7}
 247              	.LCFI0:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 7, -4
 250 0002 00AF     		add	r7, sp, #0
 251              	.LCFI1:
 252              		.cfi_def_cfa_register 7
 171:../src/main.cpp **** 	++task1_iter;
 253              		.loc 1 171 0
 254 0004 40F20003 		movw	r3, #:lower16:task1_iter
 255 0008 C0F20003 		movt	r3, #:upper16:task1_iter
 256 000c 1B68     		ldr	r3, [r3, #0]
 257 000e 03F10102 		add	r2, r3, #1
 258 0012 40F20003 		movw	r3, #:lower16:task1_iter
 259 0016 C0F20003 		movt	r3, #:upper16:task1_iter
 260 001a 1A60     		str	r2, [r3, #0]
 172:../src/main.cpp **** }
 261              		.loc 1 172 0
 262 001c BD46     		mov	sp, r7
 263 001e 80BC     		pop	{r7}
 264 0020 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE111:
 268 0022 00BF     		.align	2
 269              		.global	_Z5task2v
 270              		.thumb
 271              		.thumb_func
 273              	_Z5task2v:
 274              	.LFB112:
 173:../src/main.cpp **** 
 174:../src/main.cpp **** void task2(void)
 175:../src/main.cpp **** {
 275              		.loc 1 175 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280 0024 80B4     		push	{r7}
 281              	.LCFI2:
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 7, -4
 284 0026 00AF     		add	r7, sp, #0
 285              	.LCFI3:
 286              		.cfi_def_cfa_register 7
 176:../src/main.cpp **** 	++task2_iter;
 287              		.loc 1 176 0
 288 0028 40F20003 		movw	r3, #:lower16:task2_iter
 289 002c C0F20003 		movt	r3, #:upper16:task2_iter
 290 0030 1B68     		ldr	r3, [r3, #0]
 291 0032 03F10102 		add	r2, r3, #1
 292 0036 40F20003 		movw	r3, #:lower16:task2_iter
 293 003a C0F20003 		movt	r3, #:upper16:task2_iter
 294 003e 1A60     		str	r2, [r3, #0]
 177:../src/main.cpp **** }
 295              		.loc 1 177 0
 296 0040 BD46     		mov	sp, r7
 297 0042 80BC     		pop	{r7}
 298 0044 7047     		bx	lr
 299              		.cfi_endproc
 300              	.LFE112:
 302 0046 00BF     		.align	2
 303              		.global	main
 304              		.thumb
 305              		.thumb_func
 307              	main:
 308              	.LFB113:
 178:../src/main.cpp **** 
 179:../src/main.cpp **** int main(void)
 180:../src/main.cpp **** {
 309              		.loc 1 180 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313 0048 80B5     		push	{r7, lr}
 314              	.LCFI4:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
 318 004a 00AF     		add	r7, sp, #0
 319              	.LCFI5:
 320              		.cfi_def_cfa_register 7
 181:../src/main.cpp **** 	SystemInit(); // Set up clocks/PLL/et. al
 321              		.loc 1 181 0
 322 004c FFF7FEFF 		bl	SystemInit
 182:../src/main.cpp **** 
 183:../src/main.cpp **** 	UART1_init(); // Debug bridge
 323              		.loc 1 183 0
 324 0050 FFF7FEFF 		bl	_Z10UART1_initv
 184:../src/main.cpp **** 
 185:../src/main.cpp **** 	task1_iter = 0;
 325              		.loc 1 185 0
 326 0054 40F20003 		movw	r3, #:lower16:task1_iter
 327 0058 C0F20003 		movt	r3, #:upper16:task1_iter
 328 005c 4FF00002 		mov	r2, #0
 329 0060 1A60     		str	r2, [r3, #0]
 186:../src/main.cpp **** 	task2_iter = 0;
 330              		.loc 1 186 0
 331 0062 40F20003 		movw	r3, #:lower16:task2_iter
 332 0066 C0F20003 		movt	r3, #:upper16:task2_iter
 333 006a 4FF00002 		mov	r2, #0
 334 006e 1A60     		str	r2, [r3, #0]
 187:../src/main.cpp **** 
 188:../src/main.cpp **** 	process_list[0].taskPointer = (void*)task1;
 335              		.loc 1 188 0
 336 0070 40F20003 		movw	r3, #:lower16:process_list
 337 0074 C0F20003 		movt	r3, #:upper16:process_list
 338 0078 40F20002 		movw	r2, #:lower16:_Z5task1v
 339 007c C0F20002 		movt	r2, #:upper16:_Z5task1v
 340 0080 5A60     		str	r2, [r3, #4]
 189:../src/main.cpp **** 	process_list[1].taskPointer = (void*)task2;
 341              		.loc 1 189 0
 342 0082 40F20003 		movw	r3, #:lower16:process_list
 343 0086 C0F20003 		movt	r3, #:upper16:process_list
 344 008a 40F20002 		movw	r2, #:lower16:_Z5task2v
 345 008e C0F20002 		movt	r2, #:upper16:_Z5task2v
 346 0092 9A61     		str	r2, [r3, #24]
 190:../src/main.cpp **** 
 191:../src/main.cpp **** 	OS_init(&pList);
 347              		.loc 1 191 0
 348 0094 40F20000 		movw	r0, #:lower16:pList
 349 0098 C0F20000 		movt	r0, #:upper16:pList
 350 009c FFF7FEFF 		bl	_Z7OS_initP13process_block
 351              	.L4:
 192:../src/main.cpp **** 
 193:../src/main.cpp **** 	while(true);
 352              		.loc 1 193 0 discriminator 1
 353 00a0 FEE7     		b	.L4
 354              		.cfi_endproc
 355              	.LFE113:
 357 00a2 00BF     		.align	2
 358              		.global	_Z24trinity2013_waitForStartv
 359              		.thumb
 360              		.thumb_func
 362              	_Z24trinity2013_waitForStartv:
 363              	.LFB114:
 194:../src/main.cpp **** 
 195:../src/main.cpp **** 	return 0; // We should never manage to get here...
 196:../src/main.cpp **** }
 197:../src/main.cpp **** 
 198:../src/main.cpp **** void trinity2013_waitForStart(void)
 199:../src/main.cpp **** {
 364              		.loc 1 199 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 00a4 80B5     		push	{r7, lr}
 369              	.LCFI6:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 00a6 82B0     		sub	sp, sp, #8
 374              	.LCFI7:
 375              		.cfi_def_cfa_offset 16
 376 00a8 00AF     		add	r7, sp, #0
 377              	.LCFI8:
 378              		.cfi_def_cfa_register 7
 379              	.LBB2:
 200:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 380              		.loc 1 200 0
 381 00aa 4FF48010 		mov	r0, #1048576
 382 00ae 4FF00101 		mov	r1, #1
 383 00b2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 201:../src/main.cpp **** 	GPIO_DeInit(GPIOD);
 384              		.loc 1 201 0
 385 00b6 4FF44060 		mov	r0, #3072
 386 00ba C4F60000 		movt	r0, 18432
 387 00be FFF7FEFF 		bl	GPIO_DeInit
 202:../src/main.cpp **** 	GPIO_InitTypeDef g;
 203:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 388              		.loc 1 203 0
 389 00c2 4FF00003 		mov	r3, #0
 390 00c6 3B71     		strb	r3, [r7, #4]
 204:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 391              		.loc 1 204 0
 392 00c8 4FF00103 		mov	r3, #1
 393 00cc BB71     		strb	r3, [r7, #6]
 205:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_3;
 394              		.loc 1 205 0
 395 00ce 4FF00803 		mov	r3, #8
 396 00d2 3B60     		str	r3, [r7, #0]
 206:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_DOWN;
 397              		.loc 1 206 0
 398 00d4 4FF00203 		mov	r3, #2
 399 00d8 FB71     		strb	r3, [r7, #7]
 207:../src/main.cpp **** 	GPIO_Init(GPIOD,&g);
 400              		.loc 1 207 0
 401 00da 3B46     		mov	r3, r7
 402 00dc 4FF44060 		mov	r0, #3072
 403 00e0 C4F60000 		movt	r0, 18432
 404 00e4 1946     		mov	r1, r3
 405 00e6 FFF7FEFF 		bl	GPIO_Init
 208:../src/main.cpp **** 
 209:../src/main.cpp **** 	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_3) == (uint8_t)Bit_RESET);
 406              		.loc 1 209 0
 407 00ea 00BF     		nop
 408              	.L6:
 409              		.loc 1 209 0 is_stmt 0 discriminator 1
 410 00ec 4FF44060 		mov	r0, #3072
 411 00f0 C4F60000 		movt	r0, 18432
 412 00f4 4FF00801 		mov	r1, #8
 413 00f8 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 414 00fc 0346     		mov	r3, r0
 415 00fe 002B     		cmp	r3, #0
 416 0100 14BF     		ite	ne
 417 0102 0023     		movne	r3, #0
 418 0104 0123     		moveq	r3, #1
 419 0106 DBB2     		uxtb	r3, r3
 420 0108 002B     		cmp	r3, #0
 421 010a EFD1     		bne	.L6
 210:../src/main.cpp **** 	match_time_counter = 0.0f;
 422              		.loc 1 210 0 is_stmt 1
 423 010c 40F20003 		movw	r3, #:lower16:match_time_counter
 424 0110 C0F20003 		movt	r3, #:upper16:match_time_counter
 425 0114 4FF00002 		mov	r2, #0
 426 0118 1A60     		str	r2, [r3, #0]	@ float
 211:../src/main.cpp **** 	state = ST_WANDER;
 427              		.loc 1 211 0
 428 011a 40F20003 		movw	r3, #:lower16:state
 429 011e C0F20003 		movt	r3, #:upper16:state
 430 0122 4FF00002 		mov	r2, #0
 431 0126 1A60     		str	r2, [r3, #0]
 432              	.LBE2:
 212:../src/main.cpp **** }
 433              		.loc 1 212 0
 434 0128 07F10807 		add	r7, r7, #8
 435 012c BD46     		mov	sp, r7
 436 012e 80BD     		pop	{r7, pc}
 437              		.cfi_endproc
 438              	.LFE114:
 440              		.global	__aeabi_f2d
 441              		.global	__aeabi_d2f
 442              		.align	2
 443              		.global	_Z11IR_distancei
 444              		.thumb
 445              		.thumb_func
 447              	_Z11IR_distancei:
 448              	.LFB115:
 213:../src/main.cpp **** 
 214:../src/main.cpp **** float IR_distance(int IR_ADC_VAL)
 215:../src/main.cpp **** {
 449              		.loc 1 215 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 16
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453 0130 80B5     		push	{r7, lr}
 454              	.LCFI9:
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 7, -8
 457              		.cfi_offset 14, -4
 458 0132 2DED028B 		fstmfdd	sp!, {d8}
 459              	.LCFI10:
 460              		.cfi_def_cfa_offset 16
 461              		.cfi_offset 80, -16
 462 0136 84B0     		sub	sp, sp, #16
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 32
 465 0138 00AF     		add	r7, sp, #0
 466              	.LCFI12:
 467              		.cfi_def_cfa_register 7
 468 013a 7860     		str	r0, [r7, #4]
 469              	.LBB3:
 216:../src/main.cpp **** 	float v_sensor_actual = (float)0.0008698 * (float)IR_ADC_VAL;
 470              		.loc 1 216 0
 471 013c D7ED017A 		flds	s15, [r7, #4]	@ int
 472 0140 B8EEE77A 		fsitos	s14, s15
 473 0144 DFED537A 		flds	s15, .L9
 474 0148 67EE277A 		fmuls	s15, s14, s15
 475 014c C7ED037A 		fsts	s15, [r7, #12]
 217:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 476              		.loc 1 217 0
 477 0150 F868     		ldr	r0, [r7, #12]	@ float
 478 0152 FFF7FEFF 		bl	__aeabi_f2d
 479 0156 0246     		mov	r2, r0
 480 0158 0B46     		mov	r3, r1
 481 015a 1046     		mov	r0, r2
 482 015c 1946     		mov	r1, r3
 483 015e 4FF00002 		mov	r2, #0
 484 0162 4FF00003 		mov	r3, #0
 485 0166 C4F21803 		movt	r3, 16408
 486 016a FFF7FEFF 		bl	pow
 487 016e 0246     		mov	r2, r0
 488 0170 0B46     		mov	r3, r1
 218:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 219:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 220:../src/main.cpp **** 			+ (float)60.24);
 489              		.loc 1 220 0
 490 0172 1046     		mov	r0, r2
 491 0174 1946     		mov	r1, r3
 492 0176 FFF7FEFF 		bl	__aeabi_d2f
 493 017a 07EE100A 		fmsr	s14, r0
 494 017e DFED467A 		flds	s15, .L9+4
 495 0182 27EE278A 		fmuls	s16, s14, s15
 217:../src/main.cpp **** 	return (((float)0.632)*((float)pow(v_sensor_actual,6))-((float)8.012)*((float)pow(v_sensor_actual,
 496              		.loc 1 217 0
 497 0186 F868     		ldr	r0, [r7, #12]	@ float
 498 0188 FFF7FEFF 		bl	__aeabi_f2d
 499 018c 0246     		mov	r2, r0
 500 018e 0B46     		mov	r3, r1
 501 0190 1046     		mov	r0, r2
 502 0192 1946     		mov	r1, r3
 503 0194 4FF00002 		mov	r2, #0
 504 0198 4FF00003 		mov	r3, #0
 505 019c C4F21403 		movt	r3, 16404
 506 01a0 FFF7FEFF 		bl	pow
 507 01a4 0246     		mov	r2, r0
 508 01a6 0B46     		mov	r3, r1
 509              		.loc 1 220 0
 510 01a8 1046     		mov	r0, r2
 511 01aa 1946     		mov	r1, r3
 512 01ac FFF7FEFF 		bl	__aeabi_d2f
 513 01b0 07EE100A 		fmsr	s14, r0
 514 01b4 DFED397A 		flds	s15, .L9+8
 515 01b8 67EE277A 		fmuls	s15, s14, s15
 516 01bc 38EE678A 		fsubs	s16, s16, s15
 218:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 517              		.loc 1 218 0
 518 01c0 F868     		ldr	r0, [r7, #12]	@ float
 519 01c2 FFF7FEFF 		bl	__aeabi_f2d
 520 01c6 0246     		mov	r2, r0
 521 01c8 0B46     		mov	r3, r1
 522 01ca 1046     		mov	r0, r2
 523 01cc 1946     		mov	r1, r3
 524 01ce 4FF00002 		mov	r2, #0
 525 01d2 4FF00003 		mov	r3, #0
 526 01d6 C4F21003 		movt	r3, 16400
 527 01da FFF7FEFF 		bl	pow
 528 01de 0246     		mov	r2, r0
 529 01e0 0B46     		mov	r3, r1
 530              		.loc 1 220 0
 531 01e2 1046     		mov	r0, r2
 532 01e4 1946     		mov	r1, r3
 533 01e6 FFF7FEFF 		bl	__aeabi_d2f
 534 01ea 07EE100A 		fmsr	s14, r0
 535 01ee DFED2C7A 		flds	s15, .L9+12
 536 01f2 67EE277A 		fmuls	s15, s14, s15
 537 01f6 38EE278A 		fadds	s16, s16, s15
 218:../src/main.cpp **** 			+ ((float)41.05)*((float)pow(v_sensor_actual,4)) - ((float)109.7)*((float)pow(v_sensor_actual,3)
 538              		.loc 1 218 0
 539 01fa F868     		ldr	r0, [r7, #12]	@ float
 540 01fc FFF7FEFF 		bl	__aeabi_f2d
 541 0200 0246     		mov	r2, r0
 542 0202 0B46     		mov	r3, r1
 543 0204 1046     		mov	r0, r2
 544 0206 1946     		mov	r1, r3
 545 0208 4FF00002 		mov	r2, #0
 546 020c 4FF00003 		mov	r3, #0
 547 0210 C4F20803 		movt	r3, 16392
 548 0214 FFF7FEFF 		bl	pow
 549 0218 0246     		mov	r2, r0
 550 021a 0B46     		mov	r3, r1
 551              		.loc 1 220 0
 552 021c 1046     		mov	r0, r2
 553 021e 1946     		mov	r1, r3
 554 0220 FFF7FEFF 		bl	__aeabi_d2f
 555 0224 07EE100A 		fmsr	s14, r0
 556 0228 DFED1E7A 		flds	s15, .L9+16
 557 022c 67EE277A 		fmuls	s15, s14, s15
 558 0230 38EE678A 		fsubs	s16, s16, s15
 219:../src/main.cpp **** 			+ ((float)164.7)*((float)pow(v_sensor_actual,2)) - (((float)138.8)*(float)v_sensor_actual)
 559              		.loc 1 219 0
 560 0234 F868     		ldr	r0, [r7, #12]	@ float
 561 0236 FFF7FEFF 		bl	__aeabi_f2d
 562 023a 0246     		mov	r2, r0
 563 023c 0B46     		mov	r3, r1
 564 023e 1046     		mov	r0, r2
 565 0240 1946     		mov	r1, r3
 566 0242 4FF00002 		mov	r2, #0
 567 0246 4FF08043 		mov	r3, #1073741824
 568 024a FFF7FEFF 		bl	pow
 569 024e 0246     		mov	r2, r0
 570 0250 0B46     		mov	r3, r1
 571              		.loc 1 220 0
 572 0252 1046     		mov	r0, r2
 573 0254 1946     		mov	r1, r3
 574 0256 FFF7FEFF 		bl	__aeabi_d2f
 575 025a 07EE100A 		fmsr	s14, r0
 576 025e DFED127A 		flds	s15, .L9+20
 577 0262 67EE277A 		fmuls	s15, s14, s15
 578 0266 38EE277A 		fadds	s14, s16, s15
 579 026a D7ED036A 		flds	s13, [r7, #12]
 580 026e DFED0F7A 		flds	s15, .L9+24
 581 0272 66EEA77A 		fmuls	s15, s13, s15
 582 0276 37EE677A 		fsubs	s14, s14, s15
 583 027a DFED0D7A 		flds	s15, .L9+28
 584 027e 77EE277A 		fadds	s15, s14, s15
 585 0282 17EE903A 		fmrs	r3, s15
 586              	.LBE3:
 221:../src/main.cpp **** }
 587              		.loc 1 221 0
 588 0286 1846     		mov	r0, r3	@ float
 589 0288 07F11007 		add	r7, r7, #16
 590 028c BD46     		mov	sp, r7
 591 028e BDEC028B 		fldmfdd	sp!, {d8}
 592 0292 80BD     		pop	{r7, pc}
 593              	.L10:
 594              		.align	2
 595              	.L9:
 596 0294 4A03643A 		.word	979632970
 597 0298 C1CA213F 		.word	1059179201
 598 029c 27310041 		.word	1090531623
 599 02a0 33332442 		.word	1109668659
 600 02a4 6666DB42 		.word	1121674854
 601 02a8 33B32443 		.word	1126478643
 602 02ac CDCC0A43 		.word	1124781261
 603 02b0 C3F57042 		.word	1114699203
 604              		.cfi_endproc
 605              	.LFE115:
 607              		.align	2
 608              		.global	_Z19imu_update_ISR_initv
 609              		.thumb
 610              		.thumb_func
 612              	_Z19imu_update_ISR_initv:
 613              	.LFB116:
 222:../src/main.cpp **** 
 223:../src/main.cpp **** // Initializes the ISR that reads inertial sensors (gyro + accelerometer)
 224:../src/main.cpp **** // Interrupt priority is HIGHEST (0)
 225:../src/main.cpp **** 
 226:../src/main.cpp **** void imu_update_ISR_init(void)
 227:../src/main.cpp **** {
 614              		.loc 1 227 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 24
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618 02b4 80B5     		push	{r7, lr}
 619              	.LCFI13:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 7, -8
 622              		.cfi_offset 14, -4
 623 02b6 86B0     		sub	sp, sp, #24
 624              	.LCFI14:
 625              		.cfi_def_cfa_offset 32
 626 02b8 00AF     		add	r7, sp, #0
 627              	.LCFI15:
 628              		.cfi_def_cfa_register 7
 629              	.LBB4:
 228:../src/main.cpp **** 	L3GD20_InitTypeDef l3gInit;
 229:../src/main.cpp **** 
 230:../src/main.cpp **** 	l3gInit.Axes_Enable = L3GD20_AXES_ENABLE;
 630              		.loc 1 230 0
 631 02ba 4FF00703 		mov	r3, #7
 632 02be BB74     		strb	r3, [r7, #18]
 231:../src/main.cpp **** 	l3gInit.Band_Width = L3GD20_BANDWIDTH_1;
 633              		.loc 1 231 0
 634 02c0 4FF00003 		mov	r3, #0
 635 02c4 FB74     		strb	r3, [r7, #19]
 232:../src/main.cpp **** 	l3gInit.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 636              		.loc 1 232 0
 637 02c6 4FF00003 		mov	r3, #0
 638 02ca 3B75     		strb	r3, [r7, #20]
 233:../src/main.cpp **** 	l3gInit.Endianness = L3GD20_BLE_LSB;
 639              		.loc 1 233 0
 640 02cc 4FF00003 		mov	r3, #0
 641 02d0 7B75     		strb	r3, [r7, #21]
 234:../src/main.cpp **** 	l3gInit.Full_Scale = L3GD20_FULLSCALE_250;
 642              		.loc 1 234 0
 643 02d2 4FF00003 		mov	r3, #0
 644 02d6 BB75     		strb	r3, [r7, #22]
 235:../src/main.cpp **** 	l3gInit.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 645              		.loc 1 235 0
 646 02d8 4FF00003 		mov	r3, #0
 647 02dc 7B74     		strb	r3, [r7, #17]
 236:../src/main.cpp **** 	l3gInit.Power_Mode = L3GD20_MODE_ACTIVE;
 648              		.loc 1 236 0
 649 02de 4FF00803 		mov	r3, #8
 650 02e2 3B74     		strb	r3, [r7, #16]
 237:../src/main.cpp **** 
 238:../src/main.cpp **** 	L3GD20_Init(&l3gInit);
 651              		.loc 1 238 0
 652 02e4 07F11003 		add	r3, r7, #16
 653 02e8 1846     		mov	r0, r3
 654 02ea FFF7FEFF 		bl	L3GD20_Init
 239:../src/main.cpp **** 	gyro_bias_x = calc_gyro_bias();
 655              		.loc 1 239 0
 656 02ee FFF7FEFF 		bl	_Z14calc_gyro_biasv
 657 02f2 0346     		mov	r3, r0
 658 02f4 1A46     		mov	r2, r3
 659 02f6 40F20003 		movw	r3, #:lower16:gyro_bias_x
 660 02fa C0F20003 		movt	r3, #:upper16:gyro_bias_x
 661 02fe 1A60     		str	r2, [r3, #0]
 240:../src/main.cpp **** 
 241:../src/main.cpp **** 	gyro_angle_x = 0;
 662              		.loc 1 241 0
 663 0300 40F20003 		movw	r3, #:lower16:gyro_angle_x
 664 0304 C0F20003 		movt	r3, #:upper16:gyro_angle_x
 665 0308 4FF00002 		mov	r2, #0
 666 030c 1A60     		str	r2, [r3, #0]	@ float
 242:../src/main.cpp **** 
 243:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 244:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM17_init;
 245:../src/main.cpp **** 
 246:../src/main.cpp **** 	nv.NVIC_IRQChannel = TIM1_TRG_COM_TIM17_IRQn;
 667              		.loc 1 246 0
 668 030e 4FF01A03 		mov	r3, #26
 669 0312 3B73     		strb	r3, [r7, #12]
 247:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 670              		.loc 1 247 0
 671 0314 4FF00003 		mov	r3, #0
 672 0318 7B73     		strb	r3, [r7, #13]
 248:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 673              		.loc 1 248 0
 674 031a 4FF00003 		mov	r3, #0
 675 031e BB73     		strb	r3, [r7, #14]
 249:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 676              		.loc 1 249 0
 677 0320 4FF00103 		mov	r3, #1
 678 0324 FB73     		strb	r3, [r7, #15]
 250:../src/main.cpp **** 
 251:../src/main.cpp **** 	NVIC_Init(&nv);
 679              		.loc 1 251 0
 680 0326 07F10C03 		add	r3, r7, #12
 681 032a 1846     		mov	r0, r3
 682 032c FFF7FEFF 		bl	NVIC_Init
 252:../src/main.cpp **** 
 253:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 683              		.loc 1 253 0
 684 0330 4FF48020 		mov	r0, #262144
 685 0334 4FF00101 		mov	r1, #1
 686 0338 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 254:../src/main.cpp **** 
 255:../src/main.cpp **** 	/*
 256:../src/main.cpp **** 	 * UPDATE_FREQUENCY = TIM_CLK/[(PRESCALER+1)(ARR+1)(REPCOUNTER+1)]
 257:../src/main.cpp **** 	 * 	  Prescaler -> PRESCALER
 258:../src/main.cpp **** 	 * 	  Period -> ARR
 259:../src/main.cpp **** 	 * 	  RepetitionCounter -> REPCOUNTER
 260:../src/main.cpp **** 	 */
 261:../src/main.cpp **** 
 262:../src/main.cpp **** 	TIM17_init.TIM_Period = (10*DT_IMU)-1;
 687              		.loc 1 262 0
 688 033c 40F28F13 		movw	r3, #399
 689 0340 7B60     		str	r3, [r7, #4]
 263:../src/main.cpp **** 	TIM17_init.TIM_Prescaler = 7199;
 690              		.loc 1 263 0
 691 0342 41F61F43 		movw	r3, #7199
 692 0346 3B80     		strh	r3, [r7, #0]	@ movhi
 264:../src/main.cpp **** 	TIM17_init.TIM_RepetitionCounter = 0;
 693              		.loc 1 264 0
 694 0348 4FF00003 		mov	r3, #0
 695 034c BB72     		strb	r3, [r7, #10]
 265:../src/main.cpp **** 	TIM17_init.TIM_ClockDivision = 0;
 696              		.loc 1 265 0
 697 034e 4FF00003 		mov	r3, #0
 698 0352 3B81     		strh	r3, [r7, #8]	@ movhi
 266:../src/main.cpp **** 	TIM17_init.TIM_CounterMode = TIM_CounterMode_Up;
 699              		.loc 1 266 0
 700 0354 4FF00003 		mov	r3, #0
 701 0358 7B80     		strh	r3, [r7, #2]	@ movhi
 267:../src/main.cpp **** 
 268:../src/main.cpp **** 	TIM_TimeBaseInit(TIM17, &TIM17_init);
 702              		.loc 1 268 0
 703 035a 3B46     		mov	r3, r7
 704 035c 4FF49040 		mov	r0, #18432
 705 0360 C4F20100 		movt	r0, 16385
 706 0364 1946     		mov	r1, r3
 707 0366 FFF7FEFF 		bl	TIM_TimeBaseInit
 269:../src/main.cpp **** 
 270:../src/main.cpp **** 	TIM_ITConfig(TIM17, TIM_IT_Update, ENABLE);
 708              		.loc 1 270 0
 709 036a 4FF49040 		mov	r0, #18432
 710 036e C4F20100 		movt	r0, 16385
 711 0372 4FF00101 		mov	r1, #1
 712 0376 4FF00102 		mov	r2, #1
 713 037a FFF7FEFF 		bl	TIM_ITConfig
 271:../src/main.cpp **** 	TIM_Cmd(TIM17, ENABLE);
 714              		.loc 1 271 0
 715 037e 4FF49040 		mov	r0, #18432
 716 0382 C4F20100 		movt	r0, 16385
 717 0386 4FF00101 		mov	r1, #1
 718 038a FFF7FEFF 		bl	TIM_Cmd
 719              	.LBE4:
 272:../src/main.cpp **** }
 720              		.loc 1 272 0
 721 038e 07F11807 		add	r7, r7, #24
 722 0392 BD46     		mov	sp, r7
 723 0394 80BD     		pop	{r7, pc}
 724              		.cfi_endproc
 725              	.LFE116:
 727              		.section	.rodata
 728              		.align	2
 729              	.LC0:
 730 0000 4C334744 		.ascii	"L3GD20 read attempt timed out... check your wiring/"
 730      32302072 
 730      65616420 
 730      61747465 
 730      6D707420 
 731 0033 636F6465 		.ascii	"code!!!\012\015\000"
 731      2121210A 
 731      0D00
 732 003d 000000   		.text
 733 0396 00BF     		.align	2
 734              		.global	L3GD20_TIMEOUT_UserCallback
 735              		.thumb
 736              		.thumb_func
 738              	L3GD20_TIMEOUT_UserCallback:
 739              	.LFB117:
 273:../src/main.cpp **** 
 274:../src/main.cpp **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 275:../src/main.cpp **** {
 740              		.loc 1 275 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0398 80B5     		push	{r7, lr}
 745              	.LCFI16:
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 039a 00AF     		add	r7, sp, #0
 750              	.LCFI17:
 751              		.cfi_def_cfa_register 7
 276:../src/main.cpp **** 	printf("L3GD20 read attempt timed out... check your wiring/code!!!\n\r");
 752              		.loc 1 276 0
 753 039c 40F20000 		movw	r0, #:lower16:.LC0
 754 03a0 C0F20000 		movt	r0, #:upper16:.LC0
 755 03a4 FFF7FEFF 		bl	printf
 277:../src/main.cpp **** 	return 0;
 756              		.loc 1 277 0
 757 03a8 4FF00003 		mov	r3, #0
 278:../src/main.cpp **** }
 758              		.loc 1 278 0
 759 03ac 1846     		mov	r0, r3
 760 03ae 80BD     		pop	{r7, pc}
 761              		.cfi_endproc
 762              	.LFE117:
 764              		.align	2
 765              		.global	_Z15brake_pins_initv
 766              		.thumb
 767              		.thumb_func
 769              	_Z15brake_pins_initv:
 770              	.LFB118:
 279:../src/main.cpp **** 
 280:../src/main.cpp **** void brake_pins_init(void)
 281:../src/main.cpp **** {
 771              		.loc 1 281 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 8
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 03b0 80B5     		push	{r7, lr}
 776              	.LCFI18:
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 03b2 82B0     		sub	sp, sp, #8
 781              	.LCFI19:
 782              		.cfi_def_cfa_offset 16
 783 03b4 00AF     		add	r7, sp, #0
 784              	.LCFI20:
 785              		.cfi_def_cfa_register 7
 786              	.LBB5:
 282:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 787              		.loc 1 282 0
 788 03b6 4FF40010 		mov	r0, #2097152
 789 03ba 4FF00101 		mov	r1, #1
 790 03be FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 283:../src/main.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 284:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 791              		.loc 1 284 0
 792 03c2 3B46     		mov	r3, r7
 793 03c4 1846     		mov	r0, r3
 794 03c6 FFF7FEFF 		bl	GPIO_StructInit
 285:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 795              		.loc 1 285 0
 796 03ca 4FF00C03 		mov	r3, #12
 797 03ce 3B60     		str	r3, [r7, #0]
 286:../src/main.cpp **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 798              		.loc 1 286 0
 799 03d0 4FF00003 		mov	r3, #0
 800 03d4 BB71     		strb	r3, [r7, #6]
 287:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801              		.loc 1 287 0
 802 03d6 4FF00103 		mov	r3, #1
 803 03da 3B71     		strb	r3, [r7, #4]
 288:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 804              		.loc 1 288 0
 805 03dc 4FF00003 		mov	r3, #0
 806 03e0 FB71     		strb	r3, [r7, #7]
 289:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_2;
 807              		.loc 1 289 0
 808 03e2 4FF00203 		mov	r3, #2
 809 03e6 7B71     		strb	r3, [r7, #5]
 290:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 810              		.loc 1 290 0
 811 03e8 3B46     		mov	r3, r7
 812 03ea 4FF48050 		mov	r0, #4096
 813 03ee C4F60000 		movt	r0, 18432
 814 03f2 1946     		mov	r1, r3
 815 03f4 FFF7FEFF 		bl	GPIO_Init
 291:../src/main.cpp **** 
 292:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_2, Bit_RESET);
 816              		.loc 1 292 0
 817 03f8 4FF48050 		mov	r0, #4096
 818 03fc C4F60000 		movt	r0, 18432
 819 0400 4FF00401 		mov	r1, #4
 820 0404 4FF00002 		mov	r2, #0
 821 0408 FFF7FEFF 		bl	GPIO_WriteBit
 293:../src/main.cpp **** 	GPIO_WriteBit(GPIOE, GPIO_Pin_3, Bit_RESET);
 822              		.loc 1 293 0
 823 040c 4FF48050 		mov	r0, #4096
 824 0410 C4F60000 		movt	r0, 18432
 825 0414 4FF00801 		mov	r1, #8
 826 0418 4FF00002 		mov	r2, #0
 827 041c FFF7FEFF 		bl	GPIO_WriteBit
 828              	.LBE5:
 294:../src/main.cpp **** }
 829              		.loc 1 294 0
 830 0420 07F10807 		add	r7, r7, #8
 831 0424 BD46     		mov	sp, r7
 832 0426 80BD     		pop	{r7, pc}
 833              		.cfi_endproc
 834              	.LFE118:
 836              		.align	2
 837              		.global	_Z13ping_pin_initv
 838              		.thumb
 839              		.thumb_func
 841              	_Z13ping_pin_initv:
 842              	.LFB119:
 295:../src/main.cpp **** /*
 296:../src/main.cpp ****  * PB0: OUTPUT
 297:../src/main.cpp ****  * PC1: INPUT
 298:../src/main.cpp ****  */
 299:../src/main.cpp **** void ping_pin_init(void)
 300:../src/main.cpp **** {
 843              		.loc 1 300 0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 8
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847 0428 80B5     		push	{r7, lr}
 848              	.LCFI21:
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 042a 82B0     		sub	sp, sp, #8
 853              	.LCFI22:
 854              		.cfi_def_cfa_offset 16
 855 042c 00AF     		add	r7, sp, #0
 856              	.LCFI23:
 857              		.cfi_def_cfa_register 7
 858              	.LBB6:
 301:../src/main.cpp **** 
 302:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOF, ENABLE);
 859              		.loc 1 302 0
 860 042e 4FF48800 		mov	r0, #4456448
 861 0432 4FF00101 		mov	r1, #1
 862 0436 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 303:../src/main.cpp **** 
 304:../src/main.cpp **** 	GPIO_InitTypeDef g;
 305:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_IN;
 863              		.loc 1 305 0
 864 043a 4FF00003 		mov	r3, #0
 865 043e 3B71     		strb	r3, [r7, #4]
 306:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_OD;
 866              		.loc 1 306 0
 867 0440 4FF00103 		mov	r3, #1
 868 0444 BB71     		strb	r3, [r7, #6]
 307:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 869              		.loc 1 307 0
 870 0446 4FF40073 		mov	r3, #512
 871 044a 3B60     		str	r3, [r7, #0]
 308:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 872              		.loc 1 308 0
 873 044c 4FF00003 		mov	r3, #0
 874 0450 FB71     		strb	r3, [r7, #7]
 309:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 875              		.loc 1 309 0
 876 0452 4FF00103 		mov	r3, #1
 877 0456 7B71     		strb	r3, [r7, #5]
 310:../src/main.cpp **** 
 311:../src/main.cpp **** 	GPIO_Init(GPIOF, &g);
 878              		.loc 1 311 0
 879 0458 3B46     		mov	r3, r7
 880 045a 4FF4A050 		mov	r0, #5120
 881 045e C4F60000 		movt	r0, 18432
 882 0462 1946     		mov	r1, r3
 883 0464 FFF7FEFF 		bl	GPIO_Init
 312:../src/main.cpp **** 
 313:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_OUT;
 884              		.loc 1 313 0
 885 0468 4FF00103 		mov	r3, #1
 886 046c 3B71     		strb	r3, [r7, #4]
 314:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 887              		.loc 1 314 0
 888 046e 4FF00003 		mov	r3, #0
 889 0472 BB71     		strb	r3, [r7, #6]
 315:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_0;
 890              		.loc 1 315 0
 891 0474 4FF00103 		mov	r3, #1
 892 0478 3B60     		str	r3, [r7, #0]
 316:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 893              		.loc 1 316 0
 894 047a 4FF00003 		mov	r3, #0
 895 047e FB71     		strb	r3, [r7, #7]
 317:../src/main.cpp **** 	g.GPIO_Speed = GPIO_Speed_Level_1;
 896              		.loc 1 317 0
 897 0480 4FF00103 		mov	r3, #1
 898 0484 7B71     		strb	r3, [r7, #5]
 318:../src/main.cpp **** 
 319:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 899              		.loc 1 319 0
 900 0486 3B46     		mov	r3, r7
 901 0488 4FF48060 		mov	r0, #1024
 902 048c C4F60000 		movt	r0, 18432
 903 0490 1946     		mov	r1, r3
 904 0492 FFF7FEFF 		bl	GPIO_Init
 320:../src/main.cpp **** 
 321:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 905              		.loc 1 321 0
 906 0496 4FF00100 		mov	r0, #1
 907 049a 4FF00101 		mov	r1, #1
 908 049e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 322:../src/main.cpp **** 	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOF, EXTI_PinSource9);
 909              		.loc 1 322 0
 910 04a2 4FF00500 		mov	r0, #5
 911 04a6 4FF00901 		mov	r1, #9
 912 04aa FFF7FEFF 		bl	SYSCFG_EXTILineConfig
 913              	.LBE6:
 323:../src/main.cpp **** 
 324:../src/main.cpp **** }
 914              		.loc 1 324 0
 915 04ae 07F10807 		add	r7, r7, #8
 916 04b2 BD46     		mov	sp, r7
 917 04b4 80BD     		pop	{r7, pc}
 918              		.cfi_endproc
 919              	.LFE119:
 921 04b6 00BF     		.align	2
 922              		.global	_Z20timer2_timebase_initv
 923              		.thumb
 924              		.thumb_func
 926              	_Z20timer2_timebase_initv:
 927              	.LFB120:
 325:../src/main.cpp **** 
 326:../src/main.cpp **** void timer2_timebase_init(void)
 327:../src/main.cpp **** {
 928              		.loc 1 327 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 16
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 04b8 80B5     		push	{r7, lr}
 933              	.LCFI24:
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 04ba 84B0     		sub	sp, sp, #16
 938              	.LCFI25:
 939              		.cfi_def_cfa_offset 24
 940 04bc 00AF     		add	r7, sp, #0
 941              	.LCFI26:
 942              		.cfi_def_cfa_register 7
 943              	.LBB7:
 328:../src/main.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 329:../src/main.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 944              		.loc 1 329 0
 945 04be 4FF00100 		mov	r0, #1
 946 04c2 4FF00101 		mov	r1, #1
 947 04c6 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 330:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 17999;//1899;//0xFFFFFFFF;//1899;//0xFFFFFFFF;
 948              		.loc 1 330 0
 949 04ca 44F24F63 		movw	r3, #17999
 950 04ce BB60     		str	r3, [r7, #8]
 331:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 951              		.loc 1 331 0
 952 04d0 4FF00003 		mov	r3, #0
 953 04d4 BB73     		strb	r3, [r7, #14]
 332:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 71;//0;//71;
 954              		.loc 1 332 0
 955 04d6 4FF04703 		mov	r3, #71
 956 04da BB80     		strh	r3, [r7, #4]	@ movhi
 333:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 957              		.loc 1 333 0
 958 04dc 4FF00003 		mov	r3, #0
 959 04e0 BB81     		strh	r3, [r7, #12]	@ movhi
 334:../src/main.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 960              		.loc 1 334 0
 961 04e2 4FF00003 		mov	r3, #0
 962 04e6 FB80     		strh	r3, [r7, #6]	@ movhi
 335:../src/main.cpp **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 963              		.loc 1 335 0
 964 04e8 07F10403 		add	r3, r7, #4
 965 04ec 4FF08040 		mov	r0, #1073741824
 966 04f0 1946     		mov	r1, r3
 967 04f2 FFF7FEFF 		bl	TIM_TimeBaseInit
 336:../src/main.cpp **** 
 337:../src/main.cpp **** 	TIM_SetCounter(TIM2, 0);
 968              		.loc 1 337 0
 969 04f6 4FF08040 		mov	r0, #1073741824
 970 04fa 4FF00001 		mov	r1, #0
 971 04fe FFF7FEFF 		bl	TIM_SetCounter
 972              	.LBE7:
 338:../src/main.cpp **** }
 973              		.loc 1 338 0
 974 0502 07F11007 		add	r7, r7, #16
 975 0506 BD46     		mov	sp, r7
 976 0508 80BD     		pop	{r7, pc}
 977              		.cfi_endproc
 978              	.LFE120:
 980 050a 00BF     		.align	2
 981              		.global	_Z9comp_initv
 982              		.thumb
 983              		.thumb_func
 985              	_Z9comp_initv:
 986              	.LFB121:
 339:../src/main.cpp **** 
 340:../src/main.cpp **** /*
 341:../src/main.cpp ****  * Use COMP2, COMP3, COMP4, COMP7
 342:../src/main.cpp ****  * COMP2: 	Input->		PA7  (IO1)
 343:../src/main.cpp ****  * 			Output->	PB9
 344:../src/main.cpp ****  * COMP3:	Input->		PB14 (IO1)
 345:../src/main.cpp ****  * 			Output->	PA8
 346:../src/main.cpp ****  * COMP4:	Input->		PE7  (IO2)
 347:../src/main.cpp ****  * 			Output->	PB1
 348:../src/main.cpp ****  * COMP7:	Input->		PC1	 (IO2)
 349:../src/main.cpp ****  * 			Output->	PC2
 350:../src/main.cpp ****  */
 351:../src/main.cpp **** 
 352:../src/main.cpp **** void comp_init(void)
 353:../src/main.cpp **** {
 987              		.loc 1 353 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 40
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991 050c 80B5     		push	{r7, lr}
 992              	.LCFI27:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 050e 8AB0     		sub	sp, sp, #40
 997              	.LCFI28:
 998              		.cfi_def_cfa_offset 48
 999 0510 00AF     		add	r7, sp, #0
 1000              	.LCFI29:
 1001              		.cfi_def_cfa_register 7
 1002              	.LBB8:
 354:../src/main.cpp **** 	//COMP2 Init:
 355:../src/main.cpp **** 
 356:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1003              		.loc 1 356 0
 1004 0512 4FF00100 		mov	r0, #1
 1005 0516 4FF00101 		mov	r1, #1
 1006 051a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 357:../src/main.cpp **** 
 358:../src/main.cpp **** 	GPIO_InitTypeDef g;
 359:../src/main.cpp **** 
 360:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1007              		.loc 1 360 0
 1008 051e 4FF00303 		mov	r3, #3
 1009 0522 87F82430 		strb	r3, [r7, #36]
 361:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1010              		.loc 1 361 0
 1011 0526 4FF00003 		mov	r3, #0
 1012 052a 87F82730 		strb	r3, [r7, #39]
 362:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7;
 1013              		.loc 1 362 0
 1014 052e 4FF08003 		mov	r3, #128
 1015 0532 3B62     		str	r3, [r7, #32]
 363:../src/main.cpp **** 
 364:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1016              		.loc 1 364 0
 1017 0534 4FF40030 		mov	r0, #131072
 1018 0538 4FF00101 		mov	r1, #1
 1019 053c FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 365:../src/main.cpp **** 	GPIO_Init(GPIOA, &g);
 1020              		.loc 1 365 0
 1021 0540 07F12003 		add	r3, r7, #32
 1022 0544 4FF09040 		mov	r0, #1207959552
 1023 0548 1946     		mov	r1, r3
 1024 054a FFF7FEFF 		bl	GPIO_Init
 366:../src/main.cpp **** 
 367:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1025              		.loc 1 367 0
 1026 054e 4FF00203 		mov	r3, #2
 1027 0552 87F82430 		strb	r3, [r7, #36]
 368:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1028              		.loc 1 368 0
 1029 0556 4FF00003 		mov	r3, #0
 1030 055a 87F82630 		strb	r3, [r7, #38]
 369:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1031              		.loc 1 369 0
 1032 055e 4FF00003 		mov	r3, #0
 1033 0562 87F82730 		strb	r3, [r7, #39]
 370:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_9;
 1034              		.loc 1 370 0
 1035 0566 4FF40073 		mov	r3, #512
 1036 056a 3B62     		str	r3, [r7, #32]
 371:../src/main.cpp **** 
 372:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_8);
 1037              		.loc 1 372 0
 1038 056c 4FF48060 		mov	r0, #1024
 1039 0570 C4F60000 		movt	r0, 18432
 1040 0574 4FF00901 		mov	r1, #9
 1041 0578 4FF00802 		mov	r2, #8
 1042 057c FFF7FEFF 		bl	GPIO_PinAFConfig
 373:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1043              		.loc 1 373 0
 1044 0580 07F12003 		add	r3, r7, #32
 1045 0584 4FF48060 		mov	r0, #1024
 1046 0588 C4F60000 		movt	r0, 18432
 1047 058c 1946     		mov	r1, r3
 1048 058e FFF7FEFF 		bl	GPIO_Init
 374:../src/main.cpp **** 
 375:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1049              		.loc 1 375 0
 1050 0592 4FF00000 		mov	r0, #0
 1051 0596 FFF7FEFF 		bl	RCC_PCLK2Config
 376:../src/main.cpp **** 
 377:../src/main.cpp **** 	COMP_InitTypeDef c;
 378:../src/main.cpp **** 
 379:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1052              		.loc 1 379 0
 1053 059a 4FF03003 		mov	r3, #48
 1054 059e 7B60     		str	r3, [r7, #4]
 380:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1055              		.loc 1 380 0
 1056 05a0 4FF00003 		mov	r3, #0
 1057 05a4 BB60     		str	r3, [r7, #8]
 381:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1058              		.loc 1 381 0
 1059 05a6 4FF00403 		mov	r3, #4
 1060 05aa FB61     		str	r3, [r7, #28]
 382:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1061              		.loc 1 382 0
 1062 05ac 4FF00003 		mov	r3, #0
 1063 05b0 FB60     		str	r3, [r7, #12]
 383:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1064              		.loc 1 383 0
 1065 05b2 4FF00003 		mov	r3, #0
 1066 05b6 7B61     		str	r3, [r7, #20]
 384:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1067              		.loc 1 384 0
 1068 05b8 4FF48033 		mov	r3, #65536
 1069 05bc BB61     		str	r3, [r7, #24]
 385:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1070              		.loc 1 385 0
 1071 05be 4FF00003 		mov	r3, #0
 1072 05c2 3B61     		str	r3, [r7, #16]
 386:../src/main.cpp **** 
 387:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP2, &c);
 1073              		.loc 1 387 0
 1074 05c4 07F10403 		add	r3, r7, #4
 1075 05c8 4FF00400 		mov	r0, #4
 1076 05cc 1946     		mov	r1, r3
 1077 05ce FFF7FEFF 		bl	COMP_Init
 388:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP2, ENABLE);
 1078              		.loc 1 388 0
 1079 05d2 4FF00400 		mov	r0, #4
 1080 05d6 4FF00101 		mov	r1, #1
 1081 05da FFF7FEFF 		bl	COMP_Cmd
 389:../src/main.cpp **** 
 390:../src/main.cpp **** 	//COMP3 Init:
 391:../src/main.cpp **** 
 392:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1082              		.loc 1 392 0
 1083 05de 4FF00100 		mov	r0, #1
 1084 05e2 4FF00101 		mov	r1, #1
 1085 05e6 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 393:../src/main.cpp **** 
 394:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1086              		.loc 1 394 0
 1087 05ea 4FF00303 		mov	r3, #3
 1088 05ee 87F82430 		strb	r3, [r7, #36]
 395:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1089              		.loc 1 395 0
 1090 05f2 4FF00003 		mov	r3, #0
 1091 05f6 87F82730 		strb	r3, [r7, #39]
 396:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_14; 	//PB14 = INPUT
 1092              		.loc 1 396 0
 1093 05fa 4FF48043 		mov	r3, #16384
 1094 05fe 3B62     		str	r3, [r7, #32]
 397:../src/main.cpp **** 
 398:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOA, ENABLE);
 1095              		.loc 1 398 0
 1096 0600 4FF4C020 		mov	r0, #393216
 1097 0604 4FF00101 		mov	r1, #1
 1098 0608 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 399:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1099              		.loc 1 399 0
 1100 060c 07F12003 		add	r3, r7, #32
 1101 0610 4FF48060 		mov	r0, #1024
 1102 0614 C4F60000 		movt	r0, 18432
 1103 0618 1946     		mov	r1, r3
 1104 061a FFF7FEFF 		bl	GPIO_Init
 400:../src/main.cpp **** 
 401:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1105              		.loc 1 401 0
 1106 061e 4FF00203 		mov	r3, #2
 1107 0622 87F82430 		strb	r3, [r7, #36]
 402:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1108              		.loc 1 402 0
 1109 0626 4FF00003 		mov	r3, #0
 1110 062a 87F82630 		strb	r3, [r7, #38]
 403:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1111              		.loc 1 403 0
 1112 062e 4FF00003 		mov	r3, #0
 1113 0632 87F82730 		strb	r3, [r7, #39]
 404:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_8; 	//PA8 = OUTPUT
 1114              		.loc 1 404 0
 1115 0636 4FF48073 		mov	r3, #256
 1116 063a 3B62     		str	r3, [r7, #32]
 405:../src/main.cpp **** 
 406:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_7);
 1117              		.loc 1 406 0
 1118 063c 4FF40060 		mov	r0, #2048
 1119 0640 C4F60000 		movt	r0, 18432
 1120 0644 4FF00801 		mov	r1, #8
 1121 0648 4FF00702 		mov	r2, #7
 1122 064c FFF7FEFF 		bl	GPIO_PinAFConfig
 407:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1123              		.loc 1 407 0
 1124 0650 07F12003 		add	r3, r7, #32
 1125 0654 4FF40060 		mov	r0, #2048
 1126 0658 C4F60000 		movt	r0, 18432
 1127 065c 1946     		mov	r1, r3
 1128 065e FFF7FEFF 		bl	GPIO_Init
 408:../src/main.cpp **** 
 409:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1129              		.loc 1 409 0
 1130 0662 4FF00000 		mov	r0, #0
 1131 0666 FFF7FEFF 		bl	RCC_PCLK2Config
 410:../src/main.cpp **** 
 411:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1132              		.loc 1 411 0
 1133 066a 4FF03003 		mov	r3, #48
 1134 066e 7B60     		str	r3, [r7, #4]
 412:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO1;
 1135              		.loc 1 412 0
 1136 0670 4FF00003 		mov	r3, #0
 1137 0674 BB60     		str	r3, [r7, #8]
 413:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1138              		.loc 1 413 0
 1139 0676 4FF00403 		mov	r3, #4
 1140 067a FB61     		str	r3, [r7, #28]
 414:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1141              		.loc 1 414 0
 1142 067c 4FF00003 		mov	r3, #0
 1143 0680 FB60     		str	r3, [r7, #12]
 415:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1144              		.loc 1 415 0
 1145 0682 4FF00003 		mov	r3, #0
 1146 0686 7B61     		str	r3, [r7, #20]
 416:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1147              		.loc 1 416 0
 1148 0688 4FF48033 		mov	r3, #65536
 1149 068c BB61     		str	r3, [r7, #24]
 417:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1150              		.loc 1 417 0
 1151 068e 4FF00003 		mov	r3, #0
 1152 0692 3B61     		str	r3, [r7, #16]
 418:../src/main.cpp **** 
 419:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP3, &c);
 1153              		.loc 1 419 0
 1154 0694 07F10403 		add	r3, r7, #4
 1155 0698 4FF00800 		mov	r0, #8
 1156 069c 1946     		mov	r1, r3
 1157 069e FFF7FEFF 		bl	COMP_Init
 420:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP3, ENABLE);
 1158              		.loc 1 420 0
 1159 06a2 4FF00800 		mov	r0, #8
 1160 06a6 4FF00101 		mov	r1, #1
 1161 06aa FFF7FEFF 		bl	COMP_Cmd
 421:../src/main.cpp **** 
 422:../src/main.cpp **** 	//COMP4 Init:
 423:../src/main.cpp **** 
 424:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1162              		.loc 1 424 0
 1163 06ae 4FF00100 		mov	r0, #1
 1164 06b2 4FF00101 		mov	r1, #1
 1165 06b6 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 425:../src/main.cpp **** 
 426:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1166              		.loc 1 426 0
 1167 06ba 4FF00303 		mov	r3, #3
 1168 06be 87F82430 		strb	r3, [r7, #36]
 427:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1169              		.loc 1 427 0
 1170 06c2 4FF00003 		mov	r3, #0
 1171 06c6 87F82730 		strb	r3, [r7, #39]
 428:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_7; 	//PE7 = INPUT
 1172              		.loc 1 428 0
 1173 06ca 4FF08003 		mov	r3, #128
 1174 06ce 3B62     		str	r3, [r7, #32]
 429:../src/main.cpp **** 
 430:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE | RCC_AHBPeriph_GPIOB, ENABLE);
 1175              		.loc 1 430 0
 1176 06d0 4FF41010 		mov	r0, #2359296
 1177 06d4 4FF00101 		mov	r1, #1
 1178 06d8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 431:../src/main.cpp **** 	GPIO_Init(GPIOE, &g);
 1179              		.loc 1 431 0
 1180 06dc 07F12003 		add	r3, r7, #32
 1181 06e0 4FF48050 		mov	r0, #4096
 1182 06e4 C4F60000 		movt	r0, 18432
 1183 06e8 1946     		mov	r1, r3
 1184 06ea FFF7FEFF 		bl	GPIO_Init
 432:../src/main.cpp **** 
 433:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1185              		.loc 1 433 0
 1186 06ee 4FF00203 		mov	r3, #2
 1187 06f2 87F82430 		strb	r3, [r7, #36]
 434:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1188              		.loc 1 434 0
 1189 06f6 4FF00003 		mov	r3, #0
 1190 06fa 87F82630 		strb	r3, [r7, #38]
 435:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1191              		.loc 1 435 0
 1192 06fe 4FF00003 		mov	r3, #0
 1193 0702 87F82730 		strb	r3, [r7, #39]
 436:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PB1 = OUTPUT
 1194              		.loc 1 436 0
 1195 0706 4FF00203 		mov	r3, #2
 1196 070a 3B62     		str	r3, [r7, #32]
 437:../src/main.cpp **** 
 438:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_8);
 1197              		.loc 1 438 0
 1198 070c 4FF48060 		mov	r0, #1024
 1199 0710 C4F60000 		movt	r0, 18432
 1200 0714 4FF00101 		mov	r1, #1
 1201 0718 4FF00802 		mov	r2, #8
 1202 071c FFF7FEFF 		bl	GPIO_PinAFConfig
 439:../src/main.cpp **** 	GPIO_Init(GPIOB, &g);
 1203              		.loc 1 439 0
 1204 0720 07F12003 		add	r3, r7, #32
 1205 0724 4FF48060 		mov	r0, #1024
 1206 0728 C4F60000 		movt	r0, 18432
 1207 072c 1946     		mov	r1, r3
 1208 072e FFF7FEFF 		bl	GPIO_Init
 440:../src/main.cpp **** 
 441:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1209              		.loc 1 441 0
 1210 0732 4FF00000 		mov	r0, #0
 1211 0736 FFF7FEFF 		bl	RCC_PCLK2Config
 442:../src/main.cpp **** 
 443:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1212              		.loc 1 443 0
 1213 073a 4FF03003 		mov	r3, #48
 1214 073e 7B60     		str	r3, [r7, #4]
 444:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1215              		.loc 1 444 0
 1216 0740 4FF08003 		mov	r3, #128
 1217 0744 BB60     		str	r3, [r7, #8]
 445:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1218              		.loc 1 445 0
 1219 0746 4FF00403 		mov	r3, #4
 1220 074a FB61     		str	r3, [r7, #28]
 446:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1221              		.loc 1 446 0
 1222 074c 4FF00003 		mov	r3, #0
 1223 0750 FB60     		str	r3, [r7, #12]
 447:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1224              		.loc 1 447 0
 1225 0752 4FF00003 		mov	r3, #0
 1226 0756 7B61     		str	r3, [r7, #20]
 448:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1227              		.loc 1 448 0
 1228 0758 4FF48033 		mov	r3, #65536
 1229 075c BB61     		str	r3, [r7, #24]
 449:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1230              		.loc 1 449 0
 1231 075e 4FF00003 		mov	r3, #0
 1232 0762 3B61     		str	r3, [r7, #16]
 450:../src/main.cpp **** 
 451:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP4, &c);
 1233              		.loc 1 451 0
 1234 0764 07F10403 		add	r3, r7, #4
 1235 0768 4FF00C00 		mov	r0, #12
 1236 076c 1946     		mov	r1, r3
 1237 076e FFF7FEFF 		bl	COMP_Init
 452:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP4, ENABLE);
 1238              		.loc 1 452 0
 1239 0772 4FF00C00 		mov	r0, #12
 1240 0776 4FF00101 		mov	r1, #1
 1241 077a FFF7FEFF 		bl	COMP_Cmd
 453:../src/main.cpp **** 
 454:../src/main.cpp **** 	//COMP7 Init:
 455:../src/main.cpp **** 
 456:../src/main.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 1242              		.loc 1 456 0
 1243 077e 4FF00100 		mov	r0, #1
 1244 0782 4FF00101 		mov	r1, #1
 1245 0786 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 457:../src/main.cpp **** 
 458:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AN;
 1246              		.loc 1 458 0
 1247 078a 4FF00303 		mov	r3, #3
 1248 078e 87F82430 		strb	r3, [r7, #36]
 459:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1249              		.loc 1 459 0
 1250 0792 4FF00003 		mov	r3, #0
 1251 0796 87F82730 		strb	r3, [r7, #39]
 460:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_1; 	//PC1 = INPUT
 1252              		.loc 1 460 0
 1253 079a 4FF00203 		mov	r3, #2
 1254 079e 3B62     		str	r3, [r7, #32]
 461:../src/main.cpp **** 
 462:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 1255              		.loc 1 462 0
 1256 07a0 4FF40020 		mov	r0, #524288
 1257 07a4 4FF00101 		mov	r1, #1
 1258 07a8 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 463:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1259              		.loc 1 463 0
 1260 07ac 07F12003 		add	r3, r7, #32
 1261 07b0 4FF40060 		mov	r0, #2048
 1262 07b4 C4F60000 		movt	r0, 18432
 1263 07b8 1946     		mov	r1, r3
 1264 07ba FFF7FEFF 		bl	GPIO_Init
 464:../src/main.cpp **** 
 465:../src/main.cpp **** 	g.GPIO_Mode = GPIO_Mode_AF;
 1265              		.loc 1 465 0
 1266 07be 4FF00203 		mov	r3, #2
 1267 07c2 87F82430 		strb	r3, [r7, #36]
 466:../src/main.cpp **** 	g.GPIO_OType = GPIO_OType_PP;
 1268              		.loc 1 466 0
 1269 07c6 4FF00003 		mov	r3, #0
 1270 07ca 87F82630 		strb	r3, [r7, #38]
 467:../src/main.cpp **** 	g.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1271              		.loc 1 467 0
 1272 07ce 4FF00003 		mov	r3, #0
 1273 07d2 87F82730 		strb	r3, [r7, #39]
 468:../src/main.cpp **** 	g.GPIO_Pin = GPIO_Pin_2; 	//PC2 = OUTPUT
 1274              		.loc 1 468 0
 1275 07d6 4FF00403 		mov	r3, #4
 1276 07da 3B62     		str	r3, [r7, #32]
 469:../src/main.cpp **** 
 470:../src/main.cpp **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_3);////////!!!!!!!!!!
 1277              		.loc 1 470 0
 1278 07dc 4FF40060 		mov	r0, #2048
 1279 07e0 C4F60000 		movt	r0, 18432
 1280 07e4 4FF00201 		mov	r1, #2
 1281 07e8 4FF00302 		mov	r2, #3
 1282 07ec FFF7FEFF 		bl	GPIO_PinAFConfig
 471:../src/main.cpp **** 	GPIO_Init(GPIOC, &g);
 1283              		.loc 1 471 0
 1284 07f0 07F12003 		add	r3, r7, #32
 1285 07f4 4FF40060 		mov	r0, #2048
 1286 07f8 C4F60000 		movt	r0, 18432
 1287 07fc 1946     		mov	r1, r3
 1288 07fe FFF7FEFF 		bl	GPIO_Init
 472:../src/main.cpp **** 
 473:../src/main.cpp **** 	RCC_PCLK2Config(RCC_HCLK_Div1);
 1289              		.loc 1 473 0
 1290 0802 4FF00000 		mov	r0, #0
 1291 0806 FFF7FEFF 		bl	RCC_PCLK2Config
 474:../src/main.cpp **** 
 475:../src/main.cpp **** 	c.COMP_InvertingInput = COMP_InvertingInput_VREFINT;
 1292              		.loc 1 475 0
 1293 080a 4FF03003 		mov	r3, #48
 1294 080e 7B60     		str	r3, [r7, #4]
 476:../src/main.cpp **** 	c.COMP_NonInvertingInput = COMP_NonInvertingInput_IO2;
 1295              		.loc 1 476 0
 1296 0810 4FF08003 		mov	r3, #128
 1297 0814 BB60     		str	r3, [r7, #8]
 477:../src/main.cpp **** 	c.COMP_Mode = COMP_Mode_MediumSpeed;
 1298              		.loc 1 477 0
 1299 0816 4FF00403 		mov	r3, #4
 1300 081a FB61     		str	r3, [r7, #28]
 478:../src/main.cpp **** 	c.COMP_Output = COMP_Output_None;
 1301              		.loc 1 478 0
 1302 081c 4FF00003 		mov	r3, #0
 1303 0820 FB60     		str	r3, [r7, #12]
 479:../src/main.cpp **** 	c.COMP_OutputPol = COMP_OutputPol_NonInverted;
 1304              		.loc 1 479 0
 1305 0822 4FF00003 		mov	r3, #0
 1306 0826 7B61     		str	r3, [r7, #20]
 480:../src/main.cpp **** 	c.COMP_Hysteresis = COMP_Hysteresis_Low;
 1307              		.loc 1 480 0
 1308 0828 4FF48033 		mov	r3, #65536
 1309 082c BB61     		str	r3, [r7, #24]
 481:../src/main.cpp **** 	c.COMP_BlankingSrce = COMP_BlankingSrce_None;
 1310              		.loc 1 481 0
 1311 082e 4FF00003 		mov	r3, #0
 1312 0832 3B61     		str	r3, [r7, #16]
 482:../src/main.cpp **** 
 483:../src/main.cpp **** 	COMP_Init(COMP_Selection_COMP7, &c);
 1313              		.loc 1 483 0
 1314 0834 07F10403 		add	r3, r7, #4
 1315 0838 4FF01800 		mov	r0, #24
 1316 083c 1946     		mov	r1, r3
 1317 083e FFF7FEFF 		bl	COMP_Init
 484:../src/main.cpp **** 	COMP_Cmd(COMP_Selection_COMP7, ENABLE);
 1318              		.loc 1 484 0
 1319 0842 4FF01800 		mov	r0, #24
 1320 0846 4FF00101 		mov	r1, #1
 1321 084a FFF7FEFF 		bl	COMP_Cmd
 1322              	.LBE8:
 485:../src/main.cpp **** }
 1323              		.loc 1 485 0
 1324 084e 07F12807 		add	r7, r7, #40
 1325 0852 BD46     		mov	sp, r7
 1326 0854 80BD     		pop	{r7, pc}
 1327              		.cfi_endproc
 1328              	.LFE121:
 1330 0856 00BF     		.align	2
 1331              		.global	_Z14calc_gyro_biasv
 1332              		.thumb
 1333              		.thumb_func
 1335              	_Z14calc_gyro_biasv:
 1336              	.LFB122:
 486:../src/main.cpp **** 
 487:../src/main.cpp **** int16_t calc_gyro_bias(void)
 488:../src/main.cpp **** {
 1337              		.loc 1 488 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 16
 1340              		@ frame_needed = 1, uses_anonymous_args = 0
 1341 0858 80B5     		push	{r7, lr}
 1342              	.LCFI30:
 1343              		.cfi_def_cfa_offset 8
 1344              		.cfi_offset 7, -8
 1345              		.cfi_offset 14, -4
 1346 085a 84B0     		sub	sp, sp, #16
 1347              	.LCFI31:
 1348              		.cfi_def_cfa_offset 24
 1349 085c 00AF     		add	r7, sp, #0
 1350              	.LCFI32:
 1351              		.cfi_def_cfa_register 7
 1352              	.LBB9:
 489:../src/main.cpp **** 	int i = 0;
 1353              		.loc 1 489 0
 1354 085e 4FF00003 		mov	r3, #0
 1355 0862 FB60     		str	r3, [r7, #12]
 490:../src/main.cpp **** 	int accum_x = 0;
 1356              		.loc 1 490 0
 1357 0864 4FF00003 		mov	r3, #0
 1358 0868 BB60     		str	r3, [r7, #8]
 491:../src/main.cpp **** 
 492:../src/main.cpp **** 	union twosComp {		// Takes care of two's complement conversion
 493:../src/main.cpp **** 		uint16_t un_signed;
 494:../src/main.cpp **** 		int16_t output;
 495:../src/main.cpp **** 	} convert;
 496:../src/main.cpp **** 
 497:../src/main.cpp **** 	uint8_t bytes[2];
 498:../src/main.cpp **** 
 499:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1359              		.loc 1 499 0
 1360 086a 4FF00003 		mov	r3, #0
 1361 086e FB60     		str	r3, [r7, #12]
 1362 0870 19E0     		b	.L19
 1363              	.L20:
 500:../src/main.cpp **** 	{
 501:../src/main.cpp **** 		L3GD20_Read(bytes, L3GD20_OUT_X_L_ADDR, 2);
 1364              		.loc 1 501 0 discriminator 2
 1365 0872 3B46     		mov	r3, r7
 1366 0874 1846     		mov	r0, r3
 1367 0876 4FF02801 		mov	r1, #40
 1368 087a 4FF00202 		mov	r2, #2
 1369 087e FFF7FEFF 		bl	L3GD20_Read
 502:../src/main.cpp **** 		convert.un_signed = (bytes[1] << 8) | bytes[0];
 1370              		.loc 1 502 0 discriminator 2
 1371 0882 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1372 0884 4FEA0323 		lsl	r3, r3, #8
 1373 0888 9AB2     		uxth	r2, r3
 1374 088a 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 1375 088c 1343     		orrs	r3, r3, r2
 1376 088e 9BB2     		uxth	r3, r3
 1377 0890 9BB2     		uxth	r3, r3
 1378 0892 BB80     		strh	r3, [r7, #4]	@ movhi
 503:../src/main.cpp **** 		accum_x += convert.output;
 1379              		.loc 1 503 0 discriminator 2
 1380 0894 BB88     		ldrh	r3, [r7, #4]
 1381 0896 1BB2     		sxth	r3, r3
 1382 0898 BA68     		ldr	r2, [r7, #8]
 1383 089a D318     		adds	r3, r2, r3
 1384 089c BB60     		str	r3, [r7, #8]
 499:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1385              		.loc 1 499 0 discriminator 2
 1386 089e FB68     		ldr	r3, [r7, #12]
 1387 08a0 03F10103 		add	r3, r3, #1
 1388 08a4 FB60     		str	r3, [r7, #12]
 1389              	.L19:
 499:../src/main.cpp **** 	for(i = 0; i < 250; ++i)
 1390              		.loc 1 499 0 is_stmt 0 discriminator 1
 1391 08a6 FB68     		ldr	r3, [r7, #12]
 1392 08a8 F92B     		cmp	r3, #249
 1393 08aa CCBF     		ite	gt
 1394 08ac 0023     		movgt	r3, #0
 1395 08ae 0123     		movle	r3, #1
 1396 08b0 DBB2     		uxtb	r3, r3
 1397 08b2 002B     		cmp	r3, #0
 1398 08b4 DDD1     		bne	.L20
 504:../src/main.cpp **** 	}
 505:../src/main.cpp **** 	return (int16_t)((float)accum_x/(float)250);
 1399              		.loc 1 505 0 is_stmt 1
 1400 08b6 D7ED027A 		flds	s15, [r7, #8]	@ int
 1401 08ba B8EEE77A 		fsitos	s14, s15
 1402 08be DFED077A 		flds	s15, .L22
 1403 08c2 C7EE277A 		fdivs	s15, s14, s15
 1404 08c6 FDEEE77A 		ftosizs	s15, s15
 1405 08ca 17EE903A 		fmrs	r3, s15	@ int
 1406 08ce 9BB2     		uxth	r3, r3
 1407 08d0 1BB2     		sxth	r3, r3
 1408              	.LBE9:
 506:../src/main.cpp **** }
 1409              		.loc 1 506 0
 1410 08d2 1846     		mov	r0, r3
 1411 08d4 07F11007 		add	r7, r7, #16
 1412 08d8 BD46     		mov	sp, r7
 1413 08da 80BD     		pop	{r7, pc}
 1414              	.L23:
 1415              		.align	2
 1416              	.L22:
 1417 08dc 00007A43 		.word	1132068864
 1418              		.cfi_endproc
 1419              	.LFE122:
 1421              		.align	2
 1422              		.global	_Z13adc1_init_DMAv
 1423              		.thumb
 1424              		.thumb_func
 1426              	_Z13adc1_init_DMAv:
 1427              	.LFB123:
 507:../src/main.cpp **** 
 508:../src/main.cpp **** /*
 509:../src/main.cpp ****  * Initializes the DMA controller to transfer data between the ADC (ADC1) and
 510:../src/main.cpp ****  * a user-supplied location in memory
 511:../src/main.cpp ****  * @Args: None
 512:../src/main.cpp ****  * @Return Val: None
 513:../src/main.cpp ****  */
 514:../src/main.cpp **** 
 515:../src/main.cpp **** void adc1_init_DMA(void)
 516:../src/main.cpp **** {
 1428              		.loc 1 516 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 112
 1431              		@ frame_needed = 1, uses_anonymous_args = 0
 1432 08e0 80B5     		push	{r7, lr}
 1433              	.LCFI33:
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437 08e2 9CB0     		sub	sp, sp, #112
 1438              	.LCFI34:
 1439              		.cfi_def_cfa_offset 120
 1440 08e4 00AF     		add	r7, sp, #0
 1441              	.LCFI35:
 1442              		.cfi_def_cfa_register 7
 1443              	.LBB10:
 517:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 518:../src/main.cpp **** 
 519:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 520:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 521:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 522:../src/main.cpp **** 
 523:../src/main.cpp **** 	/* Configure the ADC clock */
 524:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 1444              		.loc 1 524 0
 1445 08e6 4FF48870 		mov	r0, #272
 1446 08ea FFF7FEFF 		bl	RCC_ADCCLKConfig
 525:../src/main.cpp **** 	/* Enable ADC1 clock */
 526:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1447              		.loc 1 526 0
 1448 08ee 4FF08050 		mov	r0, #268435456
 1449 08f2 4FF00101 		mov	r1, #1
 1450 08f6 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 527:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 528:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 1451              		.loc 1 528 0
 1452 08fa 4FF40030 		mov	r0, #131072
 1453 08fe 4FF00101 		mov	r1, #1
 1454 0902 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 529:../src/main.cpp **** 
 530:../src/main.cpp **** 	// Configure ADC Channel 3 and 4 as analog inputs
 531:../src/main.cpp **** 
 532:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1455              		.loc 1 532 0
 1456 0906 07F15003 		add	r3, r7, #80
 1457 090a 1846     		mov	r0, r3
 1458 090c FFF7FEFF 		bl	GPIO_StructInit
 533:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 1459              		.loc 1 533 0
 1460 0910 4FF00C03 		mov	r3, #12
 1461 0914 3B65     		str	r3, [r7, #80]
 534:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1462              		.loc 1 534 0
 1463 0916 4FF00303 		mov	r3, #3
 1464 091a 87F85430 		strb	r3, [r7, #84]
 535:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1465              		.loc 1 535 0
 1466 091e 4FF00003 		mov	r3, #0
 1467 0922 87F85730 		strb	r3, [r7, #87]
 536:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1468              		.loc 1 536 0
 1469 0926 07F15003 		add	r3, r7, #80
 1470 092a 4FF09040 		mov	r0, #1207959552
 1471 092e 1946     		mov	r1, r3
 1472 0930 FFF7FEFF 		bl	GPIO_Init
 537:../src/main.cpp **** 
 538:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1473              		.loc 1 538 0
 1474 0934 3B46     		mov	r3, r7
 1475 0936 1846     		mov	r0, r3
 1476 0938 FFF7FEFF 		bl	ADC_StructInit
 539:../src/main.cpp **** 
 540:../src/main.cpp **** 	/* Calibration procedure */
 541:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 1477              		.loc 1 541 0
 1478 093c 4FF0A040 		mov	r0, #1342177280
 1479 0940 4FF00101 		mov	r1, #1
 1480 0944 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 542:../src/main.cpp **** 
 543:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 544:../src/main.cpp **** 	int foo;
 545:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1481              		.loc 1 545 0
 1482 0948 4FF00003 		mov	r3, #0
 1483 094c FB66     		str	r3, [r7, #108]
 1484 094e 07E0     		b	.L25
 1485              	.L26:
 546:../src/main.cpp **** 	{
 547:../src/main.cpp **** 	  ++foo;
 1486              		.loc 1 547 0 discriminator 2
 1487 0950 FB6E     		ldr	r3, [r7, #108]
 1488 0952 03F10103 		add	r3, r3, #1
 1489 0956 FB66     		str	r3, [r7, #108]
 545:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1490              		.loc 1 545 0 discriminator 2
 1491 0958 FB6E     		ldr	r3, [r7, #108]
 1492 095a 03F10103 		add	r3, r3, #1
 1493 095e FB66     		str	r3, [r7, #108]
 1494              	.L25:
 545:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1495              		.loc 1 545 0 is_stmt 0 discriminator 1
 1496 0960 FA6E     		ldr	r2, [r7, #108]
 1497 0962 4FF6FF13 		movw	r3, #63999
 1498 0966 9A42     		cmp	r2, r3
 1499 0968 CCBF     		ite	gt
 1500 096a 0023     		movgt	r3, #0
 1501 096c 0123     		movle	r3, #1
 1502 096e DBB2     		uxtb	r3, r3
 1503 0970 002B     		cmp	r3, #0
 1504 0972 EDD1     		bne	.L26
 548:../src/main.cpp **** 	}
 549:../src/main.cpp **** 
 550:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 1505              		.loc 1 550 0 is_stmt 1
 1506 0974 4FF0A040 		mov	r0, #1342177280
 1507 0978 4FF00001 		mov	r1, #0
 1508 097c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 551:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 1509              		.loc 1 551 0
 1510 0980 4FF0A040 		mov	r0, #1342177280
 1511 0984 FFF7FEFF 		bl	ADC_StartCalibration
 552:../src/main.cpp **** 
 553:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 1512              		.loc 1 553 0
 1513 0988 00BF     		nop
 1514              	.L27:
 1515              		.loc 1 553 0 is_stmt 0 discriminator 1
 1516 098a 4FF0A040 		mov	r0, #1342177280
 1517 098e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1518 0992 0346     		mov	r3, r0
 1519 0994 002B     		cmp	r3, #0
 1520 0996 0CBF     		ite	eq
 1521 0998 0023     		moveq	r3, #0
 1522 099a 0123     		movne	r3, #1
 1523 099c DBB2     		uxtb	r3, r3
 1524 099e 002B     		cmp	r3, #0
 1525 09a0 F3D1     		bne	.L27
 554:../src/main.cpp **** 
 555:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1526              		.loc 1 555 0 is_stmt 1
 1527 09a2 4FF00003 		mov	r3, #0
 1528 09a6 BB65     		str	r3, [r7, #88]
 556:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode; //ADC_Clock_SynClkModeDiv2
 1529              		.loc 1 556 0
 1530 09a8 4FF00003 		mov	r3, #0
 1531 09ac FB65     		str	r3, [r7, #92]
 557:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1532              		.loc 1 557 0
 1533 09ae 4FF40043 		mov	r3, #32768
 1534 09b2 3B66     		str	r3, [r7, #96]
 558:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1535              		.loc 1 558 0
 1536 09b4 4FF00203 		mov	r3, #2
 1537 09b8 7B66     		str	r3, [r7, #100]
 559:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;//0xF;
 1538              		.loc 1 559 0
 1539 09ba 4FF00F03 		mov	r3, #15
 1540 09be 87F86830 		strb	r3, [r7, #104]
 560:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 1541              		.loc 1 560 0
 1542 09c2 07F15803 		add	r3, r7, #88
 1543 09c6 4FF0A040 		mov	r0, #1342177280
 1544 09ca 1946     		mov	r1, r3
 1545 09cc FFF7FEFF 		bl	ADC_CommonInit
 561:../src/main.cpp **** 
 562:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1546              		.loc 1 562 0
 1547 09d0 4FF40053 		mov	r3, #8192
 1548 09d4 3B60     		str	r3, [r7, #0]
 563:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1549              		.loc 1 563 0
 1550 09d6 4FF00003 		mov	r3, #0
 1551 09da 7B60     		str	r3, [r7, #4]
 564:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1552              		.loc 1 564 0
 1553 09dc 4FF00003 		mov	r3, #0
 1554 09e0 BB60     		str	r3, [r7, #8]
 565:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1555              		.loc 1 565 0
 1556 09e2 4FF00003 		mov	r3, #0
 1557 09e6 FB60     		str	r3, [r7, #12]
 566:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1558              		.loc 1 566 0
 1559 09e8 4FF00003 		mov	r3, #0
 1560 09ec 3B61     		str	r3, [r7, #16]
 567:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1561              		.loc 1 567 0
 1562 09ee 4FF00003 		mov	r3, #0
 1563 09f2 7B61     		str	r3, [r7, #20]
 568:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1564              		.loc 1 568 0
 1565 09f4 4FF00003 		mov	r3, #0
 1566 09f8 BB61     		str	r3, [r7, #24]
 569:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 1567              		.loc 1 569 0
 1568 09fa 4FF00203 		mov	r3, #2
 1569 09fe 3B77     		strb	r3, [r7, #28]
 570:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 1570              		.loc 1 570 0
 1571 0a00 3B46     		mov	r3, r7
 1572 0a02 4FF0A040 		mov	r0, #1342177280
 1573 0a06 1946     		mov	r1, r3
 1574 0a08 FFF7FEFF 		bl	ADC_Init
 571:../src/main.cpp **** 
 572:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 573:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1575              		.loc 1 573 0
 1576 0a0c 4FF0A040 		mov	r0, #1342177280
 1577 0a10 4FF00301 		mov	r1, #3
 1578 0a14 4FF00102 		mov	r2, #1
 1579 0a18 4FF00703 		mov	r3, #7
 1580 0a1c FFF7FEFF 		bl	ADC_RegularChannelConfig
 574:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 1581              		.loc 1 574 0
 1582 0a20 4FF0A040 		mov	r0, #1342177280
 1583 0a24 4FF00401 		mov	r1, #4
 1584 0a28 4FF00202 		mov	r2, #2
 1585 0a2c 4FF00703 		mov	r3, #7
 1586 0a30 FFF7FEFF 		bl	ADC_RegularChannelConfig
 575:../src/main.cpp **** 
 576:../src/main.cpp **** 	/* Enable ADC1 */
 577:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 1587              		.loc 1 577 0
 1588 0a34 4FF0A040 		mov	r0, #1342177280
 1589 0a38 4FF00101 		mov	r1, #1
 1590 0a3c FFF7FEFF 		bl	ADC_Cmd
 578:../src/main.cpp **** 
 579:../src/main.cpp **** 	/* wait for ADRDY */
 580:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 1591              		.loc 1 580 0
 1592 0a40 00BF     		nop
 1593              	.L28:
 1594              		.loc 1 580 0 is_stmt 0 discriminator 1
 1595 0a42 4FF0A040 		mov	r0, #1342177280
 1596 0a46 4FF00101 		mov	r1, #1
 1597 0a4a FFF7FEFF 		bl	ADC_GetFlagStatus
 1598 0a4e 0346     		mov	r3, r0
 1599 0a50 002B     		cmp	r3, #0
 1600 0a52 14BF     		ite	ne
 1601 0a54 0023     		movne	r3, #0
 1602 0a56 0123     		moveq	r3, #1
 1603 0a58 DBB2     		uxtb	r3, r3
 1604 0a5a 002B     		cmp	r3, #0
 1605 0a5c F1D1     		bne	.L28
 581:../src/main.cpp **** 
 582:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 583:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 1606              		.loc 1 583 0 is_stmt 1
 1607 0a5e 4FF0A040 		mov	r0, #1342177280
 1608 0a62 FFF7FEFF 		bl	ADC_StartConversion
 584:../src/main.cpp **** 
 585:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 1609              		.loc 1 585 0
 1610 0a66 4FF00100 		mov	r0, #1
 1611 0a6a 4FF00101 		mov	r1, #1
 1612 0a6e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 586:../src/main.cpp **** 
 587:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 588:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1613              		.loc 1 588 0
 1614 0a72 07F12003 		add	r3, r7, #32
 1615 0a76 1846     		mov	r0, r3
 1616 0a78 FFF7FEFF 		bl	DMA_StructInit
 589:../src/main.cpp **** 
 590:../src/main.cpp **** 	DMA_DeInit(DMA1_Channel1); 											//Set DMA registers to default values
 1617              		.loc 1 590 0
 1618 0a7c 4FF00800 		mov	r0, #8
 1619 0a80 C4F20200 		movt	r0, 16386
 1620 0a84 FFF7FEFF 		bl	DMA_DeInit
 591:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 1621              		.loc 1 591 0
 1622 0a88 4FF04003 		mov	r3, #64
 1623 0a8c C5F20003 		movt	r3, 20480
 1624 0a90 3B62     		str	r3, [r7, #32]
 592:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adcData; 		//Variable to which ADC values will 
 1625              		.loc 1 592 0
 1626 0a92 40F20003 		movw	r3, #:lower16:adcData
 1627 0a96 C0F20003 		movt	r3, #:upper16:adcData
 1628 0a9a 7B62     		str	r3, [r7, #36]
 593:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1629              		.loc 1 593 0
 1630 0a9c 4FF00003 		mov	r3, #0
 1631 0aa0 BB62     		str	r3, [r7, #40]
 594:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 2;
 1632              		.loc 1 594 0
 1633 0aa2 4FF00203 		mov	r3, #2
 1634 0aa6 BB85     		strh	r3, [r7, #44]	@ movhi
 595:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1635              		.loc 1 595 0
 1636 0aa8 4FF00003 		mov	r3, #0
 1637 0aac 3B63     		str	r3, [r7, #48]
 596:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1638              		.loc 1 596 0
 1639 0aae 4FF08003 		mov	r3, #128
 1640 0ab2 7B63     		str	r3, [r7, #52]
 597:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1641              		.loc 1 597 0
 1642 0ab4 4FF40073 		mov	r3, #512
 1643 0ab8 BB63     		str	r3, [r7, #56]
 598:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1644              		.loc 1 598 0
 1645 0aba 4FF40063 		mov	r3, #2048
 1646 0abe FB63     		str	r3, [r7, #60]
 599:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1647              		.loc 1 599 0
 1648 0ac0 4FF02003 		mov	r3, #32
 1649 0ac4 3B64     		str	r3, [r7, #64]
 600:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 1650              		.loc 1 600 0
 1651 0ac6 4FF40053 		mov	r3, #8192
 1652 0aca 7B64     		str	r3, [r7, #68]
 601:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 1653              		.loc 1 601 0
 1654 0acc 4FF00003 		mov	r3, #0
 1655 0ad0 BB64     		str	r3, [r7, #72]
 602:../src/main.cpp **** 
 603:../src/main.cpp **** 	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 1656              		.loc 1 603 0
 1657 0ad2 07F12003 		add	r3, r7, #32
 1658 0ad6 4FF00800 		mov	r0, #8
 1659 0ada C4F20200 		movt	r0, 16386
 1660 0ade 1946     		mov	r1, r3
 1661 0ae0 FFF7FEFF 		bl	DMA_Init
 604:../src/main.cpp **** 
 605:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 606:../src/main.cpp **** 
 607:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 1662              		.loc 1 607 0
 1663 0ae4 4FF00B03 		mov	r3, #11
 1664 0ae8 87F84C30 		strb	r3, [r7, #76]
 608:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 1665              		.loc 1 608 0
 1666 0aec 4FF00203 		mov	r3, #2
 1667 0af0 87F84D30 		strb	r3, [r7, #77]
 609:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 1668              		.loc 1 609 0
 1669 0af4 4FF00003 		mov	r3, #0
 1670 0af8 87F84E30 		strb	r3, [r7, #78]
 610:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 1671              		.loc 1 610 0
 1672 0afc 4FF00103 		mov	r3, #1
 1673 0b00 87F84F30 		strb	r3, [r7, #79]
 611:../src/main.cpp **** 
 612:../src/main.cpp **** 	NVIC_Init(&nv);
 1674              		.loc 1 612 0
 1675 0b04 07F14C03 		add	r3, r7, #76
 1676 0b08 1846     		mov	r0, r3
 1677 0b0a FFF7FEFF 		bl	NVIC_Init
 613:../src/main.cpp **** 
 614:../src/main.cpp **** 	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 1678              		.loc 1 614 0
 1679 0b0e 4FF00800 		mov	r0, #8
 1680 0b12 C4F20200 		movt	r0, 16386
 1681 0b16 4FF00201 		mov	r1, #2
 1682 0b1a 4FF00102 		mov	r2, #1
 1683 0b1e FFF7FEFF 		bl	DMA_ITConfig
 615:../src/main.cpp **** 	DMA_Cmd(DMA1_Channel1, ENABLE);
 1684              		.loc 1 615 0
 1685 0b22 4FF00800 		mov	r0, #8
 1686 0b26 C4F20200 		movt	r0, 16386
 1687 0b2a 4FF00101 		mov	r1, #1
 1688 0b2e FFF7FEFF 		bl	DMA_Cmd
 616:../src/main.cpp **** 
 617:../src/main.cpp **** 	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 1689              		.loc 1 617 0
 1690 0b32 4FF0A040 		mov	r0, #1342177280
 1691 0b36 4FF00201 		mov	r1, #2
 1692 0b3a FFF7FEFF 		bl	ADC_DMAConfig
 618:../src/main.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 1693              		.loc 1 618 0
 1694 0b3e 4FF0A040 		mov	r0, #1342177280
 1695 0b42 4FF00101 		mov	r1, #1
 1696 0b46 FFF7FEFF 		bl	ADC_DMACmd
 1697              	.LBE10:
 619:../src/main.cpp **** }
 1698              		.loc 1 619 0
 1699 0b4a 07F17007 		add	r7, r7, #112
 1700 0b4e BD46     		mov	sp, r7
 1701 0b50 80BD     		pop	{r7, pc}
 1702              		.cfi_endproc
 1703              	.LFE123:
 1705 0b52 00BF     		.align	2
 1706              		.global	_Z13adc2_init_DMAv
 1707              		.thumb
 1708              		.thumb_func
 1710              	_Z13adc2_init_DMAv:
 1711              	.LFB124:
 620:../src/main.cpp **** 
 621:../src/main.cpp **** void adc2_init_DMA(void)
 622:../src/main.cpp **** {
 1712              		.loc 1 622 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 112
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
 1716 0b54 80B5     		push	{r7, lr}
 1717              	.LCFI36:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 7, -8
 1720              		.cfi_offset 14, -4
 1721 0b56 9CB0     		sub	sp, sp, #112
 1722              	.LCFI37:
 1723              		.cfi_def_cfa_offset 120
 1724 0b58 00AF     		add	r7, sp, #0
 1725              	.LCFI38:
 1726              		.cfi_def_cfa_register 7
 1727              	.LBB11:
 623:../src/main.cpp **** 	// Init structures required to initialize the peripherals as required:
 624:../src/main.cpp **** 
 625:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 626:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 627:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 628:../src/main.cpp **** 
 629:../src/main.cpp **** 	/* Configure the ADC clock */
 630:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2); /////////////MOD!!!!!!!!
 1728              		.loc 1 630 0
 1729 0b5a 4FF48870 		mov	r0, #272
 1730 0b5e FFF7FEFF 		bl	RCC_ADCCLKConfig
 631:../src/main.cpp **** 	/* Enable ADC2 clock */
 632:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 1731              		.loc 1 632 0
 1732 0b62 4FF08050 		mov	r0, #268435456
 1733 0b66 4FF00101 		mov	r1, #1
 1734 0b6a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 633:../src/main.cpp **** 	/* GPIOA, GPIOB, GPIOC Periph clock enable */
 634:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 1735              		.loc 1 634 0
 1736 0b6e 4FF46020 		mov	r0, #917504
 1737 0b72 4FF00101 		mov	r1, #1
 1738 0b76 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 635:../src/main.cpp **** 
 636:../src/main.cpp **** 	// Configure PA4, PB2, PC4, PC5 as analog inputs
 637:../src/main.cpp **** 
 638:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1739              		.loc 1 638 0
 1740 0b7a 07F15003 		add	r3, r7, #80
 1741 0b7e 1846     		mov	r0, r3
 1742 0b80 FFF7FEFF 		bl	GPIO_StructInit
 639:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 1743              		.loc 1 639 0
 1744 0b84 4FF01003 		mov	r3, #16
 1745 0b88 3B65     		str	r3, [r7, #80]
 640:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1746              		.loc 1 640 0
 1747 0b8a 4FF00303 		mov	r3, #3
 1748 0b8e 87F85430 		strb	r3, [r7, #84]
 641:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1749              		.loc 1 641 0
 1750 0b92 4FF00003 		mov	r3, #0
 1751 0b96 87F85730 		strb	r3, [r7, #87]
 642:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1752              		.loc 1 642 0
 1753 0b9a 4FF00303 		mov	r3, #3
 1754 0b9e 87F85530 		strb	r3, [r7, #85]
 643:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1755              		.loc 1 643 0
 1756 0ba2 07F15003 		add	r3, r7, #80
 1757 0ba6 4FF09040 		mov	r0, #1207959552
 1758 0baa 1946     		mov	r1, r3
 1759 0bac FFF7FEFF 		bl	GPIO_Init
 644:../src/main.cpp **** 
 645:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1760              		.loc 1 645 0
 1761 0bb0 07F15003 		add	r3, r7, #80
 1762 0bb4 1846     		mov	r0, r3
 1763 0bb6 FFF7FEFF 		bl	GPIO_StructInit
 646:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 1764              		.loc 1 646 0
 1765 0bba 4FF00403 		mov	r3, #4
 1766 0bbe 3B65     		str	r3, [r7, #80]
 647:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1767              		.loc 1 647 0
 1768 0bc0 4FF00303 		mov	r3, #3
 1769 0bc4 87F85430 		strb	r3, [r7, #84]
 648:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1770              		.loc 1 648 0
 1771 0bc8 4FF00003 		mov	r3, #0
 1772 0bcc 87F85730 		strb	r3, [r7, #87]
 649:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1773              		.loc 1 649 0
 1774 0bd0 07F15003 		add	r3, r7, #80
 1775 0bd4 4FF48060 		mov	r0, #1024
 1776 0bd8 C4F60000 		movt	r0, 18432
 1777 0bdc 1946     		mov	r1, r3
 1778 0bde FFF7FEFF 		bl	GPIO_Init
 650:../src/main.cpp **** 
 651:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 1779              		.loc 1 651 0
 1780 0be2 07F15003 		add	r3, r7, #80
 1781 0be6 1846     		mov	r0, r3
 1782 0be8 FFF7FEFF 		bl	GPIO_StructInit
 652:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 1783              		.loc 1 652 0
 1784 0bec 4FF03003 		mov	r3, #48
 1785 0bf0 3B65     		str	r3, [r7, #80]
 653:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 1786              		.loc 1 653 0
 1787 0bf2 4FF00303 		mov	r3, #3
 1788 0bf6 87F85430 		strb	r3, [r7, #84]
 654:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 1789              		.loc 1 654 0
 1790 0bfa 4FF00003 		mov	r3, #0
 1791 0bfe 87F85730 		strb	r3, [r7, #87]
 655:../src/main.cpp **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 1792              		.loc 1 655 0
 1793 0c02 07F15003 		add	r3, r7, #80
 1794 0c06 4FF40060 		mov	r0, #2048
 1795 0c0a C4F60000 		movt	r0, 18432
 1796 0c0e 1946     		mov	r1, r3
 1797 0c10 FFF7FEFF 		bl	GPIO_Init
 656:../src/main.cpp **** 
 657:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 1798              		.loc 1 657 0
 1799 0c14 3B46     		mov	r3, r7
 1800 0c16 1846     		mov	r0, r3
 1801 0c18 FFF7FEFF 		bl	ADC_StructInit
 658:../src/main.cpp **** 
 659:../src/main.cpp **** 	/* Calibration procedure */
 660:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC2, ENABLE);
 1802              		.loc 1 660 0
 1803 0c1c 4FF48070 		mov	r0, #256
 1804 0c20 C5F20000 		movt	r0, 20480
 1805 0c24 4FF00101 		mov	r1, #1
 1806 0c28 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 661:../src/main.cpp **** 
 662:../src/main.cpp **** 	/* Insert delay equal to about 900 µs */
 663:../src/main.cpp **** 	int foo;
 664:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1807              		.loc 1 664 0
 1808 0c2c 4FF00003 		mov	r3, #0
 1809 0c30 FB66     		str	r3, [r7, #108]
 1810 0c32 07E0     		b	.L30
 1811              	.L31:
 665:../src/main.cpp **** 	{
 666:../src/main.cpp **** 	  ++foo;
 1812              		.loc 1 666 0 discriminator 2
 1813 0c34 FB6E     		ldr	r3, [r7, #108]
 1814 0c36 03F10103 		add	r3, r3, #1
 1815 0c3a FB66     		str	r3, [r7, #108]
 664:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1816              		.loc 1 664 0 discriminator 2
 1817 0c3c FB6E     		ldr	r3, [r7, #108]
 1818 0c3e 03F10103 		add	r3, r3, #1
 1819 0c42 FB66     		str	r3, [r7, #108]
 1820              	.L30:
 664:../src/main.cpp **** 	for(foo = 0; foo < 64000; ++foo)
 1821              		.loc 1 664 0 is_stmt 0 discriminator 1
 1822 0c44 FA6E     		ldr	r2, [r7, #108]
 1823 0c46 4FF6FF13 		movw	r3, #63999
 1824 0c4a 9A42     		cmp	r2, r3
 1825 0c4c CCBF     		ite	gt
 1826 0c4e 0023     		movgt	r3, #0
 1827 0c50 0123     		movle	r3, #1
 1828 0c52 DBB2     		uxtb	r3, r3
 1829 0c54 002B     		cmp	r3, #0
 1830 0c56 EDD1     		bne	.L31
 667:../src/main.cpp **** 	}
 668:../src/main.cpp **** 
 669:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC2, ADC_CalibrationMode_Single);
 1831              		.loc 1 669 0 is_stmt 1
 1832 0c58 4FF48070 		mov	r0, #256
 1833 0c5c C5F20000 		movt	r0, 20480
 1834 0c60 4FF00001 		mov	r1, #0
 1835 0c64 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 670:../src/main.cpp **** 	ADC_StartCalibration(ADC2);
 1836              		.loc 1 670 0
 1837 0c68 4FF48070 		mov	r0, #256
 1838 0c6c C5F20000 		movt	r0, 20480
 1839 0c70 FFF7FEFF 		bl	ADC_StartCalibration
 671:../src/main.cpp **** 
 672:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC2) != RESET );
 1840              		.loc 1 672 0
 1841 0c74 00BF     		nop
 1842              	.L32:
 1843              		.loc 1 672 0 is_stmt 0 discriminator 1
 1844 0c76 4FF48070 		mov	r0, #256
 1845 0c7a C5F20000 		movt	r0, 20480
 1846 0c7e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 1847 0c82 0346     		mov	r3, r0
 1848 0c84 002B     		cmp	r3, #0
 1849 0c86 0CBF     		ite	eq
 1850 0c88 0023     		moveq	r3, #0
 1851 0c8a 0123     		movne	r3, #1
 1852 0c8c DBB2     		uxtb	r3, r3
 1853 0c8e 002B     		cmp	r3, #0
 1854 0c90 F1D1     		bne	.L32
 673:../src/main.cpp **** 
 674:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1855              		.loc 1 674 0 is_stmt 1
 1856 0c92 4FF00003 		mov	r3, #0
 1857 0c96 BB65     		str	r3, [r7, #88]
 675:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 1858              		.loc 1 675 0
 1859 0c98 4FF00003 		mov	r3, #0
 1860 0c9c FB65     		str	r3, [r7, #92]
 676:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 1861              		.loc 1 676 0
 1862 0c9e 4FF40043 		mov	r3, #32768
 1863 0ca2 3B66     		str	r3, [r7, #96]
 677:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 1864              		.loc 1 677 0
 1865 0ca4 4FF00203 		mov	r3, #2
 1866 0ca8 7B66     		str	r3, [r7, #100]
 678:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0xF;
 1867              		.loc 1 678 0
 1868 0caa 4FF00F03 		mov	r3, #15
 1869 0cae 87F86830 		strb	r3, [r7, #104]
 679:../src/main.cpp **** 	ADC_CommonInit(ADC2, &ADC_CommonInitStructure);
 1870              		.loc 1 679 0
 1871 0cb2 07F15803 		add	r3, r7, #88
 1872 0cb6 4FF48070 		mov	r0, #256
 1873 0cba C5F20000 		movt	r0, 20480
 1874 0cbe 1946     		mov	r1, r3
 1875 0cc0 FFF7FEFF 		bl	ADC_CommonInit
 680:../src/main.cpp **** 
 681:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 1876              		.loc 1 681 0
 1877 0cc4 4FF40053 		mov	r3, #8192
 1878 0cc8 3B60     		str	r3, [r7, #0]
 682:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 1879              		.loc 1 682 0
 1880 0cca 4FF00003 		mov	r3, #0
 1881 0cce 7B60     		str	r3, [r7, #4]
 683:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 1882              		.loc 1 683 0
 1883 0cd0 4FF00003 		mov	r3, #0
 1884 0cd4 BB60     		str	r3, [r7, #8]
 684:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 1885              		.loc 1 684 0
 1886 0cd6 4FF00003 		mov	r3, #0
 1887 0cda FB60     		str	r3, [r7, #12]
 685:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 1888              		.loc 1 685 0
 1889 0cdc 4FF00003 		mov	r3, #0
 1890 0ce0 3B61     		str	r3, [r7, #16]
 686:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 1891              		.loc 1 686 0
 1892 0ce2 4FF00003 		mov	r3, #0
 1893 0ce6 7B61     		str	r3, [r7, #20]
 687:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 1894              		.loc 1 687 0
 1895 0ce8 4FF00003 		mov	r3, #0
 1896 0cec BB61     		str	r3, [r7, #24]
 688:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 4;
 1897              		.loc 1 688 0
 1898 0cee 4FF00403 		mov	r3, #4
 1899 0cf2 3B77     		strb	r3, [r7, #28]
 689:../src/main.cpp **** 	ADC_Init(ADC2, &ADC_InitStructure);
 1900              		.loc 1 689 0
 1901 0cf4 3B46     		mov	r3, r7
 1902 0cf6 4FF48070 		mov	r0, #256
 1903 0cfa C5F20000 		movt	r0, 20480
 1904 0cfe 1946     		mov	r1, r3
 1905 0d00 FFF7FEFF 		bl	ADC_Init
 690:../src/main.cpp **** 
 691:../src/main.cpp **** 	/* ADC2 regular Channel 1,2,3,4 configuration */
 692:../src/main.cpp **** 
 693:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 1906              		.loc 1 693 0
 1907 0d04 4FF48070 		mov	r0, #256
 1908 0d08 C5F20000 		movt	r0, 20480
 1909 0d0c 4FF00101 		mov	r1, #1
 1910 0d10 4FF00102 		mov	r2, #1
 1911 0d14 4FF00703 		mov	r3, #7
 1912 0d18 FFF7FEFF 		bl	ADC_RegularChannelConfig
 694:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 1913              		.loc 1 694 0
 1914 0d1c 4FF48070 		mov	r0, #256
 1915 0d20 C5F20000 		movt	r0, 20480
 1916 0d24 4FF00501 		mov	r1, #5
 1917 0d28 4FF00202 		mov	r2, #2
 1918 0d2c 4FF00703 		mov	r3, #7
 1919 0d30 FFF7FEFF 		bl	ADC_RegularChannelConfig
 695:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_11, 3, ADC_SampleTime_601Cycles5);
 1920              		.loc 1 695 0
 1921 0d34 4FF48070 		mov	r0, #256
 1922 0d38 C5F20000 		movt	r0, 20480
 1923 0d3c 4FF00B01 		mov	r1, #11
 1924 0d40 4FF00302 		mov	r2, #3
 1925 0d44 4FF00703 		mov	r3, #7
 1926 0d48 FFF7FEFF 		bl	ADC_RegularChannelConfig
 696:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 4, ADC_SampleTime_601Cycles5);
 1927              		.loc 1 696 0
 1928 0d4c 4FF48070 		mov	r0, #256
 1929 0d50 C5F20000 		movt	r0, 20480
 1930 0d54 4FF00C01 		mov	r1, #12
 1931 0d58 4FF00402 		mov	r2, #4
 1932 0d5c 4FF00703 		mov	r3, #7
 1933 0d60 FFF7FEFF 		bl	ADC_RegularChannelConfig
 697:../src/main.cpp **** 
 698:../src/main.cpp **** 	/* Enable ADC2 */
 699:../src/main.cpp **** 	ADC_Cmd(ADC2, ENABLE);
 1934              		.loc 1 699 0
 1935 0d64 4FF48070 		mov	r0, #256
 1936 0d68 C5F20000 		movt	r0, 20480
 1937 0d6c 4FF00101 		mov	r1, #1
 1938 0d70 FFF7FEFF 		bl	ADC_Cmd
 700:../src/main.cpp **** 
 701:../src/main.cpp **** 	/* wait for ADRDY */
 702:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC2, ADC_FLAG_RDY));
 1939              		.loc 1 702 0
 1940 0d74 00BF     		nop
 1941              	.L33:
 1942              		.loc 1 702 0 is_stmt 0 discriminator 1
 1943 0d76 4FF48070 		mov	r0, #256
 1944 0d7a C5F20000 		movt	r0, 20480
 1945 0d7e 4FF00101 		mov	r1, #1
 1946 0d82 FFF7FEFF 		bl	ADC_GetFlagStatus
 1947 0d86 0346     		mov	r3, r0
 1948 0d88 002B     		cmp	r3, #0
 1949 0d8a 14BF     		ite	ne
 1950 0d8c 0023     		movne	r3, #0
 1951 0d8e 0123     		moveq	r3, #1
 1952 0d90 DBB2     		uxtb	r3, r3
 1953 0d92 002B     		cmp	r3, #0
 1954 0d94 EFD1     		bne	.L33
 703:../src/main.cpp **** 
 704:../src/main.cpp **** 	/* Start ADC2 Software Conversion */
 705:../src/main.cpp **** 	ADC_StartConversion(ADC2);
 1955              		.loc 1 705 0 is_stmt 1
 1956 0d96 4FF48070 		mov	r0, #256
 1957 0d9a C5F20000 		movt	r0, 20480
 1958 0d9e FFF7FEFF 		bl	ADC_StartConversion
 706:../src/main.cpp **** 
 707:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 1959              		.loc 1 707 0
 1960 0da2 4FF00200 		mov	r0, #2
 1961 0da6 4FF00101 		mov	r1, #1
 1962 0daa FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 708:../src/main.cpp **** 
 709:../src/main.cpp **** 	DMA_InitTypeDef			DMA_InitStructure;
 710:../src/main.cpp **** 	DMA_StructInit(&DMA_InitStructure);
 1963              		.loc 1 710 0
 1964 0dae 07F12003 		add	r3, r7, #32
 1965 0db2 1846     		mov	r0, r3
 1966 0db4 FFF7FEFF 		bl	DMA_StructInit
 711:../src/main.cpp **** 
 712:../src/main.cpp **** 	DMA_DeInit(DMA2_Channel1); 											//Set DMA registers to default values
 1967              		.loc 1 712 0
 1968 0db8 4FF48160 		mov	r0, #1032
 1969 0dbc C4F20200 		movt	r0, 16386
 1970 0dc0 FFF7FEFF 		bl	DMA_DeInit
 713:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC2->DR);
 1971              		.loc 1 713 0
 1972 0dc4 4FF4A073 		mov	r3, #320
 1973 0dc8 C5F20003 		movt	r3, 20480
 1974 0dcc 3B62     		str	r3, [r7, #32]
 714:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &adc2_data; 		//Variable to which ADC values wil
 1975              		.loc 1 714 0
 1976 0dce 40F20003 		movw	r3, #:lower16:adc2_data
 1977 0dd2 C0F20003 		movt	r3, #:upper16:adc2_data
 1978 0dd6 7B62     		str	r3, [r7, #36]
 715:../src/main.cpp **** 	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 1979              		.loc 1 715 0
 1980 0dd8 4FF00003 		mov	r3, #0
 1981 0ddc BB62     		str	r3, [r7, #40]
 716:../src/main.cpp **** 	DMA_InitStructure.DMA_BufferSize = 4;
 1982              		.loc 1 716 0
 1983 0dde 4FF00403 		mov	r3, #4
 1984 0de2 BB85     		strh	r3, [r7, #44]	@ movhi
 717:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1985              		.loc 1 717 0
 1986 0de4 4FF00003 		mov	r3, #0
 1987 0de8 3B63     		str	r3, [r7, #48]
 718:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1988              		.loc 1 718 0
 1989 0dea 4FF08003 		mov	r3, #128
 1990 0dee 7B63     		str	r3, [r7, #52]
 719:../src/main.cpp **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 1991              		.loc 1 719 0
 1992 0df0 4FF40073 		mov	r3, #512
 1993 0df4 BB63     		str	r3, [r7, #56]
 720:../src/main.cpp **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 1994              		.loc 1 720 0
 1995 0df6 4FF40063 		mov	r3, #2048
 1996 0dfa FB63     		str	r3, [r7, #60]
 721:../src/main.cpp **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 1997              		.loc 1 721 0
 1998 0dfc 4FF02003 		mov	r3, #32
 1999 0e00 3B64     		str	r3, [r7, #64]
 722:../src/main.cpp **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 2000              		.loc 1 722 0
 2001 0e02 4FF40053 		mov	r3, #8192
 2002 0e06 7B64     		str	r3, [r7, #68]
 723:../src/main.cpp **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 2003              		.loc 1 723 0
 2004 0e08 4FF00003 		mov	r3, #0
 2005 0e0c BB64     		str	r3, [r7, #72]
 724:../src/main.cpp **** 
 725:../src/main.cpp **** 	DMA_Init(DMA2_Channel1, &DMA_InitStructure);
 2006              		.loc 1 725 0
 2007 0e0e 07F12003 		add	r3, r7, #32
 2008 0e12 4FF48160 		mov	r0, #1032
 2009 0e16 C4F20200 		movt	r0, 16386
 2010 0e1a 1946     		mov	r1, r3
 2011 0e1c FFF7FEFF 		bl	DMA_Init
 726:../src/main.cpp **** 
 727:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 728:../src/main.cpp **** 
 729:../src/main.cpp **** 	nv.NVIC_IRQChannel = DMA2_Channel1_IRQn;
 2012              		.loc 1 729 0
 2013 0e20 4FF03803 		mov	r3, #56
 2014 0e24 87F84C30 		strb	r3, [r7, #76]
 730:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2015              		.loc 1 730 0
 2016 0e28 4FF00203 		mov	r3, #2
 2017 0e2c 87F84D30 		strb	r3, [r7, #77]
 731:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2018              		.loc 1 731 0
 2019 0e30 4FF00003 		mov	r3, #0
 2020 0e34 87F84E30 		strb	r3, [r7, #78]
 732:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2021              		.loc 1 732 0
 2022 0e38 4FF00103 		mov	r3, #1
 2023 0e3c 87F84F30 		strb	r3, [r7, #79]
 733:../src/main.cpp **** 
 734:../src/main.cpp **** 	NVIC_Init(&nv);
 2024              		.loc 1 734 0
 2025 0e40 07F14C03 		add	r3, r7, #76
 2026 0e44 1846     		mov	r0, r3
 2027 0e46 FFF7FEFF 		bl	NVIC_Init
 735:../src/main.cpp **** 
 736:../src/main.cpp **** 	DMA_ITConfig(DMA2_Channel1, DMA_IT_TC, ENABLE);
 2028              		.loc 1 736 0
 2029 0e4a 4FF48160 		mov	r0, #1032
 2030 0e4e C4F20200 		movt	r0, 16386
 2031 0e52 4FF00201 		mov	r1, #2
 2032 0e56 4FF00102 		mov	r2, #1
 2033 0e5a FFF7FEFF 		bl	DMA_ITConfig
 737:../src/main.cpp **** 	DMA_Cmd(DMA2_Channel1, ENABLE);
 2034              		.loc 1 737 0
 2035 0e5e 4FF48160 		mov	r0, #1032
 2036 0e62 C4F20200 		movt	r0, 16386
 2037 0e66 4FF00101 		mov	r1, #1
 2038 0e6a FFF7FEFF 		bl	DMA_Cmd
 738:../src/main.cpp **** 
 739:../src/main.cpp **** 	ADC_DMAConfig(ADC2, ADC_DMAMode_Circular);
 2039              		.loc 1 739 0
 2040 0e6e 4FF48070 		mov	r0, #256
 2041 0e72 C5F20000 		movt	r0, 20480
 2042 0e76 4FF00201 		mov	r1, #2
 2043 0e7a FFF7FEFF 		bl	ADC_DMAConfig
 740:../src/main.cpp **** 	ADC_DMACmd(ADC2, ENABLE);
 2044              		.loc 1 740 0
 2045 0e7e 4FF48070 		mov	r0, #256
 2046 0e82 C5F20000 		movt	r0, 20480
 2047 0e86 4FF00101 		mov	r1, #1
 2048 0e8a FFF7FEFF 		bl	ADC_DMACmd
 2049              	.LBE11:
 741:../src/main.cpp **** }
 2050              		.loc 1 741 0
 2051 0e8e 07F17007 		add	r7, r7, #112
 2052 0e92 BD46     		mov	sp, r7
 2053 0e94 80BD     		pop	{r7, pc}
 2054              		.cfi_endproc
 2055              	.LFE124:
 2057 0e96 00BF     		.align	2
 2058              		.global	_Z21battery_watchdog_initv
 2059              		.thumb
 2060              		.thumb_func
 2062              	_Z21battery_watchdog_initv:
 2063              	.LFB125:
 742:../src/main.cpp **** 
 743:../src/main.cpp **** void battery_watchdog_init(void)
 744:../src/main.cpp **** {
 2064              		.loc 1 744 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 72
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068 0e98 80B5     		push	{r7, lr}
 2069              	.LCFI39:
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0e9a 92B0     		sub	sp, sp, #72
 2074              	.LCFI40:
 2075              		.cfi_def_cfa_offset 80
 2076 0e9c 00AF     		add	r7, sp, #0
 2077              	.LCFI41:
 2078              		.cfi_def_cfa_register 7
 2079              	.LBB12:
 745:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 746:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 747:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 748:../src/main.cpp **** 	/* Configure the ADC clock */
 749:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC34PLLCLK_Div128);
 2080              		.loc 1 749 0
 2081 0e9e 4FF45050 		mov	r0, #13312
 2082 0ea2 C1F20000 		movt	r0, 4096
 2083 0ea6 FFF7FEFF 		bl	RCC_ADCCLKConfig
 750:../src/main.cpp **** 
 751:../src/main.cpp **** 	/* Enable ADC1 clock */
 752:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC34, ENABLE);
 2084              		.loc 1 752 0
 2085 0eaa 4FF00050 		mov	r0, #536870912
 2086 0eae 4FF00101 		mov	r1, #1
 2087 0eb2 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 753:../src/main.cpp **** 	/* ADC Channel configuration */
 754:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 755:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOE, ENABLE);
 2088              		.loc 1 755 0
 2089 0eb6 4FF41010 		mov	r0, #2359296
 2090 0eba 4FF00101 		mov	r1, #1
 2091 0ebe FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 756:../src/main.cpp **** 
 757:../src/main.cpp **** 	/* Configure PB1, PE7 as analog inputs */
 758:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 2092              		.loc 1 758 0
 2093 0ec2 07F12803 		add	r3, r7, #40
 2094 0ec6 1846     		mov	r0, r3
 2095 0ec8 FFF7FEFF 		bl	GPIO_StructInit
 759:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_13;
 2096              		.loc 1 759 0
 2097 0ecc 42F20203 		movw	r3, #8194
 2098 0ed0 BB62     		str	r3, [r7, #40]
 760:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2099              		.loc 1 760 0
 2100 0ed2 4FF00303 		mov	r3, #3
 2101 0ed6 87F82C30 		strb	r3, [r7, #44]
 761:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2102              		.loc 1 761 0
 2103 0eda 4FF00003 		mov	r3, #0
 2104 0ede 87F82F30 		strb	r3, [r7, #47]
 762:../src/main.cpp **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 2105              		.loc 1 762 0
 2106 0ee2 07F12803 		add	r3, r7, #40
 2107 0ee6 4FF48060 		mov	r0, #1024
 2108 0eea C4F60000 		movt	r0, 18432
 2109 0eee 1946     		mov	r1, r3
 2110 0ef0 FFF7FEFF 		bl	GPIO_Init
 763:../src/main.cpp **** /*
 764:../src/main.cpp **** 	GPIO_StructInit(&GPIO_InitStructure);
 765:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 766:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 767:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 768:../src/main.cpp **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 769:../src/main.cpp **** */
 770:../src/main.cpp **** 
 771:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2111              		.loc 1 771 0
 2112 0ef4 07F10403 		add	r3, r7, #4
 2113 0ef8 1846     		mov	r0, r3
 2114 0efa FFF7FEFF 		bl	ADC_StructInit
 772:../src/main.cpp **** 
 773:../src/main.cpp **** 	/* Calibration procedure */
 774:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC3, ENABLE);
 2115              		.loc 1 774 0
 2116 0efe 4FF48060 		mov	r0, #1024
 2117 0f02 C5F20000 		movt	r0, 20480
 2118 0f06 4FF00101 		mov	r1, #1
 2119 0f0a FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 775:../src/main.cpp **** 
 776:../src/main.cpp **** 	/* Insert delay equal to 222 µs */
 777:../src/main.cpp **** 	int foo;
 778:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2120              		.loc 1 778 0
 2121 0f0e 4FF00003 		mov	r3, #0
 2122 0f12 7B64     		str	r3, [r7, #68]
 2123 0f14 07E0     		b	.L35
 2124              	.L36:
 779:../src/main.cpp **** 	{
 780:../src/main.cpp **** 	  ++foo;
 2125              		.loc 1 780 0 discriminator 2
 2126 0f16 7B6C     		ldr	r3, [r7, #68]
 2127 0f18 03F10103 		add	r3, r3, #1
 2128 0f1c 7B64     		str	r3, [r7, #68]
 778:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2129              		.loc 1 778 0 discriminator 2
 2130 0f1e 7B6C     		ldr	r3, [r7, #68]
 2131 0f20 03F10103 		add	r3, r3, #1
 2132 0f24 7B64     		str	r3, [r7, #68]
 2133              	.L35:
 778:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2134              		.loc 1 778 0 is_stmt 0 discriminator 1
 2135 0f26 7A6C     		ldr	r2, [r7, #68]
 2136 0f28 47F6FF43 		movw	r3, #31999
 2137 0f2c 9A42     		cmp	r2, r3
 2138 0f2e CCBF     		ite	gt
 2139 0f30 0023     		movgt	r3, #0
 2140 0f32 0123     		movle	r3, #1
 2141 0f34 DBB2     		uxtb	r3, r3
 2142 0f36 002B     		cmp	r3, #0
 2143 0f38 EDD1     		bne	.L36
 781:../src/main.cpp **** 	}
 782:../src/main.cpp **** 
 783:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC3, ADC_CalibrationMode_Single);
 2144              		.loc 1 783 0 is_stmt 1
 2145 0f3a 4FF48060 		mov	r0, #1024
 2146 0f3e C5F20000 		movt	r0, 20480
 2147 0f42 4FF00001 		mov	r1, #0
 2148 0f46 FFF7FEFF 		bl	ADC_SelectCalibrationMode
 784:../src/main.cpp **** 	ADC_StartCalibration(ADC3);
 2149              		.loc 1 784 0
 2150 0f4a 4FF48060 		mov	r0, #1024
 2151 0f4e C5F20000 		movt	r0, 20480
 2152 0f52 FFF7FEFF 		bl	ADC_StartCalibration
 785:../src/main.cpp **** 
 786:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC3) != RESET );
 2153              		.loc 1 786 0
 2154 0f56 00BF     		nop
 2155              	.L37:
 2156              		.loc 1 786 0 is_stmt 0 discriminator 1
 2157 0f58 4FF48060 		mov	r0, #1024
 2158 0f5c C5F20000 		movt	r0, 20480
 2159 0f60 FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2160 0f64 0346     		mov	r3, r0
 2161 0f66 002B     		cmp	r3, #0
 2162 0f68 0CBF     		ite	eq
 2163 0f6a 0023     		moveq	r3, #0
 2164 0f6c 0123     		movne	r3, #1
 2165 0f6e DBB2     		uxtb	r3, r3
 2166 0f70 002B     		cmp	r3, #0
 2167 0f72 F1D1     		bne	.L37
 787:../src/main.cpp **** 
 788:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2168              		.loc 1 788 0 is_stmt 1
 2169 0f74 4FF00003 		mov	r3, #0
 2170 0f78 3B63     		str	r3, [r7, #48]
 789:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_SynClkModeDiv4;//ADC_Clock_AsynClkMode;
 2171              		.loc 1 789 0
 2172 0f7a 4FF44033 		mov	r3, #196608
 2173 0f7e 7B63     		str	r3, [r7, #52]
 790:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2174              		.loc 1 790 0
 2175 0f80 4FF00003 		mov	r3, #0
 2176 0f84 BB63     		str	r3, [r7, #56]
 791:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2177              		.loc 1 791 0
 2178 0f86 4FF00003 		mov	r3, #0
 2179 0f8a FB63     		str	r3, [r7, #60]
 792:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2180              		.loc 1 792 0
 2181 0f8c 4FF00003 		mov	r3, #0
 2182 0f90 87F84030 		strb	r3, [r7, #64]
 793:../src/main.cpp **** 	ADC_CommonInit(ADC3, &ADC_CommonInitStructure);
 2183              		.loc 1 793 0
 2184 0f94 07F13003 		add	r3, r7, #48
 2185 0f98 4FF48060 		mov	r0, #1024
 2186 0f9c C5F20000 		movt	r0, 20480
 2187 0fa0 1946     		mov	r1, r3
 2188 0fa2 FFF7FEFF 		bl	ADC_CommonInit
 794:../src/main.cpp **** 
 795:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2189              		.loc 1 795 0
 2190 0fa6 4FF40053 		mov	r3, #8192
 2191 0faa 7B60     		str	r3, [r7, #4]
 796:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2192              		.loc 1 796 0
 2193 0fac 4FF00003 		mov	r3, #0
 2194 0fb0 BB60     		str	r3, [r7, #8]
 797:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2195              		.loc 1 797 0
 2196 0fb2 4FF00003 		mov	r3, #0
 2197 0fb6 FB60     		str	r3, [r7, #12]
 798:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2198              		.loc 1 798 0
 2199 0fb8 4FF00003 		mov	r3, #0
 2200 0fbc 3B61     		str	r3, [r7, #16]
 799:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2201              		.loc 1 799 0
 2202 0fbe 4FF00003 		mov	r3, #0
 2203 0fc2 7B61     		str	r3, [r7, #20]
 800:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2204              		.loc 1 800 0
 2205 0fc4 4FF00003 		mov	r3, #0
 2206 0fc8 BB61     		str	r3, [r7, #24]
 801:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2207              		.loc 1 801 0
 2208 0fca 4FF00003 		mov	r3, #0
 2209 0fce FB61     		str	r3, [r7, #28]
 802:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 2210              		.loc 1 802 0
 2211 0fd0 4FF00203 		mov	r3, #2
 2212 0fd4 87F82030 		strb	r3, [r7, #32]
 803:../src/main.cpp **** 	ADC_Init(ADC3, &ADC_InitStructure);
 2213              		.loc 1 803 0
 2214 0fd8 07F10403 		add	r3, r7, #4
 2215 0fdc 4FF48060 		mov	r0, #1024
 2216 0fe0 C5F20000 		movt	r0, 20480
 2217 0fe4 1946     		mov	r1, r3
 2218 0fe6 FFF7FEFF 		bl	ADC_Init
 804:../src/main.cpp **** 
 805:../src/main.cpp **** 	/* ADC3 regular Channel 1, 13 configuration */
 806:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_1, 1, ADC_SampleTime_601Cycles5);
 2219              		.loc 1 806 0
 2220 0fea 4FF48060 		mov	r0, #1024
 2221 0fee C5F20000 		movt	r0, 20480
 2222 0ff2 4FF00101 		mov	r1, #1
 2223 0ff6 4FF00102 		mov	r2, #1
 2224 0ffa 4FF00703 		mov	r3, #7
 2225 0ffe FFF7FEFF 		bl	ADC_RegularChannelConfig
 807:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 2, ADC_SampleTime_601Cycles5);
 2226              		.loc 1 807 0
 2227 1002 4FF48060 		mov	r0, #1024
 2228 1006 C5F20000 		movt	r0, 20480
 2229 100a 4FF00501 		mov	r1, #5
 2230 100e 4FF00202 		mov	r2, #2
 2231 1012 4FF00703 		mov	r3, #7
 2232 1016 FFF7FEFF 		bl	ADC_RegularChannelConfig
 808:../src/main.cpp **** 
 809:../src/main.cpp **** 	ADC_AnalogWatchdog1SingleChannelConfig(ADC3, ADC_Channel_1);
 2233              		.loc 1 809 0
 2234 101a 4FF48060 		mov	r0, #1024
 2235 101e C5F20000 		movt	r0, 20480
 2236 1022 4FF00101 		mov	r1, #1
 2237 1026 FFF7FEFF 		bl	ADC_AnalogWatchdog1SingleChannelConfig
 810:../src/main.cpp **** 	ADC_AnalogWatchdog2SingleChannelConfig(ADC3, ADC_Channel_5);
 2238              		.loc 1 810 0
 2239 102a 4FF48060 		mov	r0, #1024
 2240 102e C5F20000 		movt	r0, 20480
 2241 1032 4FF00501 		mov	r1, #5
 2242 1036 FFF7FEFF 		bl	ADC_AnalogWatchdog2SingleChannelConfig
 811:../src/main.cpp **** 
 812:../src/main.cpp **** 	/* Configure AWD 1 & 2 Thresholds: */
 813:../src/main.cpp **** 
 814:../src/main.cpp **** 	ADC_AnalogWatchdog1ThresholdsConfig(ADC3, 2048, 10);// 2100, 1996); //50%
 2243              		.loc 1 814 0
 2244 103a 4FF48060 		mov	r0, #1024
 2245 103e C5F20000 		movt	r0, 20480
 2246 1042 4FF40061 		mov	r1, #2048
 2247 1046 4FF00A02 		mov	r2, #10
 2248 104a FFF7FEFF 		bl	ADC_AnalogWatchdog1ThresholdsConfig
 815:../src/main.cpp **** 	ADC_AnalogWatchdog2ThresholdsConfig(ADC3, 0x80, 0x00);//0xC1, 0xBB); //75%
 2249              		.loc 1 815 0
 2250 104e 4FF48060 		mov	r0, #1024
 2251 1052 C5F20000 		movt	r0, 20480
 2252 1056 4FF08001 		mov	r1, #128
 2253 105a 4FF00002 		mov	r2, #0
 2254 105e FFF7FEFF 		bl	ADC_AnalogWatchdog2ThresholdsConfig
 816:../src/main.cpp **** 
 817:../src/main.cpp **** 	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_SingleRegEnable);
 2255              		.loc 1 817 0
 2256 1062 4FF48060 		mov	r0, #1024
 2257 1066 C5F20000 		movt	r0, 20480
 2258 106a 4FF44001 		mov	r1, #12582912
 2259 106e FFF7FEFF 		bl	ADC_AnalogWatchdogCmd
 818:../src/main.cpp **** //	ADC_AnalogWatchdogCmd(ADC3, ADC_AnalogWatchdog_AllRegEnable);
 819:../src/main.cpp **** 
 820:../src/main.cpp **** 	// Configure ADC3 global interrupt:
 821:../src/main.cpp **** 
 822:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 823:../src/main.cpp **** 
 824:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC3_IRQn;
 2260              		.loc 1 824 0
 2261 1072 4FF02F03 		mov	r3, #47
 2262 1076 87F82430 		strb	r3, [r7, #36]
 825:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 0;
 2263              		.loc 1 825 0
 2264 107a 4FF00003 		mov	r3, #0
 2265 107e 87F82530 		strb	r3, [r7, #37]
 826:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2266              		.loc 1 826 0
 2267 1082 4FF00003 		mov	r3, #0
 2268 1086 87F82630 		strb	r3, [r7, #38]
 827:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2269              		.loc 1 827 0
 2270 108a 4FF00103 		mov	r3, #1
 2271 108e 87F82730 		strb	r3, [r7, #39]
 828:../src/main.cpp **** 
 829:../src/main.cpp **** 	NVIC_Init(&nv);
 2272              		.loc 1 829 0
 2273 1092 07F12403 		add	r3, r7, #36
 2274 1096 1846     		mov	r0, r3
 2275 1098 FFF7FEFF 		bl	NVIC_Init
 830:../src/main.cpp **** 
 831:../src/main.cpp **** 	// Enable ADC3's global interrupt:
 832:../src/main.cpp **** 
 833:../src/main.cpp **** 	ADC_ITConfig(ADC3, ADC_IT_AWD1 | ADC_IT_AWD2, ENABLE);
 2276              		.loc 1 833 0
 2277 109c 4FF48060 		mov	r0, #1024
 2278 10a0 C5F20000 		movt	r0, 20480
 2279 10a4 4FF4C071 		mov	r1, #384
 2280 10a8 4FF00102 		mov	r2, #1
 2281 10ac FFF7FEFF 		bl	ADC_ITConfig
 834:../src/main.cpp **** 
 835:../src/main.cpp **** 	/* Enable ADC3 */
 836:../src/main.cpp **** 	ADC_Cmd(ADC3, ENABLE);
 2282              		.loc 1 836 0
 2283 10b0 4FF48060 		mov	r0, #1024
 2284 10b4 C5F20000 		movt	r0, 20480
 2285 10b8 4FF00101 		mov	r1, #1
 2286 10bc FFF7FEFF 		bl	ADC_Cmd
 837:../src/main.cpp **** 
 838:../src/main.cpp **** 	/* wait for ADRDY */
 839:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC3, ADC_FLAG_RDY));
 2287              		.loc 1 839 0
 2288 10c0 00BF     		nop
 2289              	.L38:
 2290              		.loc 1 839 0 is_stmt 0 discriminator 1
 2291 10c2 4FF48060 		mov	r0, #1024
 2292 10c6 C5F20000 		movt	r0, 20480
 2293 10ca 4FF00101 		mov	r1, #1
 2294 10ce FFF7FEFF 		bl	ADC_GetFlagStatus
 2295 10d2 0346     		mov	r3, r0
 2296 10d4 002B     		cmp	r3, #0
 2297 10d6 14BF     		ite	ne
 2298 10d8 0023     		movne	r3, #0
 2299 10da 0123     		moveq	r3, #1
 2300 10dc DBB2     		uxtb	r3, r3
 2301 10de 002B     		cmp	r3, #0
 2302 10e0 EFD1     		bne	.L38
 840:../src/main.cpp **** 
 841:../src/main.cpp **** 	/* Start ADC3 Software Conversion */
 842:../src/main.cpp **** 	ADC_StartConversion(ADC3);
 2303              		.loc 1 842 0 is_stmt 1
 2304 10e2 4FF48060 		mov	r0, #1024
 2305 10e6 C5F20000 		movt	r0, 20480
 2306 10ea FFF7FEFF 		bl	ADC_StartConversion
 2307              	.LBE12:
 843:../src/main.cpp **** }
 2308              		.loc 1 843 0
 2309 10ee 07F14807 		add	r7, r7, #72
 2310 10f2 BD46     		mov	sp, r7
 2311 10f4 80BD     		pop	{r7, pc}
 2312              		.cfi_endproc
 2313              	.LFE125:
 2315 10f6 00BF     		.align	2
 2316              		.global	_Z9adc1_initv
 2317              		.thumb
 2318              		.thumb_func
 2320              	_Z9adc1_initv:
 2321              	.LFB126:
 844:../src/main.cpp **** 
 845:../src/main.cpp **** /* Initializes ADC1 to read PA2 continuously using ADC1 end of conversion (EOC) interrupt
 846:../src/main.cpp ****  * @Args: Nothing
 847:../src/main.cpp ****  * @Return Val: Nothing
 848:../src/main.cpp ****  */
 849:../src/main.cpp **** 
 850:../src/main.cpp **** void adc1_init(void) //PA2 -> Channel 3 on ADC1
 851:../src/main.cpp **** {
 2322              		.loc 1 851 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 72
 2325              		@ frame_needed = 1, uses_anonymous_args = 0
 2326 10f8 80B5     		push	{r7, lr}
 2327              	.LCFI42:
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 7, -8
 2330              		.cfi_offset 14, -4
 2331 10fa 92B0     		sub	sp, sp, #72
 2332              	.LCFI43:
 2333              		.cfi_def_cfa_offset 80
 2334 10fc 00AF     		add	r7, sp, #0
 2335              	.LCFI44:
 2336              		.cfi_def_cfa_register 7
 2337              	.LBB13:
 852:../src/main.cpp **** 	ADC_InitTypeDef       ADC_InitStructure;
 853:../src/main.cpp **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
 854:../src/main.cpp **** 	GPIO_InitTypeDef      GPIO_InitStructure;
 855:../src/main.cpp **** 	/* Configure the ADC clock */
 856:../src/main.cpp **** 	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 2338              		.loc 1 856 0
 2339 10fe 4FF48870 		mov	r0, #272
 2340 1102 FFF7FEFF 		bl	RCC_ADCCLKConfig
 857:../src/main.cpp **** 
 858:../src/main.cpp **** 	/* Enable ADC1 clock */
 859:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 2341              		.loc 1 859 0
 2342 1106 4FF08050 		mov	r0, #268435456
 2343 110a 4FF00101 		mov	r1, #1
 2344 110e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 860:../src/main.cpp **** 	/* ADC Channel configuration */
 861:../src/main.cpp **** 	/* GPIOC Periph clock enable */
 862:../src/main.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 2345              		.loc 1 862 0
 2346 1112 4FF40030 		mov	r0, #131072
 2347 1116 4FF00101 		mov	r1, #1
 2348 111a FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 863:../src/main.cpp **** 
 864:../src/main.cpp **** 	/* Configure ADC Channel7 as analog input */
 865:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 2349              		.loc 1 865 0
 2350 111e 4FF00403 		mov	r3, #4
 2351 1122 BB62     		str	r3, [r7, #40]
 866:../src/main.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 2352              		.loc 1 866 0
 2353 1124 4FF00303 		mov	r3, #3
 2354 1128 87F82C30 		strb	r3, [r7, #44]
 867:../src/main.cpp **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 2355              		.loc 1 867 0
 2356 112c 4FF00003 		mov	r3, #0
 2357 1130 87F82F30 		strb	r3, [r7, #47]
 868:../src/main.cpp **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 2358              		.loc 1 868 0
 2359 1134 07F12803 		add	r3, r7, #40
 2360 1138 4FF09040 		mov	r0, #1207959552
 2361 113c 1946     		mov	r1, r3
 2362 113e FFF7FEFF 		bl	GPIO_Init
 869:../src/main.cpp **** 
 870:../src/main.cpp **** 	ADC_StructInit(&ADC_InitStructure);
 2363              		.loc 1 870 0
 2364 1142 07F10403 		add	r3, r7, #4
 2365 1146 1846     		mov	r0, r3
 2366 1148 FFF7FEFF 		bl	ADC_StructInit
 871:../src/main.cpp **** 
 872:../src/main.cpp **** 	/* Calibration procedure */
 873:../src/main.cpp **** 	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 2367              		.loc 1 873 0
 2368 114c 4FF0A040 		mov	r0, #1342177280
 2369 1150 4FF00101 		mov	r1, #1
 2370 1154 FFF7FEFF 		bl	ADC_VoltageRegulatorCmd
 874:../src/main.cpp **** 
 875:../src/main.cpp **** 	/* Insert delay equal to 10 µs */
 876:../src/main.cpp **** 	int foo;
 877:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2371              		.loc 1 877 0
 2372 1158 4FF00003 		mov	r3, #0
 2373 115c 7B64     		str	r3, [r7, #68]
 2374 115e 07E0     		b	.L40
 2375              	.L41:
 878:../src/main.cpp **** 	{
 879:../src/main.cpp **** 	  ++foo;
 2376              		.loc 1 879 0 discriminator 2
 2377 1160 7B6C     		ldr	r3, [r7, #68]
 2378 1162 03F10103 		add	r3, r3, #1
 2379 1166 7B64     		str	r3, [r7, #68]
 877:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2380              		.loc 1 877 0 discriminator 2
 2381 1168 7B6C     		ldr	r3, [r7, #68]
 2382 116a 03F10103 		add	r3, r3, #1
 2383 116e 7B64     		str	r3, [r7, #68]
 2384              	.L40:
 877:../src/main.cpp **** 	for(foo = 0; foo < 32000; ++foo)
 2385              		.loc 1 877 0 is_stmt 0 discriminator 1
 2386 1170 7A6C     		ldr	r2, [r7, #68]
 2387 1172 47F6FF43 		movw	r3, #31999
 2388 1176 9A42     		cmp	r2, r3
 2389 1178 CCBF     		ite	gt
 2390 117a 0023     		movgt	r3, #0
 2391 117c 0123     		movle	r3, #1
 2392 117e DBB2     		uxtb	r3, r3
 2393 1180 002B     		cmp	r3, #0
 2394 1182 EDD1     		bne	.L41
 880:../src/main.cpp **** 	}
 881:../src/main.cpp **** 
 882:../src/main.cpp **** 	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 2395              		.loc 1 882 0 is_stmt 1
 2396 1184 4FF0A040 		mov	r0, #1342177280
 2397 1188 4FF00001 		mov	r1, #0
 2398 118c FFF7FEFF 		bl	ADC_SelectCalibrationMode
 883:../src/main.cpp **** 	ADC_StartCalibration(ADC1);
 2399              		.loc 1 883 0
 2400 1190 4FF0A040 		mov	r0, #1342177280
 2401 1194 FFF7FEFF 		bl	ADC_StartCalibration
 884:../src/main.cpp **** 
 885:../src/main.cpp **** 	while(ADC_GetCalibrationStatus(ADC1) != RESET );
 2402              		.loc 1 885 0
 2403 1198 00BF     		nop
 2404              	.L42:
 2405              		.loc 1 885 0 is_stmt 0 discriminator 1
 2406 119a 4FF0A040 		mov	r0, #1342177280
 2407 119e FFF7FEFF 		bl	ADC_GetCalibrationStatus
 2408 11a2 0346     		mov	r3, r0
 2409 11a4 002B     		cmp	r3, #0
 2410 11a6 0CBF     		ite	eq
 2411 11a8 0023     		moveq	r3, #0
 2412 11aa 0123     		movne	r3, #1
 2413 11ac DBB2     		uxtb	r3, r3
 2414 11ae 002B     		cmp	r3, #0
 2415 11b0 F3D1     		bne	.L42
 886:../src/main.cpp **** 
 887:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 2416              		.loc 1 887 0 is_stmt 1
 2417 11b2 4FF00003 		mov	r3, #0
 2418 11b6 3B63     		str	r3, [r7, #48]
 888:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 2419              		.loc 1 888 0
 2420 11b8 4FF00003 		mov	r3, #0
 2421 11bc 7B63     		str	r3, [r7, #52]
 889:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 2422              		.loc 1 889 0
 2423 11be 4FF00003 		mov	r3, #0
 2424 11c2 BB63     		str	r3, [r7, #56]
 890:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_OneShot;
 2425              		.loc 1 890 0
 2426 11c4 4FF00003 		mov	r3, #0
 2427 11c8 FB63     		str	r3, [r7, #60]
 891:../src/main.cpp **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 0;
 2428              		.loc 1 891 0
 2429 11ca 4FF00003 		mov	r3, #0
 2430 11ce 87F84030 		strb	r3, [r7, #64]
 892:../src/main.cpp **** 	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 2431              		.loc 1 892 0
 2432 11d2 07F13003 		add	r3, r7, #48
 2433 11d6 4FF0A040 		mov	r0, #1342177280
 2434 11da 1946     		mov	r1, r3
 2435 11dc FFF7FEFF 		bl	ADC_CommonInit
 893:../src/main.cpp **** 
 894:../src/main.cpp **** 	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 2436              		.loc 1 894 0
 2437 11e0 4FF40053 		mov	r3, #8192
 2438 11e4 7B60     		str	r3, [r7, #4]
 895:../src/main.cpp **** 	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 2439              		.loc 1 895 0
 2440 11e6 4FF00003 		mov	r3, #0
 2441 11ea BB60     		str	r3, [r7, #8]
 896:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;
 2442              		.loc 1 896 0
 2443 11ec 4FF00003 		mov	r3, #0
 2444 11f0 FB60     		str	r3, [r7, #12]
 897:../src/main.cpp **** 	ADC_InitStructure.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 2445              		.loc 1 897 0
 2446 11f2 4FF00003 		mov	r3, #0
 2447 11f6 3B61     		str	r3, [r7, #16]
 898:../src/main.cpp **** 	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 2448              		.loc 1 898 0
 2449 11f8 4FF00003 		mov	r3, #0
 2450 11fc 7B61     		str	r3, [r7, #20]
 899:../src/main.cpp **** 	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 2451              		.loc 1 899 0
 2452 11fe 4FF00003 		mov	r3, #0
 2453 1202 BB61     		str	r3, [r7, #24]
 900:../src/main.cpp **** 	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 2454              		.loc 1 900 0
 2455 1204 4FF00003 		mov	r3, #0
 2456 1208 FB61     		str	r3, [r7, #28]
 901:../src/main.cpp **** 	ADC_InitStructure.ADC_NbrOfRegChannel = 1;
 2457              		.loc 1 901 0
 2458 120a 4FF00103 		mov	r3, #1
 2459 120e 87F82030 		strb	r3, [r7, #32]
 902:../src/main.cpp **** 	ADC_Init(ADC1, &ADC_InitStructure);
 2460              		.loc 1 902 0
 2461 1212 07F10403 		add	r3, r7, #4
 2462 1216 4FF0A040 		mov	r0, #1342177280
 2463 121a 1946     		mov	r1, r3
 2464 121c FFF7FEFF 		bl	ADC_Init
 903:../src/main.cpp **** 
 904:../src/main.cpp **** 	/* ADC1 regular channel3 configuration */
 905:../src/main.cpp **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 1, ADC_SampleTime_601Cycles5);//ADC_SampleTime_61Cyc
 2465              		.loc 1 905 0
 2466 1220 4FF0A040 		mov	r0, #1342177280
 2467 1224 4FF00301 		mov	r1, #3
 2468 1228 4FF00102 		mov	r2, #1
 2469 122c 4FF00703 		mov	r3, #7
 2470 1230 FFF7FEFF 		bl	ADC_RegularChannelConfig
 906:../src/main.cpp **** 
 907:../src/main.cpp **** 	// Configure ADC1_2 global interrupt:
 908:../src/main.cpp **** 
 909:../src/main.cpp **** 	NVIC_InitTypeDef nv;
 910:../src/main.cpp **** 
 911:../src/main.cpp **** 	nv.NVIC_IRQChannel = ADC1_2_IRQn;
 2471              		.loc 1 911 0
 2472 1234 4FF01203 		mov	r3, #18
 2473 1238 87F82430 		strb	r3, [r7, #36]
 912:../src/main.cpp **** 	nv.NVIC_IRQChannelPreemptionPriority = 2;
 2474              		.loc 1 912 0
 2475 123c 4FF00203 		mov	r3, #2
 2476 1240 87F82530 		strb	r3, [r7, #37]
 913:../src/main.cpp **** 	nv.NVIC_IRQChannelSubPriority = 0;
 2477              		.loc 1 913 0
 2478 1244 4FF00003 		mov	r3, #0
 2479 1248 87F82630 		strb	r3, [r7, #38]
 914:../src/main.cpp **** 	nv.NVIC_IRQChannelCmd = ENABLE;
 2480              		.loc 1 914 0
 2481 124c 4FF00103 		mov	r3, #1
 2482 1250 87F82730 		strb	r3, [r7, #39]
 915:../src/main.cpp **** 
 916:../src/main.cpp **** 	NVIC_Init(&nv);
 2483              		.loc 1 916 0
 2484 1254 07F12403 		add	r3, r7, #36
 2485 1258 1846     		mov	r0, r3
 2486 125a FFF7FEFF 		bl	NVIC_Init
 917:../src/main.cpp **** 
 918:../src/main.cpp **** 	// Enable ADC1's global interrupt:
 919:../src/main.cpp **** 
 920:../src/main.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 2487              		.loc 1 920 0
 2488 125e 4FF0A040 		mov	r0, #1342177280
 2489 1262 4FF00401 		mov	r1, #4
 2490 1266 4FF00102 		mov	r2, #1
 2491 126a FFF7FEFF 		bl	ADC_ITConfig
 921:../src/main.cpp **** 
 922:../src/main.cpp **** 	/* Enable ADC1 */
 923:../src/main.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 2492              		.loc 1 923 0
 2493 126e 4FF0A040 		mov	r0, #1342177280
 2494 1272 4FF00101 		mov	r1, #1
 2495 1276 FFF7FEFF 		bl	ADC_Cmd
 924:../src/main.cpp **** 
 925:../src/main.cpp **** 	/* wait for ADRDY */
 926:../src/main.cpp **** 	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY));
 2496              		.loc 1 926 0
 2497 127a 00BF     		nop
 2498              	.L43:
 2499              		.loc 1 926 0 is_stmt 0 discriminator 1
 2500 127c 4FF0A040 		mov	r0, #1342177280
 2501 1280 4FF00101 		mov	r1, #1
 2502 1284 FFF7FEFF 		bl	ADC_GetFlagStatus
 2503 1288 0346     		mov	r3, r0
 2504 128a 002B     		cmp	r3, #0
 2505 128c 14BF     		ite	ne
 2506 128e 0023     		movne	r3, #0
 2507 1290 0123     		moveq	r3, #1
 2508 1292 DBB2     		uxtb	r3, r3
 2509 1294 002B     		cmp	r3, #0
 2510 1296 F1D1     		bne	.L43
 927:../src/main.cpp **** 
 928:../src/main.cpp **** 	/* Start ADC1 Software Conversion */
 929:../src/main.cpp **** 	ADC_StartConversion(ADC1);
 2511              		.loc 1 929 0 is_stmt 1
 2512 1298 4FF0A040 		mov	r0, #1342177280
 2513 129c FFF7FEFF 		bl	ADC_StartConversion
 2514              	.LBE13:
 930:../src/main.cpp **** }
 2515              		.loc 1 930 0
 2516 12a0 07F14807 		add	r7, r7, #72
 2517 12a4 BD46     		mov	sp, r7
 2518 12a6 80BD     		pop	{r7, pc}
 2519              		.cfi_endproc
 2520              	.LFE126:
 2522              	.Letext0:
 2523              		.file 2 "/home/aghosh01/gcc-arm-none-eabi-4_7-2012q4/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../.
 2524              		.file 3 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x.h"
 2525              		.file 4 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_comp.h"
 2526              		.file 5 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_dma.h"
 2527              		.file 6 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_gpio.h"
 2528              		.file 7 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_tim.h"
 2529              		.file 8 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_misc.h"
 2530              		.file 9 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f30x_adc.h"
 2531              		.file 10 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/stm32f3_discovery_l3gd20.h"
 2532              		.file 11 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/os.h"
 2533              		.file 12 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/Robot/encoder.h"
 2534              		.file 13 "/home/aghosh01/git/CS6233_FinalProject/STM32F3x/inc/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/cc6Wgoss.s:20     .bss:00000000 $d
     /tmp/cc6Wgoss.s:21     .bss:00000000 _ZL5stack
     /tmp/cc6Wgoss.s:27     .bss:00000004 led_iter
     /tmp/cc6Wgoss.s:34     .data:00000000 led_matrix
     /tmp/cc6Wgoss.s:31     .data:00000000 $d
     /tmp/cc6Wgoss.s:47     .bss:00000008 left_enc
     /tmp/cc6Wgoss.s:53     .bss:00000030 right_enc
     /tmp/cc6Wgoss.s:59     .bss:00000058 gyro_angle_x
     /tmp/cc6Wgoss.s:65     .bss:0000005c gyro_bias_x
     /tmp/cc6Wgoss.s:71     .bss:00000060 adcval
     /tmp/cc6Wgoss.s:77     .bss:00000064 adcData
     /tmp/cc6Wgoss.s:83     .bss:0000006c new_data
     /tmp/cc6Wgoss.s:89     .bss:00000070 adc2_data
     /tmp/cc6Wgoss.s:94     .bss:00000080 adc2_new_data
     /tmp/cc6Wgoss.s:99     .bss:00000081 adc3_awd1
     /tmp/cc6Wgoss.s:104    .bss:00000082 adc3_awd2
     /tmp/cc6Wgoss.s:110    .bss:00000084 count
     /tmp/cc6Wgoss.s:116    .bss:00000088 stage
     /tmp/cc6Wgoss.s:122    .bss:0000008c drive_cmd
     /tmp/cc6Wgoss.s:128    .bss:00000090 err
     /tmp/cc6Wgoss.s:134    .bss:00000094 last_err
     /tmp/cc6Wgoss.s:140    .bss:00000098 diff_err
     /tmp/cc6Wgoss.s:146    .bss:0000009c rt
     /tmp/cc6Wgoss.s:152    .bss:000000a0 d_front
     /tmp/cc6Wgoss.s:158    .bss:000000a4 integral
     /tmp/cc6Wgoss.s:164    .bss:000000a8 left
     /tmp/cc6Wgoss.s:170    .bss:000000ac right
     /tmp/cc6Wgoss.s:176    .bss:000000b0 state
     /tmp/cc6Wgoss.s:182    .bss:000000b4 match_time_counter
     /tmp/cc6Wgoss.s:188    .bss:000000b8 t_firefight_start
     /tmp/cc6Wgoss.s:194    .bss:000000bc leds_on
     /tmp/cc6Wgoss.s:200    .bss:000000c0 current_process
     /tmp/cc6Wgoss.s:206    .bss:000000c4 process_list
     /tmp/cc6Wgoss.s:212    .bss:000000ec msp_res
     /tmp/cc6Wgoss.s:218    .bss:000000f0 pList
     /tmp/cc6Wgoss.s:224    .bss:00000104 task1_iter
     /tmp/cc6Wgoss.s:230    .bss:00000108 task2_iter
     /tmp/cc6Wgoss.s:233    .text:00000000 $t
     /tmp/cc6Wgoss.s:238    .text:00000000 _Z5task1v
     /tmp/cc6Wgoss.s:273    .text:00000024 _Z5task2v
     /tmp/cc6Wgoss.s:307    .text:00000048 main
     /tmp/cc6Wgoss.s:362    .text:000000a4 _Z24trinity2013_waitForStartv
     /tmp/cc6Wgoss.s:447    .text:00000130 _Z11IR_distancei
     /tmp/cc6Wgoss.s:596    .text:00000294 $d
     /tmp/cc6Wgoss.s:607    .text:000002b4 $t
     /tmp/cc6Wgoss.s:612    .text:000002b4 _Z19imu_update_ISR_initv
     /tmp/cc6Wgoss.s:1335   .text:00000858 _Z14calc_gyro_biasv
     /tmp/cc6Wgoss.s:728    .rodata:00000000 $d
     /tmp/cc6Wgoss.s:729    .rodata:00000000 .LC0
     /tmp/cc6Wgoss.s:738    .text:00000398 L3GD20_TIMEOUT_UserCallback
     /tmp/cc6Wgoss.s:769    .text:000003b0 _Z15brake_pins_initv
     /tmp/cc6Wgoss.s:841    .text:00000428 _Z13ping_pin_initv
     /tmp/cc6Wgoss.s:926    .text:000004b8 _Z20timer2_timebase_initv
     /tmp/cc6Wgoss.s:985    .text:0000050c _Z9comp_initv
     /tmp/cc6Wgoss.s:1417   .text:000008dc $d
     /tmp/cc6Wgoss.s:1421   .text:000008e0 $t
     /tmp/cc6Wgoss.s:1426   .text:000008e0 _Z13adc1_init_DMAv
     /tmp/cc6Wgoss.s:1710   .text:00000b54 _Z13adc2_init_DMAv
     /tmp/cc6Wgoss.s:2062   .text:00000e98 _Z21battery_watchdog_initv
     /tmp/cc6Wgoss.s:2320   .text:000010f8 _Z9adc1_initv
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.934603b1d669cb2b32fd4cb6dd11b673
                           .group:00000000 wm4.stm32f30x.h.56.6f19c65e98e3319a61449cb2b2455af5
                           .group:00000000 wm4.core_cm4.h.32.1434cd257ff5806b1b03cd32ab0641e9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.29.013e5bcf58dba2d27c60184174208e07
                           .group:00000000 wm4.core_cm4.h.155.170ad2f92df387b9fa0dc3deabd34ef9
                           .group:00000000 wm4.stm32f30x.h.294.d8a54360eca16e4157694b52a095202d
                           .group:00000000 wm4.stm32f30x_can.h.50.8b8f5d301152c422a6e50622b33ef620
                           .group:00000000 wm4.stm32f30x_crc.h.54.66d4c5e565e18566aebd9abfd4bcd4b0
                           .group:00000000 wm4.stm32f30x_comp.h.91.06ae44150aaaa82c077b71df8db3541a
                           .group:00000000 wm4.stm32f30x_dac.h.49.b1b5b26e4ca241dbe67fa16dc86a615f
                           .group:00000000 wm4.stm32f30x_dbgmcu.h.53.b238a263ce6a2cc83f610cc35302a38b
                           .group:00000000 wm4.stm32f30x_dma.h.96.d7a2ddd10023e12781aa8ff5ac15d212
                           .group:00000000 wm4.stm32f30x_exti.h.60.8ca0809491a21dec6fc69cf7471e2bab
                           .group:00000000 wm4.stm32f30x_flash.h.70.32613455dfe7328932f786a224daac23
                           .group:00000000 wm4.stm32f30x_gpio.h.50.408e1f6250246e4cc28221970909d34c
                           .group:00000000 wm4.stm32f30x_syscfg.h.58.4cadeb4ec8e47d36b972bbb6b96b7161
                           .group:00000000 wm4.stm32f30x_i2c.h.86.3d51d4edc0e3b9ee9aae045ccbb7739a
                           .group:00000000 wm4.stm32f30x_iwdg.h.59.467d704fb073a015941f19b50fa6470a
                           .group:00000000 wm4.stm32f30x_opamp.h.75.704e2e5e2aab039de307aaa2dcc99fa5
                           .group:00000000 wm4.stm32f30x_pwr.h.59.5c85acff2a3e3c5085b2140c06025cfc
                           .group:00000000 wm4.stm32f30x_rcc.h.79.5ba7cac1e74879861a72556c25322aa4
                           .group:00000000 wm4.stm32f30x_rtc.h.133.d184e08ff40bda44db4bed94f9633384
                           .group:00000000 wm4.stm32f30x_spi.h.119.4d21ec94ec14f3553a127e61c0a9874f
                           .group:00000000 wm4.stm32f30x_tim.h.175.d4a93cff2e7924577147254e501271b6
                           .group:00000000 wm4.stm32f30x_usart.h.110.c89016273702821ff4f9fe43881f70b5
                           .group:00000000 wm4.stm32f30x_wwdg.h.58.4688eee61a2709866472b4b4c07d9275
                           .group:00000000 wm4.stm32f30x_misc.h.113.6a52e4fe7c3825a3ab05990f30dddf92
                           .group:00000000 wm4.stm32f30x_adc.h.130.cbebad91f78fb87381fe0860eea6104e
                           .group:00000000 wm4.stm32f3_discovery_l3gd20.h.98.ce6c56e3c59772d76fdcff14d2dcb612
                           .group:00000000 wm4.common_headers.h.9.a77b7af68303fe0609f9dd844a078e2a
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.fa6206289f154965d075fc01e2867808
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.4ec5c5df469deeb27bddb969fc54c06a
                           .group:00000000 wm4.encoder.h.14.d5e5872c27905990847e2dff40a1b2fe
                           .group:00000000 wm4.debug.h.9.26e0be6d34f5aa99e328aa49a432ea37
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.3369060ca33af9280edb7e432689c67d
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76

UNDEFINED SYMBOLS
SystemInit
_Z10UART1_initv
_Z7OS_initP13process_block
RCC_AHBPeriphClockCmd
GPIO_DeInit
GPIO_Init
GPIO_ReadInputDataBit
__aeabi_f2d
__aeabi_d2f
pow
L3GD20_Init
NVIC_Init
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
TIM_Cmd
printf
GPIO_StructInit
GPIO_WriteBit
SYSCFG_EXTILineConfig
RCC_APB1PeriphClockCmd
TIM_SetCounter
GPIO_PinAFConfig
RCC_PCLK2Config
COMP_Init
COMP_Cmd
L3GD20_Read
RCC_ADCCLKConfig
ADC_StructInit
ADC_VoltageRegulatorCmd
ADC_SelectCalibrationMode
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_Cmd
ADC_GetFlagStatus
ADC_StartConversion
DMA_StructInit
DMA_DeInit
DMA_Init
DMA_ITConfig
DMA_Cmd
ADC_DMAConfig
ADC_DMACmd
ADC_AnalogWatchdog1SingleChannelConfig
ADC_AnalogWatchdog2SingleChannelConfig
ADC_AnalogWatchdog1ThresholdsConfig
ADC_AnalogWatchdog2ThresholdsConfig
ADC_AnalogWatchdogCmd
ADC_ITConfig
